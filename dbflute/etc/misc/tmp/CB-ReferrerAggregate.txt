
#
# ConditionBeanの「子テーブル集計」機能検討メモ
#

【目的】
子テーブルのSUMやMAXなどを取得できるインターフェースを実現する。


【動機】
子テーブルのSUMやMAXなど、しょっちゅう欲しくなる。
結合条件の相関サブクエリ(FixedCondition利用)でできるけど、
PostgreSQLやMySQLでしか動かない。
やはり、Select句で相関サブクエリしかない！


【インターフェース案】
＜A＞
existsSubQueryと同じようなやり方。
Entityのプロパティは手動で作成する。

メリット：
　・自動生成し直しせずに実装が可能

デメリット：
　・手動でプロパティを定義する。
　・コード量が増える。

/- - - - - - - - - - - - - - - - - - - - - - - - - - 
[Java]
MemberCB cb = new MemberCB();
cb.specify().derivePurchaseList().max(new SubQuery<PurchaseCB>() {
    public void query(PurchaseCB subCB) {
    	subCB.specify().columnPurchaseDatetime();
        subCB.query().setLogicalDeleteFlg_NotEqual_True();
    }
}, "latestPurchaseDatetime");

[SQLのイメージ]
select dflocal.*
     , (select max(PURCHASE_DATETIME)
          from PURCHASE
         where PURCHASE.MEMBER_ID = dflocal.MEMBER_ID
       ) as latestPurchaseDatetime
  from MEMBER dflocal
 where ...
- - - - - - - - - -/

#
# specify()が実装難しそう。
# query()なら簡単なのだが、できればspecify()の方が...
#

/- - - - - - - - - - - - - - - - - - - - - - - - - -
[C#] 
MemberCB cb = new MemberCB();
cb.Specify().DerivePurchaseList().Max(delegate(PurchaseCB subCB) {
	subCB.Specify().ColumnPurchaseDatetime();
    subCB.Query().SetLogicalDeleteFlg_NotEqual_True();
}, "latestPurchaseDatetime");
- - - - - - - - - -/



＜B＞
Entityのプロパティは手動で作成する。(これは「A」と同じ)
ビルドプロパティに定義して、該当テーブル・カラムの集計をするメソッドを生成し、
Entityのプロパティも自動生成。

メリット：
　・安全
　・コード量が最小限

デメリット：
　・実装するのに自動生成が必要でフットワーク重い

# まあぁ、「A」かなやっぱり

/- - - - - - - - - - - - - - - - - - - - - - - - - - 
[Java]
MemberCB cb = new MemberCB();
cb.query().derivePurchaseList_Max_PurchaseDatetime(new SubQuery<PurchaseCB>() {
    public void query(PurchaseCB subCB) {
        subCB.query().setLogicalDeleteFlg_NotEqual_True();
    }
});

[SQLのイメージ]
select dflocal.*
     , (select max(PURCHASE_DATETIME) 
          from PURCHASE
         where PURCHASE.MEMBER_ID = dflocal.MEMBER_ID
       ) as latestPurchaseDatetime
  from MEMBER dflocal
 where ...
- - - - - - - - - -/
