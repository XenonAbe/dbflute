
#
# ConditionBeanのカラム絞り込み機能検討メモ
#

【目的】
パフォーマンスチューニングのための機能である。

【考察】
PKや取得する関連テーブルへのFKは自動取得とする(これは確定)。
普段は絞らずに、いざってときに絞れればよい！？
指定カラム・除外カラムと指定の仕方に二種類あるが、指定カラムだけで良い！？

【インターフェース案】
＜A＞
フィルタ的なやり方。

「何のテーブルが欲しいのか？」を先に指定して、


メリット：
　・既存のやり方に対して追加機能的で導入しやすい
　・補助機能に徹しているため、立ち位置が明確。

デメリット：
　・関連の指定が冗長な感じがする
　・setupSelectしてないカラムも指定できてしまう(無視？例外？)
　　　→ filterSelect()の中でsetupSelectされていないテーブルが
　　　　指定されたら例外の方がいいかも

/- - - - - - - - - - - - - - - - - - - - - - - - - - 
// 会員アカウント、生年月日、会員ステータス名称
// (但し、PKと関連するFKは取得される)
MemberCB cb = new MemberCB();
cb.setupSelect_MemberStatus();
cb.columnChoise().$MemberAccount();
cb.specifyColumn().$MemberAccount();
cb.specifyColumn().$MemberBirthDay();
cb.specifyColumn().foreign_MemberStatus().$MemberStatusName();
- - - - - - - - - -/
/- - - - - - - - - - - - - - - - - - - - - - - - - -
// 自テーブルは全部、会員ステータスは名称だけ
MemberCB cb = new MemberCB();
cb.setupSelect_MemberStatus();
cb.filterSelect().foreignMemberStatus().columnMemberStatusName();
- - - - - - - - - -/
/- - - - - - - - - - - - - - - - - - - - - - - - - -
// もうちょい関連テーブルが多い場合の例
// 会員：全部
// 会員ステータス：名称だけ
// 会員セキュリティ：全部
// 会員退会情報：全部
// 退会理由：理由テキストだけ
MemberCB cb = new MemberCB();	
cb.setupSelect_MemberStatus();
cb.setupSelect_MemberSecurityAsOne();
cb.setupSelect_MemberWithdrawalAsOne().withWithdrawalReason();
cb.filterSelect().foreignMemberStatus().columnMemberStatusName();
cb.filterSelect().foreignMemberWithdrawalAsOne().foreignWithdrawalReason().columnReasonText();
- - - - - - - - - -/


＜B＞
０ベース指定のやり方：

メリット：
　・実装に冗長がない（Aに比べて）
　・間違った指定がない（Aに比べて）
　・文字数が少ない（Aに比べて）

デメリット：
　・もはや補助機能じゃない。setupSelectを捨てることになる！？（今更の変更）
　　　→ setupSelectとの共存したらしたで仕様的に紛らわしい
　・PKや取得したFKは自動取得するので、０ベースなのに暗黙もあるっていうのが紛らわしいかも。
　・関連テーブルが少ないとスッキリだけど、多いと逆に見づらいかも。(Aに比べて)
　　　→ テーブルの指定とカラムの指定が混在していることが要因
　・Select句を絞るやり方がメインっぽい感じになってしまって、
　　逆に実装スピード遅らせるかも！？
　　（「毎回律儀に厳密に絞る」なのか「ここは全部でいいや」なのかが迷いそう）

/- - - - - - - - - - - - - - - - - - - - - - - - - - 
// 会員アカウント、生年月日、会員ステータス名称
// (但し、PKと関連するFKは取得される)
MemberCB cb = new MemberCB();
cb.select().columnMemberAccount();
cb.select().columnMemberBirthDay();
cb.select().selectMemberStatus().columnMemberStatusName();
- - - - - - - - - -/
/- - - - - - - - - - - - - - - - - - - - - - - - - -
// 自テーブルは全部、会員ステータスは名称だけ
MemberCB cb = new MemberCB();
cb.select().selectMemberStatus().columnMemberStatusName();
- - - - - - - - - -/
/- - - - - - - - - - - - - - - - - - - - - - - - - -
// もうちょい関連テーブルが多い場合の例
// 会員：全部
// 会員ステータス：名称だけ
// 会員セキュリティ：全部
// 会員退会情報：全部
// 退会理由：理由テキストだけ
MemberCB cb = new MemberCB();
cb.select().selectMemberStatus().columnMemberStatusName();
cb.select().selectMemberSecurityAsOne();
cb.select().selectMemberWithdrawalAsOne().selectWithdrawalReason().columnReasonText();

// これで会員退会情報も絞るとなるこうなる
// MemberCB cb = new MemberCB();
// cb.select().selectMemberStatus().columnMemberStatusName();
// cb.select().selectMemberSecurityAsOne();
// cb.select().selectMemberWithdrawalAsOne().columnWithdrawaoInputText();
// cb.select().selectMemberWithdrawalAsOne().columnWithdrawaoInputName();
// cb.select().selectMemberWithdrawalAsOne().selectWithdrawalReason().columnReasonText();
- - - - - - - - - -/

// AとBの混在
// 一瞬良いかと思いきや、ネストしたテーブルが出てくると途端にわかりにくい
MemberCB cb = new MemberCB();
cb.setupSelect().columnMemberName();
cb.setupSelect().foreignMemberStatus().columnMemberStatusName();
cb.setupSelect().foreignMemberStatus().columnDisplayOrder();
cb.setupSelect_MemberSecurityAsOne();
cb.setupSelect_MemberWithdrawalAsOne();
cb.setupSelect().foreignMemberWithdrawalAsOne().foreignWithdrawalReason().columnReasonText();


