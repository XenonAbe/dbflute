# =======================================================================================
#                                                                                 for All
#                                                                                 =======

# -------------------------------------------------------------------
#  P R O J E C T
# -------------------------------------------------------------------
# (Required)

torque.project = ldb


# -------------------------------------------------------------------
#  T A R G E T  D A T A B A S E
# -------------------------------------------------------------------
# This is the target database, only considered when generating
# the SQL for your Torque project. Your possible choices are:
#
#   axion, cloudscape, db2, db2400, hypersonic, interbase, mssql,
#   mysql, oracle, postgresql, sapdb, sybase, firebird, derby
# -------------------------------------------------------------------
# (Required)

torque.database = derby

# -------------------------------------------------------------------
#  T A R G E T  L A N G U A G E
# -------------------------------------------------------------------
# (NotRequired - Default 'java')
#   The target language. Your possible choices are:
#     java, csharp

torque.targetLanguage = java

# -------------------------------------------------------------------
#  T E M P L A T E  E N C O D I N G
# -------------------------------------------------------------------
# (NotRequired - Default 'UTF-8')
#   The encoding of Velocity template file.

torque.templateFileEncoding = UTF-8

# -------------------------------------------------------------------
#  S O U R C E  F I L E  E N C O D I N G
# -------------------------------------------------------------------
# (NotRequired - Default 'UTF-8')
#   The encoding of source file.

torque.sourceFileEncoding = UTF-8



# =======================================================================================
#                                                                             for OM task
#                                                                             ===========

# _/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
#                                                            Basic
#                                                         _/_/_/_/
# /---------------------------------------------------------------------------
# [OutputDirectory]
#   torque.java.dir: (NotRequired - Default '')
#     The base output directory.
#
torque.java.dir = ../src/main/java
# ----------------/

# /---------------------------------------------------------------------------
# [ClassAuthor] (NotRequired - Default 'DBFlute(AutoGenerator)')
#   The value of the author tag in class javadoc.
#   All classes are target.
torque.classAuthor = DBFlute(AutoGenerator)
# ----------------/

# _/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
#                                                           Naming
#                                                         _/_/_/_/

# /---------------------------------------------------------------------------
# [JavaNameOfTableSameAsDbName] (NotRequired - Default 'false')
#   [true]
#     Java name of table is same as db name.
#       ex) If the table name is 'OrderDetail', then the java name is 'OrderDetail'.
#
#   [false]
#       ex) If the table name is 'ORDER_DETAIL', then the java name is 'OrderDetail'.
#       ex) If the table name is 'OrderDetail', then the java name is 'Orderdetail'.
#
torque.isJavaNameOfTableSameAsDbName = false
# ----------------/

# /---------------------------------------------------------------------------
# [JavaNameOfColumnSameAsDbName] (NotRequired - Default 'false')
#   [true]
#     Java name of column is same as db name.
#       ex) If the table name is 'OrderDetail', then the java name is 'OrderDetail'.
#
#   [false]
#       ex) If the table name is 'ORDER_DETAIL', then the java name is 'OrderDetail'.
#       ex) If the table name is 'OrderDetail', then the java name is 'Orderdetail'.
#
torque.isJavaNameOfColumnSameAsDbName = false
# ----------------/

# _/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
#                                                        Available
#                                                         _/_/_/_/

# /---------------------------------------------------------------------------
# [Behavior] (NotRequired - Default 'false')
#   [true]
#     Behavior classes are generated.
#
#   [false]
#     Behavior classes are not generated.
#     And proerties about behavior are invalid.
#
torque.isAvailableBehaviorGeneration = true
# ----------------/

# /---------------------------------------------------------------------------
# [CommonColumnSetupInterceptorToBehavior] (NotRequired - Default 'false')
#   [true]
#     Add the interceptor 'CommonColumnSetup' to behavior.
#     Its pointcut is as follows:
#       - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#       delegateInsert.*, delegateCreate.*, delegateAdd.*
#       , delegateUpdate.*, delegateModify.*, delegateStore.*
#       , delegateDelete.*, delegateRemove.*
#       - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#
#   [false]
#     Non.
#
#   *If isAvailableBehaviorGeneration is false, this property is ignored.
#
# @deprecated Please use property 'commonColumnSetupInterceptorAspectPoint'.
#
#torque.isAvailableCommonColumnSetupInterceptorToBehavior = false
# ----------------/

# /---------------------------------------------------------------------------
# [CommonColumnSetupInterceptorToDao] (NotRequired - Default 'false')
#   [true]
#     Add the interceptor 'CommonColumnSetup' to dao.
#     Its pointcut is as follows:
#       - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#       insert.*, create.*, add.*, update.*, modify.*, store.*
#       , delete.*, remove.*
#       - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#
#   [false]
#     Non.
#
# @deprecated Please use property 'commonColumnSetupInterceptorAspectPoint'.
#
#torque.isAvailableCommonColumnSetupInterceptorToDao = false
# ----------------/

# /---------------------------------------------------------------------------
# [Generics] (NotRequired - Default 'true')
#   Default value is true.
#   [true]
#     Use Generics.
#
#   [false]
#     Non.
#
#   *{Java Only}
#
torque.isAvailableGenerics = true
# ----------------/

# _/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
#                                                Prefix and Suffix
#                                                 _/_/_/_/_/_/_/_/

# /---------------------------------------------------------------------------
# [PrefixAndSuffix]
#
#   projectPrefix: (NotRequired - Default null)
#     If the property is 'Ld', all class names are 'LdXxx'.
#
torque.projectPrefix		= Ld
# ----------------/

# _/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
#                                                            Dicon
#                                                             _/_/

# /---------------------------------------------------------------------------
# [DaoDicon Information]
#   daoDiconNamespace: (NotRequired - Default 'dbflute')
#     The namespace of dao dicon.
#
#   daoDiconPackageName: (NotRequired - Default '')
#     The package name of dao dicon.
#
#   daoDiconFileName: (NotRequired - Default 'dbflute.dicon')
#     The file name of dao dicon. (Required)
#
#   j2eeDiconResourceName: (NotRequired - Default Java:'j2ee.dicon' C#:'ado.dicon')
#     The resource name of J2EE dicon.
#
#   requiredTxComponentName: (NotRequired - Default Java:'requiredTx' C#:'LocalRequiredTx')
#     The component name of 'requiredTx'-component.
#
#   requiresNewTxComponentName: (NotRequired - Default Java:'requiresNewTx' C#:'LocalRequiresNewTx')
#     The component name of 'requiresNewTx'-component.
#
#   daoDiconOtherIncludeDefinitionMap: (NotRequired - Default 'map:{}')
#     The definition map of dao-dicon's include path.
#     ex) map:{ dbflute/common.dicon = dummy }
#
#   originalDaoComponentMap: (NotRequired - Default 'map:{}')
#     The map of the original dao component.
#     If componentName have '*' as prefix, the component should be Dao.
#     ex) map:{ \
#             ; *bookAuthorDao = map:{ className=dbflute.ldb.nongenerate.dao.BookAuthorDao } \
#             ; blackListHandler = map:{ className=dbflute.ldb.nongenerate.handler.BlackListHandlerImpl } \
#         }
#
#   originalBehaviorAspectMap: (NotRequired - Default 'map:{}')
#     The map of the original behavior aspect.
#     ex) map:{ shopIdConditionAppendInterceptor = map:{ \
#                   className=MspadminBiz.Dao.Original.ShopIdConditionAppendInterceptor \
#                   ; pointcut=DelegateRead.*, DelegateSelect.* \
#               } \
#         }
#
#   *Attension:
#      It is necessary that main dicon of application includes dao dicon.
#
torque.daoDiconNamespace			= dbflute
torque.daoDiconPackageName			= ../resources
torque.daoDiconFileName				= dbflute-ldb.dicon
torque.j2eeDiconResourceName		= j2ee-ldb.dicon
torque.requiredTxComponentName		= requiredTx
torque.requiresNewTxComponentName	= requiresNewTx
torque.daoDiconOtherIncludeDefinitionMap = map:{}
torque.originalDaoComponentMap = map:{ \
             ; *libraryDetailDao = map:{ className=dbflute.ldb.nongenerate.dao.LibraryDetailDao } \
             ; blackListHandler  = map:{ className=dbflute.ldb.nongenerate.handler.BlackListHandlerImpl } \
         }
torque.originalBehaviorAspectMap = map:{}
# ----------------/

# _/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
#                                                          Package
#                                                             _/_/

# /---------------------------------------------------------------------------
# [EntityDao Package]
#    packageBase: (NotRequired - Default '')
#      The base directory of package.
#
#        ex) packageBase = dbflute.ldb, baseCommonPackage = xxx.yyy.allcommon, ...
#              baseCommonPackage       = dbflute.ldb.xxx.yyy.allcommon
#              ...
#
#      *If this property is specified and other package properties is not specified, 
#       Then The packages of generated class are as follows:
#
#        ex) packageBase = dbflute.ldb
#              baseCommonPackage       --> dbflute.ldb.allcommon
#              baseBehaviorPackage     --> dbflute.ldb.bsbhv
#              baseDaoPackage          --> dbflute.ldb.bsdao
#              baseEntityPackage       --> dbflute.ldb.bsentity
#              conditionBeanPackage    --> dbflute.ldb.cbean
#              extendedBehaviorPackage --> dbflute.ldb.exbhv
#              extendedDaoPackage      --> dbflute.ldb.exdao
#              extendedEntityPackage   --> dbflute.ldb.exentity
#
#      *If this property is not specified, you should specify the other package properties.
#
#
#    baseCommonPackage:       (NotRequired - Default Java:'allcommon' C#:'allcommon')
#    baseBehaviorPackage:     (NotRequired - Default Java:'bsbhv'     C#:'bsbhv')
#    baseDaoPackage:          (NotRequired - Default Java:'bsdao'     C#:'bsdao')
#    baseEntityPackage:       (NotRequired - Default Java:'bsentity'  C#:'bsentity')
#    conditionBeanPackage:    (NotRequired - Default Java:'cbean'     C#:'cbean')
#    extendedBehaviorPackage: (NotRequired - Default Java:'exbhv'     C#:'exbhv')
#    extendedDaoPackage:      (NotRequired - Default Java:'exdao'     C#:'exdao')
#    extendedEntityPackage:   (NotRequired - Default Java:'exentity'  C#:'exentity')
#
torque.packageBase				= dbflute.ldb
#torque.baseCommonPackage 		= dbflute.ldb.allcommon
#torque.baseBehaviorPackage 	= dbflute.ldb.bsbhv
#torque.baseDaoPackage 			= dbflute.ldb.bsdao
#torque.baseEntityPackage 		= dbflute.ldb.bsentity
#torque.conditionBeanPackage 	= dbflute.ldb.cbean
#torque.extendedBehaviorPackage = dbflute.ldb.exbhv
#torque.extendedDaoPackage 		= dbflute.ldb.exdao
#torque.extendedEntityPackage 	= dbflute.ldb.exentity
# ----------------/

# _/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
#                                                         Adavance
#                                                             _/_/

# /---------------------------------------------------------------------------
# [Sequence & Identity] (NotRequired - Default 'map:{}')
#   sequenceDefinitionMap: (NotNull - map-property or empty(map:{}))
#     The method 'XxxDao#selectNextVal()' is generated for its table primary key.
#
#       ex) public String selectNextVal_SQL = "select gen_id(BOOK_BOOK_ID_INC, 1) from RDB$DATABASE";
#           public java.math.BigDecimal selectNextVal();
#           // This example is for the database of Firebird
# 
#   identityDefinitionMap: (NotRequired - Default 'map:{}')
#     ID annotation of s2dao is generated for its table primary key.
#
#       ex) public static final String bookId_ID = "identity";
#

#
# *Apache Derby does not support Sequence-Object.
#  But I want to test this property.
#
torque.sequenceDefinitionMap	= map:{	\
		AUTHOR	= AUTHOR_AUTHOR_ID_INC	\
		; BOOK	= BOOK_BOOK_ID_INC		\
	}

#
# *Identity must be auto-registered by JDBC auto-increment information.
#
#torque.identityDefinitionMap	= map:{	\
#		AUTHOR	=	AUTHOR_ID	\
#		; BOOK	=	BOOK_ID	\
#		; COLLECTION	=	COLLECTION_ID	\
#	}

# ----------------/

# /--------------------------------------------------------------------------
# [Optimistic Lock]
#   updateDateFieldName: (NotRequired - Default null)
#     The field name of update-date. 
#     For example, if this property id 'UPDATE_DATE',
#     the annotation is generated as follows:
#       public static final String TIMESTAMP_PROPERTY = "updateDate";
#
#   updateDateExceptTableList: (NotRequired - Default list:{})
#     ex) list:{ prefix:LB_ }
#
#   versionNoFieldName: (NotRequired - Default null)
#     The field name of version-no. 
#     For example, if this property id 'VERSION_NO'
#     the annotation is generated as follows:
#       public static final String VERSION_NO_PROPERTY = "versionNo";
#
torque.updateDateFieldName	= U_TIME
torque.updateDateExceptTableList = list:{ prefix:LB_ }
torque.versionNoFieldName	= null
# ----------------/

# /---------------------------------------------------------------------------
# [Common Column]
#   commonColumnMap: (NotRequired - Default 'map:{}')
#     The map of common column.
#     Default value is enmpty-map.
#     For example, The date you registered the record, The staff who updated the record and so on...
#
#     ex) map:{R_TIME=TIMESTAMP;U_TIME=TIMESTAMP;R_STAFF=VARCHAR;U_STAFF=VARCHAR}
#
#
#   commonColumnSetupInterceptorAspectPoint: (NotRequired - Default 'behavior')
#     The aspect point of common-column-setup-interceptor. {behavior or dao}
#
#     If the value is 'behavior', the interceptor is related to behavior.
#     Its pointcut is as follows:
#       - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#       delegateInsert.*, delegateCreate.*, delegateAdd.*
#       , delegateUpdate.*, delegateModify.*, delegateStore.*
#       , delegateDelete.*, delegateRemove.*
#       - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#
#     If the value is 'dao', the interceptor is related to dao.
#     its pointcut is as follows:
#       - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#       insert.*, create.*, add.*, update.*, modify.*, store.*
#       , delete.*, remove.*
#       - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#
#
#   commonColumnSetupBeforeInsertInterceptorLogicMap: (NotNull - map-property or empty(map:{}))
#   commonColumnSetupBeforeUpdateInterceptorLogicMap: (NotNull - map-property or empty(map:{}))
#   commonColumnSetupBeforeDeleteInterceptorLogicMap: (NotNull - map-property or empty(map:{}))
#     (NotRequired - Default 'map:{}')
#     ex) map:{ \
#           R_TIME=new java.sql.Timestamp(System.currentTimeMillis()) \
#           ; R_USER=dbflute.ldb.nongenerate.LdUserContext.getLoginUser() \
#           ; U_USER=entity.getRStaff() \
#         }
#     ex) map:{ \
#           U_USER=dbflute.ldb.nongenerate.LdUserContext.getLoginUser() \
#         }
#
torque.commonColumnMap = map:{R_TIME=TIMESTAMP;U_TIME=TIMESTAMP;R_USER=VARCHAR;U_USER=VARCHAR}
torque.commonColumnSetupInterceptorAspectPoint = behavior
torque.commonColumnSetupBeforeInsertInterceptorLogicMap = map:{ \
        R_TIME=new java.sql.Timestamp(System.currentTimeMillis()) \
        ; R_USER=dbflute.ldb.nongenerate.LdUserContext.getLoginUser() \
        ; U_USER=entity.getRUser() \
    }

torque.commonColumnSetupBeforeUpdateInterceptorLogicMap = map:{ \
        U_USER=dbflute.ldb.nongenerate.LdUserContext.getLoginUser() \
    }

torque.commonColumnSetupBeforeDeleteInterceptorLogicMap = map:{}
# ----------------/

# /---------------------------------------------------------------------------
# [Classification]
#   classificationDefinitionMap: (NotRequired - Default 'map:{}')
#
#     ex) map:{ \
#        CollectionStatus   =   list:{ \
#                                    map:{code=C10;name=ArrivalWait} \
#                                    ; map:{code=C20;name=LendingOk} \
#                               } \
#        }
#
#     ex) From Database ()
#      map:{ \
#        CollectionStatus   =   list:{ \
#               map:{table=COLLECTION_STATUS_LOOKUP;code=COLLECTION_STATUS_CODE;name=COLLECTION_STATUS_NAME} \
#           } \
#      }
#
#   classificationDeploymentMap: (NotRequired - Default 'map:{}')
#
#     ex) map:{ \
#            ; $$ALL$$                  = map:{suffix:_YN=YesNo} \
#            ; COLLECTION_STATUS        = map:{COLLECTION_STATUS_CODE=CollectionStatus} \
#            ; COLLECTION_STATUS_LOOKUP = map:{COLLECTION_STATUS_CODE=CollectionStatus} \
#         }
#
#     *Table name and column name are treated as case sensitive.
#
#torque.classificationDefinitionMap = map:{ \
#		; YesNo				=	list:{ \
#									; map:{code=y;name=Yes;alias=\u306f\u3044} \
#									; map:{code=n;name=No;alias=\u3044\u3044\u3048} \
#								} \
#		; CollectionStatus	=	list:{ \
#									; map:{code=NOR} \
#									; map:{code=WAT} \
#									; map:{code=OUT} \
#								} \
#	}
#
#torque.classificationDeploymentMap = map:{ \
#		; $$ALL$$					=	map:{suffix:_YN=YesNo} \
#		; COLLECTION_STATUS			=	map:{COLLECTION_STATUS_CODE=CollectionStatus} \
#		; COLLECTION_STATUS_LOOKUP	=	map:{COLLECTION_STATUS_CODE=CollectionStatus} \
#	}
# ----------------/

# _/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
#                                                     Select Param
#                                                     _/_/_/_/_/_/

# /---------------------------------------------------------------------------
# [SelectQueryTimeout] (NotRequired - Default '-1')
torque.selectQueryTimeout = -1
# ----------------/

# /---------------------------------------------------------------------------
# [StatementResultSetType] (NotRequired - Default '')
#   Result set type of statement.
#
#   *If you specify this property, you should do as follows:
#    ex) at jdbc.dicon
#
#     x <component class="org.seasar.extension.jdbc.impl.BasicStatementFactory">
#     o <component class="dbflute.ldb.allcommon.s2dao.LdS2DaoStatementFactory">
#
#   *{Java Only}
#
torque.statementResultSetType = ResultSet.TYPE_SCROLL_INSENSITIVE
# ----------------/

# /---------------------------------------------------------------------------
# [StatementResultSetConcurrency] (NotRequired - Default '')
#   Result set concurrency of statement.
#
#   *If you specify this property, you should do as follows:
#    ex) at jdbc.dicon
#
#     x <component class="org.seasar.extension.jdbc.impl.BasicStatementFactory">
#     o <component class="dbflute.ldb.allcommon.s2dao.LdS2DaoStatementFactory">
#
#   *{Java Only}
#
torque.statementResultSetConcurrency = ResultSet.CONCUR_READ_ONLY
# ----------------/

# _/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
#                                                Extract Component
#                                                     _/_/_/_/_/_/

# /---------------------------------------------------------------------------
# [ExtractAccept Protocol]
#   extractAcceptStartBrace: (NotRequired - Default '@{')
#   extractAcceptEndBrace: (NotRequired - Default '@}')
#   extractAcceptDelimiter: (NotRequired - Default '@;')
#   extractAcceptEqual: (NotRequired - Default '@=')
torque.extractAcceptStartBrace = @{
torque.extractAcceptEndBrace = @}
torque.extractAcceptDelimiter = @;
torque.extractAcceptEqual = @=
# ----------------/

# _/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
#                                            Additional ForeignKey
#                                                     _/_/_/_/_/_/

# /---------------------------------------------------------------------------
# [Additional ForeignKey]
#   additionalForeignKeyMap: (NotRequired - Default 'map:{}')
#
#   If foreign key does not exist in your database,
#   you can set up here as virtual foreign key for DBFlute.
# 
#    ex) torque.additionalForeignKeyMap = map:{ \
#            ; FK_BOOK_AUTHOR = map:{ \
#                ; localTableName  = BOOK      ; foreignTableName  = AUTHOR \
#                ; localColumnName = AUTHOR_ID ; foreignColumnName = AUTHOR_ID \
#            } \
#            ; FK_BOOK_PUBLISHER = map:{ \
#                ; localTableName  = BOOK         ; foreignTableName  = PUBLISHER \
#                ; localColumnName = PUBLISHER_ID ; foreignColumnName = PUBLISHER_ID \
#            } \
#        }
#
#torque.additionalForeignKeyMap = map:{ \
#            ; FK_TEST_LENDING_COLLECTION  = map:{ \
#                ; localTableName  = LENDING_COLLECTION ; foreignTableName  = LIBRARY_USER \
#                ; localColumnName = LIBRARY_ID/LB_USER_ID ; foreignColumnName = LIBRARY_ID/LB_USER_ID \
#            } \
#    }
# ----------------/


# _/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
#                                                 Source Reduction
#                                                         _/_/_/_/
# /---------------------------------------------------------------------------
# [Make Deprecated] (NotRequired - Default 'true')
#   [true]
#     Make deprecated method and class and so on...
#
torque.isMakeDeprecated = true
# ----------------/

# /---------------------------------------------------------------------------
# [Make ConditionQueryEqualEmptyString] (NotRequired - Default 'true')
#   [true]
#     Make equal empty-string method of condition-query.
#
torque.isMakeConditionQueryEqualEmptyString = true
# ----------------/

# /---------------------------------------------------------------------------
# [Make ConditionQueryNumericArgumentLong] (NotRequired - Default 'true')
#   [true]
#     Make numeric argument long method of condition-query.
#
# *{Java Only}
#
torque.isMakeConditionQueryNumericArgumentLong = true
# ----------------/

# /---------------------------------------------------------------------------
# [Make BehaviorForUpdate] (NotRequired - Default 'true')
#   [true]
#     Make for-update method of behavior.
#
torque.isMakeBehaviorForUpdate = true
# ----------------/


#torque.includeQueryMap = map:{
#    ; String = map:{ NotInScope = map:{ PRO_PURCHASE_PARTS = list:{ PURCHASE_PARTS_ID ; OTS_PURCHASE_CODE } }
#}


# _/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
#                                                        Other
#                                                     _/_/_/_/_/_/

# /---------------------------------------------------------------------------
# [Stop Generate]
#torque.isStopGenerateExtendedBhv = true
#torque.isStopGenerateExtendedDao = false
#torque.isStopGenerateExtendedEntity = true
# ----------------/

# /---------------------------------------------------------------------------
# [S2Dao Version]
#   isVersionAfter1040: (NotRequired - Default 'true')
#     If your s2dao's version is greater than(or equal) S2Dao-1.0.40,
#     this property should be true.
#
#   *{Java Only}
#
torque.isVersionAfter1040 = true
# ----------------/


# =======================================================================================
#                                                                           for JDBC task
#                                                                           =============
#
#   *Attension: If you use oracle and db2 and derby, schema must be UpperCase.
#
torque.database.driver		= org.apache.derby.jdbc.EmbeddedDriver
torque.database.url			= jdbc:derby:/pj/ws/dbflute_ldb/src/test/resources/data-derby
torque.database.schema		= LDB
torque.database.user		= ldb
torque.database.password	= ldb

# Target database types: (NotNull - list:{TABLE;VIEW;...})
#   Default value is 'list:{TABLE;VIEW}'.
#
torque.database.type.list = list:{TABLE;VIEW}

# Unnecessary tables: (NotNull - list:{TABLE_HINT;TABLE_HINT})
#   Default value is empty-list.
#
#   For example, if you want to except the table that the name starts with 'D_',
#   you should set this property as follows:
#     ex) list:{prefix:D_}
#
#   And other example:
#     ex) list:{prefix:D_; suffix:_Test; sysobjects; dtproperties}
#
torque.table.except.list = list:{}

# Target tables: (NotNull - list:{TABLE_HINT;TABLE_HINT})
#   Default value is empty-list(All tables are target).
#   If this property is empty-list, the property of [Unnecessary tables] is valid.
#
#   For example, if you want to contains the table that the name starts with 'D_',
#   you should set this property as follows:
#     ex) list:{prefix:D_}
#
#   And other example:
#     ex) list:{prefix:D_; suffix:_Test; sysobjects; dtproperties}
#
#   If the table defined at this property is defined at [Unnecessary tables] too,
#   the table is target of generating.
#
torque.table.target.list = list:{}


# =======================================================================================
#                                                                            for Internal
#                                                                            ============
# Normally you don't need to change these properties.

#
# [JDBC to java-native mapping] (NotRequired - Default 'map:{}')
#
# ex) map:{INTEGER=java.lang.Integer;TIMESTAMP=java.util.Date}
# ex) map:{} // If you don't want to change...
#
# Default mapping as follows:
# * ------------------------------------------------------------------
# * DBFlute Type  | Java Type            | CSharp Type               |
# * ------------------------------------------------------------------
# * CHAR          | java.lang.String     | String                    |
# * VARCHAR       | java.lang.String     | String                    |
# * LONGVARCHAR   | java.lang.String     | String                    |
# * NUMERIC       | java.math.BigDecimal | Nullables.NullableDecimal |
# * DECIMAL       | java.math.BigDecimal | Nullables.NullableDecimal |
# * BIT           | java.lang.Boolean    | Nullables.NullableBoolean |
# * TINYINT       | java.math.BigDecimal | Nullables.NullableDecimal |
# * SMALLINT      | java.math.BigDecimal | Nullables.NullableDecimal |
# * INTEGER       | java.math.BigDecimal | Nullables.NullableDecimal |
# * BIGINT        | java.math.BigDecimal | Nullables.NullableDecimal |
# * REAL          | java.math.BigDecimal | Nullables.NullableDecimal |
# * FLOAT         | java.math.BigDecimal | Nullables.NullableDecimal |
# * DOUBLE        | java.math.BigDecimal | Nullables.NullableDecimal |
# * BINARY        | byte[]               | byte[]                    |
# * VARBINARY     | byte[]               | byte[]                    |
# * LONGVARBINARY | byte[]               | byte[]                    |
# * DATE          | java.util.Date       | Nullables.NullableDateTime|
# * TIME          | java.sql.Time        | Nullables.NullableDateTime|
# * TIMESTAMP     | java.sql.Timestamp   | Nullables.NullableDateTime|
# *
# * ------------------------------------------------------------------
# * A couple variations have been introduced to cover cases
# * that may arise, but are not covered above.
# * BOOLEANCHAR   | java.lang.Boolean    |
# * BOOLEANINT    | OR java.lang.Boolean |
# *
torque.jdbcToJavaNativeMap = map:{}

# [The list of java-native that treated as String] (NotRequired - Default 'list:{}')
#   *This property overrides all-default-value.
#
#   Default list as follows: (When you set this empty)
#     Java{String} / CSharp{String}
#
torque.javaNativeStringList = list:{}

# [The list of java-native that treated as Boolean] (NotRequired - Default 'list:{}')
#   *This property overrides all-default-value.
#
#   Default list as follows: (When you set this empty)
#     Java{Boolean} / CSharp{Nullables.NullableBoolean}
#
torque.javaNativeBooleanList = list:{}

# [The list of java-native that treated as Number] (NotRequired - Default 'list:{}')
#   *This property overrides all-default-value.
#
#   Default list as follows: (When you set this empty)
#     Java{Byte, Short, Integer, Long, Float, Double, BigDecimal, BigInteger} / CSharp{Nullables.NullableDecimal}
#
torque.javaNativeNumberList = list:{}

# [The list of java-native that treated as Date] (NotRequired - Default 'list:{}')
#   *This property overrides all-default-value.
#
#   Default list as follows: (When you set this empty)
#     Java{Date, Time, Timestamp} / CSharp{Nullables.NullableDateTime}
#
torque.javaNativeDateList = list:{}

# [The list of java-native that treated as Binary] (NotRequired - Default 'list:{}')
#   *This property overrides all-default-value.
#
#   Default list as follows: (When you set this empty)
#     byte[]
#
torque.javaNativeBinaryList = list:{}


# /---------------------------------------------------------------------------
# [ToLowerInGeneratorUnderscoreMethod] (NotRequired - Default 'true')
#   [true]
#
#   [false]
#
torque.isAvailableToLowerInGeneratorUnderscoreMethod = true
# ----------------/




# =======================================================================================
#                                                                             for PlaySql
#                                                                             ===========
# /---------------------------------------------------------------------------
# [Replace Schema] (NotRequired - Default 'map:{}')
#   invokeReplaceSchemaDefinitionMap: (NotRequired - Default 'map:{}')
#
#     ex) map:{ torque.invokeReplaceSchemaDefinitionMap = map:{ \
#            isAutoCommit = false \
#            ; isRollbackOnly = false \
#            ; isErrorContinue = false \
#            ; sqlFile = ./playsql/replace-schema.sql \
#         }
#
#   invokeSqlDirectoryDefinitionMap: (NotRequired - Default 'map:{}')
#
#     ex) map:{ torque.invokeSqlDirectoryDefinitionMap = map:{ \
#            isAutoCommit = false \
#            ; isRollbackOnly = false \
#            ; isErrorContinue = false \
#            ; sqlDirectory = ./playsql \
#         }
#
#torque.replaceSchemaDefinitionMap = map:{ \
#	isAutoCommit = false \
#	; isRollbackOnly = false \
#	; isErrorContinue = true \
#	; sqlFile = ./playsql/replace-schema.sql \
#}
#
#
#torque.invokeSqlDirectoryDefinitionMap = map:{ \
#	isAutoCommit = false \
#	; isRollbackOnly = true \
#	; isErrorContinue = false \
#	; sqlDirectory = ./playsql/testsql \
#}
#
#
#
# torque.sql2EntityDefinitionMap = map:{ \
# 	; sqlDirectory = ./playsql/testsql \
# 	; isPlainEntity = true \
# }
#
#
#torque.sql2EntityDefinitionMap = map:{ \
#	; isPlainEntity = true \
#}

