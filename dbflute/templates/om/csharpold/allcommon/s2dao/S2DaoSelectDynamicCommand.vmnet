
using System;
using System.Reflection;
using System.Collections.Generic;
using System.Text;

using Seasar.Extension.ADO;
using Seasar.Extension.ADO.Impl;
using Seasar.Dao;

using ${glPackageBaseCommonCBean};

namespace ${glPackageBaseCommonS2Dao} {

    /**
     * My-SelectDynamicCommand.
     * Overrides original class 'SelectDynamicCommand'.
     * 
     * @author ${database.ClassAuthor}
     */
    public class ${glSelectDynamicCommand} : Seasar.Dao.Impl.SelectDynamicCommand {

        /** Log-instance. */
        private static readonly log4net.ILog _log = log4net.LogManager.GetLogger(MethodBase.GetCurrentMethod().DeclaringType);

        private IDataReaderHandler dataReaderHandler;
        private IDataReaderFactory dataReaderFactory;

        /** Cache of select clause command. */
        protected ${glSelectDynamicCommand} _selectClauseCommand;

        /** Cache of select clause PK-only command. */
        protected ${glSelectDynamicCommand} _selectClausePKOnlyCommand;

        /**
         * Constructor.
         * 
         * @param dataSource Data source.
         * @param statementFactory Statement factory.
         * @param resultSetHandler Result set handler.
         * @param resultSetFactory Result set factory.
         */
        public ${glSelectDynamicCommand}(IDataSource dataSource, ICommandFactory commandFactory
                , IDataReaderHandler dataReaderHandler, IDataReaderFactory dataReaderFactory)
            : base(dataSource, commandFactory, dataReaderHandler, dataReaderFactory) {
                this.dataReaderHandler = dataReaderHandler;
                this.dataReaderFactory = dataReaderFactory;
        }

        /**
         * Do apply. {for delegating to apply()}
         * 
         * @param args Arguments. (NotNull)
         * @return Command context. (NotNull)
         */
        public ICommandContext DoApply(Object[] args) {
            return Apply(args);
        }

        /**
         * Set select clause.
         * 
         * @param value Select clause.
         * @return this. (NotNull)
         */
        public ${glSelectDynamicCommand} SetSelectClause(String value) {
            _selectClauseCommand = CreateMySelectDynamicCommand();
            _selectClauseCommand.Sql = value;
            return this;
        }

        /**
         * Set select clause PK only.
         * 
         * @param value Select clause PK only.
         * @return this. (NotNull)
         */
        public ${glSelectDynamicCommand} SetSelectClausePKOnly(String value) {
            _selectClausePKOnlyCommand = CreateMySelectDynamicCommand();
            _selectClausePKOnlyCommand.Sql = value;
            return this;
        }

        protected ${glSelectDynamicCommand} CreateMySelectDynamicCommand() {
            return new ${glSelectDynamicCommand}(DataSource, CommandFactory, dataReaderHandler, dataReaderFactory);
        }

        public string[] ArgNames4Nest {
            set {
                if (_selectClauseCommand != null) {
                    _selectClauseCommand.ArgNames = value;
                }
                if (_selectClausePKOnlyCommand != null) {
                    _selectClausePKOnlyCommand.ArgNames = value;
                }
            }
        }

        public Type[] ArgTypes4Nest {
            set {
                if (_selectClauseCommand != null) {
                    _selectClauseCommand.ArgTypes = value;
                }
                if (_selectClausePKOnlyCommand != null) {
                    _selectClausePKOnlyCommand.ArgTypes = value;
                }
            }
        }

        public override object Execute(object[] args) {
            if (!${glConditionBeanContextName}.IsExistConditionBeanOnThread()) {
                return base.Execute(args);
            }
            AssertSelectClauseCommand();
            IList<Object> bindVariableList = new List<Object>();
            IList<Type> bindVariableTypeList = new List<Type>();
            IList<String> bindVariableNameList = new List<String>();

            StringBuilder sb = new StringBuilder();
            sb.Append(SetupRealSelectClause(args, bindVariableList, bindVariableTypeList, bindVariableNameList));
            sb.Append(" ");
            sb.Append(SetupRealFromWhereClause(args, bindVariableList, bindVariableTypeList, bindVariableNameList));

            BasicSelectHandler selectHandler = CreateBasicSelectHandler(sb.ToString());
#if ($database.isSelectQueryTimeoutValid())

            int timeout = ${database.SelectQueryTimeout};
            if (_log.IsDebugEnabled) {
                _log.Debug("@SelectDynamicCommand: selectHandler.CommandTimeout = " + timeout + ";// from ${database.SelectQueryTimeout}");
            }
            selectHandler.CommandTimeout = timeout;
#end

            Object[] bindVariableArray = new Object[bindVariableList.Count];
            bindVariableList.CopyTo(bindVariableArray, 0);
            Type[] bindVariableTypeArray = new Type[bindVariableTypeList.Count];
            bindVariableTypeList.CopyTo(bindVariableTypeArray, 0);
            String[] bindVariableNameArray = new String[bindVariableNameList.Count];
            bindVariableNameList.CopyTo(bindVariableNameArray, 0);
            return selectHandler.Execute(bindVariableArray, bindVariableTypeArray, bindVariableNameArray);
        }

        protected String SetupRealSelectClause(Object[] args, IList<Object> bindVariableList, IList<Type> bindVariableTypeList, IList<String> bindVariableNameList) {
            ${glConditionBeanInterfaceName} cb = ${glConditionBeanContextName}.GetConditionBeanOnThread();
            if (cb.IsSelectCountIgnoreFetchScope()) {
                return "select count(*)";
            }
            String realSelectClause;
            {
                ICommandContext ctx;
                if (cb.IsLimitSelect_PKOnly()) {
                    ctx = _selectClausePKOnlyCommand.DoApply(args);
                } else {
                    ctx = _selectClauseCommand.DoApply(args);
                }
                realSelectClause = ctx.Sql;
                AddBindVariableInfo(ctx, bindVariableList, bindVariableTypeList, bindVariableNameList);
            }
            return realSelectClause;
        }

        protected String SetupRealFromWhereClause(Object[] args, IList<Object> bindVariableList, IList<Type> bindVariableTypeList, IList<String> bindVariableNameList) {
            ${glConditionBeanInterfaceName} cb = ${glConditionBeanContextName}.GetConditionBeanOnThread();
            String realFromWhereClause;
            {
                ${glSelectDynamicCommand} fromWhereCommand = CreateMySelectDynamicCommand();
                fromWhereCommand.ArgNames = this.ArgNames;
                fromWhereCommand.ArgTypes = this.ArgTypes;
                fromWhereCommand.Sql = cb.GetClause();
                ICommandContext ctx = fromWhereCommand.DoApply(args);
                realFromWhereClause = ctx.Sql;
                AddBindVariableInfo(ctx, bindVariableList, bindVariableTypeList, bindVariableNameList);
            }
            return realFromWhereClause;
        }

        protected BasicSelectHandler CreateBasicSelectHandler(String realSql) {
            return new BasicSelectHandler(DataSource, realSql, dataReaderHandler, CommandFactory, dataReaderFactory);
        }

        protected void AddBindVariableInfo(ICommandContext ctx, IList<Object> bindVariableList, IList<Type> bindVariableTypeList, IList<String> bindVariableNameList) {
            Object[] bindVariables = ctx.BindVariables;
            AddBindVariableList(bindVariableList, bindVariables);
            Type[] bindVariableTypes = ctx.BindVariableTypes;
            AddBindVariableTypeList(bindVariableTypeList, bindVariableTypes);
            String[] bindVariableNames = ctx.BindVariableNames;
            AddBindVariableNameList(bindVariableNameList, bindVariableNames);
        }

        protected void AddBindVariableList(IList<Object> bindVariableList, Object[] bindVariables) {
            for (int i=0; i < bindVariables.Length; i++) {
                bindVariableList.Add(bindVariables[i]);
            }
        }

        protected void AddBindVariableTypeList(IList<Type> bindVariableTypeList, Type[] bindVariableTypes) {
            for (int i=0; i < bindVariableTypes.Length; i++) {
                bindVariableTypeList.Add(bindVariableTypes[i]);
            }
        }

        protected void AddBindVariableNameList(IList<String> bindVariableNameList, String[] bindVariableNames) {
            for (int i=0; i < bindVariableNames.Length; i++) {
                bindVariableNameList.Add(bindVariableNames[i]);
            }
        }

        protected void AssertSelectClauseCommand() {
            if (_selectClauseCommand == null) {
                String msg = "Select clause command should not be null.";
                throw new SystemException(msg);
            }
        }
    }
}