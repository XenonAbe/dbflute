#
# @since DBFlute-0.9.0
#

targetdatabase = $targetDatabase

##
## Loop by data-model.
##
#foreach ($dataModel in $dataModels)

  ##
  ## Loop by database.
  ##
  #foreach ($database in $dataModel.Databases)
    $database.enableGenerateOutputDirectory()

    ## - - - - - - - - - - - -
    ## Initialize properties.
    ## - - - - - - - - - - - -
    $database.initializeAdditionalPrimaryKey()
    $database.initializeAdditionalForeignKey()
    $database.initializeClassificationDeployment()
    $database.initializeIncludeQuery()
    $database.checkProperties()

    ## *****************************************************************************************************************
    ##                                                                                                   Global Paramter
    ##                                                                                                   ***************
    ## ===================================================================================
    ##                                                                            Language
    ##                                                                            ========
    #set ($glTargetLanguage = ${database.targetLanguage})

    ## ===================================================================================
    ##                                                                  Resource Directory
    ##                                                                  ==================
    #set ($glResourceDirectory = ${database.resourceDirectory})

    ## ===================================================================================
    ##                                                                           Extension
    ##                                                                           =========
    #set ($glTemplateFileExtension = ${database.templateFileExtension})
    #set ($glClassFileExtension = ${database.classFileExtension})

    ## -----------------------------------------------------
    ##                                                Prefix
    ##                                                ------
    #set ($glProjectPrefix = ${database.projectPrefix})
    #set ($glBasePrefix = ${database.basePrefix})
    #set ($glBaseSuffixForEntity = ${database.baseSuffixForEntity})

    ## -----------------------------------------------------
    ##                                                 Dicon
    ##                                                 -----
    #set ($glDBFluteDiconNamespace = "${database.DBFluteDiconNamespace}")
    #set ($glDBFluteDiconFileName = "${database.DBFluteDiconFileName}")
    #set ($glCreatorDiconFileName = "${database.DBFluteCreatorDiconFileName}")
    #set ($glCustomizerDiconFileName = "${database.DBFluteCustomizerDiconFileName}")
    #set ($glJ2eeDiconResourceName = "${database.j2eeDiconResourceName}")
    #set ($glDBFluteBeansFileName = "${database.DBFluteBeansFileName}")

    ## -----------------------------------------------------
    ##                                            Class Name
    ##                                            ----------
    ## [Allcommon]
    #set ($glAccessContext = "${glProjectPrefix}AccessContext")
    #set ($glBuriDef = "${glProjectPrefix}BuriDef")
    #set ($glCallbackContext = "${glProjectPrefix}CallbackContext")
    #set ($glCacheAbstractSelector = "${glProjectPrefix}CacheAbstractSelector")
    #set ($glCacheBehaviorSelector = "${glProjectPrefix}CacheBehaviorSelector")
    #set ($glCDef = "${glProjectPrefix}CDef")
    #set ($glCommonColumnAutoSetupper = "${glProjectPrefix}CommonColumnAutoSetupper")
    #set ($glDBCurrent = "${glProjectPrefix}DBCurrent")
    #set ($glDBDef = "${glProjectPrefix}DBDef")
    #set ($glDBFluteConfig = "${glProjectPrefix}DBFluteConfig")
    #set ($glDBFluteInitializer = "${glProjectPrefix}DBFluteInitializer")
    #set ($glEntity = "${glProjectPrefix}Entity")
    #set ($glEntityDefinedCommonColumn = "${glProjectPrefix}EntityDefinedCommonColumn")
    #set ($glBehaviorSelector = "${glProjectPrefix}BehaviorSelector")
    #set ($glImplementedCommonColumnAutoSetupper = "${glProjectPrefix}ImplementedCommonColumnAutoSetupper")
    #set ($glImplementedInvokerAssistant = "${glProjectPrefix}ImplementedInvokerAssistant")
    #set ($glImplementedSqlClauseCreator = "${glProjectPrefix}ImplementedSqlClauseCreator")
    #set ($glInternalMapContext = "${glProjectPrefix}InternalMapContext")
    #set ($glQLog = "${glProjectPrefix}QLog")
    #set ($glXLog = "${glProjectPrefix}XLog")

    ## [Allcommon-Behavior]
    #set ($glBehaviorReadable = "${glProjectPrefix}BehaviorReadable")
    #set ($glBehaviorWritable = "${glProjectPrefix}BehaviorWritable")
    #set ($glAbstractBehaviorReadable = "${glProjectPrefix}AbstractBehaviorReadable")
    #set ($glAbstractBehaviorWritable = "${glProjectPrefix}AbstractBehaviorWritable")

    ## [Allcommon-Behavior-Batch]
    #set ($glTokenFileReflectionOption = "${glProjectPrefix}TokenFileReflectionOption")
    #set ($glTokenFileReflectionResult = "${glProjectPrefix}TokenFileReflectionResult")
    #set ($glTokenFileReflectionFailure = "${glProjectPrefix}TokenFileReflectionFailure")
    #set ($glTokenFileOutputOption = "${glProjectPrefix}TokenFileOutputOption")
    #set ($glTokenFileOutputResult = "${glProjectPrefix}TokenFileOutputResult")

    ## [Allcommon-Behavior-Core]
    #set ($glBehaviorCommand = "${glProjectPrefix}BehaviorCommand")
    #set ($glBehaviorCommandComponentSetup = "${glProjectPrefix}BehaviorCommandComponentSetup")
    #set ($glBehaviorCommandInvoker = "${glProjectPrefix}BehaviorCommandInvoker")
    #set ($glBehaviorInitializer = "${glProjectPrefix}BehaviorInitializer")
    #set ($glInvokerAssistant = "${glProjectPrefix}InvokerAssistant")
    #set ($glResourceContext = "${glProjectPrefix}ResourceContext")
    #set ($glResourceParameter = "${glProjectPrefix}ResourceParameter")
    #set ($glSqlExecution = "${glProjectPrefix}SqlExecution")
    #set ($glSqlExecutionCreator = "${glProjectPrefix}SqlExecutionCreator")

    ## [Allcommon-Behavior-Core-Command]
    #set ($glAbstractBehaviorCommand = "${glProjectPrefix}AbstractBehaviorCommand")
    #set ($glAbstractEntityCommand = "${glProjectPrefix}AbstractEntityCommand")
    #set ($glAbstractListEntityCommand = "${glProjectPrefix}AbstractListEntityCommand")
    #set ($glAbstractOutsideSqlCommand = "${glProjectPrefix}AbstractOutsideSqlCommand")
    #set ($glAbstractOutsideSqlSelectCommand = "${glProjectPrefix}AbstractOutsideSqlSelectCommand")
    #set ($glAbstractSelectCBCommand = "${glProjectPrefix}AbstractSelectCBCommand")
    #set ($glBatchDeleteEntityCommand = "${glProjectPrefix}BatchDeleteEntityCommand")
    #set ($glBatchDeleteNonstrictEntityCommand = "${glProjectPrefix}BatchDeleteNonstrictEntityCommand")
    #set ($glBatchInsertEntityCommand = "${glProjectPrefix}BatchInsertEntityCommand")
    #set ($glBatchUpdateEntityCommand = "${glProjectPrefix}BatchUpdateEntityCommand")
    #set ($glBatchUpdateNonstrictEntityCommand = "${glProjectPrefix}BatchUpdateNonstrictEntityCommand")
    #set ($glDeleteEntityCommand = "${glProjectPrefix}DeleteEntityCommand")
    #set ($glDeleteNonstrictEntityCommand = "${glProjectPrefix}DeleteNonstrictEntityCommand")
    #set ($glInsertEntityCommand = "${glProjectPrefix}InsertEntityCommand")
    #set ($glOutsideSqlCallCommand = "${glProjectPrefix}OutsideSqlCallCommand")
    #set ($glOutsideSqlExecuteCommand = "${glProjectPrefix}OutsideSqlExecuteCommand")
    #set ($glOutsideSqlSelectCursorCommand = "${glProjectPrefix}OutsideSqlSelectCursorCommand")
    #set ($glOutsideSqlSelectListCommand = "${glProjectPrefix}OutsideSqlSelectListCommand")
    #set ($glQueryDeleteCBCommand = "${glProjectPrefix}QueryDeleteCBCommand")
    #set ($glQueryUpdateEntityCBCommand = "${glProjectPrefix}QueryUpdateEntityCBCommand")
    #set ($glSelectCountCBCommand = "${glProjectPrefix}SelectCountCBCommand")
    #set ($glSelectListCBCommand = "${glProjectPrefix}SelectListCBCommand")
    #set ($glSelectNextValCommand = "${glProjectPrefix}SelectNextValCommand")
    #set ($glSelectScalarCBCommand = "${glProjectPrefix}SelectScalarCBCommand")
    #set ($glUpdateEntityCommand = "${glProjectPrefix}UpdateEntityCommand")
    #set ($glUpdateNonstrictEntityCommand = "${glProjectPrefix}UpdateNonstrictEntityCommand")

    ## [Allcommon-Behavior-Core-Execution]
    #set ($glBasicSelectExecution = "${glProjectPrefix}BasicSelectExecution")
    #set ($glOutsideSqlSelectExecution = "${glProjectPrefix}OutsideSqlSelectExecution")
    #set ($glSelectCBExecution = "${glProjectPrefix}SelectCBExecution")

    ## [Allcommon-Behavior-Load]
    #set ($glLoadReferrerOption = "${glProjectPrefix}LoadReferrerOption")

    ## [Allcommon-Behavior-Setup]
    #set ($glConditionBeanSetupper = "${glProjectPrefix}ConditionBeanSetupper")
    #set ($glEntityListSetupper = "${glProjectPrefix}EntityListSetupper")
    #set ($glValueLabelSetupper = "${glProjectPrefix}ValueLabelSetupper")
    #set ($glValueLabelBox = "${glProjectPrefix}ValueLabelBox")

    ## [Allcommon-ConditionBean]
    #set ($glFetchNarrowingBean = "${glProjectPrefix}FetchNarrowingBean")
    #set ($glSimplePagingBean = "${glProjectPrefix}SimplePagingBean")
    #set ($glConditionBean = "${glProjectPrefix}ConditionBean")
    #set ($glConditionQuery = "${glProjectPrefix}ConditionQuery")
    #set ($glOrderByBean = "${glProjectPrefix}OrderByBean")
    #set ($glPagingBean = "${glProjectPrefix}PagingBean")
    #set ($glSelectResource = "${glProjectPrefix}SelectResource")
    #set ($glFetchNarrowingBeanContext = "${glProjectPrefix}FetchNarrowingBeanContext")
    #set ($glMapParameterBean = "${glProjectPrefix}MapParameterBean")
    #set ($glPagingHandler = "${glProjectPrefix}PagingHandler")
    #set ($glPagingInvoker = "${glProjectPrefix}PagingInvoker")
    #set ($glPagingResultBean = "${glProjectPrefix}PagingResultBean")
    #set ($glListResultBean = "${glProjectPrefix}ListResultBean")
    #set ($glResultBeanBuilder = "${glProjectPrefix}ResultBeanBuilder")
    #set ($glConditionBeanContext = "${glProjectPrefix}ConditionBeanContext")
    #set ($glAbstractConditionBean = "${glProjectPrefix}AbstractConditionBean")
    #set ($glAbstractConditionQuery = "${glProjectPrefix}AbstractConditionQuery")
    #set ($glConditionKey = "${glProjectPrefix}ConditionKey")
    #set ($glConditionValue = "${glProjectPrefix}ConditionValue")
    #set ($glScalarQuery = "${glProjectPrefix}ScalarQuery")
    #set ($glSubQuery = "${glProjectPrefix}SubQuery")
    #set ($glUnionQuery = "${glProjectPrefix}UnionQuery")

    ## [Allcommon-ConditionBean-Option]
    #set ($glConditionOption = "${glProjectPrefix}ConditionOption")
    #set ($glSimpleStringOption = "${glProjectPrefix}SimpleStringOption")
    #set ($glFromToOption = "${glProjectPrefix}FromToOption")
    #set ($glDateFromToOption = "${glProjectPrefix}DateFromToOption")
    #set ($glLikeSearchOption = "${glProjectPrefix}LikeSearchOption")
    #set ($glInScopeOption = "${glProjectPrefix}InScopeOption")
    #set ($glSplitOptionParts = "${glProjectPrefix}SplitOptionParts")
    #set ($glToUpperLowerCaseOptionParts = "${glProjectPrefix}ToUpperLowerCaseOptionParts")
    #set ($glToSingleByteOptionParts = "${glProjectPrefix}ToSingleByteOptionParts")
    #set ($glJapaneseOptionPartsAgent = "${glProjectPrefix}JapaneseOptionPartsAgent")

    ## [Allcommon-ConditionBean-Grouping]
    #set ($glGroupingOption = "${glProjectPrefix}GroupingOption")
    #set ($glGroupingRowEndDeterminer = "${glProjectPrefix}GroupingRowEndDeterminer")
    #set ($glGroupingRowResource = "${glProjectPrefix}GroupingRowResource")
    #set ($glGroupingRowSetupper = "${glProjectPrefix}GroupingRowSetupper")

    ## [Allcommon-ConditionBean-Mapping]
    #set ($glEntityDtoMapper = "${glProjectPrefix}EntityDtoMapper")

    ## [Allcommon-ConditionBean-OutsideSql]
    #set ($glOutsideSqlContext = "${glProjectPrefix}OutsideSqlContext")
    #set ($glOutsideSqlOption = "${glProjectPrefix}OutsideSqlOption")
    #set ($glProcedurePmb = "${glProjectPrefix}ProcedurePmb")

    ## [Allcommon-ConditionBean-OutsideSql-Executor]
    #set ($glOutsideSqlBasicExecutor = "${glProjectPrefix}OutsideSqlBasicExecutor")
    #set ($glOutsideSqlCursorExecutor = "${glProjectPrefix}OutsideSqlCursorExecutor")
    #set ($glOutsideSqlPagingExecutor = "${glProjectPrefix}OutsideSqlPagingExecutor")
    #set ($glOutsideSqlEntityExecutor = "${glProjectPrefix}OutsideSqlEntityExecutor")

    ## [Allcommon-ConditionBean-Pagenavi]
    #set ($glPageNumberLink = "${glProjectPrefix}PageNumberLink")
    #set ($glPageNumberLinkSetupper = "${glProjectPrefix}PageNumberLinkSetupper")
    #set ($glPageGroupBean = "${glProjectPrefix}PageGroupBean")
    #set ($glPageGroupOption = "${glProjectPrefix}PageGroupOption")
    #set ($glPageRangeBean = "${glProjectPrefix}PageRangeBean")
    #set ($glPageRangeOption = "${glProjectPrefix}PageRangeOption")

    ## [Allcommon-ConditionBean-SqlClause]
    #set ($glSqlClause = "${glProjectPrefix}SqlClause")
    #set ($glAbstractSqlClause = "${glProjectPrefix}AbstractSqlClause")
    #set ($glSqlClauseCreator = "${glProjectPrefix}SqlClauseCreator")
    #set ($glOrderByClause = "${glProjectPrefix}OrderByClause")
    #set ($glOrderByElement = "${glProjectPrefix}OrderByElement")
    #set ($glWhereClauseSimpleFilter = "${glProjectPrefix}WhereClauseSimpleFilter")

    ## [Allcommon-DBMeta]
    #set ($glDBMeta = "${glProjectPrefix}DBMeta")
    #set ($glAbstractDBMeta = "${glProjectPrefix}AbstractDBMeta")
    #set ($glDBMetaProvider = "${glProjectPrefix}DBMetaProvider")
    #set ($glDBMetaInstanceHandler = "${glProjectPrefix}DBMetaInstanceHandler")

    ## [Allcommon-DBMetaHierarchy]
    #set ($glHierarchyArranger = "${glProjectPrefix}HierarchyArranger")
    #set ($glHierarchyBasicRequest = "${glProjectPrefix}HierarchyBasicRequest")
    #set ($glHierarchyRequest = "${glProjectPrefix}HierarchyRequest")
    #set ($glHierarchyRequestElement = "${glProjectPrefix}HierarchyRequestElement")
    #set ($glHierarchySourceColumn = "${glProjectPrefix}HierarchySourceColumn")
    #set ($glHierarchySourceIterator = "${glProjectPrefix}HierarchySourceIterator")
    #set ($glHierarchySourceRow = "${glProjectPrefix}HierarchySourceRow")

    ## [Allcommon-DBMetaHierarchyBasic]
    #set ($glHierarchySourceEntityColumn = "${glProjectPrefix}HierarchySourceEntityColumn")
    #set ($glHierarchySourceEntityListIterator = "${glProjectPrefix}HierarchySourceEntityListIterator")
    #set ($glHierarchySourceEntityRow = "${glProjectPrefix}HierarchySourceEntityRow")
    #set ($glHierarchySourceListIterator = "${glProjectPrefix}HierarchySourceListIterator")
    #set ($glHierarchySourceRowSetupper = "${glProjectPrefix}HierarchySourceRowSetupper")

    ## [Allcommon-DBMetaInfo]
    #set ($glForeignInfo = "${glProjectPrefix}ForeignInfo")
    #set ($glReferrerInfo = "${glProjectPrefix}ReferrerInfo")
    #set ($glRelationInfo = "${glProjectPrefix}RelationInfo")
    #set ($glUniqueInfo = "${glProjectPrefix}UniqueInfo")
    #set ($glColumnInfo = "${glProjectPrefix}ColumnInfo")

    ## [Allcommon-Exception]
    #set ($glBatchEntityAlreadyUpdatedException = "${glProjectPrefix}BatchEntityAlreadyUpdatedException")
    #set ($glBindVariableCommentNotFoundPropertyException = "${glProjectPrefix}BindVariableCommentNotFoundPropertyException")
    #set ($glBindVariableParameterNullValueException = "${glProjectPrefix}BindVariableParameterNullValueException")
    #set ($glDangerousResultSizeExceptionName = "${glProjectPrefix}DangerousResultSizeException")
    #set ($glDangerousResultSizeException = "${glProjectPrefix}DangerousResultSizeException")
    #set ($glDBMetaNotFoundException = "${glProjectPrefix}DBMetaNotFoundException")
    #set ($glEmbeddedValueCommentNotFoundPropertyException = "${glProjectPrefix}EmbeddedValueCommentNotFoundPropertyException")
    #set ($glEmbeddedValueParameterNullValueException = "${glProjectPrefix}EmbeddedValueParameterNullValueException")
    #set ($glEndCommentNotFoundException = "${glProjectPrefix}EndCommentNotFoundException")
    #set ($glEntityAlreadyUpdatedException = "${glProjectPrefix}EntityAlreadyUpdatedException")
    #set ($glEntityAlreadyDeletedException = "${glProjectPrefix}EntityAlreadyDeletedException")
    #set ($glEntityAlreadyExistsException = "${glProjectPrefix}EntityAlreadyExistsException")
    #set ($glEntityDuplicatedException = "${glProjectPrefix}EntityDuplicatedException")
    #set ($glIfCommentConditionNotFoundException = "${glProjectPrefix}IfCommentConditionNotFoundException")
    #set ($glIfCommentNotBooleanResultException = "${glProjectPrefix}IfCommentNotBooleanResultException")
    #set ($glIfCommentWrongExpressionException = "${glProjectPrefix}IfCommentWrongExpressionException")
    #set ($glOutsideSqlNotFoundException = "${glProjectPrefix}OutsideSqlNotFoundException")
    #set ($glRequiredOptionNotFoundException = "${glProjectPrefix}RequiredOptionNotFoundException")
    #set ($glRecordHasOverlappedException = "${glProjectPrefix}RecordHasOverlappedException")
    #set ($glRecordHasAlreadyBeenDeletedException = "${glProjectPrefix}RecordHasAlreadyBeenDeletedException")
    #set ($glSQLFailureException = "${glProjectPrefix}SQLFailureException")

    ## [Allcommon-Helper]
    #set ($glMapListString = "${glProjectPrefix}MapListString")
    #set ($glMapListStringImpl = "${glProjectPrefix}MapListStringImpl")
    #set ($glMapStringBuilder = "${glProjectPrefix}MapStringBuilder")
    #set ($glMapStringBuilderImpl = "${glProjectPrefix}MapStringBuilderImpl")
    #set ($glStringKeyMap = "${glProjectPrefix}StringKeyMap")
    #set ($glStringSet = "${glProjectPrefix}StringSet")

    #set ($glGeneralCharacter = "${glProjectPrefix}GeneralCharacter")
    #set ($glGeneralCharacterImpl = "${glProjectPrefix}GeneralCharacterImpl")

    #set ($glJapaneseCharacter = "${glProjectPrefix}JapaneseCharacter")
    #set ($glJapaneseCharacterImpl = "${glProjectPrefix}JapaneseCharacterImpl")

    #set ($glInvokeNameExtractingResource = "${glProjectPrefix}InvokeNameExtractingResource")
    #set ($glInvokeNameExtractor = "${glProjectPrefix}InvokeNameExtractor")
    #set ($glInvokeNameExtractorImpl = "${glProjectPrefix}InvokeNameExtractorImpl")
    #set ($glInvokeNameResult = "${glProjectPrefix}InvokeNameResult")

    #set ($glLineToken = "${glProjectPrefix}LineToken")
    #set ($glLineTokenImpl = "${glProjectPrefix}LineTokenImpl")
    #set ($glLineTokenizingOption = "${glProjectPrefix}LineTokenizingOption")
    #set ($glLineMakingOption = "${glProjectPrefix}LineMakingOption")

    #set ($glFileToken = "${glProjectPrefix}FileToken")
    #set ($glFileTokenImpl = "${glProjectPrefix}FileTokenImpl")

    #set ($glFileTokenizingOption = "${glProjectPrefix}FileTokenizingOption")
    #set ($glFileTokenizingRowResource = "${glProjectPrefix}FileTokenizingRowResource")
    #set ($glFileTokenizingCallback = "${glProjectPrefix}FileTokenizingCallback")
    #set ($glFileTokenizingHeaderInfo = "${glProjectPrefix}FileTokenizingHeaderInfo")

    #set ($glFileMakingOption = "${glProjectPrefix}FileMakingOption")
    #set ($glFileMakingRowResource = "${glProjectPrefix}FileMakingRowResource")
    #set ($glFileMakingCallback = "${glProjectPrefix}FileMakingCallback")
    #set ($glFileMakingHeaderInfo = "${glProjectPrefix}FileMakingHeaderInfo")
    #set ($glFileMakingSimpleFacade = "${glProjectPrefix}FileMakingSimpleFacade")
    #set ($glFileMakingSimpleFacadeImpl = "${glProjectPrefix}FileMakingSimpleFacadeImpl")

    #set ($glAccordingToOrder = "${glProjectPrefix}AccordingToOrder")
    #set ($glAccordingToOrderOption = "${glProjectPrefix}AccordingToOrderOption")
    #set ($glAccordingToOrderIdExtractor = "${glProjectPrefix}AccordingToOrderIdExtractor")
    #set ($glAccordingToOrderImpl = "${glProjectPrefix}AccordingToOrderImpl")

    ## [Allcommon-JavaLike]
    #set ($glJavaBasic = "${glProjectPrefix}JavaBasic")
    #set ($glJavaCollection = "${glProjectPrefix}JavaCollection")
    #set ($glJavaException = "${glProjectPrefix}JavaException")
    #set ($glJavaReflection = "${glProjectPrefix}JavaReflection")

    ## [Allcommon-JDBC]
    #set ($glCursorHandler = "${glProjectPrefix}CursorHandler")
    #set ($glCursorFetcher = "${glProjectPrefix}CursorFetcher")
    #set ($glLatestSqlProvider = "${glProjectPrefix}LatestSqlProvider")
    #set ($glSqlLogHandler = "${glProjectPrefix}SqlLogHandler")
    #set ($glStatementConfig = "${glProjectPrefix}StatementConfig")

    ## [Allcommon-S2Container]
    #set ($glBehaviorCreator = "${glProjectPrefix}BehaviorCreator")

    ## [Allcommon-S2Dao]
    #set ($glBeanMetaDataFactoryExtension = "${glProjectPrefix}BeanMetaDataFactoryExtension")
    #set ($glFetchNarrowingResultSetFactory = "${glProjectPrefix}FetchNarrowingResultSetFactory")
    #set ($glFetchNarrowingResultSetWrapper = "${glProjectPrefix}FetchNarrowingResultSetWrapper")
    #set ($glPropertyTypeFactoryBuilderExtension = "${glProjectPrefix}PropertyTypeFactoryBuilderExtension")
    #set ($glSqlLogRegistryLatestSqlProvider = "${glProjectPrefix}SqlLogRegistryLatestSqlProvider")
    #set ($glS2DaoSetting = "${glProjectPrefix}S2DaoSetting")
    #set ($glTxSetting = "${glProjectPrefix}TxSetting")

    #set ($glS2DaoInterceptor = "${glProjectPrefix}S2DaoInterceptor")
    #set ($glDaoInterceptor = "${glProjectPrefix}S2DaoInterceptor")
    #set ($glS2DaoMetaDataExtension = "${glProjectPrefix}S2DaoMetaDataExtension")
    #set ($glDaoMetaDataExtension = "${glProjectPrefix}S2DaoMetaDataExtension")
    #set ($glS2DaoMetaDataFactoryImpl = "${glProjectPrefix}S2DaoMetaDataFactoryImpl")
    #set ($glDaoMetaDataFactoryImpl = "${glProjectPrefix}S2DaoMetaDataFactoryImpl")
    #set ($glS2DaoSelectDynamicCommand = "${glProjectPrefix}S2DaoSelectDynamicCommand")
    #set ($glSelectDynamicCommand = "${glProjectPrefix}S2DaoSelectDynamicCommand")
    #set ($glDaoStatementFactory = "${glProjectPrefix}S2DaoStatementFactory")

    ## [Allcommon-S2Dao-Internal]
    #set ($glInternalAbstractBeanMetaDataResultSetHandler = "${glProjectPrefix}InternalAbstractBeanMetaDataResultSetHandler")
    #set ($glInternalAbstractDtoMetaDataResultSetHandler = "${glProjectPrefix}InternalAbstractDtoMetaDataResultSetHandler")
    #set ($glInternalBeanArrayMetaDataResultSetHandler = "${glProjectPrefix}InternalBeanArrayMetaDataResultSetHandler")
    #set ($glInternalBeanListMetaDataResultSetHandler = "${glProjectPrefix}InternalBeanListMetaDataResultSetHandler")
    #set ($glInternalBeanGenericListMetaDataResultSetHandler = "${glProjectPrefix}InternalBeanGenericListMetaDataResultSetHandler")

    #set ($glInternalAbstractAutoStaticCommand = "${glProjectPrefix}InternalAbstractAutoStaticCommand")
    #set ($glInternalAbstractBatchAutoStaticCommand = "${glProjectPrefix}InternalAbstractBatchAutoStaticCommand")
    #set ($glInternalAbstractDynamicCommand = "${glProjectPrefix}InternalAbstractDynamicCommand")
    #set ($glInternalAbstractSqlCommand = "${glProjectPrefix}InternalAbstractSqlCommand")
    #set ($glInternalAbstractStaticCommand = "${glProjectPrefix}InternalAbstractStaticCommand")
    #set ($glInternalDeleteAutoStaticCommand = "${glProjectPrefix}InternalDeleteAutoStaticCommand")
    #set ($glInternalDeleteBatchAutoStaticCommand = "${glProjectPrefix}InternalDeleteBatchAutoStaticCommand")
    #set ($glInternalDeleteQueryAutoDynamicCommand = "${glProjectPrefix}InternalDeleteQueryAutoDynamicCommand")
    #set ($glInternalInsertAutoDynamicCommand = "${glProjectPrefix}InternalInsertAutoDynamicCommand")
    #set ($glInternalInsertBatchAutoStaticCommand = "${glProjectPrefix}InternalInsertBatchAutoStaticCommand")
    #set ($glInternalProcedureCommand = "${glProjectPrefix}InternalProcedureCommand")
    #set ($glInternalUpdateAutoDynamicCommand = "${glProjectPrefix}InternalUpdateAutoDynamicCommand")
    #set ($glInternalUpdateBatchAutoStaticCommand = "${glProjectPrefix}InternalUpdateBatchAutoStaticCommand")
    #set ($glInternalUpdateDynamicCommand = "${glProjectPrefix}InternalUpdateDynamicCommand")
    #set ($glInternalUpdateModifiedOnlyCommand = "${glProjectPrefix}InternalUpdateModifiedOnlyCommand")
    #set ($glInternalUpdateQueryAutoDynamicCommand = "${glProjectPrefix}InternalUpdateQueryAutoDynamicCommand")

    #set ($glInternalAbstractAutoHandler = "${glProjectPrefix}InternalAbstractAutoHandler")
    #set ($glInternalAbstractBatchAutoHandler = "${glProjectPrefix}InternalAbstractBatchAutoHandler")
    #set ($glInternalBasicHandler = "${glProjectPrefix}InternalBasicHandler")
    #set ($glInternalBasicSelectHandler = "${glProjectPrefix}InternalBasicSelectHandler")
    #set ($glInternalBasicUpdateHandler = "${glProjectPrefix}InternalBasicUpdateHandler")
    #set ($glInternalCommandContextHandler = "${glProjectPrefix}InternalCommandContextHandler")
    #set ($glInternalDeleteAutoHandler = "${glProjectPrefix}InternalDeleteAutoHandler")
    #set ($glInternalDeleteBatchAutoHandler = "${glProjectPrefix}InternalDeleteBatchAutoHandler")
    #set ($glInternalInsertAutoHandler = "${glProjectPrefix}InternalInsertAutoHandler")
    #set ($glInternalInsertBatchAutoHandler = "${glProjectPrefix}InternalInsertBatchAutoHandler")
    #set ($glInternalProcedureHandler = "${glProjectPrefix}InternalProcedureHandler")
    #set ($glInternalUpdateAutoHandler = "${glProjectPrefix}InternalUpdateAutoHandler")
    #set ($glInternalUpdateBatchAutoHandler = "${glProjectPrefix}InternalUpdateBatchAutoHandler")
    #set ($glInternalSqlLog = "${glProjectPrefix}InternalSqlLog")
    #set ($glInternalSqlLogRegistry = "${glProjectPrefix}InternalSqlLogRegistry")
    #set ($glInternalSqlLogRegistryLocator = "${glProjectPrefix}InternalSqlLogRegistryLocator")
    #set ($glInternalCommandContextCreator = "${glProjectPrefix}InternalCommandContextCreator")
    #set ($glInternalSqlParser = "${glProjectPrefix}InternalSqlParser")
    #set ($glInternalSqlTokenizer = "${glProjectPrefix}InternalSqlTokenizer")
    #set ($glInternalBindVariableUtil = "${glProjectPrefix}InternalBindVariableUtil")

    ## [Allcommon-S2Dao-Internal-ValueType]
    #set ($glInternalBytesOidType = "${glProjectPrefix}InternalBytesOidType")

    ## [Allcommon-S2Dao-Internal-Various]
    #set ($glInternalIdentifierGeneratorFactory = "${glProjectPrefix}InternalIdentifierGeneratorFactory")
    #set ($glInternalIdentifierAbstractGenerator = "${glProjectPrefix}InternalIdentifierAbstractGenerator")
    #set ($glInternalIdentifierAssignedGenerator = "${glProjectPrefix}InternalIdentifierAssignedGenerator")
    #set ($glInternalIdentifierIdentityGenerator = "${glProjectPrefix}InternalIdentifierIdentityGenerator")
    #set ($glInternalIdentifierSequenceGenerator = "${glProjectPrefix}InternalIdentifierSequenceGenerator")
    #set ($glInternalProcedureMetaData = "${glProjectPrefix}InternalProcedureMetaData")
    #set ($glInternalProcedureMetaDataFactory = "${glProjectPrefix}InternalProcedureMetaDataFactory")
    #set ($glInternalProcedureParameterType = "${glProjectPrefix}InternalProcedureParameterType")
    #set ($glInternalRowCreator = "${glProjectPrefix}InternalRowCreator")
    #set ($glInternalRelationRowCreator = "${glProjectPrefix}InternalRelationRowCreator")
    #set ($glInternalStatementFactory = "${glProjectPrefix}InternalStatementFactory")

    ## [Allcommon-Util]
    #set ($glSimpleAssertUtil = "${glProjectPrefix}SimpleAssertUtil")
    #set ($glSimpleResourceUtil = "${glProjectPrefix}SimpleResourceUtil")
    #set ($glSimpleStringUtil = "${glProjectPrefix}SimpleStringUtil")
    #set ($glSimpleSystemUtil = "${glProjectPrefix}SimpleSystemUtil")
    #set ($glSimpleTypeUtil = "${glProjectPrefix}SimpleTypeUtil")
    #set ($glValueLabelUtil = "${glProjectPrefix}ValueLabelUtil")
    #set ($glTraceViewUtil = "${glProjectPrefix}TraceViewUtil")

    ## ===================================================================================
    ##                                                                            Variable
    ##                                                                            ========
    #set ($glConditionBeanInitialName = "CB")
    #set ($glConditionQueryInitialName = "CQ")
    #set ($glAttachedCBArgsVariableName = "cb")
    #set ($glParentVariablePrefix = "_parent")
    #set ($glChildrenVariablePrefix = "_children")

    ## ===================================================================================
    ##                                                                             Package
    ##                                                                             =======
    #set ($glPackageBaseCommon = "${database.baseCommonPackage}")
    #set ($glPackageBaseBhv = "${database.baseBehaviorPackage}")
    #set ($glPackageBaseDao = "${database.baseDaoPackage}" )
    #set ($glPackageBaseCustomizeDao = "${database.baseDaoPackage}.customize" )
    #set ($glPackageBaseEntity = "${database.baseEntityPackage}")
    #set ($glPackageBaseCustomizeEntity = "${database.baseEntityPackage}.customize" )
    #set ($glPackageExtendedBhv = "${database.extendedBehaviorPackage}")
    #set ($glPackageExtendedDao = "${database.extendedDaoPackage}")
    #set ($glPackageExtendedCustomizeDao = "${database.extendedDaoPackage}.customize" )
    #set ($glPackageExtendedEntity = "${database.extendedEntityPackage}")
    #set ($glPackageExtendedCustomizeEntity = "${database.extendedEntityPackage}.customize" )
    #set ($glPackageBaseCB = "${database.conditionBeanPackage}.bs")
    #set ($glPackageCB = "${database.extendedConditionBeanPackage}")
    #set ($glPackageBaseCQ = "${database.conditionBeanPackage}.cq.bs")
    #set ($glPackageCQ = "${database.extendedConditionBeanPackage}.cq")
    #set ($glPackageCIQ = "${database.conditionBeanPackage}.cq.ciq")
    #set ($glPackageNss = "${database.conditionBeanPackage}.nss")
    #set ($glPackageBaseDBMeta = "${glPackageBaseEntity}.dbmeta")
    #set ($glPackageBaseCustomizeDBMeta = "${glPackageBaseCustomizeEntity}.dbmeta")
    #set ($glPackageBaseSqlParameterBean = "${database.SqlParameterBeanPackage}.bsparam")
    #set ($glPackageExtendedSqlParameterBean = "${database.SqlParameterBeanPackage}.exparam")
    #set ($glPackageArgumentBean = "${database.ArgumentBeanPackage}")

    ## *****************************************************************************************************************
    ##                                                                                                           Parsing
    ##                                                                                                           *******
    ## ===================================================================================
    ##                                                                           AllCommon
    ##                                                                           =========
    $database.info("public void parseAllCommon() {")

    #set ($path = $database.getPackageAsPath(${glPackageBaseCommon}))
    $database.makeDirectory($path)

    #if ($database.isUseBuri())
      $database.info("    parse('BuriDef');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommon})}${glBuriDef}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/BuriDef.${glTemplateFileExtension}",$path ,"" ,"")
    #end

    $database.info("    parse('CacheAbstractSelector');")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommon})}${glCacheAbstractSelector}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/CacheAbstractSelector.${glTemplateFileExtension}",$path ,"", "")

    $database.info("    parse('CacheBehaviorSelector');")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommon})}${glCacheBehaviorSelector}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/CacheBehaviorSelector.${glTemplateFileExtension}",$path ,"", "")

    #if ($database.hasClassificationDefinitionMap())
      $database.info("parseAllcommonClassification() {")

      $database.info("    parse('CDef');")
      #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommon})}${glCDef}.${glClassFileExtension}" )
      $generator.parse("om/${glResourceDirectory}/allcommon/CDef.${glTemplateFileExtension}",$path ,"" ,"")

      $database.info("}")
    #end

    $database.info("    parse('DBCurrent');")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommon})}${glDBCurrent}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/DBCurrent.${glTemplateFileExtension}",$path ,"" ,"")

    $database.info("    parse('DBFluteConfig');")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommon})}${glDBFluteConfig}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/DBFluteConfig.${glTemplateFileExtension}",$path ,"" ,"")

    $database.info("    parse('DBFluteInitializer');")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommon})}${glDBFluteInitializer}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/DBFluteInitializer.${glTemplateFileExtension}",$path,"", "")

    $database.info("    parse('DBMetaInstanceHandler');")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommon})}${glDBMetaInstanceHandler}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/DBMetaInstanceHandler.${glTemplateFileExtension}",$path,"", "")

    $database.info("    parse('EntityDefinedCommonColumn');")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommon})}${glEntityDefinedCommonColumn}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/EntityDefinedCommonColumn.${glTemplateFileExtension}",$path ,"", "")

    #set ($path = $database.getPackageAsPath(${glPackageBaseCommonDBMeta}))
    $database.makeDirectory($path)

    $database.info("    parse('ImplementedCommonColumnAutoSetupper');")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommon})}${glImplementedCommonColumnAutoSetupper}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/ImplementedCommonColumnAutoSetupper.${glTemplateFileExtension}",$path ,"", "")

    $database.info("    parse('ImplementedInvokerAssistant');")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommon})}${glImplementedInvokerAssistant}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/ImplementedInvokerAssistant.${glTemplateFileExtension}",$path,"", "")

    $database.info("parse('ImplementedSqlClauseCreator');")
    #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommon})}${glImplementedSqlClauseCreator}.${glClassFileExtension}" )
    $generator.parse("om/${glResourceDirectory}/allcommon/ImplementedSqlClauseCreator.${glTemplateFileExtension}",$path ,"" ,"")

    $database.info("}")

    ## ===================================================================================
    ##                                                                     ContainerConfig
    ##                                                                     ===============
    $database.info("parseContainerConfig() {")
    #if ($database.isTargetContainerSeasar())
      #if ($database.isAvailableHotDeploy())
        #set ($path = $database.getPackageAsPath(${glPackageBaseCommonS2Container}))
        $database.makeDirectory($path)

        $database.info("    parse('BehaviorCreator');")
        #set ( $path = "${database.getPackageAsPath(${glPackageBaseCommonS2Container})}${glBehaviorCreator}.${glClassFileExtension}" )
        $generator.parse("om/${glResourceDirectory}/allcommon/container/BehaviorCreator.${glTemplateFileExtension}",$path ,"" ,"")

        #foreach ($dbfluteDiconPackageName in $database.DBFluteDiconPackageNameList)
          #set ($path = "${dbfluteDiconPackageName}" )
          $database.makeDirectory($path)

          #set ($path = "${dbfluteDiconPackageName}/${glDBFluteDiconFileName}" )
          $database.info("    ${path}")
          $generator.parse("om/${glResourceDirectory}/allcommon/container/DBFluteHotDeployDicon.${glTemplateFileExtension}", $path, "", "")

          #set ($path = "${dbfluteDiconPackageName}/${glCreatorDiconFileName}" )
          $database.info("    ${path}")
          $generator.parse("om/${glResourceDirectory}/allcommon/container/DBFluteCreatorDicon.${glTemplateFileExtension}", $path, "", "")

          #set ($path = "${dbfluteDiconPackageName}/${glCustomizerDiconFileName}" )
          $database.info("    ${path}")
          $generator.parse("om/${glResourceDirectory}/allcommon/container/DBFluteCustomizerDicon.${glTemplateFileExtension}", $path, "", "")
        #end
      #else
        #foreach ($dbfluteDiconPackageName in $database.DBFluteDiconPackageNameList)
          #set ($path = "${dbfluteDiconPackageName}" )
          $database.makeDirectory($path)

          #set ($path = "${dbfluteDiconPackageName}/${glDBFluteDiconFileName}" )
          $database.info("    ${path}")
          $generator.parse("om/${glResourceDirectory}/allcommon/container/DBFluteNormalDicon.${glTemplateFileExtension}", $path, "", "")
        #end
      #end
    #end
    #if ($database.isTargetContainerSpring())
      #foreach ($dbfluteBeansPackageName in $database.DBFluteBeansPackageNameList)
        #set ($path = "${dbfluteBeansPackageName}" )
        $database.makeDirectory($path)

        #set ($path = "${dbfluteBeansPackageName}/${glDBFluteBeansFileName}" )
        $database.info("    ${path}")
        $generator.parse("om/${glResourceDirectory}/allcommon/container/DBFluteBeans.${glTemplateFileExtension}", $path, "", "")
      #end
    #end
    $database.info("}")

    ## ===================================================================================
    ##                                                                        Table Object
    ##                                                                        ============
    ## for Sql2Entity
    #set ($isSql2Entity = false)

    #set ($path = $database.getPackageAsPath(${glPackageBaseBhv}))
    $database.makeDirectory($path)

    #set ($path = $database.getPackageAsPath(${glPackageBaseEntity}))
    $database.makeDirectory($path)

    #set ($path = $database.getPackageAsPath(${glPackageBaseDBMeta}))
    $database.makeDirectory($path)

    #set ($path = $database.getPackageAsPath(${glPackageBaseCB}))
    $database.makeDirectory($path)

    #set ($path = $database.getPackageAsPath(${glPackageBaseCQ}))
    $database.makeDirectory($path)

    #set ($path = $database.getPackageAsPath(${glPackageCIQ}))
    $database.makeDirectory($path)

    #set ($path = $database.getPackageAsPath(${glPackageCQ}))
    $database.makeDirectory($path)

    #set ($path = $database.getPackageAsPath(${glPackageNss}))
    $database.makeDirectory($path)

    #set ($path = $database.getPackageAsPath(${glPackageCB}))
    $database.makeDirectory($path)

    #set ($path = $database.getPackageAsPath(${glPackageExtendedBhv}))
    $database.makeDirectory($path)

    #set ($path = $database.getPackageAsPath(${glPackageExtendedEntity}))
    $database.makeDirectory($path)

    ##
    ## Delete old table classes.
    ##
    $database.deleteOldTableClass()

    ##
    ## Loop by tables.
    ##
    $database.info("/* * * * * * * * * * * * * * {Table Class}")
    #foreach ($table in $database.tables)
      #if (!$table.isForReferenceOnly())

        $database.info("parseTable('${table.Name}');")
        ##
        ## The name of objects
        ##
        #set ($myExtendedDaoClassName = "${table.extendedDaoClassName}")
        #set ($myExtendedDaoPackageName = "${glPackageExtendedDao}")

        #set ($myBaseDaoClassName = "${table.baseDaoClassName}")
        #set ($myBaseDaoPackageName = "${glPackageBaseDao}")

        #set ($myBaseBhvClassName = "${table.baseBehaviorClassName}")
        #set ($myBaseBhvPackageName = "${glPackageBaseBhv}")
        #set ($myExtendedBhvClassName = "${table.extendedBehaviorClassName}")
        #set ($myExtendedBhvPackageName = "${glPackageExtendedBhv}")

        #set ($myBaseObjectClassName = "${table.baseEntityClassName}")
        #set ($myBaseEntityPackageName = "${glPackageBaseEntity}")

        #set ($myExtendedObjectClassName = "${table.extendedEntityClassName}")
        #set ($myExtendedEntityPackageName = "${glPackageExtendedEntity}")

        #set ($myBaseConditionBeanClassName = "${table.baseConditionBeanClassName}")
        #set ($myConditionBeanClassName = "${table.extendedConditionBeanClassName}")
        #set ($myAbstractBaseConditionQueryClassName = "${table.abstractBaseConditionQueryClassName}")
        #set ($myBaseConditionQueryClassName = "${table.baseConditionQueryClassName}")
        #set ($myConditionQueryClassName = "${table.extendedConditionQueryClassName}")
        #set ($myConditionInlineQueryClassName = "${table.extendedConditionInlineQueryClassName}")
        #set ($myNestSelectSetupperClassName = "${table.nestSelectSetupperClassName}")
        #set ($myNestSelectSetupperTerminalClassName = "${table.nestSelectSetupperTerminalClassName}")

        #set ($myDBMetaClassName = "${table.DBMetaClassName}")
        #set ($myDBMetaPackageName = "${glPackageBaseDBMeta}")

        ##
        ## The variable name
        ##
        #set ($myAttachedCBArgsString = "${glPackageCB}.${myConditionBeanClassName} ${glAttachedCBArgsVariableName}")

        #set ($myEntityVariableName = "${table.uncapitalisedJavaName}")
        #set ($myEntityListVariableName = "${table.uncapitalisedJavaName}List")
        #set ($myCBVariableName = "${table.uncapitalisedJavaName}")
        #set ($myBehaviorVariableName = "${table.uncapitalisedJavaName}Bhv")

        ##
        ## Determination
        ##
        #set ($isExistBehavior = false)
        #set ($isExistBehavior = true)
        #set ($isExistDao = true)
        #set ($isExistConditionBean = true)

        #set ( $path = "${database.getPackageAsPath(${glPackageBaseBhv})}${myBaseBhvClassName}.${glClassFileExtension}" )
        $generator.parse("om/${glResourceDirectory}/bsbhv/BaseBhv.${glTemplateFileExtension}", $path, "table", $table)

        #set ( $path = "${database.getPackageAsPath(${glPackageBaseEntity})}${myBaseObjectClassName}.${glClassFileExtension}" )
        $generator.parse("om/${glResourceDirectory}/bsentity/BaseEntity.${glTemplateFileExtension}", $path, "table", $table)

        #set ( $path = "${database.getPackageAsPath(${glPackageBaseDBMeta})}${myDBMetaClassName}.${glClassFileExtension}" )
        $generator.parse("om/${glResourceDirectory}/bsentity/dbmeta/DBMetaImpl.${glTemplateFileExtension}",$path,"", "")

        #if (!$database.isStopGenerateExtendedBhv())
          #set ( $path = "${database.getPackageAsPath(${glPackageExtendedBhv})}${myExtendedBhvClassName}.${glClassFileExtension}" )
          #if (!$files.file(${generator.OutputPath},$path).exists())
            $generator.parse("om/${glResourceDirectory}/exbhv/ExtendedBhv.${glTemplateFileExtension}", $path, "table", $table)
          #end
        #end

        #if (!$database.isStopGenerateExtendedEntity())
          #set ( $path = "${database.getPackageAsPath(${glPackageExtendedEntity})}${myExtendedObjectClassName}.${glClassFileExtension}" )
          #if (!$files.file(${generator.OutputPath},$path).exists())
            $generator.parse("om/${glResourceDirectory}/exentity/ExtendedEntity.${glTemplateFileExtension}", $path, "table", $table)
          #end
        #end

        #set ( $path = "${database.getPackageAsPath(${glPackageBaseCB})}${myBaseConditionBeanClassName}.${glClassFileExtension}" )
        $generator.parse("om/${glResourceDirectory}/cbean/BsConditionBean.${glTemplateFileExtension}", $path, "table", $table)

        #set ( $path = "${database.getPackageAsPath(${glPackageBaseCQ})}${myAbstractBaseConditionQueryClassName}.${glClassFileExtension}" )
        $generator.parse("om/${glResourceDirectory}/cbean/AbstractBsConditionQuery.${glTemplateFileExtension}", $path, "table", $table)

        #set ( $path = "${database.getPackageAsPath(${glPackageCIQ})}${myConditionInlineQueryClassName}.${glClassFileExtension}" )
        $generator.parse("om/${glResourceDirectory}/cbean/BsConditionInlineQuery.${glTemplateFileExtension}", $path, "table", $table)

        #set ( $path = "${database.getPackageAsPath(${glPackageBaseCQ})}${myBaseConditionQueryClassName}.${glClassFileExtension}" )
        $generator.parse("om/${glResourceDirectory}/cbean/BsConditionQuery.${glTemplateFileExtension}", $path, "table", $table)

        #set ( $path = "${database.getPackageAsPath(${glPackageNss})}${myNestSelectSetupperClassName}.${glClassFileExtension}" )
        $generator.parse("om/${glResourceDirectory}/cbean/NestSelectSetupper.${glTemplateFileExtension}", $path, "table", $table)

        #set ( $path = "${database.getPackageAsPath(${glPackageCB})}${myConditionBeanClassName}.${glClassFileExtension}" )
        #if (!$files.file(${generator.OutputPath},$path).exists())
          $generator.parse("om/${glResourceDirectory}/cbean/ExConditionBean.${glTemplateFileExtension}", $path, "table", $table)
        #end

        #set ( $path = "${database.getPackageAsPath(${glPackageCQ})}${myConditionQueryClassName}.${glClassFileExtension}" )
        #if (!$files.file(${generator.OutputPath},$path).exists())
          $generator.parse("om/${glResourceDirectory}/cbean/ExConditionQuery.${glTemplateFileExtension}", $path, "table", $table)
        #end
      #end
    #end
    $database.info("* * * * * * * * * */")
    $database.info(" ")

    ## ===================================================================================
    ##                                                                          Simple Dto
    ##                                                                          ==========
    #if ($database.hasSimpleDtoDefinition() && $database.isTargetLanguageJava())
      $database.info("parseSimpleDto() {// mapper=$database.isSimpleDtoUseDtoMapper()")
      #set ($myDomainEntityPackageName = "${glPackageExtendedEntity}")
      #set ($myBaseEntityPackageName = "${database.simpleDtoBaseDtoPackage}")
      #set ($myExtendedEntityPackageName = "${database.simpleDtoExtendedDtoPackage}")
      #set ($myDtoMapperPackageName = "${database.simpleDtoDtoMapperPackage}")

      #set ($path = $database.getPackageAsPath(${myBaseEntityPackageName}))
      $database.makeDirectory($path)

      #set ($path = $database.getPackageAsPath(${myExtendedEntityPackageName}))
      $database.makeDirectory($path)

      #if ($database.isSimpleDtoUseDtoMapper())
        #set ($path = $database.getPackageAsPath(${myDtoMapperPackageName}))
        $database.makeDirectory($path)
      #end

      #foreach ($table in $database.tables)
        #set ($myBaseObjectClassName = "${database.simpleDtoBaseDtoPrefix}${table.javaName}${database.simpleDtoBaseDtoSuffix}")
        #set ($myExtendedObjectClassName = "${database.simpleDtoExtendedDtoPrefix}${table.javaName}${database.simpleDtoExtendedDtoSuffix}")
        #set ($myDtoMapperClassName = "${myExtendedObjectClassName}Mapper")

        $database.info("    parse('${myExtendedObjectClassName}');")

        #set ( $path = "${database.getPackageAsPath(${myBaseEntityPackageName})}${myBaseObjectClassName}.${glClassFileExtension}" )
        $generator.parse("om/${glResourceDirectory}/other/simpledto/SimpleDtoBaseEntity.${glTemplateFileExtension}", $path, "table", $table)

        #if (!$database.isStopGenerateExtendedEntity())
          #set ( $path = "${database.getPackageAsPath(${myExtendedEntityPackageName})}${myExtendedObjectClassName}.${glClassFileExtension}" )
          #if (!$files.file(${generator.OutputPath},$path).exists())
            $generator.parse("om/${glResourceDirectory}/other/simpledto/SimpleDtoExtendedEntity.${glTemplateFileExtension}", $path, "table", $table)
          #end
        #end

        #if ($database.isSimpleDtoUseDtoMapper())
          #set ( $path = "${database.getPackageAsPath(${myDtoMapperPackageName})}${myDtoMapperClassName}.${glClassFileExtension}" )
          $generator.parse("om/${glResourceDirectory}/other/simpledto/mapper/SimpleDtoMapper.${glTemplateFileExtension}", $path, "table", $table)
        #end
      #end
      $database.info("}")
    #end

    ## ===================================================================================
    ##                                                                            Flex Dto
    ##                                                                            ========
    #if ($database.hasFlexDtoDefinition() && $database.isTargetLanguageJava())
      $database.enableFlexDtoOutputDirectory()
      $database.info("parseFlexDto() {")
      #set ($myBaseEntityPackageName = "${database.flexDtoBaseDtoPackage}")
      #set ($myExtendedEntityPackageName = "${database.flexDtoExtendedDtoPackage}")

      #set ($path = $database.getPackageAsPath(${myBaseEntityPackageName}))
      $database.makeDirectory($path)

      #set ($path = $database.getPackageAsPath(${myExtendedEntityPackageName}))
      $database.makeDirectory($path)

      #foreach ($table in $database.tables)
        #set ($myBaseObjectClassName = "${database.flexDtoBaseDtoPrefix}${table.javaName}${database.flexDtoBaseDtoSuffix}")
        #set ($myExtendedObjectClassName = "${database.flexDtoExtendedDtoPrefix}${table.javaName}${database.flexDtoExtendedDtoSuffix}")
        #set ($myRemoteSimpleDtoClassName = "${database.simpleDtoExtendedDtoPackage}.${myExtendedObjectClassName}")

        $database.info("    parse('${myExtendedObjectClassName}');")

        #set ( $path = "${database.getPackageAsPath(${myBaseEntityPackageName})}${myBaseObjectClassName}.as" )
        $generator.parse("om/${glResourceDirectory}/other/flexdto/FlexDtoBaseEntity.${glTemplateFileExtension}", $path, "table", $table)

        #if (!$database.isStopGenerateExtendedEntity())
          #set ( $path = "${database.getPackageAsPath(${myExtendedEntityPackageName})}${myExtendedObjectClassName}.as" )
          #if ($database.isFlexDtoOverrideExtended() || !$files.file(${generator.OutputPath},$path).exists())
            $generator.parse("om/${glResourceDirectory}/other/flexdto/FlexDtoExtendedEntity.${glTemplateFileExtension}", $path, "table", $table)
          #end
        #end
      #end
      $database.info("}")
	  $database.enableGenerateOutputDirectory()
    #end

  #end
#end

