#set ($myClassName = "${glCDef}")

using System;

using ${glPackageBaseCommonJavaLike};

namespace ${glPackageBaseCommon} {

    public class ${myClassName} {

#foreach ($classificationName in $database.classificationNameList)
#set ($classificationMapList = $database.classificationDefinitionMap.get($classificationName))
#set ($existTop = false)
#if ($database.classificationTopDefinitionMap.containsKey($classificationName))
  #set ($classificationTopMap = $database.classificationTopDefinitionMap.get($classificationName))
  #set ($existTop = true)
#else
  #set ($existTop = false)
#end
#if ($database.isInitNumber($classificationName))
        // The classification name that its initial character is number is unsupported!
        // public enum ${classificationName} {
        // }

#else
#if ($existTop && $classificationTopMap.containsKey('topComment'))
        /**
         * $classificationTopMap.get('topComment')
         */
#end
        public class ${classificationName} {
#foreach ($classificationMap in $classificationMapList)
            /** $database.buildClassificationApplicationComment($classificationMap) */
            public static readonly ${classificationName} ${classificationMap.get('name')} = new ${classificationName}($database.buildClassificationCodeAliasVariables($classificationMap));

#end
            private static readonly Map<String, ${classificationName}> _codeValueMap = new HashMap<String, ${classificationName}>();
            static ${classificationName}() {
                foreach (${classificationName} value in values()) { _codeValueMap.put(value.Code.ToLower(), value); }
            }
            protected String _alias;
            public ${classificationName}(String code, String alias) {
                _code = code;
                _alias = alias;
            }
            public String Code { get { return _code; } }
            public String Alias { get { return _alias; } }
            public static ${classificationName} CodeOf(Object code) {
                if (code == null) { return null; } return _codeValueMap.get(code.ToString().ToLower());
            }
        }

#end
#end
    }

}