#set ($myClassName = "${glBehaviorWritableAbstractName}")

using System;
using System.Collections;

using ${glPackageBaseCommon};
using ${glPackageBaseCommonCBean};
using ${glPackageBaseCommonHelper};

namespace ${glPackageBaseCommonBhv} {

    /**
     * The abstract class of behavior-writable.
     * 
     * @author ${database.ClassAuthor}
     */
    public abstract class $myClassName : ${glBehaviorReadableAbstractName}, ${glBehaviorWritableInterfaceName} {

        /// <sumarry>Log-instance.</sumarry>
        private static readonly log4net.ILog _log = log4net.LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);

        // =====================================================================================
        //                                                                           Constructor
        //                                                                           ===========
        #region Constructor
        /**
         * Constructor.
         */
        public ${myClassName}() {
        }
        #endregion

        // =====================================================================================
        //                                                                       Self Dispatcher
        //                                                                       ===============
        #region Self Dispatcher
        /// <summary>
        /// Behavior's self dispatcher as writable
        /// </summary>
        /// <returns>${glBehaviorWritableInterfaceName}</returns>
        abstract protected ${glBehaviorWritableInterfaceName} SelfWritable { get; }
        #endregion

        // =====================================================================================
        //                                                                          Dao Accessor
        //                                                                          ============
        #region Dao Getter
        /**
         * ${database.ImplementComment}
         * 
         * @return Dao-writable. (NotNull)
         */
        abstract public ${glDaoWritableInterfaceName} GetDaoWritable();
        #endregion

        // =====================================================================================
        //                                                                       Delegate Method
        //                                                                       ===============
        #region Delegate-Method

        /**
         * ${database.ImplementComment}
         * 
         * @param entity Entity that the type is entity-interface. (NotNull)
         * @return Inserted count.
         */
        int ${glBehaviorWritableInterfaceName}.CallCreate(${glEntityInterfaceName} entity) {
            AssertEntityNotNull(entity);
            FilterEntityOfInsert(entity);
            AssertEntityOfInsert(entity);
            return DoCallCreate(entity);
        }

        /// <summary>
        /// Filter the entity of insert.
        /// </summary>
        /// <param name="targetEntity">Entity. (NotNull)</param>
        protected virtual void FilterEntityOfInsert(${glPackageBaseCommon}.${glEntityInterfaceName} targetEntity) {
#if ($database.isCommonColumnInterceptingOnBehaviorFilter())
            if (!IsEntityDefinedCommonColumn(targetEntity)) {
                return;
            }
            ${glPackageBaseCommon}.${glEntityDefinedCommonColumnInterfaceName} entity = (${glPackageBaseCommon}.${glEntityDefinedCommonColumnInterfaceName})targetEntity;
            if (_log.IsDebugEnabled) {
                _log.Debug("...Filtering entity of INSERT about the column columns of " + this.TableDbName);
            }
#foreach ($columnName in ${database.CommonColumnNameList})
  #set ($entityCommonColumnMap = ${database.CommonColumnMap})
  #set ($columnType = ${entityCommonColumnMap.get(${columnName})})
  #set ($javaNative = ${database.convertJavaNativeByJdbcType(${columnType})})
  #set ($javaName = ${database.convertJavaNameByJdbcNameAsColumn(${columnName})})
  #set ($uncapitalisedJavaName = ${database.convertUncapitalisedJavaNameByJdbcNameAsColumn(${columnName})})
  #if (${database.containsValidColumnNameKeyCommonColumnSetupBeforeInsertInterceptorLogicMap(${columnName})})
    #set ($logic = ${database.getCommonColumnSetupBeforeInsertInterceptorLogicByColumnName(${columnName})})
    #if ($database.isCommonColumnSetupInvokingLogic($logic))
      #set ($filteredLogic = $database.removeCommonColumnSetupInvokingMark($logic))

            ${filteredLogic}
            if (_log.IsDebugEnabled) {
                _log.Debug("  CommonColumnSetup - ${columnName} has been set up: invoking=${filteredLogic}");
            }
    #else

            ${javaNative} ${uncapitalisedJavaName} = ${logic};
            entity.${javaName} = ${uncapitalisedJavaName};
            if (_log.IsDebugEnabled) {
                _log.Debug("  CommonColumnSetup - ${columnName} has been set up: value=" + ${uncapitalisedJavaName});
            }
    #end
  #end
#end
#end

        }

        /// <summary>
        /// Assert the entity of insert.
        /// </summary>
        /// <param name="entity">Entity. (NotNull)</param>
        protected virtual void AssertEntityOfInsert(${glPackageBaseCommon}.${glEntityInterfaceName} entity) {
        }

        abstract protected int DoCallCreate(${glEntityInterfaceName} entity);

        /**
         * ${database.ImplementComment}
         * 
         * @param entity Entity that the type is entity-interface. (NotNull)
         * @return Updated count.
         */
        int ${glBehaviorWritableInterfaceName}.CallModify(${glEntityInterfaceName} entity) {
            AssertEntityNotNull(entity);
            FilterEntityOfUpdate(entity);
            AssertEntityOfUpdate(entity);
            return DoCallModify(entity);
        }

        /// <summary>
        /// Filter the entity of update.
        /// </summary>
        /// <param name="targetEntity">Entity. (NotNull)</param>
        protected virtual void FilterEntityOfUpdate(${glPackageBaseCommon}.${glEntityInterfaceName} targetEntity) {
#if ($database.isCommonColumnInterceptingOnBehaviorFilter())
            if (!IsEntityDefinedCommonColumn(targetEntity)) {
                return;
            }
            ${glPackageBaseCommon}.${glEntityDefinedCommonColumnInterfaceName} entity = (${glPackageBaseCommon}.${glEntityDefinedCommonColumnInterfaceName})targetEntity;
            if (_log.IsDebugEnabled) {
                _log.Debug("...Filtering entity of UPDATE about the column columns of " + this.TableDbName);
            }
#foreach ($columnName in ${database.CommonColumnNameList})
  #set ($entityCommonColumnMap = ${database.CommonColumnMap})
  #set ($columnType = ${entityCommonColumnMap.get(${columnName})})
  #set ($javaNative = ${database.convertJavaNativeByJdbcType(${columnType})})
  #set ($javaName = ${database.convertJavaNameByJdbcNameAsColumn(${columnName})})
  #set ($uncapitalisedJavaName = ${database.convertUncapitalisedJavaNameByJdbcNameAsColumn(${columnName})})
  #if (${database.containsValidColumnNameKeyCommonColumnSetupBeforeUpdateInterceptorLogicMap(${columnName})})
    #set ($logic = ${database.getCommonColumnSetupBeforeUpdateInterceptorLogicByColumnName(${columnName})})
    #if ($database.isCommonColumnSetupInvokingLogic($logic))
      #set ($filteredLogic = $database.removeCommonColumnSetupInvokingMark($logic))

            ${filteredLogic}
            if (_log.IsDebugEnabled) {
                _log.Debug("  CommonColumnSetup - ${columnName} has been set up: invoking=${filteredLogic}");
            }
    #else

            ${javaNative} ${uncapitalisedJavaName} = ${logic};
            entity.${javaName} = ${uncapitalisedJavaName};
            if (_log.IsDebugEnabled) {
                _log.Debug("  CommonColumnSetup - ${columnName} has been set up: value=" + ${uncapitalisedJavaName});
            }
    #end
  #end
#end
#end

        }

        /// <summary>
        /// Assert the entity of update.
        /// </summary>
        /// <param name="entity">Entity. (NotNull)</param>
        protected virtual void AssertEntityOfUpdate(${glPackageBaseCommon}.${glEntityInterfaceName} entity) {
        }

        abstract protected int DoCallModify(${glEntityInterfaceName} entity);

        /**
         * ${database.ImplementComment}
         * 
         * @param entity Entity that the type is entity-interface. (NotNull)
         * @return Deleted count.
         */
        int ${glBehaviorWritableInterfaceName}.CallRemove(${glEntityInterfaceName} entity) {
            AssertEntityNotNull(entity);
            FilterEntityOfDelete(entity);
            AssertEntityOfDelete(entity);
            return DoCallRemove(entity);
        }

        /// <summary>
        /// Filter the entity of delete.
        /// </summary>
        /// <param name="targetEntity">Entity. (NotNull)</param>
        protected virtual void FilterEntityOfDelete(${glPackageBaseCommon}.${glEntityInterfaceName} targetEntity) {
#if ($database.isCommonColumnInterceptingOnBehaviorFilter())
            if (!IsEntityDefinedCommonColumn(targetEntity)) {
                return;
            }
            ${glPackageBaseCommon}.${glEntityDefinedCommonColumnInterfaceName} entity = (${glPackageBaseCommon}.${glEntityDefinedCommonColumnInterfaceName})targetEntity;
            if (_log.IsDebugEnabled) {
                _log.Debug("...Filtering entity of DELETE about the column columns of " + this.TableDbName);
            }
#foreach ($columnName in ${database.CommonColumnNameList})
  #set ($entityCommonColumnMap = ${database.CommonColumnMap})
  #set ($columnType = ${entityCommonColumnMap.get(${columnName})})
  #set ($javaNative = ${database.convertJavaNativeByJdbcType(${columnType})})
  #set ($javaName = ${database.convertJavaNameByJdbcNameAsColumn(${columnName})})
  #set ($uncapitalisedJavaName = ${database.convertUncapitalisedJavaNameByJdbcNameAsColumn(${columnName})})
  #if (${database.containsValidColumnNameKeyCommonColumnSetupBeforeDeleteInterceptorLogicMap(${columnName})})
    #set ($logic = ${database.getCommonColumnSetupBeforeDeleteInterceptorLogicByColumnName(${columnName})})
    #if ($database.isCommonColumnSetupInvokingLogic($logic))
      #set ($filteredLogic = $database.removeCommonColumnSetupInvokingMark($logic))

            ${filteredLogic}
            if (_log.IsDebugEnabled) {
                _log.Debug("    ${columnName} has been set up: invoking=${filteredLogic}");
            }
    #else

            ${javaNative} ${uncapitalisedJavaName} = ${logic};
            entity.${javaName} = ${uncapitalisedJavaName};
            if (_log.IsDebugEnabled) {
                _log.Debug("    ${columnName} has been set up: value=" + ${uncapitalisedJavaName});
            }
    #end
  #end
#end
#end

        }

        /// <summary>
        /// Assert the entity of delete.
        /// </summary>
        /// <param name="entity">Entity. (NotNull)</param>
        protected virtual void AssertEntityOfDelete(${glPackageBaseCommon}.${glEntityInterfaceName} entity) {
        }

        abstract protected int DoCallRemove(${glEntityInterfaceName} entity);

        /// <sumarry>
        /// Is the object entity defined common column?
        /// </sumarry>
        /// <param name="obj">Object. If the object is null, returns false. (Nullable)</param>
        /// <returns>Determination.</returns>
        protected bool IsEntityDefinedCommonColumn(Object obj) {
            if (obj == null) {
                return false;
            }
            if (obj is ${glEntityDefinedCommonColumnInterfaceName}) {
                return true;
            } else {
                return false;
            }
        }
        #endregion

        // =====================================================================================
        //                                                                   Basic Entity Update
        //                                                                   ===================
        #region Basic Entity Update
        /// <summary>
        /// Create.
        /// </summary>
        /// <param name="entity"> Entity. (NotNull)</param>
        public void Create(${glPackageBaseCommon}.${glEntityInterfaceName} entity) {
            AssertEntityNotNull(entity);
            this.SelfWritable.CallCreate(entity);
        }

        /// <summary>
        /// Modify.
        /// </summary>
        /// <param name="entity"> Entity. (NotNull)</param>
        public void Modify(${glPackageBaseCommon}.${glEntityInterfaceName} entity) {
            AssertEntityNotNull(entity);
            int modifiedCount = this.SelfWritable.CallModify(entity);
            if (modifiedCount != 1) {
                throw new Seasar.Dao.NotSingleRowUpdatedRuntimeException(entity, modifiedCount);
            }
        }

        /**
         * ${database.ImplementComment}
         * 
         * @param entity Entity.
         * @exception ${glPackageBaseCommonException}.${glRecordHasAlreadyBeenDeletedException}
         */
        public void ModifyAfterSelect(${glPackageBaseCommon}.${glEntityInterfaceName} entity) {
            AssertEntityNotNullAndHasPrimaryKeyValue(entity);
            ${glConditionBeanInterfaceName} ${glAttachedCBArgsVariableName} = this.DBMeta.NewConditionBean();
            ${glAttachedCBArgsVariableName}.AcceptPrimaryKeyMapString(entity.ExtractPrimaryKeyMapString());
            ${glPackageBaseCommon}.${glEntityInterfaceName} currentEntity = this.SelfReadable.ReadEntity(${glAttachedCBArgsVariableName});
            AssertRecordHasNotBeenDeleted(currentEntity, entity.ExtractPrimaryKeyMapString());
            MergeEntity(entity, currentEntity);
            this.SelfWritable.Modify(currentEntity);
        }

        /// <summary>
        /// ${database.ImplementComment}
        /// </summary>
        /// <param name="entity">Entity. This must contain primary-key value at least. (NotNull)</param>
        /// <exception cref="${glPackageBaseCommonException}.${glRecordHasAlreadyBeenDeletedException}"></exception>
        public void CreateOrModifyAfterSelect(${glPackageBaseCommon}.${glEntityInterfaceName} entity) {
            AssertEntityNotNull(entity);
            if (!entity.HasPrimaryKeyValue) {
                this.SelfWritable.Create(entity);
                return;
            }
            ${glPackageBaseCommon}.${glEntityInterfaceName} currentEntity = null;
            try {
                ${glConditionBeanInterfaceName} cb = NewConditionBean();
                cb.AcceptPrimaryKeyMapString(entity.ExtractPrimaryKeyMapString());
                currentEntity = ReadEntityWithDeletedCheck(cb);
            } catch (${glPackageBaseCommonException}.${glRecordHasAlreadyBeenDeletedException}) {
                this.SelfWritable.Create(entity);
                return;
            }
            AssertEntityNotNullAndHasPrimaryKeyValue(entity);
            MergeEntity(entity, currentEntity);
            this.SelfWritable.Modify(currentEntity);
        }

        /**
         * Merge entity.
         * Copy the column data of sourceEntity that the setter has been invoked to destinationEntity.
         * 
         * @param sourceEntity Source entity.
         * @param destinationEntity Destination entity.
         */
        abstract protected void MergeEntity(${glPackageBaseCommon}.${glEntityInterfaceName} sourceEntity, ${glPackageBaseCommon}.${glEntityInterfaceName} destinationEntity);

        /// <summary>
        /// Remove.
        /// </summary>
        /// <param name="entity"> Entity. (NotNull)</param>
        public void Remove(${glPackageBaseCommon}.${glEntityInterfaceName} entity) {
            AssertEntityNotNull(entity);
            this.SelfWritable.CallRemove(entity);
        }
        #endregion

        // =====================================================================================
        //                                                                        Various Insert
        //                                                                        ==============
        #region Various Insert
        /// <summary>
        /// Filter copy-insert entity.
        /// </summary>
        /// <param name="entity">Entity. (NotNull)</param>
        protected virtual void FilterCopyInsertEntity(${glPackageBaseCommon}.${glEntityInterfaceName} entity) {
            // Nothing.
        }
        #endregion
    }
}
