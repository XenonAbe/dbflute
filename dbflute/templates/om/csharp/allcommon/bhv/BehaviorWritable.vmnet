
using System;
using System.Collections;

using ${glPackageBaseCommon};

namespace ${glPackageBaseCommonBhv} {

    /**
     * The interface of behavior-writable.
     * 
     * @author ${database.ClassAuthor}
     */
    public interface ${glBehaviorWritableInterfaceName} : ${glBehaviorReadableInterfaceName} {

        /**
         * Get dao-writable.
         * 
         * @return Dao-writable. (NotNull)
         */
        ${glDaoWritableInterfaceName} GetDaoWritable();

        /**
         * Create entity. (Call-Method)
         * 
         * @param entity Entity that the type is entity-interface. (NotNull)
         * @return Inserted count.
         */
        int CallCreate(${glEntityInterfaceName} entity);

        /**
         * Modify entity. (Call-Method)
         * 
         * @param entity Entity that the type is entity-interface. (NotNull)
         * @return Updated count.
         */
        int CallModify(${glEntityInterfaceName} entity);

        /**
         * Remove entity. (Call-Method)
         * 
         * @param entity Entity that the type is entity-interface. (NotNull)
         * @return Deleted count.
         */
        int CallRemove(${glEntityInterfaceName} entity);

#if ($database.isMakeDeprecated())

        /**
         * Create entity. (Delegate-Method)
         * 
         * @param entity Entity that the type is entity-interface. (NotNull)
         * @return Inserted count.
         */
        [Obsolete("This method is deprecated. Please use CallCreate()")]
        int DelegateCreate(${glEntityInterfaceName} entity);

        /**
         * Modify entity. (Delegate-Method)
         * 
         * @param entity Entity that the type is entity-interface. (NotNull)
         * @return Updated count.
         */
        [Obsolete("This method is deprecated. Please use CallModify()")]
        int DelegateModify(${glEntityInterfaceName} entity);

        /**
         * Remove entity. (Delegate-Method)
         * 
         * @param entity Entity that the type is entity-interface. (NotNull)
         * @return Deleted count.
         */
        [Obsolete("This method is deprecated. Please use CallRemove()")]
        int DelegateRemove(${glEntityInterfaceName} entity);
#end

        // =====================================================================================
        //                                                                   Basic Entity Update
        //                                                                   ===================
        #region Basic Entity Update
        /// <summary>
        /// Create.
        /// </summary>
        /// <param name="entity"> Entity. (NotNull)</param>
        void Create(${glPackageBaseCommon}.${glEntityInterfaceName} entity);

        /// <summary>
        /// Modify.
        /// </summary>
        /// <param name="entity"> Entity. (NotNull)</param>
        void Modify(${glPackageBaseCommon}.${glEntityInterfaceName} entity);

        /**
        /// Modify after select.
         * 
         * @param entity Entity.
         * @return Updated count.
         * @exception ${glPackageBaseCommonException}.${glRecordHasAlreadyBeenDeletedException}
         */
        void ModifyAfterSelect(${glPackageBaseCommon}.${glEntityInterfaceName} entity);

        /// <summary>
        /// Create or modify after select.
        /// </summary>
        /// <param name="entity">Entity. This must contain primary-key value at least. (NotNull)</param>
        /// <exception cref="${glPackageBaseCommonException}.${glRecordHasAlreadyBeenDeletedException}"></exception>
        void CreateOrModifyAfterSelect(${glPackageBaseCommon}.${glEntityInterfaceName} entity);
#if ($database.isMakeBehaviorForUpdate())

        /// <summary>
        /// Modify after select-for-update.
        /// </summary>
        /// <param name="entity">Entity.</param>
        /// <exception cref="MspadminBiz.Dao.Allcommon.exception.RecordHasAlreadyBeenDeletedException"></exception>
        void ModifyAfterSelectForUpdate(${glPackageBaseCommon}.${glEntityInterfaceName} entity);

        /// <summary>
        /// Create or modify after select-for-update.
        /// </summary>
        /// <param name="entity">Entity. This must contain primary-key value at least. (NotNull)</param>
        void CreateOrModifyAfterSelectForUpdate(${glPackageBaseCommon}.${glEntityInterfaceName} entity);
#end

        /// <summary>
        /// Remove.
        /// </summary>
        /// <param name="entity"> Entity. (NotNull)</param>
        void Remove(${glPackageBaseCommon}.${glEntityInterfaceName} entity);

        /// <summary>
        /// Reflect(insert or update) from separated-file.
        /// </summary>
        /// <param name="filename">Name of the file. (NotNull and NotEmpty)</param>
        /// <param name="encoding">Encoding of the file. (NotNull and NotEmpty)</param>
        /// <param name="delimiter">Delimiter of the file. (NotNull and NotEmpty)</param>
        /// <param name="batchCount">Batch-count for transaction.</param>
        /// <param name="isErrorContinue">If true, this method continue in spite of throwing the exception.</param>
        /// <returns>The list of InsertOrUpdateExceptionResult. (NotNull)</returns>
        /// <exception cref="FileNotFoundException"></exception>
        /// <exception cref="IOException"></exception>
        System.Collections.Generic.IList<OneEntityExceptionResult> ReflectFromSeparatedFile(
            String filename, String encoding, String delimiter, 
            int batchCount, bool isErrorContinue);

        #endregion
    }


    /// <summary>
    /// Exception result for one entity. 
    /// </summary>
    public class OneEntityExceptionResult {
        protected String _primaryKeyMapString;
        protected ${glEntityInterfaceName} _entity;
        protected Exception _exception;

        public String PrimaryKeyMapString{
            get { return _primaryKeyMapString; }
            set { _primaryKeyMapString = value; }
        }
        
        public ${glEntityInterfaceName} Entity{
            get { return _entity; }
            set { _entity = value; }
        }
        
        public Exception Exception{
            get { return _exception; }
            set { _exception = value; }
        }
    }
}
