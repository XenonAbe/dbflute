
#set ($myClassName = "${glDBMetaAbstractName}")

using System;
using System.Reflection;
using System.Text;
using System.Collections.Generic;

using ${glPackageBaseCommon};
using ${glPackageBaseCommonCBean};
using ${glPackageBaseCommonDBMetaInfo};

namespace ${glPackageBaseCommonDBMeta} {

    /// <summary>
    /// The abstract class of dbmeta.
    /// Author : ${database.ClassAuthor}
    /// </summary>
    public abstract class ${myClassName} : ${glDBMetaInterfaceName} {

        // ===============================================================================
        //                                                                      Table Name
        //                                                                      ==========
        public abstract String TableDbName { get; }
        public abstract String TablePropertyName { get; }

        // ===============================================================================
        //                                                                   Name Handling
        //                                                                   =============
        public bool HasFlexibleName(String flexibleName) {
            String key = flexibleName.ToLower();
            if (DbNamePropertyNameKeyToLowerMap.ContainsKey(key)) {
                return true;
            }
            if (PropertyNameDbNameKeyToLowerMap.ContainsKey(key)) {
                return true;
            }
            return false;
        }

        public String FindDbName(String flexibleName) {
            String key = flexibleName.ToLower();
            if (PropertyNameDbNameKeyToLowerMap.ContainsKey(key)) {
                return PropertyNameDbNameKeyToLowerMap[key];
            }
            if (DbNamePropertyNameKeyToLowerMap.ContainsKey(key)) {
                String dbNameKeyToLower = DbNamePropertyNameKeyToLowerMap[key].ToLower();
                if (PropertyNameDbNameKeyToLowerMap.ContainsKey(dbNameKeyToLower)) {
                    return PropertyNameDbNameKeyToLowerMap[dbNameKeyToLower];
                }
            }
            String msg = "Not found object by the flexible name: flexibleName=" + flexibleName;
            throw new SystemException(msg);
        }

        public String FindPropertyName(String flexibleName) {
            String key = flexibleName.ToLower();
            if (DbNamePropertyNameKeyToLowerMap.ContainsKey(key)) {
                return DbNamePropertyNameKeyToLowerMap[key];
            }
            if (PropertyNameDbNameKeyToLowerMap.ContainsKey(key)) {
                String dbNameToLower = PropertyNameDbNameKeyToLowerMap[key].ToLower();
                if (DbNamePropertyNameKeyToLowerMap.ContainsKey(dbNameToLower)) {
                    return DbNamePropertyNameKeyToLowerMap[dbNameToLower];
                }
            }
            String msg = "Not found object by the flexible name: flexibleName=" + flexibleName;
            throw new SystemException(msg);
        }

        // ===============================================================================
        //                                                                        Name Map
        //                                                                        ========
        public abstract IDictionary<String, String> DbNamePropertyNameKeyToLowerMap { get; }
        public abstract IDictionary<String, String> PropertyNameDbNameKeyToLowerMap { get; }

        // ===============================================================================
        //                                                                       Type Name
        //                                                                       =========
        public abstract String EntityTypeName { get; }
        public abstract String DaoTypeName { get; }
        public abstract String ConditionBeanTypeName { get; }
        public abstract String BehaviorTypeName { get; }

        // ===============================================================================
        //                                                                     Object Type
        //                                                                     ===========
        public abstract Type EntityType { get; }
        public abstract Type DaoType { get; }
        public abstract Type ConditionBeanType { get; }
        // TODO: @jflute
        // public abstract Type BehaviorType { get; }

        // ===============================================================================
        //                                                                 Object Instance
        //                                                                 ===============
        public abstract ${glEntityInterfaceName} NewEntity();
        public abstract ${glConditionBeanInterfaceName} NewConditionBean();

        // ===============================================================================
        //                                                                     Column Info
        //                                                                     ===========
        public abstract IList<${glColumnInfoName}> GetColumnInfoList();

        public bool HasColumn(String columnFlexibleName) {
            if (!HasFlexibleName(columnFlexibleName)) {
                return false;
            }
            String propertyName = FindPropertyName(columnFlexibleName);
            return HasProperty("Column" + InitCap(propertyName));
        }

        public ${glColumnInfoName} FindColumnInfo(String columnFlexibleName) {
            AssertStringNotNullAndNotTrimmedEmpty("columnFlexibleName", columnFlexibleName);
            if (!HasColumn(columnFlexibleName)) {
                String msg = "Not found column by columnFlexibleName: " + columnFlexibleName;
                msg = msg + " tableName=" + TableDbName;
                throw new SystemException(msg);
            }
            String propertyName = "Column" + InitCap(FindPropertyName(columnFlexibleName));
            PropertyInfo propertyInfo = GetType().GetProperty(propertyName);
            return (${glColumnInfoName})propertyInfo.GetValue(propertyInfo, null);
        }

        // ===============================================================================
        //                                                                     Unique Info
        //                                                                     ===========
        /**
         * Get primary unique info.
         * 
         * @return Primary unique info. (NotNull)
         */
        public abstract ${glUniqueInfoName} GetPrimaryUniqueInfo();
        public abstract bool HasPrimaryKey { get; }
        public abstract bool HasTwoOrMorePrimaryKeys { get; }

        // ===============================================================================
        //                                                                   Relation Info
        //                                                                   =============
        public ${glRelationInfoName} FindRelationInfo(String relationPropertyName) {
            AssertStringNotNullAndNotTrimmedEmpty("relationPropertyName", relationPropertyName);
            return HasForeign(relationPropertyName) ? (${glRelationInfoName})FindForeignInfo(relationPropertyName) : (${glRelationInfoName})FindRefererInfo(relationPropertyName);
        }

        // -------------------------------------------------
        //                                   Foreign Element
        //                                   ---------------
        public bool HasForeign(String foreignPropertyName) {
            AssertStringNotNullAndNotTrimmedEmpty("foreignPropertyName", foreignPropertyName);
            String propertyName = BuildRelationInfoGetterMethodNameInitCap("Foreign", foreignPropertyName);
            return HasProperty(propertyName);
        }

        public ${glDBMetaInterfaceName} FindForeignDBMeta(String foreignPropertyName) {
            return FindForeignInfo(foreignPropertyName).ForeignDBMeta;
        }

        public ${glPackageBaseCommonDBMetaInfo}.${glForeignInfoName} FindForeignInfo(String foreignPropertyName) {
            AssertStringNotNullAndNotTrimmedEmpty("foreignPropertyName", foreignPropertyName);
            String propertyName = BuildRelationInfoGetterMethodNameInitCap("Foreign", foreignPropertyName);
            PropertyInfo propertyInfo = GetType().GetProperty(propertyName);
            // TODO: @jflute -- Null Check
            return (${glForeignInfoName})propertyInfo.GetValue(propertyInfo, null);
        }

        // -------------------------------------------------
        //                                   Referer Element
        //                                   ---------------
        public bool HasReferer(String refererPropertyName) {
            AssertStringNotNullAndNotTrimmedEmpty("refererPropertyName", refererPropertyName);
            String propertyName = BuildRelationInfoGetterMethodNameInitCap("Referer", refererPropertyName);
            return HasProperty(propertyName);
        }

        public ${glDBMetaInterfaceName} FindRefererDBMeta(String refererPropertyName) {
            AssertStringNotNullAndNotTrimmedEmpty("refererPropertyName", refererPropertyName);
            return FindRefererInfo(refererPropertyName).RefererDBMeta;
        }

        public ${glRefererInfoName} FindRefererInfo(String refererPropertyName) {
            AssertStringNotNullAndNotTrimmedEmpty("refererPropertyName", refererPropertyName);
            String propertyName = BuildRelationInfoGetterMethodNameInitCap("Referer", refererPropertyName);
            PropertyInfo propertyInfo = GetType().GetProperty(propertyName);
            // TODO: @jflute -- Null Check
            return (${glRefererInfoName})propertyInfo.GetValue(propertyInfo, null);
        }

        // -------------------------------------------------
        //                                     Common Helper
        //                                     -------------
        protected static String BuildRelationInfoGetterMethodNameInitCap(String targetName, String relationPropertyName) {
            return targetName + relationPropertyName.Substring(0, 1).ToUpper() + relationPropertyName.Substring(1);
        }

        // ===============================================================================
        //                                                                   Sequence Info
        //                                                                   =============
        public abstract bool HasSequence { get; }

        // ===============================================================================
        //                                                            Optimistic Lock Info
        //                                                            ====================
        public abstract bool HasVersionNo { get; }
        public abstract bool HasUpdateDate { get; }

        // ===============================================================================
        //                                                              Common Column Info
        //                                                              ==================
        public abstract bool HasCommonColumn { get; }

        // =====================================================================================
        //                                                                 Entity Property Setup
        //                                                                 =====================
        public abstract bool SetupEntityProperty(String propertyName, Object entity, Object value);

        // ===============================================================================
        //                                                                          Helper
        //                                                                          ======
//        protected abstract void checkDowncast(${glEntityInterfaceName} entity);
// 
//        protected String helpGettingColumnStringValue(Object value) {
//            if (value instanceof java.sql.Timestamp) {
//                return (value != null ? helpFormatingTimestamp((java.sql.Timestamp)value) : "");
//            } else if (value instanceof java.util.Date) {
//                return (value != null ? helpFormatingDate((java.util.Date)value) : "");
//            } else {
//                return (value != null ? value.toString() : "");
//            }
//        }

//        protected String helpFormatingDate(java.util.Date date) {
//            return MapStringUtil.formatDate(date);
//        }

//        protected String helpFormatingTimestamp(java.sql.Timestamp timestamp) {
//            return MapStringUtil.formatTimestamp(timestamp);
//        }

        protected bool HasProperty(String propertyName) {
            AssertStringNotNullAndNotTrimmedEmpty("propertyName", propertyName);
            PropertyInfo propertyInfo = this.GetType().GetProperty(propertyName);
            return propertyInfo != null;
        }

        protected static String InitCap(String str) {
            return str.Substring(0, 1).ToUpper() + str.Substring(1);
        }

        // ----------------------------------------------------------------
        //                                                    Assert Object
        //                                                    -------------
        #region Assert Object
        protected static void AssertObjectNotNull(String variableName, Object arg) {
            if (variableName == null) {
                String msg = "Argument[variableName] should not be null.";
                throw new ArgumentNullException(msg);
            }
            if (arg == null) {
                String msg = "Argument[" + variableName + "] should not be null.";
                throw new ArgumentNullException(msg);
            }
        }
        #endregion

        // ----------------------------------------------------------------
        //                                                    Assert String
        //                                                    -------------
        #region Assert Argument
        protected static void AssertStringNotNullAndNotTrimmedEmpty(String variableName, String value) {
            if (variableName == null) {
                String msg = "Variable[variableName] should not be null.";
                throw new ArgumentNullException(msg);
            }
            if (value == null) {
                String msg = "Variable[" + variableName + "] should not be null.";
                throw new ArgumentNullException(msg);
            }
            if (value.Trim().Length == 0) {
                String msg = "Variable[" + variableName + "] should not be empty: [" + value + "]";
                throw new ArgumentOutOfRangeException(msg);
            }
        }
        #endregion
    }
}
