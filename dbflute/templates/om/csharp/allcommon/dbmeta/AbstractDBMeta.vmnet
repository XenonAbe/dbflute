
#set ($myClassName = "${glDBMetaAbstractName}")

using System;
using System.Text;

using ${glPackageBaseCommon};
using ${glPackageBaseCommonCBean};

namespace ${glPackageBaseCommonDBMeta} {

    /// <summary>
    /// The abstract class of dbmeta.
    /// Author : ${database.ClassAuthor}
    /// </summary>
    public abstract class ${myClassName} : ${glDBMetaInterfaceName} {

        // ===============================================================================
        //                                                                      Table Name
        //                                                                      ==========
        abstract String TableDbName { get; }
        abstract String TablePropertyName { get; }
        abstract String TableCapPropName { get; }
        abstract String TableUncapPropName { get; }

        // ===============================================================================
        //                                                                   Name Handling
        //                                                                   =============
        public bool HasFlexibleName(String flexibleName) {
            String key = flexibleName.ToLowerCase();
            if (DbNamePropertyNameKeyToLowerMap.ContainsKey(key)) {
                return true;
            }
            if (PropertyNameDbNameKeyToLowerMap.ContainsKey(key)) {
                return true;
            }
            return false;
        }

        public String FindDbName(String flexibleName) {
            String key = flexibleName.ToLowerCase();
            if (PropertyNameDbNameKeyToLowerMap.ContainsKey(key)) {
                return PropertyNameDbNameKeyToLowerMap[key];
            }
            if (DbNamePropertyNameKeyToLowerMap.ContainsKey(key)) {
                String dbNameKeyToLower = DbNamePropertyNameKeyToLowerMap[key].ToLowerCase();
                if (PropertyNameDbNameKeyToLowerMap.ContainsKey(dbNameKeyToLower)) {
                    return PropertyNameDbNameKeyToLowerMap[dbNameKeyToLower];
                }
            }
            String msg = "Not found object by the flexible name: flexibleName=" + flexibleName;
            throw new SystemException(msg);
        }

        public String FindPropertyName(String flexibleName) {
            String key = flexibleName.ToLowerCase();
            if (DbNamePropertyNameKeyToLowerMap.containsKey(key)) {
                return DbNamePropertyNameKeyToLowerMap[key];
            }
            if (PropertyNameDbNameKeyToLowerMap.ContainsKey(key)) {
                String dbNameToLower = PropertyNameDbNameKeyToLowerMap[key].ToLowerCase();
                if (DbNamePropertyNameKeyToLowerMap.ContainsKey(dbNameToLower)) {
                    return DbNamePropertyNameKeyToLowerMap[dbNameToLower];
                }
            }
            String msg = "Not found object by the flexible name: flexibleName=" + flexibleName;
            throw new SystemException(msg);
        }

        // ===============================================================================
        //                                                                     Column Info
        //                                                                     ===========
        public bool HasColumn(String columnFlexibleName) {
            if (!HasFlexibleName(columnFlexibleName)) {
                return false;
            }
            String propertyName = findPropertyName(columnFlexibleName);
            return HasMethod("column" + initCap(propertyName));
        }

        public ${glColumnInfoName} FindColumnInfo(String columnFlexibleName) {
            AssertStringNotNullAndNotTrimmedEmpty("columnFlexibleName", columnFlexibleName);
            if (!HasColumn(columnFlexibleName)) {
                String msg = "Not found column by columnFlexibleName: " + columnFlexibleName;
                msg = msg + " tableName=" + getTableDbName();
                throw new SystemException(msg);
            }
            String propertyName = FindPropertyName(columnFlexibleName);
            String methodName = "Column" + InitCap(propertyName);
            PropertyInfo propertyInfo = GetType().GetPropertyInfo(methodName);
            return (${glColumnInfoName})propertyInfo.GetValue(this);
        }

        // ===============================================================================
        //                                                                   Relation Info
        //                                                                   =============
	    public ${glRelationInfoName} FindRelationInfo(String relationPropertyName) {
	        AssertStringNotNullAndNotTrimmedEmpty("relationPropertyName", relationPropertyName);
	        return HasForeign(relationPropertyName) ? (${glRelationInfoName})FindForeignInfo(relationPropertyName) : (${glRelationInfoName})FindRefererInfo(relationPropertyName);
	    }

        // -------------------------------------------------
        //                                   Foreign Element
        //                                   ---------------
	    public bool HasForeign(String foreignPropertyName) {
	        AssertStringNotNullAndNotTrimmedEmpty("foreignPropertyName", foreignPropertyName);
	        String methodName = BuildRelationInfoGetterMethodNameInitCap("foreign", foreignPropertyName);
	        return HasMethod(methodName);
	    }

	    public ${glDBMetaInterfaceName} FindForeignDBMeta(String foreignPropertyName) {
	        return FindForeignInfo(foreignPropertyName).ForeignDBMeta;
	    }


        // -------------------------------------------------
        //                                   Referer Element
        //                                   ---------------

	    protected String BuildRelationInfoGetterMethodNameInitCap(String targetName, String relationPropertyName) {
	        return targetName + relationPropertyName.Substring(0, 1).ToUpperCase() + relationPropertyName.Substring(1);
	    }

        // =====================================================================================
        //                                                                           Type Getter
        //                                                                           ===========
        /**
         * Get the type of dao.
         * 
         * @return The type of dao. (NotNull)
         */
        abstract public Type DaoType { get; }

        /**
         * Get the type of entity.
         * 
         * @return The type of entity. (NotNull)
         */
        abstract public Type EntityType { get; }

        /**
         * Get the type of condition-bean.
         * 
         * @return The type of condition-bean. (NotNull)
         */
        abstract public Type ConditionBeanType { get; }

        // =====================================================================================
        //                                                                       Instance Getter
        //                                                                       ===============
        /**
         * New the instance of entity.
         * 
         * @return The instance of entity. (NotNull)
         */
        abstract public ${glEntityInterfaceName} NewEntity();

        /**
         * New the instance of condition-bean.
         * 
         * @return The instance of condition-bean. (NotNull)
         */
        abstract public ${glConditionBeanInterfaceName} NewConditionBean();

        // =====================================================================================
        //                                                                 Entity Property Setup
        //                                                                 =====================
        abstract public bool SetupEntityProperty(String propertyName, Object entity, Object value);

        // ===============================================================================
        //                                                                          Helper
        //                                                                          ======
        abstract protected void checkDowncast(${glEntityInterfaceName} entity);

//        protected String helpGettingColumnStringValue(Object value) {
//            if (value instanceof java.sql.Timestamp) {
//                return (value != null ? helpFormatingTimestamp((java.sql.Timestamp)value) : "");
//            } else if (value instanceof java.util.Date) {
//                return (value != null ? helpFormatingDate((java.util.Date)value) : "");
//            } else {
//                return (value != null ? value.toString() : "");
//            }
//        }

//        protected String helpFormatingDate(java.util.Date date) {
//            return MapStringUtil.formatDate(date);
//        }

//        protected String helpFormatingTimestamp(java.sql.Timestamp timestamp) {
//            return MapStringUtil.formatTimestamp(timestamp);
//        }

        protected String InitCap(String str) {
            return str.Substring(0, 1).ToUpperCase() + str.Substring(1);
        }

        protected bool HasProperty(String propertyName) {
            assertStringNotNullAndNotTrimmedEmpty("propertyName", propertyName);
            PropertyInfo propertyInfo = this.GetType().GetPropertyInfo(propertyName);
            return propertyInfo != null;
        }

        // ----------------------------------------------------------------
        //                                                    Assert Object
        //                                                    -------------
        #region Assert Object

        /**
         * Assert that the argument is not null.
         * 
         * @param variableName Variable name. (NotNull)
         * @param arg Argument. (NotNull)
         */
        protected void AssertObjectNotNull(String variableName, Object arg) {
            if (variableName == null) {
                String msg = "Argument[variableName] should not be null.";
                throw new ArgumentNullException(msg);
            }
            if (arg == null) {
                String msg = "Argument[" + variableName + "] should not be null.";
                throw new ArgumentNullException(msg);
            }
        }

        #endregion

        // ----------------------------------------------------------------
        //                                                    Assert String
        //                                                    -------------
        #region Assert Argument

        /**
         * Assert that the string is not null and not trimmed empty.
         * 
         * @param variableName Variable name. (NotNull)
         * @param arg Argument. (NotNull)
         */
        protected void AssertStringNotNullAndNotTrimmedEmpty(String variableName, String value) {
            if (variableName == null) {
                String msg = "Variable[variableName] should not be null.";
                throw new ArgumentNullException(msg);
            }
            if (value == null) {
                String msg = "Variable[" + variableName + "] should not be null.";
                throw new ArgumentNullException(msg);
            }
            if (value.Trim().Length == 0) {
                String msg = "Variable[" + variableName + "] should not be empty: [" + value + "]";
                throw new ArgumentOutOfRangeException(msg);
            }
        }

        #endregion
    }
}
