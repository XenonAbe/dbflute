#set ($myClassName = "${glForeignInfoName}")

using System;
using System.Reflection;
using System.Collections.Generic;
using ${glPackageBaseCommonDBMeta};

namespace ${glPackageBaseCommonDBMetaInfo} {

    public class ${myClassName} : ${glRelationInfoName} {

        // ===============================================================================
        //                                                                       Attribute
        //                                                                       =========
        protected String foreignPropertyName;
        protected ${glDBMetaInterfaceName} localDBMeta;
        protected ${glDBMetaInterfaceName} foreignDBMeta;
        protected IDictionary<${glColumnInfoName}, ${glColumnInfoName}> localForeignColumnInfoMap;
        protected IDictionary<${glColumnInfoName}, ${glColumnInfoName}> foreignLocalColumnInfoMap;
        protected int relationNo;
        protected bool oneToOne;

        // ===============================================================================
        //                                                                          Finder
        //                                                                          ======
        public ${glColumnInfoName} FindLocalByForeign(String foreignColumnDbName) {
            ${glColumnInfoName} keyColumnInfo = new ${glColumnInfoName}(foreignDBMeta, foreignColumnDbName);
            ${glColumnInfoName} resultColumnInfo = (${glColumnInfoName})foreignLocalColumnInfoMap[keyColumnInfo];
            if (resultColumnInfo == null) {
                String msg = "Not found by foreignColumnDbName in foreignLocalColumnInfoMap:";
                msg = msg + " foreignColumnDbName=" + foreignColumnDbName + " foreignLocalColumnInfoMap=" + foreignLocalColumnInfoMap;
                throw new ArgumentException(msg);
            }
            return resultColumnInfo;
        }

        public PropertyInfo FindAccessor() {
            return FindProperty(localDBMeta.EntityType, BuildInitCapPropertyName(), new Type[] { typeof(IList<>) });
        }

        // ===============================================================================
        //                                                                         Builder
        //                                                                         =======
        public String BuildInitCapPropertyName() {
            return InitCap(this.foreignPropertyName);
        }

        // ===============================================================================
        //                                                                       Implement
        //                                                                       =========
        public String RelationPropertyName {
            get { return ForeignPropertyName; }
        }

        public ${glDBMetaInterfaceName} TargetDBMeta {
            get { return ForeignDBMeta; }
        }

        public IDictionary<${glColumnInfoName}, ${glColumnInfoName}> LocalTargetColumnInfoMap {
            get { return LocalForeignColumnInfoMap; }
        }

        public bool IsReferer {
            get { return false; }
        }

        // ===============================================================================
        //                                                                        Accessor
        //                                                                        ========
        public String ForeignPropertyName {
            get { return foreignPropertyName; }
            set {this.foreignPropertyName = value; }
        }

        public ${glDBMetaInterfaceName} LocalDBMeta {
            get { return localDBMeta; }
            set { this.localDBMeta = value; }
        }

        public ${glDBMetaInterfaceName} ForeignDBMeta {
            get { return foreignDBMeta; }
            set { this.foreignDBMeta = value; }
        }

        public IDictionary<${glColumnInfoName}, ${glColumnInfoName}> LocalForeignColumnInfoMap {
            get { return localForeignColumnInfoMap; }
            set {
                    this.localForeignColumnInfoMap = value;
                    ICollection<${glColumnInfoName}> keys = localForeignColumnInfoMap.Keys;
                    foreignLocalColumnInfoMap = new Dictionary<${glColumnInfoName}, ${glColumnInfoName}>();
                    foreach (${glColumnInfoName} key in keys) {
                        ${glColumnInfoName} val = (${glColumnInfoName})localForeignColumnInfoMap[key];
                        foreignLocalColumnInfoMap.Add(val, key);
                    }
            }
        }

        public IDictionary<${glColumnInfoName}, ${glColumnInfoName}> ForeignLocalColumnInfoMap {
            get { return foreignLocalColumnInfoMap; }
        }

        public int RelationNo {
            get { return relationNo; }
            set { this.relationNo = value; }
        }

        public bool IsOneToOne {
            get { return oneToOne; }
            set { this.oneToOne = value; }
        }

        // ===============================================================================
        //                                                                 Internal Helper
        //                                                                 ===============
        protected static String InitCap(String name) {
            return name.Substring(0, 1).ToUpper() + name.Substring(1);
        }

        protected static PropertyInfo FindProperty(Type clazz, String propertyName, Type[] argTypes) {
            return clazz.GetProperty(propertyName, argTypes);
        }
    }
}
