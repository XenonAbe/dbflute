#set ($myClassName = "${glReferrerInfo}")

using System;
using System.Reflection;

using ${glPackageBaseCommonDBMeta};
using ${glPackageBaseCommonJavaLike};
using ${glPackageBaseCommonUtil};

namespace ${glPackageBaseCommonDBMetaInfo} {

    public class ${myClassName} : ${glRelationInfo} {

        // ===============================================================================
        //                                                                       Attribute
        //                                                                       =========
        protected String referrerPropertyName;
        protected ${glDBMeta} localDBMeta;
        protected ${glDBMeta} referrerDBMeta;
        protected Map<${glColumnInfo}, ${glColumnInfo}> localReferrerColumnInfoMap;
        protected Map<${glColumnInfo}, ${glColumnInfo}> referrerLocalColumnInfoMap;
        protected bool oneToOne;

        // ===============================================================================
        //                                                                          Finder
        //                                                                          ======
        public ${glColumnInfo} FindLocalByReferrer(String referrerColumnDbName) {
            ${glColumnInfo} keyColumnInfo = referrerDBMeta.FindColumnInfo(referrerColumnDbName);
            ${glColumnInfo} resultColumnInfo = (${glColumnInfo})referrerLocalColumnInfoMap.get(keyColumnInfo);
            if (resultColumnInfo == null) {
                String msg = "Not found by referrerColumnDbName in referrerLocalColumnInfoMap:";
                msg = msg + " referrerColumnDbName=" + referrerColumnDbName + " referrerLocalColumnInfoMap=" + referrerLocalColumnInfoMap;
                throw new ArgumentException(msg);
            }
            return resultColumnInfo;
        }

        public ${glColumnInfo} FindReferrerByLocal(String localColumnDbName) {
            ${glColumnInfo} keyColumnInfo = localDBMeta.FindColumnInfo(localColumnDbName);
            ${glColumnInfo} resultColumnInfo = (${glColumnInfo})localReferrerColumnInfoMap.get(keyColumnInfo);
            if (resultColumnInfo == null) {
                String msg = "Not found by localColumnDbName in localReferrerColumnInfoMap:";
                msg = msg + " localColumnDbName=" + localColumnDbName + " localReferrerColumnInfoMap=" + localReferrerColumnInfoMap;
                throw new ArgumentException(msg);
            }
            return resultColumnInfo;
        }

        public PropertyInfo FindAccessor() {
            return FindProperty(localDBMeta.EntityType, BuildInitCapPropertyName(), new Type[] { typeof(System.Collections.Generic.IList<>) });
        }

        // ===============================================================================
        //                                                                         Builder
        //                                                                         =======
        public String BuildInitCapPropertyName() {
            return InitCap(this.referrerPropertyName);
        }

        // ===============================================================================
        //                                                                       Implement
        //                                                                       =========
        public String RelationPropertyName {
            get { return ReferrerPropertyName; }
        }

        public ${glDBMeta} TargetDBMeta {
            get { return ReferrerDBMeta; }
        }

        public Map<${glColumnInfo}, ${glColumnInfo}> LocalTargetColumnInfoMap {
            get { return LocalReferrerColumnInfoMap; }
        }

        public bool IsReferrer {
            get { return true; }
        }

        // ===============================================================================
        //                                                                        Accessor
        //                                                                        ========
        public String ReferrerPropertyName {
			get { return referrerPropertyName; }
            set { this.referrerPropertyName = value; }
        }

        public ${glDBMeta} LocalDBMeta {
			get { return localDBMeta; }
            set { this.localDBMeta = value; }
        }

        public ${glDBMeta} ReferrerDBMeta {
			get { return referrerDBMeta; }
            set { this.referrerDBMeta = value; }
        }

        public Map<${glColumnInfo}, ${glColumnInfo}> LocalReferrerColumnInfoMap {
            get { return localReferrerColumnInfoMap; }
            set {            
                this.localReferrerColumnInfoMap = value;
                referrerLocalColumnInfoMap = new LinkedHashMap<${glColumnInfo}, ${glColumnInfo}>();
                foreach (${glColumnInfo} key in localReferrerColumnInfoMap.keySet()) {
                    ${glColumnInfo} val = (${glColumnInfo})localReferrerColumnInfoMap.get(key);
                    referrerLocalColumnInfoMap.put(val, key);
                }
             }
        }

        public Map<${glColumnInfo}, ${glColumnInfo}> ReferrerLocalColumnInfoMap {
            get { return referrerLocalColumnInfoMap; }
        }

        public bool IsOneToOne {
            get { return oneToOne; }
            set { this.oneToOne = value; }
        }
		
        // ===============================================================================
        //                                                                  General Helper
        //                                                                  ==============
        // -------------------------------------------------
        //                               Reflection Handling
        //                               -------------------
        protected static PropertyInfo FindProperty(Type clazz, String propertyName, Type[] argTypes) {
            return clazz.GetProperty(propertyName, argTypes);
        }
		
        // -------------------------------------------------
        //                                   String Handling
        //                                   ---------------
        protected static String InitCap(String str) {
            return ${glSimpleStringUtil}.InitCap(str);
        }
    }
}
