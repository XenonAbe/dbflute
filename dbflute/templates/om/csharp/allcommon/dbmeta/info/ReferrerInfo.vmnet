#set ($myClassName = "${glReferrerInfoName}")

using System;
using System.Reflection;
using System.Collections.Generic;
using ${glPackageBaseCommonDBMeta};

namespace ${glPackageBaseCommonDBMetaInfo} {

    public class ${myClassName} : ${glRelationInfoName} {

        // ===============================================================================
        //                                                                       Attribute
        //                                                                       =========
        protected String referrerPropertyName;
        protected ${glDBMetaInterfaceName} localDBMeta;
        protected ${glDBMetaInterfaceName} referrerDBMeta;
        protected IDictionary<${glColumnInfoName}, ${glColumnInfoName}> localReferrerColumnInfoMap;
        protected IDictionary<${glColumnInfoName}, ${glColumnInfoName}> referrerLocalColumnInfoMap;
        protected bool oneToOne;

        // ===============================================================================
        //                                                                          Finder
        //                                                                          ======
        public ${glColumnInfoName} FindLocalByReferrer(String referrerColumnDbName) {
            ${glColumnInfoName} keyColumnInfo = new ${glColumnInfoName}(referrerDBMeta, referrerColumnDbName);
            ${glColumnInfoName} resultColumnInfo = (${glColumnInfoName})referrerLocalColumnInfoMap[keyColumnInfo];
            if (resultColumnInfo == null) {
                String msg = "Not found by referrerColumnDbName in referrerLocalColumnInfoMap:";
                msg = msg + " referrerColumnDbName=" + referrerColumnDbName + " referrerLocalColumnInfoMap=" + referrerLocalColumnInfoMap;
                throw new ArgumentException(msg);
            }
            return resultColumnInfo;
        }

        public ${glColumnInfoName} FindReferrerByLocal(String localColumnDbName) {
            ${glColumnInfoName} keyColumnInfo = new ${glColumnInfoName}(localDBMeta, localColumnDbName);
            ${glColumnInfoName} resultColumnInfo = (${glColumnInfoName})localReferrerColumnInfoMap[keyColumnInfo];
            if (resultColumnInfo == null) {
                String msg = "Not found by localColumnDbName in localReferrerColumnInfoMap:";
                msg = msg + " localColumnDbName=" + localColumnDbName + " localReferrerColumnInfoMap=" + localReferrerColumnInfoMap;
                throw new ArgumentException(msg);
            }
            return resultColumnInfo;
        }

        public PropertyInfo FindAccessor() {
            return FindProperty(localDBMeta.EntityType, BuildInitCapPropertyName(), new Type[] { typeof(IList<>) });
        }

        // ===============================================================================
        //                                                                         Builder
        //                                                                         =======
        public String BuildInitCapPropertyName() {
            return InitCap(this.referrerPropertyName);
        }

        // ===============================================================================
        //                                                                       Implement
        //                                                                       =========
        public String RelationPropertyName {
            get { return ReferrerPropertyName; }
        }

        public ${glDBMetaInterfaceName} TargetDBMeta {
            get { return ReferrerDBMeta; }
        }

        public IDictionary<${glColumnInfoName}, ${glColumnInfoName}> LocalTargetColumnInfoMap {
            get { return LocalReferrerColumnInfoMap; }
        }

        public bool IsReferrer {
            get { return true; }
        }

        // ===============================================================================
        //                                                                        Accessor
        //                                                                        ========
        public String ReferrerPropertyName {
			get { return referrerPropertyName; }
            set { this.referrerPropertyName = value; }
        }

        public ${glDBMetaInterfaceName} LocalDBMeta {
			get { return localDBMeta; }
            set { this.localDBMeta = value; }
        }

        public ${glDBMetaInterfaceName} ReferrerDBMeta {
			get { return referrerDBMeta; }
            set { this.referrerDBMeta = value; }
        }

        public IDictionary<${glColumnInfoName}, ${glColumnInfoName}> LocalReferrerColumnInfoMap {
            get { return localReferrerColumnInfoMap; }
            set {            
                    this.localReferrerColumnInfoMap = value;
                    ICollection<${glColumnInfoName}> keys = localReferrerColumnInfoMap.Keys;
                    referrerLocalColumnInfoMap = new Dictionary<${glColumnInfoName}, ${glColumnInfoName}>();
                    foreach (${glColumnInfoName} key in keys) {
                        ${glColumnInfoName} val = (${glColumnInfoName})localReferrerColumnInfoMap[key];
                        referrerLocalColumnInfoMap.Add(val, key);
                    }
             }
        }

        public IDictionary<${glColumnInfoName}, ${glColumnInfoName}> ReferrerLocalColumnInfoMap {
            get { return referrerLocalColumnInfoMap; }
        }

        public bool IsOneToOne {
            get { return oneToOne; }
            set { this.oneToOne = value; }
        }

        // ===============================================================================
        //                                                                 Internal Helper
        //                                                                 ===============
        protected static String InitCap(String name) {
            return name.Substring(0, 1).ToUpper() + name.Substring(1);
        }

        protected static PropertyInfo FindProperty(Type clazz, String methodName, Type[] argTypes) {
            return clazz.GetProperty(methodName, argTypes);
        }
    }
}
