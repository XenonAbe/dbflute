#set ($myClassName = "${glColumnInfoName}")

using System;
using System.Reflection;
using ${glPackageBaseCommonDBMeta};

namespace ${glPackageBaseCommonDBMetaInfo} {

    public class ${myClassName} {

        // ===============================================================================
        //                                                                       Attribute
        //                                                                       =========
        protected ${glDBMetaInterfaceName} dbmeta;
        protected String columnDbName;
        protected String propertyName;
        protected Type propertyType;
        protected bool primary;
        protected int? columnSize;
        protected int? columnDecimalDigits;

        // ===============================================================================
        //                                                                     Constructor
        //                                                                     ===========
        public ${myClassName}(${glDBMetaInterfaceName} dbmeta, String columnDbName) : this (dbmeta, columnDbName, null, null, false, null, null) {
        }

        public ${myClassName}(${glDBMetaInterfaceName} dbmeta, String columnDbName, String propertyName, Type propertyType, bool primary, int? columnSize, int? columnDecimalDigits) {
            this.dbmeta = dbmeta;
            this.columnDbName = columnDbName;
            this.propertyName = propertyName;
            this.propertyType = propertyType;
            this.primary = primary;
            this.columnSize = columnSize;
            this.columnDecimalDigits = columnDecimalDigits;
        }

        // ===============================================================================
        //                                                                          Finder
        //                                                                          ======
        public PropertyInfo FindProperty() {
            return FindProperty(dbmeta.EntityType, propertyName, new Type[] { propertyType });
        }

        // ===============================================================================
        //                                                                 Internal Helper
        //                                                                 ===============
        protected virtual PropertyInfo FindProperty(Type clazz, String methodName, Type[] argTypes) {
            return clazz.GetProperty(methodName, argTypes);
        }

        // ===============================================================================
        //                                                                  Basic Override
        //                                                                  ==============
        public override int GetHashCode() {
            return dbmeta.GetHashCode() + columnDbName.GetHashCode();
        }

        public override bool Equals(Object obj) {
            if (!(obj is ${myClassName})) {
                return false;
            }
            ${myClassName} target = (${myClassName})obj;
            if (dbmeta == null || target.DBMeta == null) {
                return false;
            }
            if (!dbmeta.Equals(target.DBMeta)) {
                return false;
            }
            if (columnDbName == null || target.ColumnDbName == null) {
                return false;
            }
            if (!columnDbName.Equals(target.ColumnDbName)) {
                return false;
            }
            return true;
        }

        public override String ToString() {
            return dbmeta.TableDbName + "." + columnDbName;
        }

        // ===============================================================================
        //                                                                        Accessor
        //                                                                        ========
        public ${glDBMetaInterfaceName} DBMeta {
            get { return dbmeta; }
            set { dbmeta = value; }
        }

        public String ColumnDbName {
            get { return columnDbName; }
            set { columnDbName = value; }
        }

        public String PropertyName {
            get { return propertyName; }
            set { propertyName = value; }
        }

        public bool IsPrimary {
            get { return primary; }
            set { primary = value; }
        }

        public Nullable<int> ColumnSize {
            get { return columnSize; }
            set { columnSize = value; }
        }

        public Nullable<int> ColumnDecimalDigits {
            get { return columnDecimalDigits; }
            set { columnDecimalDigits = value; }
        }
    }
}
