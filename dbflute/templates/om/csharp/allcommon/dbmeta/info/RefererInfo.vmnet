#set ($myClassName = "${glRefererInfoName}")

using System;
using System.Reflection;
using System.Collections.Generic;
using ${glPackageBaseCommonDBMeta};

namespace ${glPackageBaseCommonDBMetaInfo} {

    public class ${myClassName} : ${glRelationInfoName} {

        // ===============================================================================
        //                                                                       Attribute
        //                                                                       =========
        protected String refererPropertyName;
        protected ${glDBMetaInterfaceName} localDBMeta;
        protected ${glDBMetaInterfaceName} refererDBMeta;
        protected IDictionary<${glColumnInfoName}, ${glColumnInfoName}> localRefererColumnInfoMap;
        protected IDictionary<${glColumnInfoName}, ${glColumnInfoName}> refererLocalColumnInfoMap;
        protected bool oneToOne;

        // ===============================================================================
        //                                                                          Finder
        //                                                                          ======
        public ${glColumnInfoName} FindLocalByReferer(String refererColumnDbName) {
            ${glColumnInfoName} keyColumnInfo = new ${glColumnInfoName}(refererDBMeta, refererColumnDbName);
            ${glColumnInfoName} resultColumnInfo = (${glColumnInfoName})refererLocalColumnInfoMap[keyColumnInfo];
            if (resultColumnInfo == null) {
                String msg = "Not found by refererColumnDbName in refererLocalColumnInfoMap:";
                msg = msg + " refererColumnDbName=" + refererColumnDbName + " refererLocalColumnInfoMap=" + refererLocalColumnInfoMap;
                throw new ArgumentException(msg);
            }
            return resultColumnInfo;
        }

        public ${glColumnInfoName} FindRefererByLocal(String localColumnDbName) {
            ${glColumnInfoName} keyColumnInfo = new ${glColumnInfoName}(localDBMeta, localColumnDbName);
            ${glColumnInfoName} resultColumnInfo = (${glColumnInfoName})localRefererColumnInfoMap[keyColumnInfo];
            if (resultColumnInfo == null) {
                String msg = "Not found by localColumnDbName in localRefererColumnInfoMap:";
                msg = msg + " localColumnDbName=" + localColumnDbName + " localRefererColumnInfoMap=" + localRefererColumnInfoMap;
                throw new ArgumentException(msg);
            }
            return resultColumnInfo;
        }

        public PropertyInfo FindAccessor() {
            return FindProperty(localDBMeta.EntityType, BuildInitCapPropertyName(), new Type[] { typeof(IList<>) });
        }

        // ===============================================================================
        //                                                                         Builder
        //                                                                         =======
        public String BuildInitCapPropertyName() {
            return InitCap(this.refererPropertyName);
        }

        // ===============================================================================
        //                                                                       Implement
        //                                                                       =========
        public String RelationPropertyName {
            get { return RefererPropertyName; }
        }

        public ${glDBMetaInterfaceName} TargetDBMeta {
            get { return RefererDBMeta; }
        }

        public IDictionary<${glColumnInfoName}, ${glColumnInfoName}> LocalTargetColumnInfoMap {
            get { return LocalRefererColumnInfoMap; }
        }

        public bool IsReferer {
            get { return true; }
        }

        // ===============================================================================
        //                                                                        Accessor
        //                                                                        ========
        public String RefererPropertyName {
			get { return refererPropertyName; }
            set { this.refererPropertyName = value; }
        }

        public ${glDBMetaInterfaceName} LocalDBMeta {
			get { return localDBMeta; }
            set { this.localDBMeta = value; }
        }

        public ${glDBMetaInterfaceName} RefererDBMeta {
			get { return refererDBMeta; }
            set { this.refererDBMeta = value; }
        }

        public IDictionary<${glColumnInfoName}, ${glColumnInfoName}> LocalRefererColumnInfoMap {
            get { return localRefererColumnInfoMap; }
            set {            
                    this.localRefererColumnInfoMap = value;
                    ICollection<${glColumnInfoName}> keys = localRefererColumnInfoMap.Keys;
                    refererLocalColumnInfoMap = new Dictionary<${glColumnInfoName}, ${glColumnInfoName}>();
                    foreach (${glColumnInfoName} key in keys) {
                        ${glColumnInfoName} val = (${glColumnInfoName})localRefererColumnInfoMap[key];
                        refererLocalColumnInfoMap.Add(val, key);
                    }
             }
        }

        public IDictionary<${glColumnInfoName}, ${glColumnInfoName}> RefererLocalColumnInfoMap {
            get { return refererLocalColumnInfoMap; }
        }

        public bool IsOneToOne {
            get { return oneToOne; }
            set { this.oneToOne = value; }
        }

        // ===============================================================================
        //                                                                 Internal Helper
        //                                                                 ===============
        protected static String InitCap(String name) {
            return name.Substring(0, 1).ToUpper() + name.Substring(1);
        }

        protected static PropertyInfo FindProperty(Type clazz, String methodName, Type[] argTypes) {
            return clazz.GetProperty(methodName, argTypes);
        }
    }
}
