#set ($myClassName = "${glDBMetaInstanceHandlerName}")
#set ($instanceMapGenericDefinition = "String, ${glDBMetaInterfaceName}")

using System;
using System.Collections.Generic;

namespace ${glPackageBaseCommonDBMeta} {

    /// <summary>
    /// DBMeta instance handler.
    /// Author : ${database.ClassAuthor}
    public class ${myClassName} {

        /// <summary>Table db-name instance map.</summary>
        protected static readonly IDictionary<String, ${glDBMetaInterfaceName}> _tableDbNameInstanceMap;

        /// <summary>Table db-name property-name to-lower-map.</summary>
        protected static readonly IDictionary<String, String> _tableDbNamePropertyNameKeyToLowerMap;

        /// <summary>Table property-name db-name to-lower-map.</summary>
        protected static readonly IDictionary<String, String> _tablePropertyNameDbNameKeyToLowerMap;

        static ${myClassName}() {
            {
                IDictionary<String, ${glDBMetaInterfaceName}> tmpMap = new Dictionary<String, ${glDBMetaInterfaceName}>();

#foreach ($table in $database.tables)
                tmpMap.Add("${table.name}", GetDBMeta("${glPackageBaseDBMeta}.${glProjectPrefix}${table.JavaName}Dbm"));
#end

                _tableDbNameInstanceMap = tmpMap;//java.util.Collections.unmodifiableMap(tmpMap);
            }

            {
                IDictionary<String, String> tmpMap = new Dictionary<String, String>();

#foreach ($table in $database.tables)
                tmpMap.Add("${table.name}".ToLower(), "${table.javaBeansRulePropertyName}");
#end

                _tableDbNamePropertyNameKeyToLowerMap = tmpMap;//java.util.Collections.unmodifiableMap(tmpMap);
            }

            {
                IDictionary<String, String> tmpMap = new Dictionary<String, String>();

#foreach ($table in $database.tables)
                tmpMap.Add("${table.javaName}".ToLower(), "${table.name}");
#end

                _tablePropertyNameDbNameKeyToLowerMap = tmpMap;//java.util.Collections.unmodifiableMap(tmpMap);
            }
        }

        protected static ${glDBMetaInterfaceName} GetDBMeta(String className) {
            Seasar.Framework.Xml.S2Section config = Seasar.Framework.Xml.S2SectionHandler.GetS2Section();
            Type clazz = ForName(className, config.Assemblys);
            if (clazz == null) {
                String msg = "The className was not found: " + className + " assemblys=";
                msg = msg + Seasar.Framework.Util.ToStringUtil.ToString(config.Assemblys);
                throw new SystemException(msg);
            }
            System.Reflection.MethodInfo method = clazz.GetMethod("GetInstance");
            return (${glDBMetaInterfaceName})method.Invoke(null, null);
        }

        protected static Type ForName(string className, System.Collections.IList assemblys) {
            Type type = Type.GetType(className);
            if(type != null) return type;
            foreach(String assemblyName in assemblys) {
                System.Reflection.Assembly assembly = System.Reflection.Assembly.Load(assemblyName);
                if (assembly == null) {
                    String msg = "The assemblyName was not found: " + assemblyName + " assemblys=";
                    msg = msg + Seasar.Framework.Util.ToStringUtil.ToString(assemblys);
                    throw new SystemException(msg);
                }
                type = assembly.GetType(className);
                if(type != null) return type;
            }
            return type;
        }

        /// <summary>
        /// Find dbmeta by table flexible-name.
        /// If the table name is 'ORDER_DETAIL', you can find the dbmeta by ...(as follows)
        ///     'ORDER_DETAIL', 'ORDer_DeTAiL', 'order_detail'
        ///   , 'OrderDetail', 'orderdetail', 'oRderDetaIl'
        /// </summary>
        /// <param name="tableFlexibleName">Table flexible-name. (NotNull and NotEmpty)</param>
        /// <returns>DBMeta. (NotNull)</returns>
        public static ${glDBMetaInterfaceName} FindDBMeta(String tableFlexibleName) {
            AssertStringNotNullAndNotTrimmedEmpty("tableFlexibleName", tableFlexibleName);
            if (_tableDbNameInstanceMap.ContainsKey(tableFlexibleName)) {
                return ByTableDbName(tableFlexibleName);
            }
            String toLowerKey = tableFlexibleName.ToLower();
            if (_tableDbNamePropertyNameKeyToLowerMap.ContainsKey(toLowerKey)) {
                String propertyName = (String)_tableDbNamePropertyNameKeyToLowerMap[toLowerKey];
                String dbName = (String)_tablePropertyNameDbNameKeyToLowerMap[propertyName.ToLower()];
                return ByTableDbName(dbName);
            }
            if (_tablePropertyNameDbNameKeyToLowerMap.ContainsKey(toLowerKey)) {
                String dbName = (String)_tablePropertyNameDbNameKeyToLowerMap[toLowerKey];
                return ByTableDbName(dbName);
            }
            String msg = "The instance map returned null by the key: key=" + tableFlexibleName + " instanceMap=" + _tableDbNameInstanceMap;
            throw new SystemException(msg);
        }

        /// <summary>
        /// Get instance by table db-name.
        /// </summary>
        /// <param name="tableDbName">Table db-name. (NotNull)</param>
        /// <returns>Instance. (NotNull)</returns>
        protected static ${glDBMetaInterfaceName} ByTableDbName(String tableDbName) {
            AssertObjectNotNull("tableDbName", tableDbName);
            try {
                return (${glDBMetaInterfaceName})_tableDbNameInstanceMap[tableDbName];
            } catch (System.Collections.Generic.KeyNotFoundException e) {
                String msg = "The tableDbNameInstanceMap didn't contain the key of '" + tableDbName + "': ";
                throw new ArgumentOutOfRangeException(msg + _tableDbNameInstanceMap, e);
            }
        }

        // ----------------------------------------------------------------
        //                                                  Assert Argument
        //                                                  ---------------
        /// <summary>
        /// Assert that the object is not null.
        /// </summary> 
        /// <param name="variableName">Variable name. (NotNull)</param>
        /// <param name="arg">Argument. (NotNull)</param>
        protected static void AssertObjectNotNull(String variableName, Object arg) {
            if (variableName == null) {
                String msg = "Argument[variableName] must not be null.";
                throw new ArgumentNullException(msg);
            }
            if (arg == null) {
                String msg = "Argument[" + variableName + "] must not be null.";
                throw new ArgumentNullException(msg);
            }
        }

        // ----------------------------------------------------------------
        //                                                    Assert String
        //                                                    -------------
        #region Assert Argument
        protected static void AssertStringNotNullAndNotTrimmedEmpty(String variableName, String value) {
            if (variableName == null) {
                String msg = "Variable[variableName] should not be null.";
                throw new ArgumentNullException(msg);
            }
            if (value == null) {
                String msg = "Variable[" + variableName + "] should not be null.";
                throw new ArgumentNullException(msg);
            }
            if (value.Trim().Length == 0) {
                String msg = "Variable[" + variableName + "] should not be empty: [" + value + "]";
                throw new ArgumentOutOfRangeException(msg);
            }
        }
        #endregion
    }
}
