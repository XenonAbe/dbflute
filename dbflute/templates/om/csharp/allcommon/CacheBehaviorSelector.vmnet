
using System;
using System.Collections;

using ${glPackageBaseCommonBhv};
using ${glPackageBaseCommonDBMeta};

namespace ${glPackageBaseCommon} {

    public class ${glCacheBehaviorSelectorName} : ${glBehaviorSelectorInterfaceName} {

        // ===============================================================================
        //                                                                       Attribute
        //                                                                       =========
        protected Seasar.Framework.Container.IS2Container _container;

        // ===============================================================================
        //                                                                        Selector
        //                                                                        ========
        public virtual DAO_TYPE Select<DAO_TYPE>(Type daoType) where DAO_TYPE : ${glBehaviorReadableInterfaceName} {
            return (DAO_TYPE)_container.GetComponent(daoType);
        }

        public virtual ${glBehaviorReadableInterfaceName} ByName(String tableFlexibleName) {
            AssertStringNotNullAndNotTrimmedEmpty("tableFlexibleName", tableFlexibleName);
            ${glDBMetaInterfaceName} dbmeta = ${glDBMetaInstanceHandlerName}.FindDBMeta(tableFlexibleName);
            return Select<${glBehaviorReadableInterfaceName}>(GetBehaviorType(dbmeta));
        }

        protected static Type GetBehaviorType(${glDBMetaInterfaceName} dbmeta) {
            String behaviorTypeName = dbmeta.BehaviorTypeName;
            if (behaviorTypeName == null) {
                String msg = "The dbmeta.BehaviorTypeName should not return null: dbmeta=" + dbmeta;
                throw new SystemException(msg);
            }
            Seasar.Framework.Xml.S2Section config = Seasar.Framework.Xml.S2SectionHandler.GetS2Section();
            return ForName(behaviorTypeName, config.Assemblys);
        }

        protected static Type ForName(string className, System.Collections.IList assemblys) {
            Type type = Type.GetType(className);
            if(type != null) return type;
            foreach(String assemblyName in assemblys) {
                System.Reflection.Assembly assembly = System.Reflection.Assembly.Load(assemblyName);
                if (assembly == null) {
                    String msg = "The assemblyName was not found: " + assemblyName + " assemblys=";
                    msg = msg + Seasar.Framework.Util.ToStringUtil.ToString(assemblys);
                    throw new SystemException(msg);
                }
                type = assembly.GetType(className);
                if(type != null) return type;
            }
            return type;
        }

        // ===============================================================================
        //                                                                          Helper
        //                                                                          ======
        // -------------------------------------------------
        //                                     Assert Object
        //                                     -------------
        /**
         * Assert that the object is not null.
         * 
         * @param variableName Variable name. (NotNull)
         * @param value Value. (NotNull)
         * @exception IllegalArgumentException
         */
        protected static void AssertObjectNotNull(String variableName, Object value) {
            if (variableName == null) {
                String msg = "The value should not be null: variableName=" + variableName + " value=" + value;
                throw new SystemException(msg);
            }
            if (value == null) {
                String msg = "The value should not be null: variableName=" + variableName;
                throw new SystemException(msg);
            }
        }

        // -------------------------------------------------
        //                                     Assert String
        //                                     -------------
        /**
         * Assert that the entity is not null and not trimmed empty.
         * 
         * @param variableName Variable name. (NotNull)
         * @param value Value. (NotNull)
         */
        protected static void AssertStringNotNullAndNotTrimmedEmpty(String variableName, String value) {
            AssertObjectNotNull("variableName", variableName);
            AssertObjectNotNull(variableName, value);
            if (value.Trim().Length ==0) {
                String msg = "The value should not be empty: variableName=" + variableName + " value=" + value;
                throw new SystemException(msg);
            }
        }

        // ===============================================================================
        //                                                                        Accessor
        //                                                                        ========
        public Seasar.Framework.Container.IS2Container Container {
            get { return _container; }
            set { _container = value; }
        }

    }
}
