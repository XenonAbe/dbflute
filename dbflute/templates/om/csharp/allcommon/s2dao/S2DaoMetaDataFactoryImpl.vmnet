
using System;
using System.Collections;
using System.Reflection;
using System.Text;

using Seasar.Extension.ADO;
using Seasar.Extension.ADO.Impl;
using Seasar.Dao;

namespace ${glPackageBaseCommonS2Dao} {

    public class ${glS2DaoMetaDataFactoryImpl} : Seasar.Dao.IDaoMetaDataFactory {

        private readonly Hashtable _daoMetaDataCache = new Hashtable();
        protected readonly IDataSource _dataSource;
        protected readonly ICommandFactory _commandFactory;
        protected readonly IDataReaderFactory _dataReaderFactory;
        protected readonly IAnnotationReaderFactory _readerFactory;
        protected IDatabaseMetaData _dbMetaData;
        protected string _sqlFileEncoding = Encoding.Default.WebName;
        protected string[] _insertPrefixes;
        protected string[] _updatePrefixes;
        protected string[] _deletePrefixes;

        public ${glS2DaoMetaDataFactoryImpl}(IDataSource dataSource,
            ICommandFactory commandFactory, IAnnotationReaderFactory readerFactory,
            IDataReaderFactory dataReaderFactory) {
            _dataSource = dataSource;
            _commandFactory = commandFactory;
            _readerFactory = readerFactory;
            _dataReaderFactory = dataReaderFactory;
        }

        public IDatabaseMetaData DBMetaData {
            set { _dbMetaData = value; }
        }

        public string[] InsertPrefixes {
            set { _insertPrefixes = value; }
        }

        public string[] UpdatePrefixes {
            set { _updatePrefixes = value; }
        }

        public string[] DeletePrefixes {
            set { _deletePrefixes = value; }
        }

        public string SqlFileEncoding {
            set { _sqlFileEncoding = value; }
        }

        #region IDaoMetaDataFactory メンバ

        public IDaoMetaData GetDaoMetaData(Type daoType) {
            lock (this) {
                string key = daoType.FullName;
                IDaoMetaData dmd = (IDaoMetaData)_daoMetaDataCache[key];
                if (dmd != null) {
                    return dmd;
                }
                dmd = CreateDaoMetaData(daoType);
                _daoMetaDataCache[key] = dmd;
                return dmd;
            }
        }

        #endregion

        protected virtual IDaoMetaData CreateDaoMetaData(Type daoType) {
            ${glS2DaoMetaDataExtension} dmd = CreateDaoMetaDataImpl();
            dmd.DaoType = daoType;
            dmd.DataSource = _dataSource;
            dmd.CommandFactory = _commandFactory;
            dmd.DataReaderFactory = _dataReaderFactory;
            dmd.AnnotationReaderFactory = _readerFactory;
            if (_dbMetaData == null) {
                _dbMetaData = new DatabaseMetaDataImpl(_dataSource);
            }
            dmd.DatabaseMetaData = _dbMetaData;
            if (_sqlFileEncoding != null) {
                dmd.SqlFileEncoding = _sqlFileEncoding;
            }
            if (_insertPrefixes != null) {
                dmd.InsertPrefixes = _insertPrefixes;
            }
            if (_updatePrefixes != null) {
                dmd.UpdatePrefixes = _updatePrefixes;
            }
            if (_deletePrefixes != null) {
                dmd.DeletePrefixes = _deletePrefixes;
            }
            dmd.Initialize();
            return dmd;
        }

        protected virtual ${glS2DaoMetaDataExtension} CreateDaoMetaDataImpl() {
            return new ${glS2DaoMetaDataExtension}();
        }
    }
}