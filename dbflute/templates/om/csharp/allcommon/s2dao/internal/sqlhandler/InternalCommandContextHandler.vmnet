
using System;
using System.Data;

using Seasar.Dao;
using Seasar.Extension.ADO;
using Seasar.Extension.ADO.Impl;
using Seasar.Framework.Util;

using ${glPackageBaseCommon};
using ${glPackageBaseCommonUtil};

namespace ${glPackageBaseCommonS2DaoInternalSqlHandler} {

public class ${glInternalCommandContextHandler} : BasicHandler {

// ...Making

    // ===================================================================================
    //                                                                           Attribute
    //                                                                           =========
    protected ICommandContext commandContext;
    
    // ===================================================================================
    //                                                                         Constructor
    //                                                                         ===========
    public ${glInternalCommandContextHandler}(IDataSource dataSource, ICommandFactory commandFactory, ICommandContext commandContext)
        : base(dataSource, commandContext.Sql, commandFactory) {
        this.commandContext = commandContext;
    }

    // ===================================================================================
    //                                                                             Execute
    //                                                                             =======
    public int Execute(Object[] args) {
        IDbConnection connection = Connection;
        try {
            return Execute(connection, commandContext);
        } finally {
            DataSource.CloseConnection(connection);
        }
    }

    protected int Execute(IDbConnection connection, ICommandContext context) {
        LogSql(context.BindVariables, GetArgTypes(context.BindVariables));
        IDbCommand cmd = Command(connection);
        int ret = -1;
        try {
            BindArgs(cmd, context.BindVariables, context.BindVariableTypes);
            ret = ExecuteUpdate(cmd, context);
        } finally {
            CommandUtil.Close(cmd);
        }
        return ret;
    }

    // At the future, go to InternalBasicHandler
    protected virtual void LogSql(Object[] args, Type[] argTypes) {
        if (QLog.IsLogEnabled()) {
            String completeSql = GetCompleteSql(args);
            if (IsContainsLineSeparatorInSql()) {
                QLog.Log(getLineSeparator() + completeSql);
            } else {
                QLog.Log(completeSql);
            }
        }
    }

    // At the future, go to InternalBasicHandler
    protected bool IsContainsLineSeparatorInSql() {
        return Sql != null ? Sql.Contains(getLineSeparator()) : false;
    }

    // At the future, go to InternalBasicHandler
    protected virtual int ExecuteUpdate(IDbCommand cmd, Object resource) {
        return CommandFactory.ExecuteNonQuery(DataSource, cmd);
    }

    // ===================================================================================
    //                                                                      General Helper
    //                                                                      ==============
    // At the future, go to InternalBasicHandler
    protected String getLineSeparator() {
        return SimpleSystemUtil.GetLineSeparator();
    }
}

}