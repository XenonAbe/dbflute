
using System;
using System.Data;
using Seasar.Extension.ADO;
using Seasar.Extension.ADO.Types;
using Seasar.Framework.Util;

using ${glPackageBaseCommon};
using ${glPackageBaseCommonUtil};

namespace ${glPackageBaseCommonS2DaoInternalSqlHandler} {

    public class ${glInternalBasicHandler} {

        private IDataSource _dataSource;
        private string _sql;
        private ICommandFactory _commandFactory;
        private int _commandTimeout = -1;

        public ${glInternalBasicHandler}(IDataSource ds, string sql, ICommandFactory commandFactory) {
            DataSource = ds;
            Sql = sql;
            CommandFactory = commandFactory;
        }

        public IDataSource DataSource {
            get { return _dataSource; }
            set { _dataSource = value; }
        }

        public string Sql {
            get { return _sql; }
            set { _sql = value; }
        }

        public ICommandFactory CommandFactory {
            get { return _commandFactory; }
            set { _commandFactory = value; }
        }

        protected IDbConnection Connection {
            get {
                if (_dataSource == null) {
                    throw new SystemException("The dataSource should not be null at InternalBasicHandler!");
                }
                return DataSourceUtil.GetConnection(_dataSource);
            }
        }

        protected virtual IDbCommand Command(IDbConnection connection) {
            if (_sql == null) {
                throw new SystemException("The sql should not be null at InternalBasicHandler!!");
            }
            IDbCommand cmd = _commandFactory.CreateCommand(connection, _sql);
            if (_commandTimeout > -1) {
                cmd.CommandTimeout = _commandTimeout;
            }
            return cmd;
        }

        protected virtual void BindArgs(IDbCommand command, object[] args, Type[] argTypes) {
            if (args == null) return;
            string[] argNames = _commandFactory.GetArgNames(command, args);
            for (int i = 0; i < args.Length; ++i) {
                IValueType valueType = ValueTypes.GetValueType(argTypes[i]);
                try {
                    valueType.BindValue(command, argNames[i], args[i]);
                } catch (Exception e) {
                    throw new SQLRuntimeException(e);
                }
            }
        }

        protected virtual Type[] GetArgTypes(object[] args) {
            if (args == null) {
                return null;
            }
            Type[] argTypes = new Type[args.Length];
            for (int i = 0; i < args.Length; ++i) {
                object arg = args[i];
                if (arg != null) {
                    argTypes[i] = arg.GetType();
                }
            }
            return argTypes;
        }

        protected virtual string GetCompleteSql(object[] args) {
            return _commandFactory.GetCompleteSql(_sql, args);
        }

        protected virtual void LogSql(Object[] args, Type[] argTypes) {
            if (QLog.IsLogEnabled()) {
                String completeSql = GetCompleteSql(args);
                if (IsContainsLineSeparatorInSql()) {
                    QLog.Log(GetLineSeparator() + completeSql);
                } else {
                    QLog.Log(completeSql);
                }
            }
        }

        protected bool IsContainsLineSeparatorInSql() {
            return Sql != null ? Sql.Contains(GetLineSeparator()) : false;
        }

        // ===============================================================================
        //                                                               ADO.NET Delegator
        //                                                               =================
        protected virtual Object ExecuteScalar(IDbCommand cmd, Object resource) {
            return CommandFactory.ExecuteScalar(DataSource, cmd);
        }

        protected virtual int ExecuteUpdate(IDbCommand cmd, Object resource) {
            return CommandFactory.ExecuteNonQuery(DataSource, cmd);
        }

        protected virtual void Close(IDbConnection conn) {
            DataSource.CloseConnection(conn);
        }

        protected virtual void Close(IDbCommand cmd) {
            CommandUtil.Close(cmd);
        }

        protected virtual void Close(IDataReader dataReader) {
            DataReaderUtil.Close(dataReader);
        }

        // ===============================================================================
        //                                                                  General Helper
        //                                                                  ==============
        protected String GetLineSeparator() {
            return SimpleSystemUtil.GetLineSeparator();
        }
    }
}