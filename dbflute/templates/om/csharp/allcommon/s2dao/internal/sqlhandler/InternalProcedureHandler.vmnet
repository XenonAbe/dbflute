
using System;
using System.Data;

using Seasar.Extension.ADO;

using ${glPackageBaseCommonJavaLike};
using ${glPackageBaseCommonS2DaoInternalSqlCommand};

namespace ${glPackageBaseCommonS2DaoInternalSqlHandler} {

public class ${glInternalProcedureHandler} : ${glInternalBasicSelectHandler} {

        // ===============================================================================
        //                                                                       Attribute
        //                                                                       =========
        private ProcedureMetaData _procedureMetaData;
		
        // ===============================================================================
        //                                                                     Constructor
        //                                                                     ===========
        public ${glInternalProcedureHandler}(IDataSource dataSource, String sql,
                IDataReaderHandler dataReaderHandler, ICommandFactory commandFactory,
                IDataReaderFactory dataReaderFactory, ProcedureMetaData procedureMetaData)
                : base(dataSource, sql, dataReaderHandler, commandFactory, dataReaderFactory) {
            this._procedureMetaData = procedureMetaData;
        }

        // ===============================================================================
        //                                                                         Execute
        //                                                                         =======
        protected override Object Execute(IDbConnection conn, Object[] args, Type[] argTypes) {
            Object dto = null;// getArgumentDto(args);
            LogSql(args, argTypes);
            Object ret = null;
            int count = null;
            IDbCommand dbCommand = null;
            try {
                dbCommand = PrepareCallableStatement(conn, this.Sql);
                Object returnValue = null; 
                if (_procedureMetaData.HasReturnParameterType) {
                    String returnParamName = BindReturnValues(cmd, "RetValue", GetDbValueType(returnType));
                    BindArgs(dbCommand, dto);
                    CommandFactory.ExecuteNonQuery(this.DataSource, cs);
                    IDbDataParameter param = (IDbDataParameter)cmd.Parameters[returnParamName]
                    ret = param.Value;
                    count = 1;
                } else {
                    BindArgs(dbCommand, dto);
                    CommandFactory.ExecuteNonQuery(this.DataSource, cs);
                }
                // return handleOutParameters(cs, dto, returnValue);
                return ret;
            } catch (Exception e) {
                // handleSQLException(e, cs);
                return null;// Unreachable!
            } finally {
                try {
                    Close(dbCommand);
                } finally {
                    Close(conn);
                }
            }
        }
        protected IDbCommand PrepareCallableStatement(Connection conn, String sql) {
            if (this.Sql == null) { throw new IllegalStateException("The SQL should not be null!"); }
            IDbCommand dbCommand = CommandFactory.CreateCommand(conn, sql);
            dbCommand.CommandType = CommandType.StoredProcedure;
            return dbCommand;
        }
        protected void BindArgs(IDbCommand dbCommand, Object dto)
            if (dto == null) { return; }
            return; // TODO: @jflute -- Not Implemented
        }
    }
}