
using System;
using System.Reflection;
using System.Collections;
using System.Text;

using Seasar.Framework.Aop;
using Seasar.Framework.Aop.Interceptors;
using Seasar.Dao;

using ${glPackageBaseCommon};
using ${glPackageBaseCommonCBean};
using ${glPackageBaseCommonException};
using ${glPackageBaseCommonUtil};

namespace ${glPackageBaseCommonS2Dao} {

    public class ${glDaoInterceptor} : AbstractInterceptor {

        // ===============================================================================
        //                                                                      Definition
        //                                                                      ==========
        private static readonly log4net.ILog _log = log4net.LogManager.GetLogger(MethodBase.GetCurrentMethod().DeclaringType);

        // ===============================================================================
        //                                                                       Attribute
        //                                                                       =========
        private IDaoMetaDataFactory daoMetaDataFactory_;

        // ===============================================================================
        //                                                                     Constructor
        //                                                                     ===========
        public ${glDaoInterceptor}(IDaoMetaDataFactory daoMetaDataFactory) {
            daoMetaDataFactory_ = daoMetaDataFactory;
        }

        // ===============================================================================
        //                                                                          Invoke
        //                                                                          ======
        public override object Invoke(IMethodInvocation invocation) {
            ClearThreadLocal();
            try {
                return DispatchInvoking(invocation);
            } finally {
                ClearThreadLocal();
            }
        }

        protected virtual object DispatchInvoking(IMethodInvocation invocation) {
            MethodBase method = invocation.Method;
            if (!method.IsAbstract) {
                return invocation.Proceed();
            }

            if (_log.IsDebugEnabled) {
                TraceMethod(invocation);
            }

            DateTime? before = null;
            if (_log.IsDebugEnabled) {
                before = DateTime.Now; // for performance view
            }

            // TODO: @jflute -- In Development for OutsideSql
            // PreprocessOutsideSql(invocation);

            ISqlCommand cmd = null;
            {
                DateTime? beforeCmd = null;
                if (_log.IsDebugEnabled) {
                    beforeCmd = DateTime.Now;
                }
                Type targetType = GetComponentDef(invocation).ComponentType;
                IDaoMetaData dmd = null;
                try {
                    dmd = daoMetaDataFactory_.GetDaoMetaData(targetType);
                } catch (Exception e) {
                    _log.Warn("IDaoMetaDataFactory#GetDaoMetaData() threw the exception: targetType=" + targetType, e);
                    throw;
                }
                try {
                    cmd = dmd.GetSqlCommand(method.Name);
                } catch (Exception e) {
                    _log.Warn("IDaoMetaData#GetSqlCommand() threw the exception: dmd=" + dmd + " methodName=" + method.Name, e);
                    throw;
                }
                if (_log.IsDebugEnabled && beforeCmd != null) {
                    DateTime afterCmd = DateTime.Now;
                    if (!afterCmd.Equals(beforeCmd.Value)) {
                        TraceSqlCommand(invocation, cmd, beforeCmd.Value, afterCmd);
                    }
                }
            }

            ${glConditionBeanInterfaceName} cb = null;
            try {
                cb = PreprocessConditionBean(invocation, cmd);
            } catch (Exception e) {
                _log.Warn("${glDaoInterceptor}#PreprocessConditionBean() threw the exception: ", e);
                throw;
            }

            object ret = null;
            try {
                ret = cmd.Execute(invocation.Arguments);
            } catch (Exception e) {
                if (e is NotSingleRowUpdatedRuntimeException) {
                    throw new ${glPackageBaseCommonException}.${glEntityAlreadyUpdatedException}((NotSingleRowUpdatedRuntimeException)e);
                }
                _log.Debug(" ");
                _log.Debug("/ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @");
                _log.Debug("Dao threw the exception: " + e.GetType() + " msg=" + e.Message);
                _log.Debug("    method   --> " + invocation.Method);
                _log.Debug("    argument --> " + ${glTraceViewUtilName}.ConvertObjectArrayToStringView(invocation.Arguments));
                if (e is Seasar.Framework.Exceptions.SQLRuntimeException) {
                    String sql = ((Seasar.Framework.Exceptions.SQLRuntimeException)e).Sql;
                    _log.Debug("    sql      --> " + sql);
                }
                _log.Debug("@ @ @ @ @ @ @ @ @ @ @ /");
                _log.Debug(" ");
                throw;
            } finally {
                PostprocessConditionBean(invocation, cb);
            }

            Type retType = ((MethodInfo) method).ReturnType;
            ret = Seasar.Framework.Util.ConversionUtil.ConvertTargetType(ret, retType);

            if (_log.IsDebugEnabled && before != null) {
                DateTime after = DateTime.Now; // for performance view
                TraceReturn(invocation, retType, ret, before.Value, after);
            }
            return ret;
        }

        protected void TraceMethod(IMethodInvocation invocation) {
            if (!_log.IsDebugEnabled) {
                return;
            }
            MethodBase method = invocation.Method;
            String invokeName = method.DeclaringType.Name + "." + method.Name;
            int length = invokeName.Length;
            StringBuilder sb = new StringBuilder();
            for (int i=0; i < length; i++) {
                sb.Append("=");
            }
            _log.Debug("/=====================================================" + sb.ToString() + "==");
            _log.Debug("                                                      " + invokeName + "()");
            _log.Debug("                                                      " + sb.ToString() + "=/");
        }

        protected void TraceSqlCommand(IMethodInvocation invocation, ISqlCommand cmd, DateTime beforeCmd, DateTime afterCmd) {
            if (!_log.IsDebugEnabled) {
                return;
            }
            _log.Debug("SqlCommand Initialization Cost: [" + ${glTraceViewUtilName}.ConvertToPerformanceView(beforeCmd, afterCmd) + "]");
        }

        protected void TraceReturn(IMethodInvocation invocation, Type retType, Object ret, DateTime before, DateTime after) {
            if (!_log.IsDebugEnabled) {
                return;
            }
            MethodBase method = invocation.Method;
            try {
                String daoResultPrefix = "===========/ [" + ${glTraceViewUtilName}.ConvertToPerformanceView(before, after) + " - ";
                if (typeof(System.Collections.Generic.IList<>).Name.Equals(retType.Name)) {
                    if (ret == null) {
                        _log.Debug(daoResultPrefix + "Selected list: null]");
                    } else {
                        PropertyInfo pi = ret.GetType().GetProperty("Count");
                        int count = (int)pi.GetValue(ret, null);
                        // TODO: @jflute -- I want to get First Element!
                        _log.Debug(daoResultPrefix + "Selected list: " + count + "]");
                    }
                } else if (typeof(${glEntityInterfaceName}).IsAssignableFrom(retType)) {
                    if (ret == null) {
                        _log.Debug(daoResultPrefix + "Selected entity: null" + "]");
                    } else {
                        ${glEntityInterfaceName} entity = (${glEntityInterfaceName})ret;
                        _log.Debug(daoResultPrefix + "Selected entity: " + entity + "]");
                    }
                } else {
                    if (IsSelectCountIgnoreFetchScopeMethod(invocation)) {
                        _log.Debug(daoResultPrefix + "Selected count: " + ret + "]");
                    } else {
                        _log.Debug(daoResultPrefix + "Result: " + ret + "]");
                    }
                }
                _log.Debug(" ");
            } catch (Exception e) {
                String msg = "Result object debug threw the exception: methodName=" + method.Name + " retType=" + retType;
                msg = msg + " ret=" + ret;
                _log.Warn(msg, e);
                throw;
            }
        }

        // ===============================================================================
        //                                                                Pre Post Process
        //                                                                ================
        // -------------------------------------------------
        //                                        OutsideSql
        //                                        ----------
        // - - - - - - - - - -
        //              Select
        //               - - -
        // - - - - - - - - - -
        //             Execute
        //             - - - -
        // -------------------------------------------------
        //                                     ConditionBean
        //                                     -------------
        protected ${glConditionBeanInterfaceName} PreprocessConditionBean(IMethodInvocation invocation, ISqlCommand cmd) {
            ${glConditionBeanInterfaceName} cb = null;
            {
                Object[] args = invocation.Arguments;
                if (args == null || !(args.Length >= 1)) {
                    return null;
                }
                if (args[0] == null) {
                    return null;
                }

                if (!${glConditionBeanContextName}.IsTheArgumentConditionBean(args[0])) {// The argument is not condition-bean...
                    if (${glFetchNarrowingBeanContextName}.IsTheArgumentFetchNarrowingBean(args[0]) && !IsSelectCountIgnoreFetchScopeMethod(invocation)) {
                        // Fetch-narrowing-bean and Not select count!
                        ${glFetchNarrowingBeanContextName}.SetFetchNarrowingBeanOnThread((${glFetchNarrowingBeanInterfaceName})args[0]);
                    }
                    return null;
                }

                if (!(cmd is ${glSelectDynamicCommand})) {// The argument is condition-bean, but this method using outer-file-sql...
                    ${glFetchNarrowingBeanContextName}.SetFetchNarrowingBeanOnThread((${glFetchNarrowingBeanInterfaceName})args[0]);
                    return null;
                }
                cb = (${glConditionBeanInterfaceName})args[0];
            }

            if (IsSelectCountIgnoreFetchScopeMethod(invocation)) {
                cb.SetupSelectCountIgnoreFetchScope();
            } else {
                ${glFetchNarrowingBeanContextName}.SetFetchNarrowingBeanOnThread(cb);
            }

            ${glConditionBeanContextName}.SetConditionBeanOnThread(cb);
            return cb;
        }

        public void PostprocessConditionBean(IMethodInvocation invocation, ${glConditionBeanInterfaceName} cb) {
            if (cb == null) {
                return;
            }
            if (IsSelectCountIgnoreFetchScopeMethod(invocation)) {
                cb.AfterCareSelectCountIgnoreFetchScope();
            }
        }

        protected void ClearThreadLocal() {
            if (${glFetchNarrowingBeanContextName}.IsExistFetchNarrowingBeanOnThread()) {
                ${glFetchNarrowingBeanContextName}.ClearFetchNarrowingBeanOnThread();
            }
            if (${glConditionBeanContextName}.IsExistConditionBeanOnThread()) {
                ${glConditionBeanContextName}.ClearConditionBeanOnThread();
            }
            if (${glInternalMapContextName}.IsExistInternalMapOnThread()) {
                ${glInternalMapContextName}.ClearInternalMapOnThread();
            }
        }

        protected bool IsSelectCountIgnoreFetchScopeMethod(IMethodInvocation invocation) {
            String name = invocation.Method.Name;
            return name.StartsWith("ReadCount") || name.StartsWith("SelectCount");
        }
    }
}