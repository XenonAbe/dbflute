
using System;
using System.Reflection;
using System.Collections.Generic;
using System.Text;

using Seasar.Extension.ADO;
using Seasar.Extension.ADO.Impl;
using Seasar.Framework.Util;
using Seasar.Dao;
using Seasar.Dao.Node;
using Seasar.Dao.Parser;

using ${glPackageBaseCommonCBean};
using ${glPackageBaseCommonCBeanOutsidesql};
using ${glPackageBaseCommonException};

namespace ${glPackageBaseCommonS2Dao} {

    /**
     * My-SelectDynamicCommand.
     * Overrides original class 'SelectDynamicCommand'.
     * 
     * @author ${database.ClassAuthor}
     */
    public class ${glSelectDynamicCommand} : Seasar.Dao.Impl.SelectDynamicCommand {

        // ===============================================================================
        //                                                                      Definition
        //                                                                      ==========
        /** Log instance. */
        private static readonly log4net.ILog _log = log4net.LogManager.GetLogger(MethodBase.GetCurrentMethod().DeclaringType);

        // ===============================================================================
        //                                                                       Attribute
        //                                                                       =========
        private IDataReaderHandler dataReaderHandler;
        private IDataReaderFactory dataReaderFactory;

        /// <summary>The cache of select clause command.</summary>
        protected ${glSelectDynamicCommand} _selectClauseCommand;

        /// <summary>The cache of select clause PK-only command.</summary>
        protected ${glSelectDynamicCommand} _selectClausePKOnlyCommand;

        // ===============================================================================
        //                                                                     Constructor
        //                                                                     ===========
        public ${glSelectDynamicCommand}(IDataSource dataSource, ICommandFactory commandFactory
                , IDataReaderHandler dataReaderHandler, IDataReaderFactory dataReaderFactory)
            : base(dataSource, commandFactory, dataReaderHandler, dataReaderFactory) {
                this.dataReaderHandler = dataReaderHandler;
                this.dataReaderFactory = dataReaderFactory;
        }

        // ===============================================================================
        //                                                        Very Important Extension
        //                                                        ========================
        // -------------------------------------------------
        //                                          Override
        //                                          --------
        protected override ISqlParser CreateSqlParser(string sqlString) {
            return new InternalSqlParserImpl(sqlString);
        }

        // -------------------------------------------------
        //                                         Extension
        //                                         ---------
        public ${glSelectDynamicCommand} SetSelectClause(String value) {
            _selectClauseCommand = CreateMySelectDynamicCommand();
            _selectClauseCommand.Sql = value;
            return this;
        }

        public ${glSelectDynamicCommand} SetSelectClausePKOnly(String value) {
            _selectClausePKOnlyCommand = CreateMySelectDynamicCommand();
            _selectClausePKOnlyCommand.Sql = value;
            return this;
        }

        protected ${glSelectDynamicCommand} CreateMySelectDynamicCommand() {
            return new ${glSelectDynamicCommand}(DataSource, CommandFactory, dataReaderHandler, dataReaderFactory);
        }

        public string[] ArgNames4Nest {
            set {
                if (_selectClauseCommand != null) {
                    _selectClauseCommand.ArgNames = value;
                }
                if (_selectClausePKOnlyCommand != null) {
                    _selectClausePKOnlyCommand.ArgNames = value;
                }
            }
        }

        public Type[] ArgTypes4Nest {
            set {
                if (_selectClauseCommand != null) {
                    _selectClauseCommand.ArgTypes = value;
                }
                if (_selectClausePKOnlyCommand != null) {
                    _selectClausePKOnlyCommand.ArgTypes = value;
                }
            }
        }

        // -------------------------------------------------
        //                                        For Public
        //                                        ----------
        public ICommandContext DoApply(Object[] args) {
            return Apply(args);
        }

        // ===============================================================================
        //                                                                         Execute
        //                                                                         =======
        public override object Execute(object[] args) {
            // - - - - - - - - - - - -
            // This is top execution.
            // - - - - - - - - - - - -

            if (!${glConditionBeanContextName}.IsExistConditionBeanOnThread()) {
                // - - - - - - - - - -
                // Execute outsideSql.
                // - - - - - - - - - -
                if (${glOutsideSqlContextName}.IsExistOutsideSqlContextOnThread()) {
                    ${glOutsideSqlContextName} outsideSqlContext = ${glOutsideSqlContextName}.GetOutsideSqlContextOnThread();
                    if (outsideSqlContext.IsDynamicBinding) {
                        return ExecuteOutsideSqlAsDynamic(args, outsideSqlContext);
                    } else {
                        return ExecuteOutsideSqlAsStatic(args, outsideSqlContext);
                    }
                }

                // - - - - - - - - -
                // Execute default.
                // - - - - - - - - -
                return ExecuteDefault(args);
            }

            // - - - - - - - - - - - -
            // Execute conditionBean.
            // - - - - - - - - - - - -
            AssertSelectClauseCommand();
            IList<Object> bindVariableList = new List<Object>();
            IList<Type> bindVariableTypeList = new List<Type>();
            IList<String> bindVariableNameList = new List<String>();

            StringBuilder sb = new StringBuilder();
            sb.Append(SetupRealSelectClause(args, bindVariableList, bindVariableTypeList, bindVariableNameList));
            sb.Append(" ");
            sb.Append(SetupRealFromWhereClause(args, bindVariableList, bindVariableTypeList, bindVariableNameList));

            BasicSelectHandler selectHandler = CreateBasicSelectHandler(sb.ToString(), this.dataReaderHandler);
            Object[] bindVariableArray = new Object[bindVariableList.Count];
            bindVariableList.CopyTo(bindVariableArray, 0);
            Type[] bindVariableTypeArray = new Type[bindVariableTypeList.Count];
            bindVariableTypeList.CopyTo(bindVariableTypeArray, 0);
            String[] bindVariableNameArray = new String[bindVariableNameList.Count];
            bindVariableNameList.CopyTo(bindVariableNameArray, 0);
            return selectHandler.Execute(bindVariableArray, bindVariableTypeArray, bindVariableNameArray);
        }

        // -------------------------------------------------
        //                                   Default Execute
        //                                   ---------------

        protected virtual object ExecuteDefault(object[] args) {
            // - - - - - - - - - - - - - - - - -
            // Find specified resultSetHandler.
            // - - - - - - - - - - - - - - - - -
            IDataReaderHandler specifiedDataReaderHandler = FindSpecifiedDataReaderHandler(args);

            // - - - - - - - - -
            // Filter arguments.
            // - - - - - - - - -
            Object[] filteredArgs = FilterArgumentsForDataReaderHandler(args);

            ICommandContext ctx = Apply(filteredArgs);
            BasicSelectHandler selectHandler = CreateBasicSelectHandler(ctx.Sql, specifiedDataReaderHandler);
            return selectHandler.Execute(ctx.BindVariables, ctx.BindVariableTypes);
        }

        // -------------------------------------------------
        //                                OutsideSql Execute
        //                                ------------------
        protected Object ExecuteOutsideSqlAsStatic(Object[] args, ${glOutsideSqlContextName} outsideSqlContext) {
            // - - - - - - - - - - - - - - - - -
            // Find specified resultSetHandler.
            // - - - - - - - - - - - - - - - - -
            IDataReaderHandler specifiedDataReaderHandler = FindSpecifiedDataReaderHandler(args);

            // - - - - - - - - -
            // Filter arguments.
            // - - - - - - - - -
            Object[] filteredArgs;
            if (outsideSqlContext.IsSpecifiedOutsideSql) {
                Object parameterBean = outsideSqlContext.ParameterBean;
                filteredArgs = new Object[] {parameterBean};
            } else {
                filteredArgs = FilterArgumentsForDataReaderHandler(args);
            }

            ICommandContext ctx = Apply(filteredArgs);
            BasicSelectHandler selectHandler = CreateBasicSelectHandler(ctx.Sql, specifiedDataReaderHandler);
            return selectHandler.Execute(ctx.BindVariables, ctx.BindVariableTypes);
        }

        protected Object ExecuteOutsideSqlAsDynamic(Object[] args, ${glOutsideSqlContextName} outsideSqlContext) {
            Object firstArg = args[0];
            PropertyInfo[] properties = firstArg.GetType().GetProperties();
            String filteredSql = this.Sql;

            // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
            // Resolve embedded comment for parsing bind variable comment in embedded comment.
            // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
            for (int i = 0; i < properties.Length; i++) {
                PropertyInfo propertyInfo = properties[i];
                Type propertyType = propertyInfo.PropertyType;
                if (!propertyType.Equals(typeof(String))) {
                    continue;
                }
                String outsideSqlPiece = (String)propertyInfo.GetValue(firstArg, null);
                if (outsideSqlPiece == null) {
                    continue;
                }
                String embeddedComment = "/*$pmb." + propertyInfo.Name + "*/";
                filteredSql = filteredSql.Replace(embeddedComment, outsideSqlPiece);
            }

            ${glSelectDynamicCommand} outsideSqlCommand = CreateMySelectDynamicCommand();
            outsideSqlCommand.ArgNames = ArgNames;
            outsideSqlCommand.ArgTypes = ArgTypes;
            outsideSqlCommand.Sql = filteredSql;

            // - - - - - - - - - - - - - - - - -
            // Find specified resultSetHandler.
            // - - - - - - - - - - - - - - - - -
            IDataReaderHandler specifiedDataReaderHandler = FindSpecifiedDataReaderHandler(args);

            // - - - - - - - - -
            // Filter arguments.
            // - - - - - - - - -
            Object[] filteredArgs;
            if (outsideSqlContext.IsSpecifiedOutsideSql) {
                Object parameterBean = outsideSqlContext.ParameterBean;
                filteredArgs = new Object[] {parameterBean};
            } else {
                filteredArgs = FilterArgumentsForDataReaderHandler(args);
            }

            ICommandContext ctx = outsideSqlCommand.DoApply(filteredArgs);
            IList<Object> bindVariableList = new List<Object>();
            IList<Type> bindVariableTypeList = new List<Type>();
            IList<String> bindVariableNameList = new List<String>();
            AddBindVariableInfo(ctx, bindVariableList, bindVariableTypeList, bindVariableNameList);
            BasicSelectHandler selectHandler = CreateBasicSelectHandler(ctx.Sql, specifiedDataReaderHandler);
            Object[] bindVariableArray = new Object[bindVariableList.Count];
            bindVariableList.CopyTo(bindVariableArray, 0);
            Type[] bindVariableTypeArray = new Type[bindVariableTypeList.Count];
            bindVariableTypeList.CopyTo(bindVariableTypeArray, 0);
            String[] bindVariableNameArray = new String[bindVariableNameList.Count];
            bindVariableNameList.CopyTo(bindVariableNameArray, 0);
            return selectHandler.Execute(bindVariableArray, bindVariableTypeArray, bindVariableNameArray);
        }

        protected virtual object[] FilterArgumentsForDataReaderHandler(object[] args) {
            if (args == null || args.Length == 0) {
                return args;
            }
            object[] filteredArgs;
            if (args[args.Length - 1] is ${glPackageBaseCommonJdbc}.${glCursorHandlerName}) {
                filteredArgs = new object[args.Length - 1];
                for (int i=0; i < args.Length - 1; i++) {
                    filteredArgs[i] = args[i];
                }
            } else {
                filteredArgs = args;
            }
            return filteredArgs;
        }

        protected IDataReaderHandler FindSpecifiedDataReaderHandler(object[] args) {
            if (args == null || args.Length == 0) {
                return this.dataReaderHandler;
            }
            if (args[args.Length-1] is ${glPackageBaseCommonJdbc}.${glCursorHandlerName}) {
                ${glPackageBaseCommonJdbc}.${glCursorHandlerName} cursorHandler = (${glPackageBaseCommonJdbc}.${glCursorHandlerName})args[args.Length-1];
                return new DataReaderCursol(cursorHandler);
            }
            if (ArgTypes.Length+1 == args.Length && args[args.Length-1] == null) {
                String lineSeparator = Environment.NewLine;
                String msg = "System Level Exception!" + lineSeparator;
                msg = msg + "/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *" + lineSeparator;
                msg = msg + "The size of arg types have not been same as the size of arg objects:";
                msg = msg + " argTypes=" + ArgTypes.Length + " args=" + args.Length + lineSeparator;
                msg = msg + "If the arguments contain DataReaderHandler, the argument value should not be null!" + lineSeparator;
                for (int i=0; i < args.Length - 1; i++) {
                    msg = msg + "  args[" + i + "] -- " + args[i] + lineSeparator;
                }
                msg = msg + "* * * * * * * * * */" + lineSeparator;
                throw new SystemException(msg);
            }
            return this.dataReaderHandler;
        }

        protected virtual String SetupRealSelectClause(Object[] args, IList<Object> bindVariableList, IList<Type> bindVariableTypeList, IList<String> bindVariableNameList) {
            ${glConditionBeanInterfaceName} cb = ${glConditionBeanContextName}.GetConditionBeanOnThread();
            if (cb.IsSelectCountIgnoreFetchScope()) {
                return "select count(*)";
            }
            String realSelectClause;
            {
                ICommandContext ctx;
                if (cb.IsLimitSelect_PKOnly()) {
                    ctx = _selectClausePKOnlyCommand.DoApply(args);
                } else {
                    ctx = _selectClauseCommand.DoApply(args);
                }
                realSelectClause = ctx.Sql;
                AddBindVariableInfo(ctx, bindVariableList, bindVariableTypeList, bindVariableNameList);
            }
            return realSelectClause;
        }

        protected virtual String SetupRealFromWhereClause(Object[] args, IList<Object> bindVariableList, IList<Type> bindVariableTypeList, IList<String> bindVariableNameList) {
            ${glConditionBeanInterfaceName} cb = ${glConditionBeanContextName}.GetConditionBeanOnThread();
            String realFromWhereClause;
            {
                ${glSelectDynamicCommand} fromWhereCommand = CreateMySelectDynamicCommand();
                fromWhereCommand.ArgNames = this.ArgNames;
                fromWhereCommand.ArgTypes = this.ArgTypes;
                fromWhereCommand.Sql = cb.GetClause();
                ICommandContext ctx = fromWhereCommand.DoApply(args);
                realFromWhereClause = ctx.Sql;
                AddBindVariableInfo(ctx, bindVariableList, bindVariableTypeList, bindVariableNameList);
            }
            return realFromWhereClause;
        }

        protected BasicSelectHandler CreateBasicSelectHandler(String realSql, IDataReaderHandler specifiedDataReaderHandler) {
            return new BasicSelectHandler(DataSource, realSql, specifiedDataReaderHandler, CommandFactory, dataReaderFactory);
        }

        // -------------------------------------------------
        //                                      Setup Helper
        //                                      ------------
        protected void AddBindVariableInfo(ICommandContext ctx, IList<Object> bindVariableList, IList<Type> bindVariableTypeList, IList<String> bindVariableNameList) {
            Object[] bindVariables = ctx.BindVariables;
            AddBindVariableList(bindVariableList, bindVariables);
            Type[] bindVariableTypes = ctx.BindVariableTypes;
            AddBindVariableTypeList(bindVariableTypeList, bindVariableTypes);
            String[] bindVariableNames = ctx.BindVariableNames;
            AddBindVariableNameList(bindVariableNameList, bindVariableNames);
        }

        protected void AddBindVariableList(IList<Object> bindVariableList, Object[] bindVariables) {
            for (int i=0; i < bindVariables.Length; i++) {
                bindVariableList.Add(bindVariables[i]);
            }
        }

        protected void AddBindVariableTypeList(IList<Type> bindVariableTypeList, Type[] bindVariableTypes) {
            for (int i=0; i < bindVariableTypes.Length; i++) {
                bindVariableTypeList.Add(bindVariableTypes[i]);
            }
        }

        protected void AddBindVariableNameList(IList<String> bindVariableNameList, String[] bindVariableNames) {
            for (int i=0; i < bindVariableNames.Length; i++) {
                bindVariableNameList.Add(bindVariableNames[i]);
            }
        }

        protected void AssertSelectClauseCommand() {
            if (_selectClauseCommand == null) {
                String msg = "Select clause command should not be null.";
                throw new SystemException(msg);
            }
        }

        protected class DataReaderCursol : IDataReaderHandler {
            protected ${glPackageBaseCommonJdbc}.${glCursorHandlerName} _cursorHandler;
            public DataReaderCursol(${glPackageBaseCommonJdbc}.${glCursorHandlerName} cursorHandler) {
                this._cursorHandler = cursorHandler;
            }
            public object Handle(System.Data.IDataReader dr) {
                return _cursorHandler.Handle(dr);
            }
        }
    }

    public class InternalSqlParserImpl : ISqlParser {
        private readonly ISqlTokenizer _tokenizer;
        private readonly System.Collections.Stack _nodeStack = new System.Collections.Stack();
        private String _specifiedSql;// Extension!

        public InternalSqlParserImpl(String sql) {
            sql = sql.Trim();
            if (sql.EndsWith(";")) {
                sql = sql.Substring(0, sql.Length - 1);
            }
            _specifiedSql = sql;
            _tokenizer = new SqlTokenizerImpl(sql);
        }

        public INode Parse() {
            Push(new ContainerNode());
            while (TokenType.EOF != _tokenizer.Next()) {
                ParseToken();
            }
            return Pop();
        }

        protected void ParseToken() {
            switch (_tokenizer.TokenType) {
                case TokenType.SQL:
                    ParseSql();
                    break;
                case TokenType.COMMENT:
                    ParseComment();
                    break;
                case TokenType.ELSE:
                    ParseElse();
                    break;
                case TokenType.BIND_VARIABLE:
                    ParseBindVariable();
                    break;
            }
        }

        protected void ParseSql() {
            string sql = _tokenizer.Token;
            if (IsElseMode()) {
                sql = sql.Replace("--", string.Empty);
            }
            INode node = Peek();

            if ((node is InternalIfNode || node is ElseNode) && node.ChildSize == 0) {
                ISqlTokenizer st = new SqlTokenizerImpl(sql);
                st.SkipWhitespace();
                string token = st.SkipToken();
                st.SkipWhitespace();
                if ("AND".Equals(token.ToUpper()) || "OR".Equals(token.ToUpper()))
                {
                    node.AddChild(new PrefixSqlNode(st.Before, st.After));
                }
                else
                {
                    node.AddChild(new SqlNode(sql));
                }
            }
            else
            {
                node.AddChild(new SqlNode(sql));
            }
        }

        protected void ParseComment() {
            string comment = _tokenizer.Token;
            if (IsTargetComment(comment)) {
                if (IsIfComment(comment)) {
                    ParseIf();
                } else if (IsBeginComment(comment)) {
                    ParseBegin();
                } else if (IsEndComment(comment)) {
                    return;
                } else {
                    ParseCommentBindVariable();
                }
            } else if (comment != null && 0 < comment.Length) {
				String before = _tokenizer.Before; // for Hint Clause of Database
				Peek().AddChild(new SqlNode(before.Substring(before.LastIndexOf("/*"))));
			}
        }

        protected void ParseIf() {
            string condition = _tokenizer.Token.Substring(2).Trim();
            if (StringUtil.IsEmpty(condition)) {
                throw new IfConditionNotFoundRuntimeException();
            }
            ContainerNode ifNode = CreateIfNode(condition);
            Peek().AddChild(ifNode);
            Push(ifNode);
            ParseEnd();
        }

        protected void ParseBegin() {
            BeginNode beginNode = new BeginNode();
            Peek().AddChild(beginNode);
            Push(beginNode);
            ParseEnd();
        }

        protected void ParseEnd() {
            while (TokenType.EOF != _tokenizer.Next()) {
                if (_tokenizer.TokenType == TokenType.COMMENT
                    && IsEndComment(_tokenizer.Token)) {
                    Pop();
                    return;
                }
                ParseToken();
            }
            throw new EndCommentNotFoundRuntimeException();
        }

        protected void ParseElse() {
            INode parent = Peek();
            if (!(parent is InternalIfNode)) {
                return;
            }
            InternalIfNode ifNode = (InternalIfNode) Pop();
            ElseNode elseNode = new ElseNode();
            ifNode.ElseNode = elseNode;
            Push(elseNode);
            _tokenizer.SkipWhitespace();
        }

        protected void ParseCommentBindVariable() {
            string expr = _tokenizer.Token;
            string s = _tokenizer.SkipToken();
            if (s.StartsWith("(") && s.EndsWith(")")) {
                Peek().AddChild(CreateParenBindVariableNode(expr));
            } else if (expr.StartsWith("$")) {
                Peek().AddChild(CreateEmbeddedValueNode(expr.Substring(1)));
            } else {
                Peek().AddChild(CreateBindVariableNode(expr));
            }
        }

        protected void ParseBindVariable() {
            string expr = _tokenizer.Token;
            Peek().AddChild(CreateBindVariableNode(expr));
        }

        protected ParenBindVariableNode CreateParenBindVariableNode(string expr) {
            return new ParenBindVariableNode(expr);
        }

        protected AbstractNode CreateEmbeddedValueNode(string expr) {
            return new InternalEmbeddedValueNode(expr, _specifiedSql);
        }

        protected AbstractNode CreateBindVariableNode(string expr) {
            return new InternalBindVariableNode(expr, _specifiedSql);
        }

        protected ContainerNode CreateIfNode(string expr) {
            return new InternalIfNode(expr, _specifiedSql);
        }

        protected INode Pop() {
            return (INode) _nodeStack.Pop();
        }

        protected INode Peek() {
            return (INode) _nodeStack.Peek();
        }

        protected void Push(INode node) {
            _nodeStack.Push(node);
        }

        protected bool IsElseMode() {
            for (int i = 0; i < _nodeStack.Count; ++i) {
                if (_nodeStack.ToArray()[i] is ElseNode) {
                    return true;
                }
            }
            return false;
        }

        private static bool IsTargetComment(string comment) {
            return comment != null && comment.Length > 0
                && IsCSharpIdentifierStart(comment.ToCharArray()[0]);
        }

        private static bool IsCSharpIdentifierStart(Char c) {
            return Char.IsLetterOrDigit(c) || c == '_' || c == '\\' || c == '$' || c == '@';
        }

        private static bool IsIfComment(string comment) {
            return comment.StartsWith("IF");
        }

        private static bool IsBeginComment(string content) {
            return content != null && "BEGIN".Equals(content);
        }

        private static bool IsEndComment(string content) {
            return content != null && "END".Equals(content);
        }
    }

    // -----------------------------------------------------
    //                                      BindVariableNode
    //                                      ----------------
    public class InternalBindVariableNode : AbstractNode {
        private String _expression;
        private String[] _names;
        private String _specifiedSql;

        public InternalBindVariableNode(String expression, String specifiedSql) : base () {
            _expression = expression;
            _names = expression.Split('.');
            _specifiedSql = specifiedSql;
        }

        public override void Accept(ICommandContext ctx) {
            object value = ctx.GetArg(_names[0]);
            Type type = (value != null ? value.GetType() : null);
            InternalValueAndType valueAndType = new InternalValueAndType();
            valueAndType.TargetValue = value;
            valueAndType.TargetType = type;
            SetupValueAndType(valueAndType);
            ctx.AddSql(valueAndType.TargetValue, valueAndType.TargetType, _expression.Replace('.', '_'));
        }

        protected void SetupValueAndType(InternalValueAndType valueAndType) {
            InternalValueAndTypeSetuper setupper = new InternalValueAndTypeSetuper(_expression, _names, _specifiedSql, true);
            setupper.SetupValueAndType(valueAndType);
        }
    }

    // -----------------------------------------------------
    //                                     EmbeddedValueNode
    //                                     -----------------
    public class InternalEmbeddedValueNode : AbstractNode {
        private String _expression;
        private String[] _names;
        private String _specifiedSql;

        public InternalEmbeddedValueNode(String expression, String specifiedSql) : base () {
            _expression = expression;
            _names = expression.Split('.');
            _specifiedSql = specifiedSql;
        }

        public override void Accept(ICommandContext ctx) {
            Object value = ctx.GetArg(_names[0]);
            Type type = (value != null ? value.GetType() : null);
            InternalValueAndType valueAndType = new InternalValueAndType();
            valueAndType.TargetValue = value;
            valueAndType.TargetType = type;
            SetupValueAndType(valueAndType);
            ctx.AddSql(valueAndType.TargetValue != null ? valueAndType.TargetValue.ToString() : (String)null);
        }

        protected void SetupValueAndType(InternalValueAndType valueAndType) {
            InternalValueAndTypeSetuper setupper = new InternalValueAndTypeSetuper(_expression, _names, _specifiedSql, false);
            setupper.SetupValueAndType(valueAndType);
        }
    }

    // -----------------------------------------------------
    //                                        Value and Type
    //                                        --------------
    public class InternalValueAndType {
        public Object _value;
        public Type _type;
        public Object TargetValue {
            get { return _value; }
            set { _value = value; }
        }
        public Type TargetType {
            get { return _type; }
            set { _type = value; }
        }
    }

    public class InternalValueAndTypeSetuper {
        protected String _expression;
        protected String[] _names;
        protected String _specifiedSql;
        protected bool _bind;
        public InternalValueAndTypeSetuper(String expression, String[] names, String specifiedSql, bool bind) {
            this._expression = expression;
            this._names = names;
            this._specifiedSql = specifiedSql;
            this._bind = bind;
        }

        public void SetupValueAndType(InternalValueAndType valueAndType) {
            Object value = valueAndType.TargetValue;
            Type type = valueAndType.TargetType;
            for (int pos = 1; pos < _names.Length; ++pos) {
                if (value == null) {
                    break;
                }
                // {Unsupported}
                // if (value is IDictionary<>) {
                //     IDictionary map = (IDictionary) value;
                //     value = map[_names[pos]];
                //     if (value == null) {
                //         break;
                //     }
                //     type = value.GetType();
                //     continue;
                // }
                String currentName = _names[pos];
                PropertyInfo pi = type.GetProperty(currentName);
                if (pi != null) {
                    value = pi.GetValue(value, null);
                    type = (value != null ? value.GetType() : pi.PropertyType);
                    continue;
                }
                if (pos == 1 && typeof(${glMapParameterBeanInterfaceName}).IsAssignableFrom(type)) {
                    ${glMapParameterBeanInterfaceName} pmb = (${glMapParameterBeanInterfaceName})value;
                    IDictionary<String, Object> map = pmb.ParameterMap;
                    Object elementValue = (map != null && map.ContainsKey(currentName) ? map[currentName] : null);
                    if (elementValue != null) {
                        value = elementValue;
                        type = elementValue.GetType();
                        continue;
                    }
                }
                ThrowBindOrEmbeddedCommentNotFoundPropertyException(_expression, type, currentName, _specifiedSql, _bind);
            }
            valueAndType.TargetValue = value;
            valueAndType.TargetType = type;
        }

        protected virtual void ThrowBindOrEmbeddedCommentNotFoundPropertyException(String expression, Type targetType, String notFoundProperty, String specifiedSql, bool bind) {
            String msg = "Look! Read the message below." + GetLineSeparator();
            msg = msg + "/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *" + GetLineSeparator();
            msg = msg + "The property on the " + (bind ? "bind variable" : "embedded value") + " comment was Not Found!" + GetLineSeparator();
            msg = msg + GetLineSeparator();
            msg = msg + "[Advice]" + GetLineSeparator();
            msg = msg + "Please confirm the existence of your property on your arguments." + GetLineSeparator();
            msg = msg + GetLineSeparator();
            msg = msg + "[SQL Comment Expression]" + GetLineSeparator() + expression + GetLineSeparator();
            msg = msg + GetLineSeparator();
            msg = msg + "[NotFound Property]" + GetLineSeparator() + (targetType != null ? targetType.Name + "#" : "") + notFoundProperty + GetLineSeparator();
            msg = msg + GetLineSeparator();
            msg = msg + "[Specified SQL]" + GetLineSeparator() + specifiedSql + GetLineSeparator();
            msg = msg + "* * * * * * * * * */" + GetLineSeparator();
            if (bind) {
                throw new ${glBindVariableCommentNotFoundPropertyException}(msg);
            } else {
                throw new ${glEmbeddedValueCommentNotFoundPropertyException}(msg);
            }
        }

        protected String GetLineSeparator() {
            return Environment.NewLine;
        }
    }

    // -----------------------------------------------------
    //                                                IfNode
    //                                                ------
    public class InternalIfNode : ContainerNode {
        private String _expression;
        private ElseNode _elseNode;
        private readonly ExpressionUtil _expressionUtil;
        private String _specifiedSql;

        public InternalIfNode(String expression, String specifiedSql) {
            _expressionUtil = new ExpressionUtil();
            _expression = _expressionUtil.parseExpression(expression);
            if (_expression == null)
                throw new ApplicationException("IllegalBoolExpression=[" + _expression + "]");
            this._specifiedSql = specifiedSql;
        }

        public string Expression {
            get { return _expression; }
        }

        public ElseNode ElseNode {
            get { return _elseNode; }
            set { _elseNode = value; }
        }

        public override void Accept(ICommandContext ctx) {
            Object result = null;
            try {
                result = InvokeExpression(_expression, ctx);
            } catch (Exception e) {
                if (!_expression.Contains("pmb.")) {
                    ThrowIfCommentWrongExpressionException(_expression, e, _specifiedSql);
                }
                String replaced = _expression.Replace("pmb.", "pmb.ParameterMap.");
                String secondParsedExpression = _expressionUtil.parseExpression(replaced);
                try {
                    result = InvokeExpression(secondParsedExpression, ctx);
                } catch (Exception) {
                    ThrowIfCommentWrongExpressionException(_expression, e, _specifiedSql);
                }
                if (result == null) {
                    ThrowIfCommentWrongExpressionException(_expression, e, _specifiedSql);
                }
                _expression = secondParsedExpression;
            }
            if (result != null) {
                if (Convert.ToBoolean(result)) {
                    base.Accept(ctx);
                    ctx.IsEnabled = true;
                } else if (_elseNode != null) {
                    _elseNode.Accept(ctx);
                    ctx.IsEnabled = true;
                }
            } else {
                ThrowIfCommentNotBooleanResultException(_expression, result, _specifiedSql);
            }
        }

        protected virtual void ThrowIfCommentWrongExpressionException(String expression, Exception cause, String specifiedSql) {
            String msg = "Look! Read the message below." + GetLineSeparator();
            msg = msg + "/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *" + GetLineSeparator();
            msg = msg + "The IF comment of your specified SQL was Wrong!" + GetLineSeparator();
            msg = msg + GetLineSeparator();
            msg = msg + "[Advice]" + GetLineSeparator();
            msg = msg + "Please confirm the existence of your property on your arguments." + GetLineSeparator();
            msg = msg + "And confirm the IF comment of your specified SQL." + GetLineSeparator();
            msg = msg + GetLineSeparator();
            msg = msg + "[IF Comment Expression]" + GetLineSeparator() + expression + GetLineSeparator();
            msg = msg + GetLineSeparator();
            msg = msg + "[Cause Message]" + GetLineSeparator() + cause.Message + GetLineSeparator();
            msg = msg + GetLineSeparator();
            msg = msg + "[Specified SQL]" + GetLineSeparator() + specifiedSql + GetLineSeparator();
            msg = msg + "* * * * * * * * * */" + GetLineSeparator();
            throw new ${glIfCommentWrongExpressionException}(msg, cause);
        }

        protected virtual void ThrowIfCommentNotBooleanResultException(String expression, Object result, String specifiedSql) {
            String msg = "Look! Read the message below." + GetLineSeparator();
            msg = msg + "/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *" + GetLineSeparator();
            msg = msg + "The boolean expression on IF comment of your specified SQL was Wrong!" + GetLineSeparator();
            msg = msg + GetLineSeparator();
            msg = msg + "[Advice]" + GetLineSeparator();
            msg = msg + "Please confirm the grammar of your IF comment. Does it really express boolean?" + GetLineSeparator();
            msg = msg + "And confirm the existence of your property on your arguments if you use parameterMap." + GetLineSeparator();
            msg = msg + GetLineSeparator();
            msg = msg + "[IF Comment Expression]" + GetLineSeparator() + expression + GetLineSeparator();
            msg = msg + GetLineSeparator();
            msg = msg + "[IF Comment Result Value]" + GetLineSeparator() + result + GetLineSeparator();
            msg = msg + GetLineSeparator();
            msg = msg + "[Specified SQL]" + GetLineSeparator() + specifiedSql + GetLineSeparator();
            msg = msg + "* * * * * * * * * */" + GetLineSeparator();
            throw new ${glIfCommentNotBooleanResultException}(msg);
        }

        protected virtual String GetLineSeparator() {
            return Environment.NewLine;
        }
    }
}