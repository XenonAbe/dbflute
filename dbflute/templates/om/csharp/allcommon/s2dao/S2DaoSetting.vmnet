
using System;
using System.Data;
using System.Data.SqlTypes;

using Seasar.Dao.Impl;
using Seasar.Extension.ADO;
using Seasar.Extension.ADO.Impl;
using Seasar.Quill.Dao.Impl;

using ${glPackageBaseCommon};
using ${glPackageBaseCommonJdbc};

namespace ${glPackageBaseCommonS2Dao} {

    public class ${glS2DaoSetting} : AbstractDaoSetting {
        protected override void SetupDao(IDataSource dataSource) {
            BasicCommandFactory commandFactory = new BasicCommandFactory();
            BasicDataReaderFactory dataReaderFactory = new BasicDataReaderFactory(commandFactory);
            FieldAnnotationReaderFactory annotationReaderFactory = new FieldAnnotationReaderFactory();
            _daoMetaDataFactory = new ${glS2DaoMetaDataFactoryImpl}(dataSource, commandFactory, annotationReaderFactory, dataReaderFactory);
            _daoInterceptor = new ${glS2DaoInterceptor}(_daoMetaDataFactory);
        }
    }

    public class InternalBasicCommandFactory : BasicCommandFactory {
        public override IDbCommand CreateCommand(IDbConnection conn, string sql) {
            IDbCommand cmd = conn.CreateCommand();
            cmd.CommandText = ChangeSignSql(cmd, sql);
            ${glStatementConfig} defaultStatementConfig = ${glDBFluteConfig}.GetInstance().DefaultStatementConfig;
            ${glStatementConfig} config = FindStatementConfigOnThread();
            if (config != null && config.HasQueryTimeout()) {
                cmd.CommandTimeout = config.QueryTimeout.Value;// DBFlute original logic.
            } else if (defaultStatementConfig != null && defaultStatementConfig.HasQueryTimeout()) {
                cmd.CommandTimeout = defaultStatementConfig.QueryTimeout.Value;// DBFlute original logic.
            } else {
                if (CommandTimeout > -1) {
                    cmd.CommandTimeout = CommandTimeout;// S2Dao original logic.
                }
            }
            return cmd;
        }

        protected ${glStatementConfig} FindStatementConfigOnThread() {
            ${glStatementConfig} config = null;
            // if (${glConditionBeanContextName}.isExistConditionBeanOnThread()) {
            //     ${glConditionBeanInterfaceName} cb = ${glConditionBeanContextName}.getConditionBeanOnThread();
            //     config = cb.getStatementConfig();
            // } else if (${glOutsideSqlContextName}.isExistOutsideSqlContextOnThread()) {
            //     ${glOutsideSqlContextName} context = ${glOutsideSqlContextName}.getOutsideSqlContextOnThread();
            //     config = context.getStatementConfig();
            // }
            return config;
        }
    }
}