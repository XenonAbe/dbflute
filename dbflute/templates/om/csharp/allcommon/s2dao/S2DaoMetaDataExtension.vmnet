
using System;
using System.Collections;
using System.Data;
using System.Text;
using System.Reflection;

using Seasar.Dao;
using Seasar.Dao.Attrs;
using Seasar.Dao.Dbms;
using Seasar.Dao.Impl;
using Seasar.Extension.ADO;
using Seasar.Extension.ADO.Impl;
using Seasar.Extension.ADO.Types;
using Seasar.Framework.Beans;
using Seasar.Framework.Util;

using ${glPackageBaseCommonCBean};
using ${glPackageBaseCommonAnnotation};
using ${glPackageBaseCommonJdbc};

namespace ${glPackageBaseCommonS2Dao} {

    public class ${glDaoMetaDataExtension} : Seasar.Dao.Impl.DaoMetaDataImpl {

        // ===============================================================================
        //                                                                     Constructor
        //                                                                     ===========
        public ${glDaoMetaDataExtension}(Type daoType, IDataSource dataSource,ICommandFactory commandFactory,
            IDataReaderFactory dataReaderFactory, IDatabaseMetaData dbMetaData)
            : base(daoType, dataSource, commandFactory, dataReaderFactory, dbMetaData) {}

        // ===============================================================================
        //                                                         Initialization Override
        //                                                         =======================
        public override void Initialize()
        {
            _daoInterface = GetDaoInterface(_daoType);
            _annotationReader = AnnotationReaderFactory.CreateDaoAnnotationReader(_daoType);
            _beanType = _annotationReader.GetBeanType();
            _dbms = DbmsManager.GetDbms(_dataSource);
            BeanMetaDataExtension bmdExt = new BeanMetaDataExtension(_beanType, _annotationReaderFactory, false);
            bmdExt.Initialize(_dbMetaData, _dbms);
            _beanMetaData = bmdExt;
            SetupSqlCommand();
        }

        // ===============================================================================
        //                                                      Outside Sql Check Override
        //                                                      ==========================
        protected override void SetupMethodByAuto(MethodInfo mi) {
            ${glOutsideSqlAnnotation} outsideSql = Attribute.GetCustomAttribute(mi, typeof(${glOutsideSqlAnnotation})) as ${glOutsideSqlAnnotation};
            if (outsideSql != null) {
                String msg = "This method '" + mi.Name + "()' should use Outside Sql but the file was not found!";
                msg = msg + " Expected sql file name is '" + mi.DeclaringType.Name + "_" + mi.Name + ".sql'";
                throw new SystemException(msg);
            }
            base.SetupMethodByAuto(mi);
        }

        // ===============================================================================
        //                                                          ConditionBean Override
        //                                                          ======================
        protected override void SetupSelectMethodByAuto(MethodInfo methodInfo) {
            String query = _annotationReader.GetQuery(methodInfo.Name);
            IDataReaderHandler handler = CreateDataReaderHandler(methodInfo);
            SelectDynamicCommand cmd = null;
            String[] argNames = MethodUtil.GetParameterNames(methodInfo);
            Type[] argTypes = MethodUtil.GetParameterTypes(methodInfo);
            if (query != null && !StartsWithOrderBy(query)) {
                cmd = CreateSelectDynamicCommand(handler, query);
            } else {
                cmd = CreateSelectDynamicCommand(handler);
                String sql = null;
                if (argTypes.Length == 1 && ValueTypes.GetValueType(argTypes[0]) == ValueTypes.OBJECT) {
                    argNames = new String[] { "dto" };
                    // /----------------------------------------------------- [MyExtension]
                    if (${glConditionBeanContextName}.IsTheTypeConditionBean(argTypes[0])) {
                        ${glSelectDynamicCommand} dynamicCommand = NewMySelectDynamicCommand(handler);
                        String sqlNormal = GetSelectClause();
                        String sqlPKOnly = GetSelectClausePKOnly();
                        sql = sqlNormal;
                        cmd = dynamicCommand;
                        dynamicCommand.SetSelectClause(sqlNormal);
                        dynamicCommand.SetSelectClausePKOnly(sqlPKOnly);
                        dynamicCommand.ArgNames4Nest = argNames;// Oops!
                        dynamicCommand.ArgTypes4Nest = argTypes;// Oops!
                    } else {
                        if (typeof(${glSelectResourceInterfaceName}).IsAssignableFrom(argTypes[0])) {
                            String msg = "If the first argument type is select-resource(and not condition-bean), ";
                            msg = msg + "the method should not use auto-select-sql-by-dto.";
                            msg = msg + " (Do you want to use outer-file-sql? Please check your sql-file-name and build-action!)";
                            msg = msg + ": dao=" + methodInfo.DeclaringType + " method=" + methodInfo.Name + "()";
                            msg = msg + " firstArgument=" + argTypes[0] + " argTypes.Length=" + argTypes.Length;
                            throw new SystemException(msg);
                        }
                        sql = CreateAutoSelectSqlByDto(argTypes[0]);
                    }
                    // -----------/
                } else {
                    // /----------------------------------------------------- [MyExtension]
                    if (argTypes.Length > 1 && ValueTypes.GetValueType(argTypes[0]) == ValueTypes.OBJECT) {
                        if (typeof(${glSelectResourceInterfaceName}).IsAssignableFrom(argTypes[0])) {
                            String msg = "If the number of argument is more than 1 and the first argument type is select-resource, ";
                            msg = msg + "the method should not use auto-select-sql.";
                            msg = msg + " (Do you want to use outer-file-sql? Please check your sql-file-name and build-action!)";
                            msg = msg + ": dao=" + methodInfo.DeclaringType + " method=" + methodInfo.Name + "()";
                            msg = msg + " firstArgument=" + argTypes[0] + " argTypes.Length=" + argTypes.Length;
                            throw new SystemException(msg);
                        }
                    }
                    // -----------/
                    sql = CreateAutoSelectSql(argNames, argTypes);
                }
                if (query != null) {
                    sql = sql + " " + query;
                }
                cmd.Sql = sql;
            }
            cmd.ArgNames = argNames;
            cmd.ArgTypes = argTypes;
            _sqlCommands[methodInfo.Name] = cmd;
        }

        protected String GetSelectClausePKOnly() {
            StringBuilder sb = new StringBuilder(100);
            sb.Append("select/*$dto.SelectHint*/ ");

            StringBuilder sbMySelectList = new StringBuilder(100);
            for (int i = 0; i < _beanMetaData.PropertyTypeSize; ++i) {
                IPropertyType pt = _beanMetaData.GetPropertyType(i);
                if (pt.IsPersistent && pt.IsPrimaryKey) {
                    if (sbMySelectList.Length != 0) {
                        sbMySelectList.Append(", ");
                    }
                    sbMySelectList.Append(_beanMetaData.TableName);
                    sbMySelectList.Append(".");
                    sbMySelectList.Append(pt.ColumnName);
                }
            }
            sb.Append(sbMySelectList);

            return sb.ToString();
        }

        protected String GetSelectClause() {
            StringBuilder sb = new StringBuilder(100);
            sb.Append("select/*$dto.SelectHint*/ ");

            StringBuilder sbMySelectList = new StringBuilder(100);
            for (int i = 0; i < _beanMetaData.PropertyTypeSize; ++i) {
                IPropertyType pt = _beanMetaData.GetPropertyType(i);
                if (pt.IsPersistent) {
                    if (sbMySelectList.Length != 0) {
                        sbMySelectList.Append(", ");
                    }
                    sbMySelectList.Append(_beanMetaData.TableName);
                    sbMySelectList.Append(".");
                    sbMySelectList.Append(pt.ColumnName);
                }
            }
            sb.Append(sbMySelectList);

            SetupRelationSelectClause(sb, _beanMetaData, "", "", 1);
            return sb.ToString();
        }

        protected void SetupRelationSelectClause(StringBuilder sb, IBeanMetaData baseBmd, String judgeProp, String preNoSuffix, int cqNestNo) {
            for (int i = 0; i < baseBmd.RelationPropertyTypeSize; ++i) {
                StringBuilder sbYourSelectList = new StringBuilder(100);
                IRelationPropertyType rpt = baseBmd.GetRelationPropertyType(i);
                if (rpt == null) {
                    String msg = "The baseBmd.GetRelationPropertyType(" + i + ") returned null";
                    msg = msg + ": baseBmd.TableName=" + baseBmd.TableName;
                    msg = msg + ": baseBmd.RelationPropertyTypeSize=" + baseBmd.RelationPropertyTypeSize;
                    throw new SystemException(msg);
                }

                IBeanMetaData relationBmd = rpt.BeanMetaData;
                String initCapPropertyName = rpt.PropertyName;
                String ifComment = "/*IF dto." + judgeProp + "IsSelect" + initCapPropertyName + "*/";
                String endComment = "/*END*/";
                for (int j = 0; j < relationBmd.PropertyTypeSize; ++j) {
                    IPropertyType pt = relationBmd.GetPropertyType(j);
                    String tableAliasName = rpt.PropertyName + (cqNestNo > 1 ? "_n" + cqNestNo : "");
                    if (pt.IsPersistent) {
                        String columnName = pt.ColumnName;
                        sbYourSelectList.Append(", ");
                        sbYourSelectList.Append(tableAliasName).Append(".").Append(columnName);
                        sbYourSelectList.Append(" AS ");
                        sbYourSelectList.Append(pt.ColumnName).Append(preNoSuffix).Append("_").Append(rpt.RelationNo);
                    }
                }
                if (relationBmd.RelationPropertyTypeSize > 0) {
                    String nssString = "Nss" + initCapPropertyName + ".";
                    String nextPreNoSuffix = preNoSuffix + "_" + rpt.RelationNo;
                    int nextCQNestNo = cqNestNo + 1;
                    SetupRelationSelectClause(sbYourSelectList, relationBmd, nssString, nextPreNoSuffix, nextCQNestNo);
                }
                sb.Append(ifComment).Append(sbYourSelectList).Append(endComment);
            }
        }

        // ===============================================================================
        //                                              Update and Delete By Auto Override
        //                                              ==================================
// TODO: @jflute -- Must modify S2Dao.
//        protected virtual AbstractSqlCommand CreateUpdateModifiedOnlyCommand(IDataSource _dataSource, ICommandFactory _commandFactory, IBeanMetaData _beanMetaData, string[] propertyNames) {
//            return new UpdateModifiedOnlyCommand(_dataSource, _commandFactory, _beanMetaData, propertyNames);
//        }
//
//        protected IBeanMetaData CreateBeanMetaData4UpdateDeleteByAuto(Method method) {
//            if (method.getName().contains("Nonstrict")) {
//                return createNonConcurrencyBmdFactory().createBeanMetaData(getBeanClass());
//            } else {
//                return getBeanMetaData();
//            }
//        }

        // ===============================================================================
        //                                                             OutsideSql Override
        //                                                             ===================
        protected override void SetupSelectMethodByManual(MethodInfo mi, string sql) {
            string[] parameterNames = MethodUtil.GetParameterNames(mi);
            Type[] parameterTypes = MethodUtil.GetParameterTypes(mi);
            string[] filteredParameterNames = null;
            Type[] filteredParameterTypes = null;
            if (parameterTypes != null && parameterTypes.Length > 0
                    && typeof(${glCursorHandlerName}).IsAssignableFrom(parameterTypes[parameterTypes.Length - 1])) {
                filteredParameterNames = new string[parameterTypes.Length - 1];
                filteredParameterTypes = new Type[parameterTypes.Length - 1];
                for (int i = 0; i < parameterTypes.Length - 1; i++) {
                    filteredParameterNames[i] = parameterNames[i];
                    filteredParameterTypes[i] = parameterTypes[i];
                }
            } else {
                filteredParameterNames = parameterNames;
                filteredParameterTypes = parameterTypes;
            }
            IBeanMetaData myMetaData = BuildBeanMetaData(mi, _dbMetaData, _dbms);
            SelectDynamicCommand cmd = CreateSelectDynamicCommand(CreateDataReaderHandler4SelectMethodByManual(mi, myMetaData));
            cmd.Sql = sql;
            cmd.ArgNames = filteredParameterNames;
            cmd.ArgTypes = filteredParameterTypes;
            _sqlCommands[mi.Name] = cmd;
        }

        protected IBeanMetaData BuildBeanMetaData(MethodInfo mi, IDatabaseMetaData databaseMetaData, Seasar.Dao.IDbms dbInfo) {
            Type beanClass4SelectMethodByManual = GetBeanClass4SelectMethodByManual(mi);
            if (beanClass4SelectMethodByManual.Equals(_beanType)) {
                return _beanMetaData;
            }
            BeanMetaDataExtension bmdExt = new BeanMetaDataExtension(beanClass4SelectMethodByManual, _annotationReaderFactory, false);
            bmdExt.Initialize(databaseMetaData, dbInfo);
            return bmdExt;
        }

        protected Type GetBeanClass4SelectMethodByManual(MethodInfo mi) {
            Type retType = mi.ReturnType;
            if (retType.IsGenericType && (retType.GetGenericTypeDefinition().Equals(typeof(System.Collections.Generic.IList<>)))) {
                return retType.GetGenericArguments()[0];
            } else if (!retType.IsGenericType && typeof(System.Collections.IList).IsAssignableFrom(retType)) {
                return _beanType;
            } else if (retType.IsArray) {
                return retType.GetElementType();
            } else if (ValueTypes.GetValueType(retType) != ValueTypes.OBJECT) {
                return _beanType;
            } else {
                return retType;
            }
        }

        protected IDataReaderHandler CreateDataReaderHandler4SelectMethodByManual(MethodInfo mi, IBeanMetaData bmd)
        {
            Type retType = mi.ReturnType;

            if (retType.IsArray) {
                return CreateBeanArrayMetaDataDataReaderHandler(bmd);
            } else if (!retType.IsGenericType && typeof(IList).IsAssignableFrom(retType)) {
                return CreateBeanListMetaDataDataReaderHandler(bmd);
            } else if (IsBeanTypeAssignable4SelectMethodByManual(retType, bmd)) {
                return CreateBeanMetaDataDataReaderHandler(bmd);
            } else if (Array.CreateInstance(_beanType, 0).GetType().IsAssignableFrom(retType)) {
                return CreateBeanArrayMetaDataDataReaderHandler(bmd);
            } else if(retType.IsGenericType && (retType.GetGenericTypeDefinition().Equals(typeof(System.Collections.Generic.IList<>))
                    || retType.GetGenericTypeDefinition().Equals(typeof(System.Collections.Generic.List<>)))) {
                return CreateBeanGenericListMetaDataDataReaderHandler(bmd);
            } else {
                return CreateObjectDataReaderHandler();
            }
        }

        protected bool IsBeanTypeAssignable4SelectMethodByManual(Type type, IBeanMetaData bmd) {
            return bmd.BeanType.IsAssignableFrom(type) || type.IsAssignableFrom(bmd.BeanType);
        }

        // ===============================================================================
        //                                                              Extension Override
        //                                                              ==================
        protected override SelectDynamicCommand CreateSelectDynamicCommand(IDataReaderHandler handler) {// for all except condition-bean
            return NewMySelectDynamicCommand(handler);
        }

        protected virtual ${glSelectDynamicCommand} NewMySelectDynamicCommand(IDataReaderHandler handler) {// for condition-bean
            return new ${glSelectDynamicCommand}(_dataSource, _commandFactory, handler, _dataReaderFactory);
        }

        protected override Seasar.Dao.IRowCreator CreateRowCreator() {
            return new RowCreatorExtension();
        }

        protected override Seasar.Dao.IRelationRowCreator CreateRelationRowCreator() {
            return new RelationRowCreatorExtension();
        }
    }

    // ===================================================================================
    //                                                                     Extension Class
    //                                                                     ===============
    public class BeanMetaDataExtension : BeanMetaDataImpl {
        public BeanMetaDataExtension(Type beanType, IAnnotationReaderFactory annotationReaderFactory, bool relation) 
            : base() {
            this.BeanType = beanType;
            this._relation = relation;
            this.AnnotationReaderFactory = annotationReaderFactory;
        }
        protected int _nestNo;
        public int NestNo {
            get { return _nestNo; }
            set { _nestNo = value; }
        }
        protected override IBeanMetaData CreateRelationBeanMetaData(PropertyInfo propertyInfo, IDatabaseMetaData dbMetaData, IDbms dbms) {
            bool isRelation = false;
            if (this.NestNo > 0) {
                isRelation = true;
            }
            BeanMetaDataExtension bmdExt = new BeanMetaDataExtension(propertyInfo.PropertyType, this.AnnotationReaderFactory, isRelation);
            bmdExt.NestNo = this.NestNo + 1;
            bmdExt.Initialize(dbMetaData, dbms);
            return bmdExt;
        }
    }

    public class RowCreatorExtension : Seasar.Dao.Impl.RowCreatorImpl {

        public override object CreateRow(IDataReader reader, IColumnMetaData[] columns, Type beanType) {
            object row = NewBean(beanType);
            ${glPackageBaseCommonDBMeta}.${glDBMetaInterfaceName} dbmeta = findDBMeta(row);
            foreach (IColumnMetaData column in columns) {
                object value = column.ValueType.GetValue(reader, column.ColumnName);
                if (dbmeta != null && dbmeta.SetupEntityProperty(column.PropertyInfo.Name, row, value)) {
                    continue;
                }
                column.PropertyInfo.SetValue(row, value, null);
            }
            return row;
        }

        protected ${glPackageBaseCommonDBMeta}.${glDBMetaInterfaceName} findDBMeta(Object row) {
            ${glPackageBaseCommonDBMeta}.${glDBMetaInterfaceName} dbmeta = (${glPackageBaseCommonDBMeta}.${glDBMetaInterfaceName})InternalMapContext.GetObject("CreateRow-DBMeta");
            if (dbmeta != null) {
                return dbmeta;
            }
            if (InternalMapContext.GetObject("CreateRow-NotFound") != null) {
                return null;
            }
            PropertyInfo propertyOfDBMeta = row.GetType().GetProperty("DBMeta");
            if (propertyOfDBMeta != null) {
                dbmeta = (${glPackageBaseCommonDBMeta}.${glDBMetaInterfaceName})propertyOfDBMeta.GetValue(row, null);
                if (dbmeta != null) {
                    InternalMapContext.SetObject("CreateRow-DBMeta", dbmeta);
                    return dbmeta;
                }
            }
            InternalMapContext.SetObject("CreateRow-NotFound", "dummy");
            return null;
        }
    }

    public class RelationRowCreatorExtension : Seasar.Dao.Impl.RelationRowCreatorImpl {
        protected override bool IsTargetProperty(RelationRowCreationResource res) {
            IPropertyType pt = res.CurrentPropertyType;
            if (!pt.PropertyInfo.CanWrite) {
                return false;
            }
            if (typeof(System.Collections.Generic.IList<>).IsAssignableFrom(pt.PropertyInfo.GetType())) {
                return false;
            }
            return true;
        }

        protected override bool IsCreateDeadLink() {
            return false;
        }

        protected override int GetLimitRelationNestLevel() {
            return 2;
        }
    }
}