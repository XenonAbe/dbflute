#set ($myClassName = "${glConditionBeanAbstractName}")

using System;
using System.Collections;
using System.Text;

using ${glPackageBaseCommonDBMeta};
using ${glPackageBaseCommonSqlClause};

namespace ${glPackageBaseCommonCBean} {

    /// <summary>
    /// The condition-bean as abstract.
    /// Author: ${database.ClassAuthor}
    /// </summary>
    [System.Serializable]
    public abstract class $myClassName : ${glConditionBeanInterfaceName} {

        // ===============================================================================
        //                                                                       Attribute
        //                                                                       =========
        /// <summary>SQL clause. (NotNull)</summary>
        protected readonly ${glSqlClauseName} _sqlClause;

        /// <summary>Safety max result size.</summary>
        protected int _safetyMaxResultSize;

        // ===============================================================================
        //                                                                     Constructor
        //                                                                     ===========
        public ${myClassName}() {
            _sqlClause = new ${glSqlClauseName}${database.DaoGenDbName}(TableDbName);
        }

        // ===============================================================================
        //                                                                      Table Name
        //                                                                      ==========
        /// <summary>
        /// ${database.ImplementComment}
        /// </summary>
        public abstract String TableDbName { get; }

        // ===============================================================================
        //                                                                       SqlClause
        //                                                                       =========
        public ${glSqlClauseName} SqlClause { get { return _sqlClause; } }
        public String GetClause() { return this.SqlClause.GetClause(); }

        // ===============================================================================
        //                                                                           Query
        //                                                                           =====
        /// <summary>
        /// The property of condition-query as inteface.
        /// </summary>
        /// <returns>Instance of condition-query. (NotNull)</returns>
        public abstract ${glConditionQueryInterfaceName} ConditionQueryAsInterface { get; }

        // ===============================================================================
        //                                                    Implementation of PagingBean
        //                                                    ============================
        // -------------------------------------------------
        //                              Paging Determination
        //                              --------------------
        // * * * * * * * *
        // For SQL Comment
        // * * * * * * * *
        public bool Paging { get { throw new SystemException("This method is unsupported on ConditionBean!"); } }
        public void XSetPaging(bool paging) {
            throw new SystemException("This method is unsupported on ConditionBean!");
        }

        // -------------------------------------------------
        //                                     Fetch Setting
        //                                     -------------
        public ${glPagingBeanInterfaceName} FetchFirst(int fetchSize) {
            this.SqlClause.FetchFirst(fetchSize);
            return this;
        }

        public ${glPagingBeanInterfaceName} FetchScope(int fetchStartIndex, int fetchSize) {
            this.SqlClause.FetchScope(fetchStartIndex, fetchSize);
            return this;
        }

        public ${glPagingBeanInterfaceName} FetchPage(int fetchPageNumber) {
            this.SqlClause.FetchPage(fetchPageNumber);
            return this;
        }

        // -------------------------------------------------
        //                                    Fetch Property
        //                                    --------------
        public int FetchStartIndex { get { return this.SqlClause.FetchStartIndex; } }
        public int FetchSize { get { return this.SqlClause.FetchSize; } }
        public int FetchPageNumber { get { return this.SqlClause.FetchPageNumber; } }
        public int PageStartIndex { get { return this.SqlClause.PageStartIndex; } }
        public int PageEndIndex { get { return this.SqlClause.PageEndIndex; } }
        public bool IsFetchScopeEffective { get { return this.SqlClause.IsFetchScopeEffective; } }
        public int SafetyMaxResultSize { get { return _safetyMaxResultSize; } }

        // -------------------------------------------------
        //                                     Hint Property
        //                                     -------------
        public String SelectHint { get { return this.SqlClause.GetSelectHint(); } }
        public String FromBaseTableHint { get { return this.SqlClause.GetFromBaseTableHint(); } }
        public String FromHint { get { return this.SqlClause.GetFromHint(); } }
        public String WhereClause { get { return this.SqlClause.GetWhereClause(); } }
        public String OrderByClause { get { return this.SqlClause.GetOrderByClause(); } }
        public String SqlSuffix { get { return this.SqlClause.GetSqlSuffix(); } }

        // ===============================================================================
        //                                            Implementation of FetchNarrowingBean
        //                                            ====================================
        public int FetchNarrowingSkipStartIndex { get { return this.SqlClause.FetchNarrowingSkipStartIndex; } }
        public int FetchNarrowingLoopCount { get { return this.SqlClause.FetchNarrowingLoopCount; } }
        public bool IsFetchNarrowingSkipStartIndexEffective { get { return !this.SqlClause.IsFetchStartIndexSupported; } }
        public bool IsFetchNarrowingLoopCountEffective { get { return !this.SqlClause.IsFetchSizeSupported; } }
        public bool IsFetchNarrowingEffective { get { return this.SqlClause.IsFetchNarrowingEffective; } }
        public void IgnoreFetchNarrowing() { throw new SystemException("This method is unsupported on ConditionBean!"); }
        public void RestoreIgnoredFetchNarrowing() {}

        // ===============================================================================
        //                                                   Implementation of OrderByBean
        //                                                   =============================
        public ${glOrderByClauseName} SqlComponentOfOrderByClause {
            get { return this.SqlClause.GetSqlComponentOfOrderByClause(); }
        }

        public ${glOrderByBeanInterfaceName} ClearOrderBy() {
            this.SqlClause.ClearOrderBy();
            return this;
        }

        public ${glOrderByBeanInterfaceName} IgnoreOrderBy() {
            this.SqlClause.IgnoreOrderBy();
            return this;
        }

        public $glOrderByBeanInterfaceName MakeOrderByEffective() {
            this.SqlClause.MakeOrderByEffective();
            return this;
        }

        public abstract ${glConditionBeanInterfaceName} AddOrderBy_PK_Asc();

        public abstract ${glConditionBeanInterfaceName} AddOrderBy_PK_Desc();

        public ${glOrderByBeanInterfaceName} RegisterOrderByAsc(String orderByProperty) {
            this.SqlClause.RegisterOrderBy(FilterOrderByProperty(orderByProperty), orderByProperty, true);
            return this;
        }

        public ${glOrderByBeanInterfaceName} RegisterOrderByDesc(String orderByProperty) {
            this.SqlClause.RegisterOrderBy(FilterOrderByProperty(orderByProperty), orderByProperty, false);
            return this;
        }

        public ${glOrderByBeanInterfaceName} ReverseOrderBy_Or_OverrideOrderByAsc(String orderByProperty) {
            this.SqlClause.ReverseOrderBy_Or_OverrideOrderBy(FilterOrderByProperty(orderByProperty), orderByProperty, true);
            return this;
        }

        public ${glOrderByBeanInterfaceName} ReverseOrderBy_Or_OverrideOrderByDesc(String orderByProperty) {
            this.SqlClause.ReverseOrderBy_Or_OverrideOrderBy(FilterOrderByProperty(orderByProperty), orderByProperty, false);
            return this;
        }

        protected String FilterOrderByProperty(String orderByProperty) {
            String[] orderBySlashArray = orderByProperty.Split('/');
            StringBuilder sb = new StringBuilder();
            ${glDBMetaInterfaceName} dbmeta = ${glDBMetaInstanceHandlerName}.FindDBMeta(TableDbName);
            ${glConditionQueryInterfaceName} query = this.ConditionQueryAsInterface;
            foreach (String orderBySlashElement in orderBySlashArray) {
                String[] orderByDotArray = orderBySlashElement.Split('.');

                if (orderByDotArray.Length == 1) {
                    if (dbmeta.HasColumn(orderBySlashElement)) {
                        sb.Append("/").Append(query.GetRealColumnName(dbmeta.FindDbName(orderBySlashElement)));
                    } else {
                        sb.Append("/").Append(orderBySlashElement);
                    }
                } else {
                    ${glDBMetaInterfaceName} foreignDBMeta = dbmeta;
                    ${glConditionQueryInterfaceName} foreignQuery = query;
                    int count = 0;
                    foreach (String orderByDotElement in orderByDotArray) {
                        count++;

                        if (orderByDotArray.Length == count) {// Last Loop!
                            if (!foreignDBMeta.HasColumn(orderByDotElement)) {
                                String msg = "The name for order-by is not existing: name=" + orderByDotElement;
                                msg = msg + " orderBySlashElement=" + orderBySlashElement + " orderByProperty=" + orderByProperty;
                                throw new SystemException(msg);
                            }
                            sb.Append("/").Append(foreignQuery.GetRealColumnName(foreignDBMeta.FindDbName(orderByDotElement)));
                            break;
                        }

                        // TODO: @jflute
                        // foreignDBMeta = foreignDBMeta.GetForeignDBMeta(orderByDotElement);
                        foreignQuery = foreignQuery.GetForeignConditionQuery(orderByDotElement);
                    }
                }
            }
            sb.Remove(0, "/".Length);
            return sb.ToString();
        }

        // ===============================================================================
        //                                                Implementation of SelectResource
        //                                                ================================
        public void CheckSafetyResult(int safetyMaxResultSize) {
            this._safetyMaxResultSize = safetyMaxResultSize;
        }

        // ===============================================================================
        //                                                                    Limit Select
        //                                                                    ============
        protected bool _isLimitSelectPKOnly;

        public bool IsLimitSelect_PKOnly() {
            return _isLimitSelectPKOnly;
        }

        public ${glConditionBeanInterfaceName} LimitSelect_PKOnly() {
            _isLimitSelectPKOnly = true;
            return this;
        }

        public ${glConditionBeanInterfaceName} LimitSelect_Off() {
            _isLimitSelectPKOnly = false;
            return this;
        }

        // ===============================================================================
        //                                                                    Lock Setting
        //                                                                    ============
        public ${glConditionBeanInterfaceName} LockForUpdate() {
            this.SqlClause.LockForUpdate();
            return this;
        }

        // ===============================================================================
        //                                                                    Select Count
        //                                                                    ============
        public ${glConditionBeanInterfaceName} XSetupSelectCountIgnoreFetchScope() {
            _isSelectCountIgnoreFetchScope = true;
            this.SqlClause.IgnoreIncludedSelectColumn();
            this.SqlClause.IgnoreOrderBy();
            this.SqlClause.IgnoreFetchScope();
            return this;
        }

        public ${glConditionBeanInterfaceName} XAfterCareSelectCountIgnoreFetchScope() {
            _isSelectCountIgnoreFetchScope = false;
            this.SqlClause.MakeIncludedSelectColumnEffective();
            this.SqlClause.MakeOrderByEffective();
            this.SqlClause.MakeFetchScopeEffective();
            return this;
        }

        protected bool _isSelectCountIgnoreFetchScope;

        public bool IsSelectCountIgnoreFetchScope() {
            return _isSelectCountIgnoreFetchScope;
        }
    }
}
