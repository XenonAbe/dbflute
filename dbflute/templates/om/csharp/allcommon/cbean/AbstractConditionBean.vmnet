#set ($myClassName = "${glConditionBeanAbstractName}")

using System;

using ${glPackageBaseCommonDBMeta};
using ${glPackageBaseCommonSqlClause};
using ${glPackageBaseCommonJavaLike};

namespace ${glPackageBaseCommonCBean} {

    [System.Serializable]
    public abstract class $myClassName : ${glConditionBeanInterfaceName} {

        // ===============================================================================
        //                                                                       Attribute
        //                                                                       =========
        protected readonly ${glSqlClauseName} _sqlClause;
        protected int _safetyMaxResultSize;

        // ===============================================================================
        //                                                                     Constructor
        //                                                                     ===========
        public ${myClassName}() {
            _sqlClause = new ${glSqlClauseName}${database.DaoGenDbName}(TableSqlName);
        }

        // ===============================================================================
        //                                                                      Table Name
        //                                                                      ==========
        public abstract String TableDbName { get; }
        public abstract String TableSqlName { get; }

        // ===============================================================================
        //                                                                       SqlClause
        //                                                                       =========
        public ${glSqlClauseName} SqlClause { get { return _sqlClause; } }
        public String GetClause() { return this.SqlClause.getClause(); }

        // ===============================================================================
        //                                                                           Query
        //                                                                           =====
        public abstract ${glConditionQueryInterfaceName} ConditionQueryAsInterface { get; }

        // ===============================================================================
        //                                                                     Union Query
        //                                                                     ===========
        public abstract bool HasUnionQueryOrUnionAllQuery();

        // ===============================================================================
        //                                                    Implementation of PagingBean
        //                                                    ============================
        // -------------------------------------------------
        //                              Paging Determination
        //                              --------------------
        // * * * * * * * *
        // For SQL Comment
        // * * * * * * * *
        public bool Paging { get { throw new UnsupportedOperationException("This method is unsupported on ConditionBean!"); } }

        // -------------------------------------------------
        //                                    Paging Setting
        //                                    --------------
        public void XSetPaging(bool paging) {// Very Internal!
            throw new UnsupportedOperationException("This method is unsupported on ConditionBean!");
        }
		public void Paging(int pageSize, int pageNumber) {
		    FetchFirst(pageSize);
		    FetchPage(pageNumber);
		}

        // -------------------------------------------------
        //                                     Fetch Setting
        //                                     -------------
        public ${glPagingBeanInterfaceName} FetchFirst(int fetchSize) {
            this.SqlClause.fetchFirst(fetchSize);
            return this;
        }

        public ${glPagingBeanInterfaceName} FetchScope(int fetchStartIndex, int fetchSize) {
            this.SqlClause.fetchScope(fetchStartIndex, fetchSize);
            return this;
        }

        public ${glPagingBeanInterfaceName} FetchPage(int fetchPageNumber) {
            this.SqlClause.fetchPage(fetchPageNumber);
            return this;
        }

        // -------------------------------------------------
        //                                    Fetch Property
        //                                    --------------
        public int FetchStartIndex { get { return this.SqlClause.getFetchStartIndex(); } }
        public int FetchSize { get { return this.SqlClause.getFetchSize(); } }
        public int FetchPageNumber { get { return this.SqlClause.getFetchPageNumber(); } }
        public int PageStartIndex { get { return this.SqlClause.getPageStartIndex(); } }
        public int PageEndIndex { get { return this.SqlClause.getPageEndIndex(); } }
        public bool IsFetchScopeEffective { get { return this.SqlClause.isFetchScopeEffective(); } }
        public int SafetyMaxResultSize { get { return _safetyMaxResultSize; } }

        // -------------------------------------------------
        //                                     Hint Property
        //                                     -------------
        public String SelectHint { get { return this.SqlClause.getSelectHint(); } }
        public String FromBaseTableHint { get { return this.SqlClause.getFromBaseTableHint(); } }
        public String FromHint { get { return this.SqlClause.getFromHint(); } }
        public String WhereClause { get { return this.SqlClause.getWhereClause(); } }
        public String OrderByClause { get { return this.SqlClause.getOrderByClause(); } }
        public String SqlSuffix { get { return this.SqlClause.getSqlSuffix(); } }

        // ===============================================================================
        //                                            Implementation of FetchNarrowingBean
        //                                            ====================================
        public int FetchNarrowingSkipStartIndex { get { return this.SqlClause.getFetchNarrowingSkipStartIndex(); } }
        public int FetchNarrowingLoopCount { get { return this.SqlClause.getFetchNarrowingLoopCount(); } }
        public bool IsFetchNarrowingSkipStartIndexEffective { get { return !this.SqlClause.isFetchStartIndexSupported(); } }
        public bool IsFetchNarrowingLoopCountEffective { get { return !this.SqlClause.isFetchSizeSupported(); } }
        public bool IsFetchNarrowingEffective { get { return this.SqlClause.isFetchNarrowingEffective(); } }
        public void IgnoreFetchNarrowing() { throw new UnsupportedOperationException("This method is unsupported on ConditionBean!"); }
        public void RestoreIgnoredFetchNarrowing() {}

        // ===============================================================================
        //                                                   Implementation of OrderByBean
        //                                                   =============================
        public ${glOrderByClauseName} SqlComponentOfOrderByClause {
            get { return this.SqlClause.getSqlComponentOfOrderByClause(); }
        }

        public ${glOrderByBeanInterfaceName} ClearOrderBy() {
            this.SqlClause.clearOrderBy();
            return this;
        }

        public ${glOrderByBeanInterfaceName} IgnoreOrderBy() {
            this.SqlClause.ignoreOrderBy();
            return this;
        }

        public $glOrderByBeanInterfaceName MakeOrderByEffective() {
            this.SqlClause.makeOrderByEffective();
            return this;
        }

        public abstract ${glConditionBeanInterfaceName} AddOrderBy_PK_Asc();
        public abstract ${glConditionBeanInterfaceName} AddOrderBy_PK_Desc();

        // ===============================================================================
        //                                                Implementation of SelectResource
        //                                                ================================
        public void CheckSafetyResult(int safetyMaxResultSize) {
            this._safetyMaxResultSize = safetyMaxResultSize;
        }

        // ===============================================================================
        //                                                                    Limit Select
        //                                                                    ============
        protected bool _isLimitSelectPKOnly;

        public bool IsLimitSelect_PKOnly() {
            return _isLimitSelectPKOnly;
        }

        public ${glConditionBeanInterfaceName} LimitSelect_PKOnly() {
            _isLimitSelectPKOnly = true;
            return this;
        }

        public ${glConditionBeanInterfaceName} LimitSelect_Off() {
            _isLimitSelectPKOnly = false;
            return this;
        }

        // ===============================================================================
        //                                                                    Lock Setting
        //                                                                    ============
        public ${glConditionBeanInterfaceName} LockForUpdate() {
            this.SqlClause.lockForUpdate();
            return this;
        }

        // ===============================================================================
        //                                                                    Select Count
        //                                                                    ============
        public ${glConditionBeanInterfaceName} XSetupSelectCountIgnoreFetchScope() {
            _isSelectCountIgnoreFetchScope = true;

            // If the query uses union query, it needs included-select-column.
            if (!HasUnionQueryOrUnionAllQuery()) {
                this.SqlClause.ignoreIncludedSelectColumn();
            }

            this.SqlClause.ignoreIncludedSelectColumn();
            this.SqlClause.ignoreOrderBy();
            this.SqlClause.ignoreFetchScope();
            return this;
        }

        public ${glConditionBeanInterfaceName} XAfterCareSelectCountIgnoreFetchScope() {
            _isSelectCountIgnoreFetchScope = false;

            // If the query uses union query, it needs included-select-column.
            if (!HasUnionQueryOrUnionAllQuery()) {
                this.SqlClause.makeIncludedSelectColumnEffective();
            }
		
            this.SqlClause.makeIncludedSelectColumnEffective();
            this.SqlClause.makeOrderByEffective();
            this.SqlClause.makeFetchScopeEffective();
            return this;
        }

        protected bool _isSelectCountIgnoreFetchScope;

        public bool IsSelectCountIgnoreFetchScope() {
            return _isSelectCountIgnoreFetchScope;
        }
		
        // ===============================================================================
        //                                                                     Display SQL
        //                                                                     ===========
    	public virtual String ToDisplaySql() {
    	    return ${glConditionBeanContextName}.ConvertConditionBean2DisplaySql(this);
    	}
		
        // ===============================================================================
        //                                                                  Basic Override
        //                                                                  ==============
		public override String ToString() {
		    return ToDisplaySql();
		}
    }
}
