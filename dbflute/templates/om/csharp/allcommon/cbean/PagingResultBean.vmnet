#set ($myClassName = "${glPagingResultBeanName}")

using System;
using System.Text;

using ${glPackageBaseCommonSqlClause};

namespace ${glPackageBaseCommonCBean} {

    /// <summary>
    /// The paging-result-bean of ${myClassName}.
    /// Author: ${database.ClassAuthor}
    /// </summary>
    [System.Serializable]
    public class ${myClassName} : ${glListResultBeanName} {

        // =====================================================================================
        //                                                                             Attribute
        //                                                                             =========
        #region Attribute

        /// <summary>The value of all page size.</summary>
        protected int _pageSize;

        /// <summary>The value of current page number.</summary>
        protected int _currentPageNumber;

        /// <summary>The value of page-group size. Default value is ${database.PageResultBeanDefaultPageGroupSize}.</summary>
        protected int _pageGroupSize = ${database.PageResultBeanDefaultPageGroupSize};

        /// <summary>The value of page-range size. Default value is ${database.PageResultBeanDefaultPageRangeSize}.</summary>
        protected int _pageRangeSize = ${database.PageResultBeanDefaultPageRangeSize};

        #endregion

        // =====================================================================================
        //                                                                           Constructor
        //                                                                           ===========
        #region Constructor

        /// <summary>
        /// Constructor.
        /// </summary>
        public ${myClassName}() {
        }

        #endregion

        // =====================================================================================
        //                                                                              Property
        //                                                                              ========
        #region Property

        /// <summary>
        /// The property of page size.
        /// </summary>
        public int PageSize
        {
            get { return _pageSize; }
            set { _pageSize = value; }
        }

        /// <summary>
        /// The property of current page number.
        /// </summary>
        public int CurrentPageNumber
        {
            get { return _currentPageNumber; }
            set { _currentPageNumber = value; }
        }

        /// <summary>
        /// The property of all page count.
        /// </summary>
        public int AllPageCount
        {
            get { return CalculateAllPageCount(_allRecordCount, _pageSize); }
        }

        /// <summary>
        /// The property of page-group size.
        /// </summary>
        public int PageGroupSize
        {
            get { return _pageGroupSize; }
            set { _pageGroupSize = value; }
        }

        /// <summary>
        /// The property of range-group size.
        /// </summary>
        public int PageRangeSize
        {
            get { return _pageRangeSize; }
            set { _pageRangeSize = value; }
        }

        #endregion

        // =====================================================================================
        //                                                                             Calculate
        //                                                                             =========
        #region Calculate
        /**
         * Calculate all page count.
         * 
         * @param allRecordCount All record count.
         * @param pageSize Fetch-size.
         * @returns All page count.
         */
        public int CalculateAllPageCount(int allRecordCount, int pageSize) {
            if (allRecordCount == 0) {
                return 1;
            }
            int pageCountBase = (allRecordCount / pageSize);
            if (allRecordCount % pageSize > 0) {
                pageCountBase++;
            }
            return pageCountBase;
        }

        // -------------------------------------------
        //                                  Page Group
        //                                  ----------
        /// <summary>
        /// Calculate current page-group start-page-number.
        /// Using values are currentPageNumber and pageGroupSize.
        /// </summary>
        /// <returns>Current page-group start-page-number.</returns>
        public int CalculateCurrentPageGroupStartPageNumber() {
            if (_pageGroupSize == 0) {
                return 1;
            }
            if (_pageGroupSize == 1) {
                String msg = "The pageGroupSize should be greater than 1 or equal 0. {value > 1 || value == 0}";
                msg = msg + ": pageGroupSize=" + _pageGroupSize;
                throw new SystemException(msg);
            }
            int currentPageGroupNumber = (_currentPageNumber / _pageGroupSize);
            if ((_currentPageNumber % _pageGroupSize) == 0)
            {
                currentPageGroupNumber--;
            }
            int currentPageGroupStartPageNumber = (_pageGroupSize * currentPageGroupNumber) + 1;
            if (!(_currentPageNumber >= currentPageGroupStartPageNumber)) {
                String msg = "currentPageNumber should be greater equal currentPageGroupStartPageNumber. But:";
                msg = msg + " currentPageNumber=" + _currentPageNumber;
                msg = msg + " currentPageGroupStartPageNumber=" + currentPageGroupStartPageNumber;
                throw new SystemException(msg);
            }
            return currentPageGroupStartPageNumber;
        }

        /// <summary>
        /// Get current page-group page-number-list.
        /// Using values are currentPageNumber and pageGroupSize and allPageCount.
        /// </summary>
        /// <returns>Current page-group page-number-list.</returns>
        public System.Collections.IList GetCurrentPageGroupPageNumberList() {
            int allPageCount = this.AllPageCount;
            int currentPageGroupStartPageNumber = CalculateCurrentPageGroupStartPageNumber();
            if (!(currentPageGroupStartPageNumber > 0)) {
                String msg = "currentPageGroupStartPageNumber should be greater than 0. {> 0} But:";
                msg = msg + " currentPageGroupStartPageNumber=" + currentPageGroupStartPageNumber;
                throw new SystemException(msg);
            }
            int nextPageGroupStartPageNumber = currentPageGroupStartPageNumber + _pageGroupSize;

            System.Collections.IList resultList = new System.Collections.ArrayList();
            int arrayIndex = 0;
            for (int i=currentPageGroupStartPageNumber; i < nextPageGroupStartPageNumber && i <= allPageCount; i++) {
                resultList.Add(i);
            }
            return resultList;
        }

        /// <summary>
        /// Get current page-group page-number-array.
        /// Using values are currentPageNumber and pageGroupSize and allPageCount.
        /// </summary>
        /// <returns>Current page-group page-number-array.</returns>
        public int[] GetCurrentPageGroupPageNumberArray() {
            return ConvertListToIntArray(GetCurrentPageGroupPageNumberList());
        }

        // -------------------------------------------
        //                                  Page Range
        //                                  ----------
        /// <summary>
        /// Get current page-range page-number-list.
        /// Using values are currentPageNumber and pageRangeSize and allPageCount.
        /// </summary>
        /// <returns>Current page-range page-number-list.</returns>
        public System.Collections.IList GetCurrentPageRangePageNumberList() {
            int allPageCount = this.AllPageCount;
            int currentPageNumber = this.CurrentPageNumber;
            int pageRangeSize = this.PageRangeSize;

            System.Collections.IList resultList = new System.Collections.ArrayList();

            for (int i = currentPageNumber - pageRangeSize; i < currentPageNumber; i++) {
                if (i < 1) {
                    continue;
                }
                resultList.Add(i);
            }

            resultList.Add(currentPageNumber);

            int endPageNumber = (currentPageNumber + pageRangeSize);
            for (int i=currentPageNumber+1 ; i <= endPageNumber; i++) {
                if (i > allPageCount) {
                    break;
                }
                resultList.Add(i);
            }
            return resultList;
        }

        /// <summary>
        /// Get current page-range page-number-array.
        /// Using values are currentPageNumber and pageRangeSize and allPageCount.
        /// </summary>
        /// <returns>Current page-range page-number-array.</returns>
        public int[] GetCurrentPageRangePageNumberArray() {
            return ConvertListToIntArray(GetCurrentPageRangePageNumberList());
        }

        /// <summary>
        /// Get current page-range page-number-array.
        /// Using values are currentPageNumber and pageRangeSize and allPageCount.
        /// </summary>
        /// <returns>Current page-range page-number-array.</returns>
        protected int[] ConvertListToIntArray(System.Collections.IList ls) {
            int[] resultArray = new int[ls.Count];
            ls.CopyTo(resultArray, 0);
            return resultArray;
        }

        #endregion

        // =====================================================================================
        //                                                                         Determination
        //                                                                         =============
        #region Determination
        /// <summary>
        /// Is existing previous page?
        /// Using values are currentPageNumber.
        /// </summary>
        /// <returns>Determination.</returns>
        public bool IsExistPrePage() {
            return (_currentPageNumber > 1);
        }

        /// <summary>
        /// Is existing next page?
        /// Using values are currentPageNumber and allPageCount.
        /// </summary>
        /// <returns>Determination.</returns>
        public bool IsExistNextPage() {
            return (_currentPageNumber < this.AllPageCount);
        }

        /// <summary>
        /// Is existing previous page-group?
        /// Using values are currentPageNumber and pageGroupSize.
        /// </summary>
        /// <returns>Determination.</returns>
        public bool IsExistPrePageGroup() {
            return (_currentPageNumber > _pageGroupSize);
        }

        /// <summary>
        /// Is existing next page-group?
        /// Using values are currentPageNumber and pageGroupSize and allPageCount.
        /// </summary>
        /// <returns>Determination.</returns>
        public bool IsExistNextPageGroup() {
            int currentPageGroupStartPageNumber = CalculateCurrentPageGroupStartPageNumber();
            if (!(currentPageGroupStartPageNumber > 0)) {
                String msg = "currentPageGroupStartPageNumber should be greater than 0. {> 0} But:";
                msg = msg + " currentPageGroupStartPageNumber=" + currentPageGroupStartPageNumber;
                throw new SystemException(msg);
            }
            int nextPageGroupStartPageNumber = currentPageGroupStartPageNumber + _pageGroupSize;
            return (nextPageGroupStartPageNumber <= this.AllPageCount);
        }

        /// <summary>
        /// Is existing previous page-range?
        /// Using values are currentPageNumber and pageGroupSize.
        /// </summary>
        /// <returns>Determination.</returns>
        public bool IsExistPrePageRange() {
            int[] array = GetCurrentPageRangePageNumberArray();
            if (array.Length == 0) {
                return false;
            }
            return array[0] > 1;
        }

        /// <summary>
        /// Is existing next page-range?
        /// Using values are currentPageNumber and pageGroupSize and allPageCount.
        /// </summary>
        /// <returns>Determination.</returns>
        public bool IsExistNextPageRange() {
            int[] array = GetCurrentPageRangePageNumberArray();
            if (array.Length == 0) {
                return false;
            }
            return array[array.Length-1] < this.AllPageCount;
        }

        #endregion

        // =====================================================================================
        //                                                                 Basic-Override Method
        //                                                                 =====================
        /// <summary>
        /// This method overrides the method that is declared at super.
        /// </summary>
        /// <returns>View-string of all-columns value.</returns>
        public override String ToString() {
            StringBuilder sb = new StringBuilder();

            sb.Append(this.CurrentPageNumber).Append("/").Append(this.AllPageCount);
            sb.Append(" ").Append(this.AllRecordCount);
            sb.Append(" listSize=").Append((this.SelectedList != null ? ""+this.SelectedList.Count : null));
            sb.Append(" pageSize=").Append(this.PageSize);
            sb.Append(" groupSize=").Append(this.PageGroupSize);
            sb.Append(" rangeSize=").Append(this.PageRangeSize);
            sb.Append(" page:{").Append(IsExistPrePage()).Append("/").Append(IsExistNextPage()).Append("}");
            sb.Append(" group:{").Append(IsExistPrePageGroup()).Append("/").Append(IsExistNextPageGroup()).Append("}");
            sb.Append(" range:{").Append(IsExistPrePageRange()).Append("/").Append(IsExistNextPageRange()).Append("}");

            return sb.ToString();
        }
    }
}
