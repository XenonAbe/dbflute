#set ($myClassName = "${glConditionOptionFromToName}")

using System;

using ${glPackageBaseCommonJavaLike};
// using ${glPackageBaseCommonCOptionPartsLocal};

namespace ${glPackageBaseCommonCOption} {

public class ${myClassName} : ${glConditionOptionSimpleStringName} {

    public static readonly String LIKE_PREFIX = "prefix";
    public static readonly String LIKE_SUFFIX = "suffix";
    public static readonly String LIKE_CONTAIN = "contain";

    // ===================================================================================
    //                                                                           Attribute
    //                                                                           =========
    protected bool _fromDateGreaterThan;
    protected bool _toDateLessThan;
    protected bool _compareAsDate;

    // ===================================================================================
    //                                                                         Rear Option
    //                                                                         ===========
    public override String getRearOption() {
        String msg = "Thie option does not use getRearOption()!";
        throw new UnsupportedOperationException(msg);
    }

    // ===================================================================================
    //                                                                                Main
    //                                                                                ====
    public ${myClassName} GreaterThan() {
        _fromDateGreaterThan = true; return this;
    }

    public ${myClassName} LessThan() {
        _toDateLessThan = true; return this;
    }

    public ${myClassName} CompareAsDate() {
        _compareAsDate = true; return this;
    }

    // ===================================================================================
    //                                                                       Internal Main
    //                                                                       =============
    public DateTime? filterFromDate(DateTime? fromDate) {
        if (fromDate == null) {
            return null;
        }
        if (_compareAsDate) {
            final java.util.Calendar cal = java.util.Calendar.getInstance();
            cal.setTimeInMillis(fromDate.getTime());
            clearCalendarHourMinuteSecondMilli(cal);
            final DateTime cloneDate = (DateTime) fromDate.clone();
            cloneDate.setTime(cal.getTimeInMillis());
            return cloneDate;
        }
        return fromDate;
    }

    public DateTime? filterToDate(DateTime? toDate) {
        if (toDate == null) {
            return null;
        }
        if (_compareAsDate) {
            final java.util.Calendar cal = java.util.Calendar.getInstance();
            cal.setTimeInMillis(toDate.getTime());
            clearCalendarHourMinuteSecondMilli(cal);
            addCalendarNextDay(cal);// Key Point!
            final DateTime cloneDate = (DateTime) toDate.clone();
            cloneDate.setTime(cal.getTimeInMillis());
            return cloneDate;
        }
        return toDate;
    }

    public ${glPackageBaseCommonCKey}.${glConditionKeyName} getFromDateConditionKey() {
        if (_compareAsDate) {
            return ${glPackageBaseCommonCKey}.${glConditionKeyName}.CK_GREATER_EQUAL;
        }
        if (_fromDateGreaterThan) {
            return ${glPackageBaseCommonCKey}.${glConditionKeyName}.CK_GREATER_THAN;// Default!
        } else {
            return ${glPackageBaseCommonCKey}.${glConditionKeyName}.CK_GREATER_EQUAL;// Default!
        }
    }

    public ${glPackageBaseCommonCKey}.${glConditionKeyName} getToDateConditionKey() {
        if (_compareAsDate) {
            return ${glPackageBaseCommonCKey}.${glConditionKeyName}.CK_LESS_THAN;
        }
        if (_toDateLessThan) {
            return ${glPackageBaseCommonCKey}.${glConditionKeyName}.CK_LESS_THAN;// Default!
        } else {
            return ${glPackageBaseCommonCKey}.${glConditionKeyName}.CK_LESS_EQUAL;// Default!
        }
    }

    // ===================================================================================
    //                                                                     Calendar Helper
    //                                                                     ===============
    protected void addCalendarNextDay(java.util.Calendar cal) {
        cal.add(java.util.Calendar.DAY_OF_MONTH, 1);
    }

    protected void clearCalendarHourMinuteSecondMilli(java.util.Calendar cal) {
        cal.clear(java.util.Calendar.MILLISECOND);
        cal.clear(java.util.Calendar.SECOND);
        cal.clear(java.util.Calendar.MINUTE);
        cal.set(java.util.Calendar.HOUR_OF_DAY, cal.getActualMinimum(java.util.Calendar.HOUR_OF_DAY));
    }
}

}
