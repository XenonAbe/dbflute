
using System;
using System.Collections.Generic;
using ${glPackageBaseCommonSqlClause};

namespace ${glPackageBaseCommonCBean} {

    public class ${glSimplePagingBeanName} : ${glPagingBeanInterfaceName}, ${glMapParameterBeanInterfaceName} {

        // ===============================================================================
        //                                                                       Attribute
        //                                                                       =========
        protected readonly ${glSqlClauseName} _sqlClause;
        protected int _safetyMaxResultSize;
        protected bool _paging = true;
        protected bool _fetchNarrowing = true;
        protected IDictionary<String, Object> _parameterMap;

        // ===============================================================================
        //                                                                     Constructor
        //                                                                     ===========
        public ${glSimplePagingBeanName}() {
            _sqlClause = new ${glSqlClauseName}${database.DaoGenDbName}("Dummy");
        }

        // ===============================================================================
        //                                                    Implementation of PagingBean
        //                                                    ============================
        // -------------------------------------------------
        //                              Paging Determination
        //                              --------------------
        // * * * * * * * *
        // For SQL Comment
        // * * * * * * * *
        public bool Paging { get { return _paging; } }
        public void XSetPaging(bool paging) {
            if (paging) {
                this.SqlClause.MakeFetchScopeEffective();
            } else {
                this.SqlClause.IgnoreFetchScope();
            }
            this._paging = paging;
        }

        // -------------------------------------------------
        //                                     Fetch Setting
        //                                     -------------
        public ${glPagingBeanInterfaceName} FetchFirst(int fetchSize) {
            this.SqlClause.FetchFirst(fetchSize);
            return this;
        }

        public ${glPagingBeanInterfaceName} FetchScope(int fetchStartIndex, int fetchSize) {
            this.SqlClause.FetchScope(fetchStartIndex, fetchSize);
            return this;
        }

        public ${glPagingBeanInterfaceName} FetchPage(int fetchPageNumber) {
            this.SqlClause.FetchPage(fetchPageNumber);
            return this;
        }

        // -------------------------------------------------
        //                                    Fetch Property
        //                                    --------------
        public int FetchStartIndex { get { return this.SqlClause.FetchStartIndex; } }
        public int FetchSize { get { return this.SqlClause.FetchSize; } }
        public int FetchPageNumber { get { return this.SqlClause.FetchPageNumber; } }
        public int PageStartIndex { get { return this.SqlClause.PageStartIndex; } }
        public int PageEndIndex { get { return this.SqlClause.PageEndIndex; } }
        public bool IsFetchScopeEffective { get { return this.SqlClause.IsFetchScopeEffective; } }

        // -------------------------------------------------
        //                                     Hint Property
        //                                     -------------
        public String SelectHint { get { return this.SqlClause.GetSelectHint(); } }
        public String FromBaseTableHint { get { return this.SqlClause.GetFromBaseTableHint(); } }
        public String FromHint { get { return this.SqlClause.GetFromHint(); } }
        public String SqlSuffix { get { return this.SqlClause.GetSqlSuffix(); } }
        public String OrderByClause { get { return this.SqlClause.GetOrderByClause(); } }

        // ===============================================================================
        //                                            Implementation of FetchNarrowingBean
        //                                            ====================================
        public int FetchNarrowingSkipStartIndex { get { return this.SqlClause.FetchNarrowingSkipStartIndex; } }
        public int FetchNarrowingLoopCount { get { return this.SqlClause.FetchNarrowingLoopCount; } }
        public bool IsFetchNarrowingSkipStartIndexEffective { get { return !this.SqlClause.IsFetchStartIndexSupported; } }
        public bool IsFetchNarrowingLoopCountEffective { get { return !this.SqlClause.IsFetchSizeSupported; } }
        public bool IsFetchNarrowingEffective { get { return this.SqlClause.IsFetchNarrowingEffective; } }
        public void IgnoreFetchNarrowing() { _fetchNarrowing = false; }
        public void RestoreIgnoredFetchNarrowing() { _fetchNarrowing = true; }
        public int SafetyMaxResultSize { get { return _safetyMaxResultSize; } }

        // ===============================================================================
        //                                                   Implementation of OrderByBean
        //                                                   =============================
        public ${glOrderByClauseName} SqlComponentOfOrderByClause {
            get { return this.SqlClause.GetSqlComponentOfOrderByClause(); }
        }

        public ${glOrderByBeanInterfaceName} ClearOrderBy() {
            this.SqlClause.ClearOrderBy();
            return this;
        }

        public ${glOrderByBeanInterfaceName} IgnoreOrderBy() {
            this.SqlClause.IgnoreOrderBy();
            return this;
        }

        public ${glOrderByBeanInterfaceName} MakeOrderByEffective() {
            this.SqlClause.MakeOrderByEffective();
            return this;
        }

        public ${glOrderByBeanInterfaceName} RegisterOrderByAsc(String columnFullName) {
            this.SqlClause.RegisterOrderBy(columnFullName, null, true);
            return this;
        }

        public ${glOrderByBeanInterfaceName} RegisterOrderByDesc(String columnFullName) {
            this.SqlClause.RegisterOrderBy(columnFullName, null, false);
            return this;
        }

        public ${glOrderByBeanInterfaceName} ReverseOrderBy_Or_OverrideOrderByAsc(String columnFullName) {
            this.SqlClause.ReverseOrderBy_Or_OverrideOrderBy(columnFullName, null, true);
            return this;
        }

        public ${glOrderByBeanInterfaceName} ReverseOrderBy_Or_OverrideOrderByDesc(String columnFullName) {
            this.SqlClause.ReverseOrderBy_Or_OverrideOrderBy(columnFullName, null, false);
            return this;
        }

        // ===============================================================================
        //                                                Implementation of SelectResource
        //                                                ================================
        public void CheckSafetyResult(int safetyMaxResultSize) {
            this._safetyMaxResultSize = safetyMaxResultSize;
        }

        // ===============================================================================
        //                                              Implementation of MapParameterBean
        //                                              ==================================
        public IDictionary<String, Object> ParameterMap {
            get {
                if (_parameterMap == null) {
                    _parameterMap = new Dictionary<String, Object>();
                }
                return _parameterMap;
            }
        }

        public void AddParameter(String key, Object value) {
            if (_parameterMap == null) {
                _parameterMap = new Dictionary<String, Object>();
            }
            _parameterMap.Add(key, value);
        }

        // ===============================================================================
        //                                                                        Accessor
        //                                                                        ========
        protected ${glSqlClauseName} SqlClause {
            get { return _sqlClause; }
        }
    }
}
