#set ($myClassName = "${glSqlClauseInterfaceName}")

using System;
using System.Collections;
using ${glPackageBaseCommonCKey};
using ${glPackageBaseCommonCValue};
using ${glPackageBaseCommonCOption};
using ${glPackageBaseCommonJavaLike};

namespace ${glPackageBaseCommonSqlClause} {

// JavaLike
public interface ${glSqlClauseInterfaceName} {

    // =====================================================================================
    //                                                                                Clause
    //                                                                                ======
    String getClause();
	String getClausePKOnly();
    String getClauseFromWhereWithUnionTemplate();
    String getClauseFromWhereWithWhereUnionTemplate();

    // =====================================================================================
    //                                                                          Clause Parts
    //                                                                          ============
	String getSelectClause();
	String getSelectClausePKOnly();
    String getSelectHint();
    String getIncludedSelectColumnClause();
    String getFromClause();
    String getFromBaseTableHint();
    String getFromHint();
    String getWhereClause();
    String getOrderByClause();
    String getSqlSuffix();

    // ===================================================================================
    //                                                                          Copy Parts
    //                                                                          ==========
    void copyIncludedSelectColumn(${glSqlClauseInterfaceName} sqlClause);

	// ===================================================================================
    //                                                                SelectedSelectColumn
    //                                                                ====================
    void registerSelectedSelectColumn(String foreignTableAliasName
			                               , String localTableName
										   , String foreignPropertyName
										   , String localRelationPath);
	
    // ===================================================================================
    //                                                                IncludedSelectColumn
    //                                                                ====================
    void ignoreIncludedSelectColumn();
    void makeIncludedSelectColumnEffective();
    void registerIncludedSelectColumn(String aliasName, String realColumnName);

    // ===================================================================================
    //                                                                           OuterJoin
    //                                                                           =========
    void registerOuterJoin(String joinTableName, String aliasName, Map<String, String> joinOnMap);

    // ===================================================================================
    //                                                                               Where
    //                                                                               =====
    void registerWhereClause(String columnFullName, ${glConditionKeyName} key, ${glConditionValueName} value);
    void registerWhereClause(String columnFullName, ${glConditionKeyName} key, ${glConditionValueName} value, ${glConditionOptionInterfaceName} option);
    void registerWhereClause(String clause);
    void exchangeFirstWhereClauseForLastOne();

    // ===================================================================================
    //                                                                         InlineWhere
    //                                                                         ===========
    void registerBaseTableInlineWhereClause(String columnName, ${glConditionKeyName} key, ${glConditionValueName} value);
    void registerBaseTableInlineWhereClause(String columnName, ${glConditionKeyName} key, ${glConditionValueName} value, ${glConditionOptionInterfaceName} option);
    void registerBaseTableInlineWhereClause(String value);
    void registerOuterJoinInlineWhereClause(String aliasName, String columnName, ${glConditionKeyName} key, ${glConditionValueName} value, boolean onClauseInline);
    void registerOuterJoinInlineWhereClause(String aliasName, String columnName, ${glConditionKeyName} key, ${glConditionValueName} value, ${glConditionOptionInterfaceName} option, boolean onClauseInline);
    void registerOuterJoinInlineWhereClause(String aliasName, String value, boolean onClauseInline);

    // ===================================================================================
    //                                                             AdditionalConditionAsOr
    //                                                             =======================
    void makeAdditionalConditionAsOrEffective();
    void ignoreAdditionalConditionAsOr();

    // ===================================================================================
    //                                                                             OrderBy
    //                                                                             =======
    ${glOrderByClauseName} getSqlComponentOfOrderByClause();
    ${myClassName} clearOrderBy();
    ${myClassName} ignoreOrderBy();
    ${myClassName} makeOrderByEffective();
	
    /**
     * @param orderByProperty Order-by-property. 'aliasName.columnName/aliasName.columnName/...' (NotNull)
     * @param registeredOrderByProperty Registered-order-by-property. ([table-name].[column-name]) (Nullable)
     * @param ascOrDesc Is it ascend or descend?
     */
    void registerOrderBy(String orderByProperty, String registeredOrderByProperty, boolean ascOrDesc);
	
    /**
     * @param orderByProperty Order-by-property. 'aliasName.columnName/aliasName.columnName/...' (NotNull)
     * @param registeredOrderByProperty Registered-order-by-property. ([table-name].[column-name]) (Nullable)
     * @param ascOrDesc Is it ascend or descend?
     */
    void reverseOrderBy_Or_OverrideOrderBy(String orderByProperty, String registeredOrderByProperty, boolean ascOrDesc);

    // ===================================================================================
    //                                                                               Union
    //                                                                               =====
    void registerUnionQuery(String unionClause, boolean unionAll);

    // ===================================================================================
    //                                                                          FetchScope
    //                                                                          ==========
    ${myClassName} fetchFirst(int fetchSize);
    ${myClassName} fetchScope(int fetchStartIndex, int fetchSize);
    ${myClassName} fetchPage(int fetchPageNumber);
    int getFetchStartIndex();
    int getFetchSize();
    int getFetchPageNumber();
    int getPageStartIndex();
    int getPageEndIndex();
    boolean isFetchScopeEffective();
    ${myClassName} ignoreFetchScope();
    ${myClassName} makeFetchScopeEffective();
    boolean isFetchStartIndexSupported();
    boolean isFetchSizeSupported();

    // ===================================================================================
    //                                                                     Fetch Narrowing
    //                                                                     ===============
    boolean isFetchNarrowingEffective();
    int getFetchNarrowingSkipStartIndex();
    int getFetchNarrowingLoopCount();

    // ===================================================================================
    //                                                                                Lock
    //                                                                                ====
    ${myClassName} lockForUpdate();

    // ===================================================================================
    //                                                                            Resolver
    //                                                                            ========
    String resolveJoinAliasName(String relationPath, int cqNestNo);
    String resolveNestLevelExpression(String name, int cqNestNo);
    int resolveRelationNo(String baseTableName, String foreignPropertyName);

	// ===================================================================================
    //                                                                    Table Alias Info
    //                                                                    ================
	String getLocalTableAliasName();
	String getForeignTableAliasPrefix();

	// ===================================================================================
    //                                                                       Template Mark
    //                                                                       =============
	String getWhereClauseMark();
	String getWhereFirstConditionMark();
	String getUnionSelectClauseMark();
	String getUnionWhereClauseMark();
	String getUnionWhereFirstConditionMark();
	
    // =====================================================================================
    //                                                            Where Clause Simple Filter
    //                                                            ==========================
    // void addWhereClauseSimpleFilter(${glWhereClauseSimpleFilterInterfaceName} whereClauseSimpleFilter);
	
    // =====================================================================================
    //                                                                 Selected Foreign Info
    //                                                                 =====================
	boolean hasSelectedForeignInfo(String relationPath);
	void registerSelectedForeignInfo(String relationPath, String foreignPropertyName);
}

}