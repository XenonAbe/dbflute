
using System;
using System.Collections;
using ${glPackageBaseCommonCKey};
using ${glPackageBaseCommonCValue};
using ${glPackageBaseCommonCOption};

namespace ${glPackageBaseCommonSqlClause} {

    public interface ${glSqlClauseInterfaceName} {

        // =================================================================================
        //                                                                            Clause
        //                                                                            ======
        String GetClause();
		String GetClausePKOnly();
		String GetClauseFromWhereWithUnionTemplate();
		String GetClauseFromWhereWithWhereUnionTemplate();

        // =================================================================================
        //                                                                      Clause Parts
        //                                                                      ============
        String GetSelectClause();
		String getSelectClausePKOnly();
        String GetSelectHint();
        String GetFromClause();
        String GetFromBaseTableHint();
        String GetFromHint();
        String GetWhereClause();
        String GetOrderByClause();
        String GetSqlSuffix();

        // =================================================================================
        //                                                                        Copy Parts
        //                                                                        ==========
		void CopyIncludedSelectColumn(${glSqlClauseInterfaceName} sqlClause);
		
        // =================================================================================
        //                                                              SelectedSelectColumn
        //                                                              ====================
        void RegisterSelectedSelectColumn(String foreignTableAliasName
    	                                , String localTableName
    									, String foreignPropertyName
    									, String localRelationPath);
		
        // =================================================================================
        //                                                              IncludedSelectColumn
        //                                                              ====================
        void IgnoreIncludedSelectColumn();
        void MakeIncludedSelectColumnEffective();
        void RegisterIncludedSelectColumn(String aliasName, String realColumnName);

        // =================================================================================
        //                                                                         OuterJoin
        //                                                                         =========
		void RegisterOuterJoin(String joinTableName, String aliasName, IDictionary<String, String> joinOnMap);
		
        // =================================================================================
        //                                                                             Where
        //                                                                             =====
        void RegisterWhereClause(String columnName, ${glConditionKeyName} key, ${glConditionValueName} value);
		void RegisterWhereClause(String columnFullName, ${glConditionKeyName} key, ${glConditionValueName} value, ${glConditionOptionInterfaceName} option);
        void RegisterWhereClause(String clause);
		void ExchangeFirstWhereClauseForLastOne();

        // =================================================================================
        //                                                                       InlineWhere
        //                                                                       ===========
        void RegisterBaseTableInlineWhereClause(String columnName, ${glConditionKeyName} key, ${glConditionValueName} value);
        void RegisterBaseTableInlineWhereClause(String columnName, ${glConditionKeyName} key, ${glConditionValueName} value, ${glConditionOptionInterfaceName} option);
        void RegisterBaseTableInlineWhereClause(String value);
        void RegisterOuterJoinInlineWhereClause(String aliasName, String columnName, ${glConditionKeyName} key, ${glConditionValueName} value, bool onClauseInline);
        void RegisterOuterJoinInlineWhereClause(String aliasName, String columnName, ${glConditionKeyName} key, ${glConditionValueName} value, ${glConditionOptionInterfaceName} option, bool onClauseInline);
        void RegisterOuterJoinInlineWhereClause(String aliasName, String value, bool onClauseInline);
	
        // =================================================================================
        //                                                                           OrderBy
        //                                                                           =======
        ${glOrderByClauseName} GetSqlComponentOfOrderByClause();
        ${glSqlClauseInterfaceName} ClearOrderBy();
        ${glSqlClauseInterfaceName} IgnoreOrderBy();
        ${glSqlClauseInterfaceName} MakeOrderByEffective();
        void RegisterOrderBy(String columnFullName, String registeredColumnFullName, bool isAsc);
        void ReverseOrderBy_Or_OverrideOrderBy(String columnFullName, String registeredColumnFullName, bool isAsc);

        // =================================================================================
        //                                                                             Union
        //                                                                             =====
		void RegisterUnionQuery(String unionClause, bool unionAll);
		
        // =================================================================================
        //                                                                        FetchScope
        //                                                                        ==========
        ${glSqlClauseInterfaceName} FetchFirst(int fetchSize);
        ${glSqlClauseInterfaceName} FetchScope(int fetchStartIndex, int fetchSize);
        ${glSqlClauseInterfaceName} FetchPage(int fetchPageNumber);
        int FetchStartIndex { get; }
        int FetchSize { get; }
        int FetchPageNumber { get; }
        int PageStartIndex { get; }
        int PageEndIndex { get; }
        ${glSqlClauseInterfaceName} IgnoreFetchScope();
        ${glSqlClauseInterfaceName} MakeFetchScopeEffective();
        bool IsFetchScopeEffective { get; }
        bool IsFetchStartIndexSupported { get; }
        bool IsFetchSizeSupported { get; }
		
        // =================================================================================
        //                                                                    FetchNarrowing
        //                                                                    ==============
        int FetchNarrowingSkipStartIndex { get; }
        int FetchNarrowingLoopCount { get; }
        bool IsFetchNarrowingEffective { get; }
		
        // =================================================================================
        //                                                                              Lock
        //                                                                              ====
        ${glSqlClauseInterfaceName} LockForUpdate();
		
        // =================================================================================
        //                                                                          Resolver
        //                                                                          ========
		String ResolveJoinAliasName(String relationPath, int cqNestNo);
		String ResolveNestLevelExpression(String name, int cqNestNo);
		int ResolveRelationNo(String baseTableName, String foreignPropertyName);
		
        // =================================================================================
        //                                                                  Table Alias Info
        //                                                                  ================
	    String GetLocalTableAliasName();
	    String GetForeignTableAliasPrefix();
	
        // =================================================================================
        //                                                                     Template Mark
        //                                                                     =============
	    String GetWhereClauseMark();
	    String GetUnionSelectClauseMark();
	    String GetUnionWhereClauseMark();
	    String GetUnionWhereFirstConditionMark();
	
        // =================================================================================
        //                                                             Selected Foreign Info
        //                                                             =====================
	    bool HasSelectedForeignInfo(String relationPath);
	    void RegisterSelectedForeignInfo(String relationPath, String foreignPropertyName);
    }
}
