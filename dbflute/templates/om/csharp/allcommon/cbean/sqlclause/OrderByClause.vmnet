
#set ($myClassName = "${glOrderByClauseName}")

using System;
using System.Text;

using ${glPackageBaseCommonJavaLike};

namespace ${glPackageBaseCommonSqlClause} {

[System.Serializable]
public class ${myClassName} {

    // ===================================================================================
    //                                                                           Attribute
    //                                                                           =========
    protected List<${glOrderByElementName}> _orderByList = new ArrayList<${glOrderByElementName}>();

    // ===================================================================================
    //                                                                         Main Method
    //                                                                         ===========
    public void addOrderByElement(${glOrderByElementName} value) {
        _orderByList.add(value);
    }

    public void reverseAll() {
        foreach (${glOrderByElementName} element in _orderByList) {
            element.reverse();
        }
    }

    public List<${glOrderByElementName}> getOrderByList() {
        return _orderByList;
    }

    public String getOrderByClause() {
        if (isEmpty()) {
            return "";
        }
        StringBuilder sb = new StringBuilder();
        String delimiter = ", ";
        foreach (${glOrderByElementName} element in _orderByList) {
            sb.append(delimiter).append(element.getElementClause());
        }
        sb.remove(0, delimiter.Length).insert(0, "order by ");
        return sb.toString();
    }

    public String GetFirstElementColumnFullName() {
        if (isEmpty()) {
            String msg = "This order-by clause is empty: " + ToString();
            throw new IllegalStateException(msg);
        }
        ${glOrderByElementName} element = (${glOrderByElementName})_orderByList.get(0);
        return element.getColumnFullName();
    }

    public String getFirstElementRegisteredColumnFullName() {
        if (isEmpty()) {
            String msg = "This order-by clause is empty: " + ToString();
            throw new IllegalStateException(msg);
        }
        ${glOrderByElementName} element = (${glOrderByElementName})_orderByList.get(0);
        return element.getRegisteredColumnFullName();
    }

    public bool IsSameOrderByColumn(String columnFullName) {
        String[] columnFullNameArray = columnFullName.split('/');
        if (_orderByList.size() != columnFullNameArray.Length) {
            return false;
        }
        int count = 0;
        foreach (String columnFullNameElement in columnFullNameArray) {
            ${glOrderByElementName} element = (${glOrderByElementName})_orderByList.get(count);
            if (!element.getColumnFullName().ToLower().Equals(columnFullNameElement.ToLower())) {
                return false;
            }
            count++;
        }
        return true;
    }

    public bool isFirstElementAsc() {
        if (isEmpty()) {
            String msg = "This order-by clause is empty: " + ToString();
            throw new IllegalStateException(msg);
        }
        ${glOrderByElementName} element = (${glOrderByElementName})_orderByList.get(0);
        return element.isAsc();
    }

    public bool isFirstElementDesc() {
        return !isFirstElementAsc();
    }

    public bool isSameAsFirstElementAliasName(String expectedAliasName) {
        if (isEmpty()) {
            String msg = "This order-by clause is empty: " + ToString();
            throw new IllegalStateException(msg);
        }
        ${glOrderByElementName} element = (${glOrderByElementName})_orderByList.get(0);
        String actualAliasName = element.getAliasName();
        if (actualAliasName != null && expectedAliasName != null) {
            return actualAliasName.Equals(expectedAliasName);
        } else {
            return false;
        }
    }

    public bool isSameAsFirstElementColumnName(String expectedColumnName) {
        if (isEmpty()) {
            String msg = "This order-by clause is empty: " + ToString();
            throw new IllegalStateException(msg);
        }
        ${glOrderByElementName} element = (${glOrderByElementName})_orderByList.get(0);
        String actualColumnName = element.getColumnName();
        if (actualColumnName != null && expectedColumnName != null) {
            return actualColumnName.Equals(expectedColumnName);
        } else {
            return false;
        }
    }

    public bool isSameAsFirstElementRegisteredAliasName(String expectedRegisteredAliasName) {
        if (isEmpty()) {
            String msg = "This order-by clause is empty: " + ToString();
            throw new IllegalStateException(msg);
        }
        ${glOrderByElementName} element = (${glOrderByElementName})_orderByList.get(0);
        String actualRegisteredAliasName = element.RegisteredAliasName;
        if (actualRegisteredAliasName != null && expectedRegisteredAliasName != null) {
            return actualRegisteredAliasName.Equals(expectedRegisteredAliasName);
        } else {
            return false;
        }
    }

    public bool isSameAsFirstElementRegisteredColumnName(String expectedRegisteredColumnName) {
        if (isEmpty()) {
            String msg = "This order-by clause is empty: " + ToString();
            throw new IllegalStateException(msg);
        }
        ${glOrderByElementName} element = (${glOrderByElementName})_orderByList.get(0);
        String actualRegisteredColumnName = element.getRegisteredColumnName();
        if (actualRegisteredColumnName != null && expectedRegisteredColumnName != null) {
            return actualRegisteredColumnName.Equals(expectedRegisteredColumnName);
        } else {
            return false;
        }
    }

    public bool isEmpty() {
        return _orderByList.isEmpty();
    }

    public void clear() {
        _orderByList.clear();
    }

    // ===================================================================================
    //                                                                      Basic Override
    //                                                                      ==============
    public override String ToString() {
        return _orderByList.toString();
    }
}
}
