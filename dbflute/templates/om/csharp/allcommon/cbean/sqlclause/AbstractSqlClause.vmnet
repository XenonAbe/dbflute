#set ($myClassName = "${glSqlClauseAbstractName}")

using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using ${glPackageBaseCommon};
using ${glPackageBaseCommonCKey};
using ${glPackageBaseCommonCValue};

namespace ${glPackageBaseCommonSqlClause} {

    [System.Serializable]
    public abstract class ${myClassName} : ${glSqlClauseInterfaceName} {

        // =================================================================================
        //                                                                         Attribute
        //                                                                         =========
        // -------------------------------------------------
        //                                             Basic
        //                                             -----
        protected String _tableName;
		
        // -------------------------------------------------
        //                                   Clause Resource
        //                                   ---------------
        protected IDictionary<String, IDictionary<String, SelectedSelectColumnInfo>> _selectedSelectColumnMap = new Dictionary<String, IDictionary<String, SelectedSelectColumnInfo>>();		
        protected IDictionary<String, String>> _includedSelectColumnMap = new Dictionary<String, String>();
	    protected IDictionary<String, String> _selectClauseRealColumnAliasMap = new Dictionary<String, String>();// Without linked!
        protected IDictionary<String, LeftOuterJoinInfo> _outerJoinMap = new Dictionary<String, LeftOuterJoinInfo>();
        protected IList<String> _outerJoinList = new List<String>();
        protected IList<String> _whereList = new List<String>();
        protected IList<String> _baseTableInlineWhereList = new List<String>();
        protected ${glOrderByClauseName} _orderByClause = new ${glOrderByClauseName}();
		protected IList<UnionQueryInfo> _unionQueryInfoList = new List<UnionQueryInfo>();
        protected bool _isIncludedSelectColumnEffective = false;
        protected bool _isOrderByEffective = false;
		
        // -------------------------------------------------
        //                                    Fetch Property
        //                                    --------------
        protected int _fetchStartIndex = 0;
        protected int _fetchSize = 0;
        protected int _fetchPageNumber = 1;
        protected bool _isFetchScopeEffective = false;
		
		// -------------------------------------------------
        //                             Selected Foreign Info
        //                             ---------------------
		protected IDictionary<String, String> _selectedForeignInfo;

        // =================================================================================
        //                                                                       Constructor
        //                                                                       ===========
        public ${myClassName}(String tableName) {
            if (tableName == null) {
                String msg = "Argument[tableName] must not be null.";
                throw new ArgumentNullException(msg);
            }
            _tableName = tableName;
        }

        // =================================================================================
        //                                                                            Clause
        //                                                                            ======
        public String GetClause() {
            StringBuilder sb = new StringBuilder(512);
    		sb.Append(GetSelectClause());
            sb.Append(" ");
            sb.Append(BuildClauseWithoutMainSelect(false));
            return sb.ToString();
        }
    	
    	public String GetClausePKOnly() {
            StringBuilder sb = new StringBuilder(512);
    		sb.Append(GetSelectClausePKOnly());
            sb.Append(" ");
            sb.Append(BuildClauseWithoutMainSelect(true));
            return sb.ToString();
    	}
    	
    	protected String buildClauseWithoutMainSelect(boolean pkonly) {
    	    StringBuilder sb = new StringBuilder(512);
            sb.Append(GetFromClause());
            sb.Append(GetFromHint());
            sb.Append(" ");
            sb.Append(GetWhereClause());
    		String unionClause = BuildUnionClause(pkonly ? GetSelectClausePKOnly() : GetSelectClause());
    		
    		// Delete template mark! (At the future this will be unnecessary.)
    		unionClause = ReplaceString(unionClause, GetUnionWhereClauseMark(), "");// Required!
    		unionClause = ReplaceString(unionClause, GetUnionWhereFirstConditionMark(), "");// Required!
    		
            sb.Append(unionClause);
            if (_isOrderByEffective && _orderByClause.Count > 0) {
                sb.Append(" ");
                sb.Append(GetOrderByClause());
            }
            sb.Append(" ");
            sb.Append(GetSqlSuffix());
            return sb.ToString();
    	}
    	
        public String GetClauseFromWhereWithUnionTemplate() {
    	    return BuildClauseFromWhereAsTemplate(false);
        }
    	
        public String GetClauseFromWhereWithWhereUnionTemplate() {
    	    return BuildClauseFromWhereAsTemplate(true);
    	}
    	
        protected String BuildClauseFromWhereAsTemplate(boolean template) {
            StringBuilder sb = new StringBuilder(512);
            sb.Append(GetFromClause());
            sb.Append(GetFromHint());
            sb.Append(" ");
            sb.Append(BuildWhereClause(template));
            sb.Append(BuildUnionClause(getUnionSelectClauseMark()));
            return sb.ToString();
    	}
    	
        protected String BuildUnionClause(String selectClause) {
            StringBuilder sb = new StringBuilder();
            for (UnionQueryInfo unionQueryInfo in _unionQueryInfoList) {
                String unionQueryClause = unionQueryInfo.GetUnionQueryClause();
                bool unionAll = unionQueryInfo.IsUnionAll();
                sb.Append(unionAll ? " union all " : " union ").Append(selectClause).Append(" ").Append(unionQueryClause);
            }
            return sb.ToString();
        }

        // =================================================================================
        //                                                                      Clause Parts
        //                                                                      ============
    	public String GetSelectClause() {
    	    StringBuilder sb = new StringBuilder();
    		${glDBMetaInterfaceName} dbmeta = ${glDBMetaInstanceHandlerName}.FindDBMeta(_tableName);
    		IList<${glColumnInfoName}> columnInfoList = dbmeta.GetColumnInfoList();
    		for (${glColumnInfoName} columnInfo : columnInfoList) {
    		    String columnName = columnInfo.getColumnDbName();
    			if (sb.Length > 0) {
    			    sb.Append(", ");
    			} else {
    			    sb.Append("select/*$dto.selectHint*/ ");
    			}
    			String realColumnName = GetLocalTableAliasName() + "." + columnName;
    			sb.Append(realColumnName).Append(" as ").Append(columnName);
    			_selectClauseRealColumnAliasMap.put(realColumnName, columnName);
    		}
    	    ICollection<String> tableAliasNameSet = _selectedSelectColumnMap.Keys;
    		for (String tableAliasName in tableAliasNameSet) {
    		    IDictionary<String, SelectedSelectColumnInfo> map = _selectedSelectColumnMap[tableAliasName];
    			ICollection<SelectedSelectColumnInfo> selectColumnInfoList = map.Values;
    			for (SelectedSelectColumnInfo selectColumnInfo : selectColumnInfoList) {
    			    String realColumnName = selectColumnInfo.buildRealColumnName();
                    sb.Append(", ").Append(realColumnName).Append(" as ").Append(selectColumnInfo.GetColumnAliasName());
    				_selectClauseRealColumnAliasMap.put(realColumnName, selectColumnInfo.getColumnAliasName());
    			}
    		}
    		if (_isIncludedSelectColumnEffective && _includedSelectColumnMap.Count > 0) {
    		    sb.Append(GetIncludedSelectColumnClause());
    		}
    		return sb.toString();
    	}
    	
    	public String GetSelectClausePKOnly() {
    	    StringBuffer sb = new StringBuffer();
    		${glDBMetaInterfaceName} dbmeta = ${glDBMetaInstanceHandlerName}.FindDBMeta(_tableName);
    		${glUniqueInfoName} uniqueInfo = dbmeta.GetPrimaryUniqueInfo();
    		IList<${glColumnInfoName}> columnInfoList = uniqueInfo.GetUniqueColumnList();
    		for (${glColumnInfoName} columnInfo in columnInfoList) {
    		    String columnName = columnInfo.GetColumnDbName();
    			if (sb.Length > 0) {
    			    sb.Append(", ");
    			} else {
    			    sb.Append("select/*$dto.selectHint*/ ");
    			}
    			String realColumnName = GetLocalTableAliasName() + "." + columnName;
    			sb.Append(realColumnName).Append(" as ").Append(columnName);
    			_selectClauseRealColumnAliasMap.Add(realColumnName, columnName);
    		}
    		if (_isIncludedSelectColumnEffective && _includedSelectColumnMap.Count > 0) {
    		    sb.Append(GetIncludedSelectColumnClause());
    		}
    		return sb.toString();
    	}
		
        public String getSelectHint() {
            return CreateSelectHint();
        }
    
        public String getIncludedSelectColumnClause() {
            StringBuilder sb = new StringBuilder();
            ICollection<String> keySet = _includedSelectColumnMap.Keys;
            foreach (String aliasName in keySet) {
                String realColumnName = _includedSelectColumnMap[aliasName];
                sb.Append(", ").Append(realColumnName).Append(" as ").Append(aliasName);
            }
            return sb.ToString();
        }

        public String GetFromClause() {
            StringBuilder sb = new StringBuilder(128);
            sb.Append("from ");
            if (_baseTableInlineWhereList.Count == 0) {
                sb.Append(_tableName).Append(" dflocal");
            } else {
                sb.Append(GetInlineViewClause(_tableName, _baseTableInlineWhereList)).Append(" ").Append(_tableName);
            }
            sb.Append(GetFromBaseTableHint());
            sb.Append(GetLeftOuterJoinClause());
            return sb.ToString();
        }

        protected String GetLeftOuterJoinClause() {
            StringBuilder sb = new StringBuilder();
            foreach (String aliasName in _outerJoinList) {
                LeftOuterJoinInfo joinInfo = _outerJoinMap[aliasName];
                String joinTableName = joinInfo.JoinTableName;
                IList<String> inlineWhereClauseList = joinInfo.InlineWhereClauseList;
				IList<String> additionalOnClauseList = joinInfo.AdditionalOnClauseList;
	
                IDictionary<String> joinOnMap = joinInfo.JoinOnMap;
                AssertJoinOnMapNotEmpty(joinOnMap, aliasName);

                sb.Append(" left outer join ");
                if (inlineWhereClauseList.Count == 0) {
                    sb.Append(joinTableName);
                } else {
                    sb.Append(GetInlineViewClause(joinTableName, inlineWhereClauseList));
                }
                sb.Append(" ").Append(aliasName).Append(" on ");
                int count = 0;
                ICollection<String> localColumnNameSet = joinOnMap.Keys;
                foreach (String localColumnName in localColumnNameSet) {
                    String foreignColumnName = (String)joinOnMap[localColumnName];
                    if (count > 0) {
                        sb.Append(" and ");
                    }
                    if (localColumnName.equals("$$fixedCondition$$")) {
                        sb.Append(foreignColumnName);
                    } else {
                        sb.Append(localColumnName).append(" = ").Append(foreignColumnName);
                    }
                    ++count;
                }
    			for (String additionalOnClause : additionalOnClauseList) {
    			    sb.Append(" and ").Append(additionalOnClause);
    			}
            }
            return sb.ToString();
        }

        protected String GetInlineViewClause(String joinTableName, System.Collections.IList inlineWhereClauseList) {
            StringBuilder sb = new StringBuilder();
            sb.Append("(select * from ").Append(joinTableName).Append(" where ");
            int count = 0;
            foreach (String whereClause in inlineWhereClauseList) {
                if (count > 0) {
                    sb.Append(" and ");
                }
                sb.Append(whereClause);
                ++count;
            }
            sb.Append(")");
            return sb.ToString();
        }

        public String GetFromBaseTableHint() {
            return CreateFromBaseTableHint();
        }

        public String GetFromHint() {
            return CreateFromHint();
        }

        public String GetWhereClause() {
		    return BuildWhereClause(false);
        }
		
    	protected String BuildWhereClause(bool template) {
            StringBuilder sb = new StringBuilder(128);
            int count = 0;
            foreach (String clauseElement in _whereList) {
                if (count == 0) {
                    sb.Append("where ").Append(template  ? getWhereFirstConditionMark() : "").Append(clauseElement);
                } else {
                    sb.Append(" and ").Append(clauseElement);
                }
                count++;
            }
    		if (template && sb.length() == 0) {
    		    sb.append(getWhereClauseMark());
    		}
            return sb.ToString();
        }

        public String GetOrderByClause() {
            if (_unionQueryInfoList.Count > 0) {
                if (_selectClauseRealColumnAliasMap == null || _selectClauseRealColumnAliasMap.Count == 0) {
                    String msg = "The selectClauseColumnAliasMap should not be null or empty when union query exists: " + toString();
                    throw new IllegalStateException(msg);
                }
                return _orderByClause.GetOrderByClause(_selectClauseRealColumnAliasMap);
            } else {
                return _orderByClause.GetOrderByClause();
            }
        }

        public String GetSqlSuffix() {
            return CreateSqlSuffix();
        }

        // =================================================================================
        //                                                                        Copy Parts
        //                                                                        ==========
        public void CopyIncludedSelectColumn(${glSqlClauseInterfaceName} sqlClause) {
            ICollection<String> keySet = _includedSelectColumnMap.Keys;
            for (String aliasName in keySet) {
                String realColumnName = _includedSelectColumnMap[aliasName];
                sqlClause.RegisterIncludedSelectColumn(aliasName, realColumnName);
            }
        }
		
        // =================================================================================
        //                                                              SelectedSelectColumn
        //                                                              ====================
        public void RegisterSelectedSelectColumn(String foreignTableAliasName
    			                               , String localTableName
    										   , String foreignPropertyName
    										   , String localRelationPath) {
            _selectedSelectColumnMap.Add(foreignTableAliasName, CreateSelectedSelectColumnInfo(foreignTableAliasName, localTableName, foreignPropertyName, localRelationPath));
        }
		
    	protected IDictionary<String, SelectedSelectColumnInfo> CreateSelectedSelectColumnInfo(String foreignTableAliasName
    											                                             , String localTableName
    													                                     , String foreignPropertyName
    													                                     , String localRelationPath) {
    		${glDBMetaInterfaceName} dbmeta = ${glDBMetaInstanceHandlerName}.FindDBMeta(localTableName);
            ${glForeignInfoName} foreignInfo = dbmeta.FindForeignInfo(foreignPropertyName);
    		int relationNo = foreignInfo.GetRelationNo();
    		String nextRelationPath = "_" + relationNo;
            if (localRelationPath != null) {
                nextRelationPath = localRelationPath + nextRelationPath;
            }
    		IDictionary<String, SelectedSelectColumnInfo> resultMap = new Dictionary<String, SelectedSelectColumnInfo>();
    		${glDBMetaInterfaceName} foreignDBMeta = foreignInfo.GetForeignDBMeta();
            IList<${glColumnInfoName}> columnInfoList = foreignDBMeta.GetColumnInfoList();
            for (${glColumnInfoName} columnInfo in columnInfoList) {
                String columnDbName = columnInfo.GetColumnDbName();
    			SelectedSelectColumnInfo selectColumnInfo = new SelectedSelectColumnInfo();
    			selectColumnInfo.TableAliasName = foreignTableAliasName;
    			selectColumnInfo.ColumnName = columnDbName;
    			selectColumnInfo.ColumnAliasName = columnDbName + nextRelationPath;
    			resultMap.Add(columnDbName, selectColumnInfo);
            }
    		return resultMap;
    	}
		
        public static class SelectedSelectColumnInfo {
            protected String tableAliasName;
            protected String columnName;
            protected String columnAliasName;
            public String BuildRealColumnName() {
                if (tableAliasName != null) {
                    return tableAliasName + "." + columnName;
                } else {
                    return columnName;
                }
            }
            public String TableAliasName {
                get { return tableAliasName; }
				set { this.tableAliasName = value; }
            }
            public String ColumnName {
                get { return columnName; }
				set { this.columnName = value; }
            }
            public String ColumnAliasName {
                get { return columnAliasName; }
				set { this.columnAliasName = value; }
            }
        }
		
		// =================================================================================
        //                                                              IncludedSelectColumn
        //                                                              ====================
        public void IgnoreIncludedSelectColumn() {
            _isIncludedSelectColumnEffective = false;
        }
		
        public void MakeIncludedSelectColumnEffective() {
		    if (_includedSelectColumnMap.Count > 0) {
                _isIncludedSelectColumnEffective = true;
			}
        }

        public void RegisterIncludedSelectColumn(String aliasName, String realColumnName) {
            _isIncludedSelectColumnEffective = true;
            _includedSelectColumnMap.Add(aliasName, realColumnName);
        }
		
		// =================================================================================
        //                                                                         OuterJoin
        //                                                                         =========
        public void RegisterOuterJoin(String joinTableName, String aliasName, System.Collections.IDictionary joinOnMap) {
            AssertAlreadyOuterJoin(aliasName);
            AssertJoinOnMapNotEmpty(joinOnMap, aliasName);
            LeftOuterJoinInfo joinInfo = new LeftOuterJoinInfo();
            joinInfo.AliasName = aliasName;
            joinInfo.JoinTableName = joinTableName;
            joinInfo.JoinOnMap = joinOnMap;
            _outerJoinMap.Add(aliasName, joinInfo);
            _outerJoinList.Add(aliasName);// For order guarantee
        }

        public class LeftOuterJoinInfo {
            protected String _aliasName;
            protected String _joinTableName;
            protected IList<String> _inlineWhereClauseList = new List<String>();
            protected IList<String> _additionalOnClauseList = new List<String>();
            protected IDictionary<String, String> _joinOnMap;
			protected bool _onClauseInline;
            public String AliasName {
                get { return _aliasName; }
                set { _aliasName = value; }
            }
            public String JoinTableName {
                get { return _joinTableName; }
                set { _joinTableName = value; }
            }
            public IList<String> InlineWhereClauseList {
                get { return _inlineWhereClauseList; }
            }
            public void AddInlineWhereClause(String value) {
                _inlineWhereClauseList.Add(value);
            }
            public IList<String> AdditionalOnClauseList {
                get { return _additionalOnClauseList; }
            }
            public void AddAdditionalOnClause(String value) {
                _additionalOnClauseList.Add(value);
            }
            public IDictionary<String, String> JoinOnMap {
                get { return _joinOnMap; }
                set { _joinOnMap = value; }
            }
            public String IsOnClauseInline {
                get { return _onClauseInline; }
                set { _onClauseInline = value; }
            }
        }

        protected void AssertAlreadyOuterJoin(String aliasName) {
            if (_outerJoinMap.Contains(aliasName)) {
                String msg = "The alias name have already registered in outer join: " + aliasName;
                throw new ArgumentOutOfRangeException(msg);
            }
        }

        protected void AssertJoinOnMapNotEmpty(System.Collections.IDictionary joinOnMap, String aliasName) {
            if (joinOnMap.Count == 0) {
                String msg = "The joinOnMap should not be empty: aliasName=" + aliasName;
                throw new ArgumentOutOfRangeException(msg);
            }
        }

		// =================================================================================
        //                                                                             Where
        //                                                                             =====
        public void RegisterWhereClause(String columnFullName, ${glConditionKeyName} key, ${glConditionValueName} value) {
            AssertStringNotNullAndNotTrimmedEmpty("columnFullName", columnFullName);
            key.AddWhereClause(_whereList, columnFullName, value);
        }
		
        public void RegisterWhereClause(String columnFullName, ${glConditionKeyName} key, ${glConditionValueName} value, ${glConditionOptionInterfaceName} option) {
            AssertStringNotNullAndNotTrimmedEmpty("columnFullName", columnFullName);
			AssertObjectNotNull("option of " + columnFullName, option);
            key.AddWhereClause(_whereList, columnFullName, value);
        }

        public void RegisterWhereClause(String clause) {
            AssertStringNotNullAndNotTrimmedEmpty("clause", clause);
            _whereList.Add(clause);
        }
		
        public void ExchangeFirstWhereClauseForLastOne() {
            if (_whereList.Count > 1) {
                String first = _whereList[0];
                String last = _whereList[_whereList.size() - 1];
                _whereList.Set(0, last);
                _whereList.Set(_whereList.Count - 1, first);
            }
        }

		// =================================================================================
        //                                                                       InlineWhere
        //                                                                       ===========
        public void RegisterBaseTableInlineWhereClause(String columnName, ${glConditionKeyName} key, ${glConditionValueName} value) {
		    AssertStringNotNullAndNotTrimmedEmpty("columnName", columnName);
            key.AddWhereClause(_baseTableInlineWhereList, columnName, value);
        }
		
        public void RegisterBaseTableInlineWhereClause(String columnName, ${glConditionKeyName} key, ${glConditionValueName} value, ${glConditionOptionInterfaceName} option) {
		    AssertStringNotNullAndNotTrimmedEmpty("columnName", columnName);
			AssertObjectNotNull("option of " + columnName, option);
            key.AddWhereClause(_baseTableInlineWhereList, columnName, value, option);
        }

        public void RegisterBaseTableInlineWhereClause(String value) {
            _baseTableInlineWhereList.Add(value);
        }

        public void RegisterOuterJoinInlineWhereClause(String aliasName, String columnName, ${glConditionKeyName} key, ${glConditionValueName} value, boolean onClauseInline) {
            AssertNotYetOuterJoin(aliasName);
			AssertStringNotNullAndNotTrimmedEmpty("columnName", columnName);
            LeftOuterJoinInfo joinInfo = (LeftOuterJoinInfo)_outerJoinMap[aliasName];
    		if (onClauseInline) {
                key.addWhereClause(joinInfo.AdditionalOnClauseList, aliasName + "." + columnName, value);
    		} else {
                key.addWhereClause(joinInfo.InlineWhereClauseList, columnName, value);
    		}
        }
		
        public void RegisterOuterJoinInlineWhereClause(String aliasName, String columnName, ${glConditionKeyName} key, ${glConditionValueName} value, boolean onClauseInline, ${glConditionOptionInterfaceName} option) {
            AssertNotYetOuterJoin(aliasName);
			AssertStringNotNullAndNotTrimmedEmpty("columnName", columnName);
            LeftOuterJoinInfo joinInfo = (LeftOuterJoinInfo)_outerJoinMap[aliasName];
    		if (onClauseInline) {
                key.addWhereClause(joinInfo.AdditionalOnClauseList, aliasName + "." + columnName, value, option);
    		} else {
                key.addWhereClause(joinInfo.InlineWhereClauseList, columnName, value, option);
    		}
        }

        public void RegisterOuterJoinInlineWhereClause(String aliasName, String value, boolean onClauseInline) {
            AssertNotYetOuterJoin(aliasName);
            LeftOuterJoinInfo joinInfo = (LeftOuterJoinInfo)_outerJoinMap[aliasName];
    		if (onClauseInline) {
                joinInfo.AddInlineWhereClause(value);
    		} else {
    		    joinInfo.AddInlineWhereClause(value);
    		}
        }

        protected void AssertNotYetOuterJoin(String aliasName) {
            if (!_outerJoinMap.Contains(aliasName)) {
                String msg = "The alias name have not registered in outer join yet: " + aliasName;
                throw new ArgumentOutOfRangeException(msg);
            }
        }

		// =================================================================================
        //                                                           AdditionalConditionAsOr
        //                                                           =======================
		
		// =================================================================================
        //                                                                           OrderBy
        //                                                                           =======
        public ${glOrderByClauseName} GetSqlComponentOfOrderByClause() {
            return _orderByClause;
        }

        public ${glSqlClauseInterfaceName} ClearOrderBy() {
            _isOrderByEffective = false;
            _orderByClause.Clear();
            return this;
        }

        public ${glSqlClauseInterfaceName} IgnoreOrderBy() {
            _isOrderByEffective = false;
            return this;
        }

        public ${glSqlClauseInterfaceName} MakeOrderByEffective() {
            _isOrderByEffective = true;
            return this;
        }

        public void ReverseOrderBy_Or_OverrideOrderBy(String columnFullName, bool isAsc) {
            ReverseOrderBy_Or_OverrideOrderBy(columnFullName, null, isAsc);
        }

        public void ReverseOrderBy_Or_OverrideOrderBy(String columnFullName, String registeredColumnFullName, bool ascOrDesc) {
            _isOrderByEffective = true;
            if (!_orderByClause.IsSameOrderByColumn(columnFullName)) {
                ClearOrderBy();
                RegisterOrderBy(columnFullName, registeredColumnFullName, ascOrDesc);
            } else {
                _orderByClause.ReverseAll();
            }
        }

        public void RegisterOrderBy(String columnFullName, bool isAsc) {
            RegisterOrderBy(columnFullName, null, isAsc);
        }

        public void RegisterOrderBy(String columnFullName, String registeredColumnFullName, bool ascOrDesc) {
            try {
                String[] orderByArray = columnFullName.Split('/');
                if (registeredColumnFullName == null || registeredColumnFullName.Trim().Length ==0) {
                    registeredColumnFullName = columnFullName;
                }
                String[] registeredOrderByArray = registeredColumnFullName.Split('/');
                int count = 0;
                foreach (String orderBy in orderByArray) {
                    String registeredOrderBy = registeredOrderByArray[count];

                    _isOrderByEffective = true;
                    String aliasName = null;
                    String columnName = null;
                    String registeredAliasName = null;
                    String registeredColumnName = null;

                    if (orderBy.IndexOf(".") < 0) {
                        columnName = orderBy;
                    } else {
                        aliasName = orderBy.Substring(0, orderBy.LastIndexOf("."));
                        columnName = orderBy.Substring(orderBy.LastIndexOf(".") + 1);
                    }

                    if (registeredOrderBy.IndexOf(".") < 0) {
                        registeredColumnName = registeredOrderBy;
                    } else {
                        registeredAliasName = registeredOrderBy.Substring(0, registeredOrderBy.LastIndexOf("."));
                        registeredColumnName = registeredOrderBy.Substring(registeredOrderBy.LastIndexOf(".") + 1);
                    }

                    ${glOrderByElementName} element = new ${glOrderByElementName}();
                    element.AliasName = aliasName;
                    element.ColumnName = columnName;
                    element.RegisteredAliasName = registeredAliasName;
                    element.RegisteredColumnName = registeredColumnName;
                    if (ascOrDesc) {
                        element.SetupAsc();
                    } else {
                        element.SetupDesc();
                    }
                    _orderByClause.AddOrderByElement(element);

                    count++;
                }s
            } catch (Exception e) {
                String msg = "RegisterOrderBy() threw the exception: columnFullName=" + columnFullName;
                msg = msg + " registeredColumnFullName=" + registeredColumnFullName;
                msg = msg + " ascOrDesc=" + ascOrDesc;
                msg = msg + " sqlClause=" + this.ToString();
                throw new SystemException(msg, e);
            }
        }

		// =================================================================================
        //                                                                        UnionQuery
        //                                                                        ==========
        public void registerUnionQuery(String unionQueryClause, bool unionAll) {
            assertStringNotNullAndNotTrimmedEmpty("unionQueryClause", unionQueryClause);
            UnionQueryInfo unionQueryInfo = new UnionQueryInfo();
            unionQueryInfo.setUnionQueryClause(unionQueryClause);
            unionQueryInfo.setUnionAll(unionAll);
            _unionQueryInfoList.add(unionQueryInfo);
        }
    
        protected static class UnionQueryInfo {
            protected String _unionQueryClause;
            protected bool _unionAll;
            public String UnionQueryClause {
                get { return _unionQueryClause; }
				set { _unionQueryClause = value; }
            }
            public bool isUnionAll {
                get { return _unionAll; }
				set { _unionAll = value; }
            }
        }
		
		// =================================================================================
        //                                                                        FetchScope
        //                                                                        ==========
        public ${glSqlClauseInterfaceName} FetchFirst(int fetchSize) {
            _isFetchScopeEffective = true;
            if (fetchSize <= 0) {
                String msg = "Argument[fetchSize] must be plus: " + fetchSize;
                throw new ArgumentOutOfRangeException(msg);
            }
            _fetchStartIndex = 0;
            _fetchSize = fetchSize;
            _fetchPageNumber = 1;
            DoClearFetchPageClause();
            DoFetchFirst();
            return this;
        }

        public ${glSqlClauseInterfaceName} FetchScope(int fetchStartIndex, int fetchSize) {
            _isFetchScopeEffective = true;
            if (fetchStartIndex < 0) {
                String msg = "Argument[fetchStartIndex] must be plus or zero: " + fetchStartIndex;
                throw new ArgumentOutOfRangeException(msg);
            }
            if (fetchSize <= 0) {
                String msg = "Argument[fetchSize] must be plus: " + fetchSize;
                throw new ArgumentOutOfRangeException(msg);
            }
            _fetchStartIndex = fetchStartIndex;
            _fetchSize = fetchSize;
            return FetchPage(1);
        }

        public ${glSqlClauseInterfaceName} FetchPage(int fetchPageNumber) {
            _isFetchScopeEffective = true;
            if (fetchPageNumber <= 0) {
                fetchPageNumber = 1;
            }
            if (_fetchSize <= 0) {
                String msg = "Fetch size should not be minus or zero when you invoke this method. ";
                msg = msg + "When you invoke this method, it is necessary to invoke 'fetchFirst()' or 'fetchScope()' ahead of that. ";
                msg = msg + ": fetchPageNumber=" + fetchPageNumber + " _fetchSize=" + _fetchSize;
                throw new SystemException(msg);
            }
            _fetchPageNumber = fetchPageNumber;
            if (_fetchPageNumber == 1 && _fetchStartIndex == 0) {
                return FetchFirst(_fetchSize);
            }
            DoClearFetchPageClause();
            DoFetchPage();
            return this;
        }

        abstract protected void DoFetchFirst();
        abstract protected void DoFetchPage();
        abstract protected void DoClearFetchPageClause();
		
        public int FetchStartIndex {
            get { return _fetchStartIndex; }
        }
		
        public int FetchSize {
            get { return _fetchSize; }
        }

        public int FetchPageNumber {
            get { return _fetchPageNumber; }
        }

        public int PageStartIndex {
            get {
                if (_fetchPageNumber <= 0) {
                    String msg = "_fetchPageNumber must be plus: " + _fetchPageNumber;
                    throw new SystemException(msg);
                }
                return _fetchStartIndex + (_fetchSize * (_fetchPageNumber - 1));
            }
        }

        public int PageEndIndex {
            get {
                if (_fetchPageNumber <= 0) {
                    String msg = "_fetchPageNumber must be plus: " + _fetchPageNumber;
                    throw new SystemException(msg);
                }
                return _fetchStartIndex + (_fetchSize * _fetchPageNumber);
            }
        }

        public ${glSqlClauseInterfaceName} IgnoreFetchScope() {
            _isFetchScopeEffective = false;
            DoClearFetchPageClause();
            return this;
        }

        public ${glSqlClauseInterfaceName} MakeFetchScopeEffective() {
            _isFetchScopeEffective = true;
            if (this.FetchSize > 0 && this.FetchPageNumber > 0) {
                FetchPage(this.FetchPageNumber);
            }
            return this;
        }

        public bool IsFetchScopeEffective {
            get { return _isFetchScopeEffective; }
        }

		public virtual bool IsFetchStartIndexSupported {
            get { return true; } // Default
        }

        public virtual bool IsFetchSizeSupported {
            get { return true; } // Default
        }

        abstract protected String CreateSelectHint();
        abstract protected String CreateFromBaseTableHint();
        abstract protected String CreateFromHint();
        abstract protected String CreateSqlSuffix();

		// =================================================================================
        //                                                                    FetchNarrowing
        //                                                                    ==============
        public int FetchNarrowingSkipStartIndex {
            get {
                if (this.IsFetchStartIndexSupported) {
                    return 0;
                } else {
                    return this.PageStartIndex;
                }
            }
        }

        public int FetchNarrowingLoopCount {
            get { return this.FetchSize; }
        }

        public bool IsFetchNarrowingEffective {
            get { return _isFetchScopeEffective; }
        }

		// =================================================================================
        //                                                                              Lock
        //                                                                              ====
        abstract public ${glSqlClauseInterfaceName} LockForUpdate();
		
		// =================================================================================
        //                                                                          Resolver
        //                                                                          ========
        public String resolveJoinAliasName(String relationPath, int cqNestNo) {
            return ResolveNestLevelExpression("dfrelation" + relationPath, cqNestNo);
        }
    
        public String ResolveNestLevelExpression(String name, int cqNestNo) {
            // if (cqNestNo > 1) {
            //     return name + "_n" + cqNestNo;
            // } else {
            //     return name;
            // }
    		return name;
        }
    
        public int ResolveRelationNo(String localTableName, String foreignPropertyName) {
            ${glDBMetaInterfaceName} dbmeta = ${glDBMetaInstanceHandlerName}.FindDBMeta(localTableName);
            ${glForeignInfoName} foreignInfo = dbmeta.FindForeignInfo(foreignPropertyName);
            return foreignInfo.GetRelationNo();
        }
		
		// =================================================================================
        //                                                                  Table Alias Info
        //                                                                  ================
    	public String GetLocalTableAliasName() {
    	    return "dflocal";
    	}
    	
    	public String GetForeignTableAliasPrefix() {
    	    return "dfrelation";
    	}
	
		// =================================================================================
        //                                                                     Template Mark
        //                                                                     =============
    	public String GetWhereClauseMark() {
    	    return "#df:whereClause#";
    	}
    	
    	public String GetWhereFirstConditionMark() {
    	    return "#df:whereFirstCondition#";
    	}
    	
    	public String GetUnionSelectClauseMark() {
    	    return "#df:unionSelectClause#";
    	}
    	
    	public String GetUnionWhereClauseMark() {
    	    return "#df:unionWhereClause#";
    	}
    	
    	public String GetUnionWhereFirstConditionMark() {
    	    return "#df:unionWhereFirstCondition#";
    	}
	
		// =================================================================================
        //                                                             Selected Foreign Info
        //                                                             =====================
    	public bool HasSelectedForeignInfo(String relationPath) {
    		if (_selectedForeignInfo == null) {
    		    return false;
    		}
    	    return _selectedForeignInfo.containsKey(relationPath);
    	}
    
    	public void RegisterSelectedForeignInfo(String relationPath, String foreignPropertyName) {
    		if (_selectedForeignInfo == null) {
    		    _selectedForeignInfo = new Dictionary<String, String>();
    		}
    		_selectedForeignInfo.Add(relationPath, foreignPropertyName);
    	}
		
		// =================================================================================
        //                                                                            Helper
        //                                                                            ======
		protected String ReplaceString(String text, String fromText, String toText) {
            if(text == null || fromText == null || toText == null) {
                return null;
			}
		    text.Replace(fromText, toText);
		}
		
        // -----------------------------------------------------
        //                                         Assert Object
        //                                         -------------
        #region Assert Object
        protected void AssertObjectNotNull(String variableName, Object arg) {
            if (variableName == null) {
                String msg = "Argument[variableName] should not be null.";
                throw new ArgumentNullException(msg);
            }
            if (arg == null) {
                String msg = "Argument[" + variableName + "] should not be null.";
                throw new ArgumentNullException(msg);
            }
        }
        #endregion

        // -----------------------------------------------------
        //                                         Assert String
        //                                         -------------
        #region Assert String

        /**
         * Assert that the string is not null and not trimmed empty.
         * 
         * @param variableName Variable name. (NotNull)
         * @param arg Argument. (NotNull)
         */
        protected void AssertStringNotNullAndNotTrimmedEmpty(String variableName, String value) {
            if (variableName == null) {
                String msg = "Variable[variableName] should not be null.";
                throw new ArgumentNullException(msg);
            }
            if (value == null) {
                String msg = "Variable[" + variableName + "] should not be null.";
                throw new ArgumentNullException(msg);
            }
            if (value.Trim().Length == 0) {
                String msg = "Variable[" + variableName + "] should not be empty: [" + value + "]";
                throw new ArgumentOutOfRangeException(msg);
            }
        }

        #endregion
    }
}
