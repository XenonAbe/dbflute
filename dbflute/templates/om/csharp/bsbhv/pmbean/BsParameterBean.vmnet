#set ($myClassName = "${myExtendedParameterBeanClassName}")

using System;
using System.Text;

using ${glPackageBaseCommon};
#if ($database.isPmbMetaDataForProcedure($pmbClassName))
using ${glPackageBaseCommonCBeanOutsidesql};
#end
using ${glPackageBaseCommonCOption};

namespace ${glPackageExtendedParameterBean} {

    /// <summary>
    /// The parametaer-bean of ${pmbClassName}.
    /// Author: ${database.classAuthor}
    /// </summary>
    [System.Serializable]
#if ($database.isPmbMetaDataForProcedure($pmbClassName))
    public partial class ${myClassName} : ${glProcedurePmb} {
#else
    public partial class ${myClassName}${database.getPmbMetaDataSuperClassDefinition($pmbClassName)} {
#end
#if ($database.isPmbMetaDataForProcedure($pmbClassName))

        // ===============================================================================
        //                                                                      Definition
        //                                                                      ==========
        // -------------------------------------------------
        //                               Procedure Parameter
        //                               -------------------
#foreach ($propertyName in $database.getPmbMetaDataPropertySet($pmbClassName))
#set ($propertyType = $database.getPmbMetaDataPropertyType($pmbClassName, $propertyName))
#set ($columnName = $database.getPmbMetaDataPropertyColumnName($pmbClassName, $propertyName))
#if ($database.isPmbMetaDataPropertyOptionProcedureParameterIn($pmbClassName, $propertyName))
        public static readonly String ${propertyName}_PROCEDURE_PARAMETER = "${columnName}, in";
#elseif ($database.isPmbMetaDataPropertyOptionProcedureParameterOut($pmbClassName, $propertyName))
        public static readonly String ${propertyName}_PROCEDURE_PARAMETER = "${columnName}, out";
#elseif ($database.isPmbMetaDataPropertyOptionProcedureParameterInOut($pmbClassName, $propertyName))
        public static readonly String ${propertyName}_PROCEDURE_PARAMETER = "${columnName}, inout";
#elseif ($database.isPmbMetaDataPropertyOptionProcedureParameterReturn($pmbClassName, $propertyName))
        public static readonly String ${propertyName}_PROCEDURE_PARAMETER = "${columnName}, return";
#end
#end
#end

        // ===============================================================================
        //                                                                       Attribute
        //                                                                       =========
#foreach ($propertyName in $database.getPmbMetaDataPropertySet($pmbClassName))
#set ($propertyType = $database.getPmbMetaDataPropertyType($pmbClassName, $propertyName))
        protected ${propertyType} _${propertyName};
#if ($database.hasPmbMetaDataPropertyOptionAnyLikeSearch($pmbClassName, $propertyName))
        protected ${glLikeSearchOption} _${propertyName}InternalLikeSearchOption;

#end
#end
    
#if ($database.isPmbMetaDataForProcedure($pmbClassName))
        // ===============================================================================
        //                                                                       Procedure
        //                                                                       =========
        public virtual String ProcedureName { get {
            return "${database.getPmbMetaDataProcedureName($pmbClassName)}";
        }}

#end
        // ===============================================================================
        //                                                                          Helper
        //                                                                          ======
        protected String ConvertEmptyToNullIfString(String value) {
            return FilterRemoveEmptyString(value);
        }

        protected String FilterRemoveEmptyString(String value) {
            return ((value != null && !"".Equals(value)) ? value : null);
        }

        protected String FormatByteArray(byte[] bytes) {
            return "byte[" + (bytes != null ? bytes.Length.ToString() : "null") + "]";
        }

        // ===============================================================================
        //                                                                  Basic Override
        //                                                                  ==============
        public override String ToString() {
            StringBuilder sb = new StringBuilder();
            sb.Append("${myClassName}:");
            sb.Append(xbuildColumnString());
            return sb.ToString();
        }
        private String xbuildColumnString() {
            String c = ", ";
            StringBuilder sb = new StringBuilder();
#foreach ($propertyName in $database.getPmbMetaDataPropertySet($pmbClassName))
#if ($propertyType.equals("byte[]"))
            sb.Append(c).Append(FormatByteArray(_${propertyName}));
#else
            sb.Append(c).Append(_${propertyName});
#end
            if (sb.Length > 0) { sb.Remove(0, c.Length); }
            sb.Insert(0, "{").Append("}");
            return sb.ToString();
        }

        // ===============================================================================
        //                                                                        Accessor
        //                                                                        ========
#foreach ($propertyName in $database.getPmbMetaDataPropertySet($pmbClassName))
#set ($propertyType = $database.getPmbMetaDataPropertyType($pmbClassName, $propertyName))
        public ${propertyType} ${database.initCap($propertyName)} {
#if ($propertyType.endsWith("String"))
            get { return ($propertyType)ConvertEmptyToNullIfString(_${propertyName}); }
#else
            get { return _${propertyName}; }
#end
#if (!$database.hasPmbMetaDataPropertyOptionOriginalOnlyOneSetter($pmbClassName, $propertyName))
            set { _${propertyName} = value; }
#end
        }
#if ($database.isPmbMetaDataPropertyOptionLikeSearch($pmbClassName, $propertyName))

        public void Set${database.initCap($propertyName)}(${propertyType} ${propertyName}, ${glLikeSearchOption} ${propertyName}Option) {
            _${propertyName} = ${propertyName};
            _${propertyName}InternalLikeSearchOption = ${propertyName}Option;
        }
#end
#if ($database.isPmbMetaDataPropertyOptionPrefixSearch($pmbClassName, $propertyName))

        public void Set${database.initCap($propertyName)}_PrefixSearch(${propertyType} ${propertyName}) {
            _${propertyName} = ${propertyName};
            _${propertyName}InternalLikeSearchOption = new ${glLikeSearchOption}().LikePrefix();
        }
#end
#if ($database.isPmbMetaDataPropertyOptionContainSearch($pmbClassName, $propertyName))

        public void Set${database.initCap($propertyName)}_ContainSearch(${propertyType} ${propertyName}) {
            _${propertyName} = ${propertyName};
            _${propertyName}InternalLikeSearchOption = new ${glLikeSearchOption}().LikeContain();
        }
#end
#if ($database.isPmbMetaDataPropertyOptionSuffixSearch($pmbClassName, $propertyName))

        public void Set${database.initCap($propertyName)}_SuffixSearch(${propertyType} ${propertyName}) {
            _${propertyName} = ${propertyName};
            _${propertyName}InternalLikeSearchOption = new ${glLikeSearchOption}().LikeSuffix();
        }
#end
#if ($database.hasPmbMetaDataPropertyOptionAnyLikeSearch($pmbClassName, $propertyName))

        public ${glLikeSearchOption} ${database.initCap($propertyName)}InternalLikeSearchOption { get {
            return _${propertyName}InternalLikeSearchOption;
        }}
#end
#if ($database.isPmbMetaDataPropertyOptionFromDate($pmbClassName, $propertyName))

        public void Set${database.initCap($propertyName)}_FromDate(${propertyType} ${propertyName}) {
            _${propertyName} = new ${glFromToOption}().CompareAsDate().filterFromDate(${propertyName});
        }
#end
#if ($database.isPmbMetaDataPropertyOptionToDate($pmbClassName, $propertyName))

        public void Set${database.initCap($propertyName)}_ToDate(${propertyType} ${propertyName}) {
            _${propertyName} = new ${glFromToOption}().CompareAsDate().filterToDate(${propertyName});
        }
#end
#if ($database.isPmbMetaDataPropertyOptionClassification($pmbClassName, $propertyName))
#set ($classificationName = $database.getPmbMetaDataPropertyOptionClassificationName($pmbClassName, $propertyName))
#foreach ($classificationMap in $database.getPmbMetaDataPropertyOptionClassificationMapList($pmbClassName, $propertyName))

        public void Set${database.initCap($propertyName)}_${classificationMap.get('name')}() {
            this.${database.initCap($propertyName)} = ${glCDef}.${classificationName}.${classificationMap.get('name')}.Code;
        }
#end
#end

#end
    }
}
