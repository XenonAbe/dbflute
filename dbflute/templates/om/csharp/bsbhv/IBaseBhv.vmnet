#set ($myClassName = "${myExtendedBhvInterfaceName}")

using System;
using System.Collections;
using ${glPackageBaseCommon};
using ${glPackageBaseCommonBhv};
using ${glPackageBaseCommonCBean};
using ${glPackageBaseCommonDBMeta};
using ${myDBMetaPackageName};
using ${glPackageExtendedDao};
using ${glPackageExtendedEntity};
using ${glPackageCB};

#set ($myExtendClassName = "")
#if ($table.isWritable())
  #set ($myExtendClassName = "${glBehaviorWritableInterfaceName}")
#else
  #set ($myExtendClassName = "${glBehaviorReadableInterfaceName}")
#end

namespace ${glPackageExtendedBhv} {

    /// <summary>
    /// The behavior-interface of ${table.Name}. (partial class for auto-generation)
    /// Author : ${database.ClassAuthor}
    /// </summary>
    public partial interface ${myClassName} : ${glPackageBaseCommonBhv}.${myExtendClassName} {

        // =====================================================================================
        //                                                                                DBMeta
        //                                                                                ======
        #region DBMeta
        /// <summary>
        /// The property of my dbmeta.
        /// </summary>
        ${myDBMetaClassName} MyDBMeta { get; }
        #endregion

        // =====================================================================================
        //                                                                      Dao GetterSetter
        //                                                                      ================
        #region Dao GetterSetter
        /// <summary>
        /// Get my dao.
        /// </summary>
        ${myExtendedDaoClassName} Dao { get; set; }
        #endregion

        // =====================================================================================
        //                                                                          New Instance
        //                                                                          ============
        #region New Instance
        /// <summary>
        /// New my entity.
        /// </summary>
        /// <returns>My condition-bean. (NotNull)</returns>
        ${myExtendedObjectClassName} NewMyEntity();

        /// <summary>
        /// New my condition-bean.
        /// </summary>
        /// <returns>My condition-bean. (NotNull)</returns>
        ${myConditionBeanClassName} NewMyConditionBean();
        #endregion

        // =====================================================================================
        //                                                                       Delegate-Method
        //                                                                       ===============
        #region Delegate-Method
        /// <summary>
        /// Select all list. (Delegate-Method)
        /// </summary> 
        /// <returns>Selected all list. If the select result is zero, it returns empty list. (NotNull)</returns>
        IList DelegateSelectAllList();
#if ($table.hasPrimaryKey())

        //
        // Get entity. (Delegate-Method)
        // 
        // @param Primary-keys (NotNull)
        // @return Entity. (NotNull)
        //
        ${myExtendedObjectClassName} DelegateGetEntity(${table.PrimaryKeyArgsString});
#end

        /// <summary>
        /// Select count by condition-bean. (Delegate-Method)
        /// </summary>
        /// <param name="${glAttachedCBArgsVariableName}">Condition-bean. (NotNull)</param>
        /// <returns>Selected count. (NotNull)</returns>
        int DelegateSelectCountIgnoreFetchScope(${myConditionBeanClassName} ${glAttachedCBArgsVariableName});

        /// <summary>
        /// Select entity by condition-bean. (Delegate-Method)
        /// </summary>
        /// <param name="${glAttachedCBArgsVariableName}">Condition-bean. (NotNull)</param>
        /// <returns>Selected entity. If the select result is zero, it returns null. (Nullable)</returns>
        ${myExtendedObjectClassName} DelegateSelectEntity(${myConditionBeanClassName} ${glAttachedCBArgsVariableName});

        /// <summary>
        /// Select list by condition-bean. (Delegate-Method)
        /// </summary>
        /// <param name="${glAttachedCBArgsVariableName}">Condition-bean. (NotNull)</param>
        /// <returns>Selected list. If the select result is zero, it returns empty list. (NotNull)</returns>
        IList DelegateSelectList(${myConditionBeanClassName} ${glAttachedCBArgsVariableName});

    #if ($table.isUseSequence())

        /// <summary>
        /// Select next value as sequence. (Delegate-Method)
        /// </summary>
        /// <returns>Next value. (NotNull)</returns>
        int DelegateSelectNextVal();
    #end

    #if ($table.isWritable())

        /// <summary>
        /// Insert one entity. (Delegate-Method)
        /// </summary>
        /// <param name="entity">Entity. (NotNull)</param>
        /// <returns>Inserted count.</returns>
        int DelegateInsert(${myExtendedObjectClassName} entity);

        /// <summary>
        /// Update one entity. (Delegate-Method)
        /// </summary>
        /// <param name="entity">Entity. (NotNull)</param>
        /// <returns>Updated count.</returns>
        int DelegateUpdate(${myExtendedObjectClassName} entity);

        /// <summary>
        /// Delete one entity. (Delegate-Method)
        /// </summary>
        /// <param name="entity">Entity. (NotNull)</param>
        /// <returns>Deleted count.</returns>
        int DelegateDelete(${myExtendedObjectClassName} entity);

    #end
        #endregion

        // =====================================================================================
        //                                                                          Basic Select
        //                                                                          ============
        #region Basic Select
        /// <summary>
        /// Select list.
        /// </summary>
        /// <param name="${glAttachedCBArgsVariableName}">Condition-bean. (NotNull)</param>
        /// <returns>List-result-bean. (NotNull)</returns>
        ${glListResultBeanName} SelectList(${myConditionBeanClassName} ${glAttachedCBArgsVariableName});

        /// <summary>
        /// Select page.
        /// </summary>
        /// <param name="${glAttachedCBArgsVariableName}">Condition-bean. (NotNull)</param>
        /// <returns>Selected page. (NotNull)</returns>
        ${glPagingResultBeanName} SelectPage(${myConditionBeanClassName} ${glAttachedCBArgsVariableName});

        /// <summary>
        /// Select page.
        /// </summary>
        /// <param name="${glAttachedCBArgsVariableName}">Condition-bean. (NotNull)</param>
        /// <param name="invoker">Select-page-invoker. (NotNull)</param>
        /// <returns>Read page. (NotNull)</returns>
        ${glPagingResultBeanName} SelectPage(${myConditionBeanClassName} ${glAttachedCBArgsVariableName}, SelectPageInvoker invoker);

        /// <summary>
        /// Select entity by condition-bean with deleted check.
        /// </summary>
        /// <param name="${glAttachedCBArgsVariableName}">Condition-bean. (NotNull)</param>
        /// <returns>Entity that is selected from database by select-for-update. (NotNull)</returns>
        /// <exception cref="${glPackageBaseCommonException}.${glRecordHasAlreadyBeenDeletedException}"></exception>
        ${myExtendedObjectClassName} SelectEntityWithDeletedCheck(${myConditionBeanClassName} ${glAttachedCBArgsVariableName});
        #endregion

        // =====================================================================================
        //                                                                        Various Select
        //                                                                        ==============
        #region Various Select
        /// <summary>
        /// Select list after checking count(ignore fetch scope).
        /// </summary>
        /// <param name="${glAttachedCBArgsVariableName}">Condition-bean. (NotNull)</param>
        /// <param name="maxCount">Max count.</param>
        /// <returns>List-result-bean. (NotNull)</returns>
        /// <exception cref="${glPackageBaseCommonException}.${glSelectedCountExceedMaxCountExceptionName}"></exception>
        ${glListResultBeanName} SelectListAfterCheckingCountIgnoreFetchScope(${myConditionBeanClassName} ${glAttachedCBArgsVariableName}, int maxCount);

        /// <summary>
        /// Select page as first.
        /// </summary>
        /// <param name="${glAttachedCBArgsVariableName}">Condition-bean. (NotNull)</param>
        /// <param name="fetchSize">Fetch-size.</param>
        /// <returns>Selected page as first page. (NotNull)</returns>
        ${glPagingResultBeanName} SelectPageAsFirst(${myConditionBeanClassName} ${glAttachedCBArgsVariableName}, int fetchSize);

        /// <summary>
        /// Select page by page-number.
        /// If result-page is 'rb.getAllRecordCount > 0 && rb.getSelectedList().size() == 0', re-select as max-page.
        /// </summary>
        /// <param name="${glAttachedCBArgsVariableName}">Condition-bean. (NotNull)</param>
        /// <param name="fetchPageNumber">Fetch-page-number.</param>
        /// <returns>Selected page as [fetchPageNumber] page. (NotNull)</returns>
        ${glPagingResultBeanName} SelectPageByPageNumber(${myConditionBeanClassName} ${glAttachedCBArgsVariableName}, int fetchPageNumber);
    #if ($table.hasPrimaryKey())

        ${myExtendedObjectClassName} SelectForReadOnlyByPKValueWithDeletedCheck(${table.PrimaryKeyArgsString});
    #end

        /// <summary>
        /// Select for read only with deleted check.
        /// </summary>
        /// <param name="primaryKeyMapString">Primary-key map-string. (NotNull)</param>
        /// <returns>Entity that is selected from database by select-for-update. (NotNull)</returns>
        /// <exception cref="${glPackageBaseCommonException}.${glRecordHasAlreadyBeenDeletedException}"></exception>
        ${myExtendedObjectClassName} SelectForReadOnlyByPKMapStringWithDeletedCheck(String primaryKeyMapString);
    #if ($table.hasPrimaryKey())

        ${myExtendedObjectClassName} SelectForUpdateByPKValueWithDeletedCheck(${table.PrimaryKeyArgsString});
    #end

        /// <summary>
        /// Select for update with deleted check.
        /// </summary>
        /// <param name="primaryKeyMapString">Primary-key map-string. (NotNull)</param>
        /// <returns>Entity that is selected from database by select-for-update. (NotNull)</returns>
        /// <exception cref="${glPackageBaseCommonException}.${glRecordHasAlreadyBeenDeletedException}"></exception>
        ${myExtendedObjectClassName} SelectForUpdateByPKMapStringWithDeletedCheck(String primaryKeyMapString);
        #endregion


#if (${table.hasOnlyOnePrimaryKey()})

        // =====================================================================================
        //                                                                         Load Refferer
        //                                                                         =============
        #region Load Refferer
  #foreach ($refferer in $table.Referrers)
    #set ($reffererTable = $refferer.Table)
    #set ($reffererEntityClassName = "${glProjectPrefix}${reffererTable.JavaName}")
    #set ($reffererDaoClassName = "${reffererEntityClassName}Dao")
    #set ($reffererBhvClassName = "${reffererEntityClassName}Bhv")
    #set ($reffererCBClassName = "${reffererEntityClassName}${glConditionBeanInitialName}")
    #set ($reffererVariableName = "${glChildrenVariablePrefix}${refferer.ReffererPropertyNameInitCap}")
    #set ($reffererEntityLongClassName = "${glPackageExtendedEntity}.${reffererEntityClassName}")
    #set ($genericPKChildListMap = "${table.getPrimaryKeyJavaNativeAsOne()}, java.util.List${database.filterGenericsString(${reffererEntityClassName})}")

        // /* * * * * * * * * * * * * * * * * * * * * * *
        //   ReffererTable    = [${refferer.Table.Name}]
        //   ReffererProperty = [${refferer.ReffererPropertyName}]
        // * * * * * * * * */

        /// <summary>
        /// Load refferer of ${refferer.ReffererPropertyName}.
        /// Default refferer condition is 'primary-key asc'.
        /// </summary>
        /// <param name="ls">Entity list of main table. (NotNull)</param>
        void Load${refferer.ReffererPropertyNameInitCap}(System.Collections.IList ls);

        /// <summary>
        /// Load refferer of ${refferer.ReffererPropertyName}.
        /// </summary>
        /// <param name="ls">Entity list of main table. (NotNull)</param>
        /// <param name="cbSetupper">Refferer condition-bean setupper instance for registering refferer condition. (NotNull)</param>
        void Load${refferer.ReffererPropertyNameInitCap}(System.Collections.IList ls, ${reffererTable.JavaName}CBSetupper cbSetupper);
  #end

        #endregion
#end

        // =====================================================================================
        //                                                                          Basic Update
        //                                                                          ============
        #region Basic Update
    #if ($table.isWritable())

        /// <summary>
        /// Insert or update after select-for-update.
        /// </summary>
        /// <param name="entity"> Entity. This must contain primary-key value at least. (NotNull)</param>
        /// <returns>Updated count.</returns>
        /// <exception cref="${glPackageBaseCommonException}.${glRecordHasAlreadyBeenDeletedException}"></exception>
        int InsertOrUpdateAfterSelectForUpdate(${myExtendedObjectClassName} entity);

        /// <summary>
        /// Update after select-for-update.
        /// </summary>
        /// <param name="entity">Entity. This must contain primary-key value at least. (NotNull)</param>
        /// <returns>Updated count.</returns>
        /// <exception cref="${glPackageBaseCommonException}.${glRecordHasAlreadyBeenDeletedException}"></exception>
        int UpdateAfterSelectForUpdate(${myExtendedObjectClassName} entity);
        #endregion

        // =====================================================================================
        //                                                                        Various Update
        //                                                                        ==============
        #region Various Update
      #if ($table.hasLogicalDeleteColumn())
        #if ($table.hasPrimaryKey())

        // <summary>
        // Revival from logical-delete after select-for-update.
        // </summary>
        // <param name="primaryKey">Primary-keys. (NotNull)</param>
        // <returns>Updated count.</returns>
        // <exception cref="${glPackageBaseCommonException}.${glRecordHasAlreadyBeenDeletedException}"></exception>
        int LogicalDeleteByPKValueAfterSelectForUpdate(${table.PrimaryKeyArgsString});
          #if ($table.isUseUpdateDate())

        // <summary>
        // Logical-delete after select-for-update.
        // </summary>
        // <param name="primaryKey">Primary-keys. (NotNull)</param>
        // <param name="${table.UpdateDateUncapitalisedJavaName}">The value of update-date for optimistic-lock. (NotNull)</param>
        // <returns>Updated count.</returns>
        // <exception cref="${glPackageBaseCommonException}.${glRecordHasAlreadyBeenDeletedException}"></exception>
        int LogicalDeleteByPKValueAfterSelectForUpdate(${table.PrimaryKeyArgsString}, ${table.UpdateDateJavaNative} ${table.UpdateDateUncapitalisedJavaName});
          #end
        #end

        /// <summary>
        /// Logical-Delete after select-for-update.
        /// </summary>
        /// <param name="primaryKeyMapString">Primary-key map-string. (NotNull)</param>
        /// <returns>Updated count.</returns>
        /// <exception cref="${glPackageBaseCommonException}.${glRecordHasAlreadyBeenDeletedException}"></exception>
        int LogicalDeleteByPKMapStringAfterSelectForUpdate(String primaryKeyMapString);
        #if ($table.isUseUpdateDate())

        /// <summary>
        /// Logical-delete after select-for-update.
        /// </summary>
        /// <param name="primaryKeyMapString">Primary-key map-string. (NotNull)</param>
        /// <param name="${table.UpdateDateUncapitalisedJavaName}">The value of update-date for optimistic-lock. (NotNull)</param>
        /// <returns>Updated count.</returns>
        /// <exception cref="${glPackageBaseCommonException}.${glRecordHasAlreadyBeenDeletedException}"></exception>
        int LogicalDeleteByPKMapStringAfterSelectForUpdate(String primaryKeyMapString, ${table.UpdateDateJavaNative} ${table.UpdateDateUncapitalisedJavaName});
        #end
      #end
      #if ($table.hasRevivalFromLogicalDeleteColumn())
        #if ($table.hasPrimaryKey())

        int RevivalFromLogicalDeleteByPKValueAfterSelectForUpdate(${table.PrimaryKeyArgsString});
          #if ($table.isUseUpdateDate())

        // <summary>
        // Revival from logical-delete after select-for-update.
        // </summary>
        // <param name="primaryKey">Primary-keys. (NotNull)</param>
        // <param name="${table.UpdateDateUncapitalisedJavaName}">The value of update-date for optimistic-lock. (NotNull)</param>
        // <returns>Updated count.</returns>
        // <exception cref="${glPackageBaseCommonException}.${glRecordHasAlreadyBeenDeletedException}"></exception>
        int RevivalFromLogicalDeleteByPKValueAfterSelectForUpdate(${table.PrimaryKeyArgsString}, ${table.UpdateDateJavaNative} ${table.UpdateDateUncapitalisedJavaName});
          #end
        #end

        /// <summary>
        /// Revival from Logical-Delete after select-for-update.
        /// </summary>
        /// <param name="primaryKeyMapString">Primary-key map-string. (NotNull)</param>
        /// <returns>Updated count.</returns>
        /// <exception cref="${glPackageBaseCommonException}.${glRecordHasAlreadyBeenDeletedException}"></exception>
        int RevivalFromLogicalDeleteByPKMapStringAfterSelectForUpdate(String primaryKeyMapString);
        #if ($table.isUseUpdateDate())

        /// <summary>
        /// Revival from logical-delete after select-for-update.
        /// </summary>
        /// <param name="primaryKeyMapString">Primary-key map-string. (NotNull)</param>
        /// <param name="${table.UpdateDateUncapitalisedJavaName}">The value of update-date for optimistic-lock. (NotNull)</param>
        /// <returns>Updated count.</returns>
        /// <exception cref="${glPackageBaseCommonException}.${glRecordHasAlreadyBeenDeletedException}"></exception>
        int RevivalFromLogicalDeleteByPKMapStringAfterSelectForUpdate(String primaryKeyMapString, ${table.UpdateDateJavaNative} ${table.UpdateDateUncapitalisedJavaName});
        #end
      #end

        #endregion

        // =====================================================================================
        //                                                                        Various Insert
        //                                                                        ==============
        #region Various Insert
      #if ($table.isUseIdentity())
        #if ($table.hasPrimaryKey())

        int CopyInsertByPKValueAfterSelect(${table.PrimaryKeyArgsString});
        #end

        /// <summary>
        /// Copy-Insert after select.
        /// </summary>
        /// <param name="primaryKeyMapString">Primary-Key map-string. (NotNull)</param>
        /// <returns>Inserted count.</returns>
        /// <exception cref="${glPackageBaseCommonException}.${glRecordHasAlreadyBeenDeletedException}"></exception>
        int CopyInsertByPKMapStringAfterSelect(String primaryKeyMapString);
      #end
    #end

        #endregion
    }

    /// <summary>
    /// The interface of CBSetupper.
    /// </summary>
    public interface ${table.JavaName}CBSetupper {
        /// <summary>
        /// Set up condition.
        /// </summary>
        /// <param name="${glAttachedCBArgsVariableName}">Condition-bean. (NotNull)</param>
        void Setup(${myConditionBeanClassName} ${glAttachedCBArgsVariableName});
    }

    /// <summary>
    /// The implementation of CBSetupper. {order by PK Asc}
    /// </summary>
    public class ${table.JavaName}CBSetupperPKAsc : ${table.JavaName}CBSetupper {
        /// <summary>
        /// Set up condition.
        /// </summary>
        /// <param name="${glAttachedCBArgsVariableName}">Condition-bean. (NotNull)</param>
        public void Setup(${myConditionBeanClassName} ${glAttachedCBArgsVariableName}) {
            ${glAttachedCBArgsVariableName}.AddOrderBy_PK_Asc();
        }
    }

#if (${table.hasOnlyOnePrimaryKey()})
  #foreach ($refferer in $table.Referrers)
    #set ($reffererTable = $refferer.Table)
    #set ($reffererEntityClassName = "${glProjectPrefix}${reffererTable.JavaName}")
    #set ($reffererDaoClassName = "${reffererEntityClassName}Dao")
    #set ($reffererBhvClassName = "${reffererEntityClassName}Bhv")
    #set ($reffererCBClassName = "${reffererEntityClassName}${glConditionBeanInitialName}")
    #set ($reffererVariableName = "${glChildrenVariablePrefix}${refferer.ReffererPropertyNameInitCap}")
    #set ($reffererEntityLongClassName = "${glPackageExtendedEntity}.${reffererEntityClassName}")
    #set ($genericPKChildListMap = "${table.getPrimaryKeyJavaNativeAsOne()}, java.util.List${database.filterGenericsString(${reffererEntityClassName})}")

    [Obsolete("This class is deprecated. Please use ${reffererTable.JavaName}CBSetupper.")]
    public interface ${table.JavaName}ReffererCondition${refferer.ReffererPropertyNameInitCap} : ${reffererTable.JavaName}CBSetupper {
    }
  #end
#end

}