#set ($myClassName = "${myExtendedBhvInterfaceName}")

using System;
using System.Collections.Generic;
using ${glPackageBaseCommon};
using ${glPackageBaseCommonBhv};
using ${glPackageBaseCommonBhvSetup};
using ${glPackageBaseCommonCBean};
using ${glPackageBaseCommonDBMeta};
using ${myDBMetaPackageName};
using ${glPackageExtendedDao};
using ${glPackageExtendedEntity};
using ${glPackageCB};

#set ($myExtendClassName = "")
#if ($table.isWritable())
  #set ($myExtendClassName = "${glBehaviorWritableInterfaceName}")
#else
  #set ($myExtendClassName = "${glBehaviorReadableInterfaceName}")
#end

namespace ${glPackageExtendedBhv} {

    /// <summary>
    /// The behavior-interface of ${table.Name}. (partial class for auto-generation)
    /// Author : ${database.ClassAuthor}
    /// </summary>
    public partial interface ${myClassName} : ${glPackageBaseCommonBhv}.${myExtendClassName} {

        // ===============================================================================
        //                                                                          DBMeta
        //                                                                          ======
        #region DBMeta
        /// <summary>
        /// The property of my dbmeta.
        /// </summary>
        ${myDBMetaClassName} MyDBMeta { get; }
        #endregion

        // ===============================================================================
        //                                                                    New Instance
        //                                                                    ============
        #region New Instance
        /// <summary>
        /// New my entity.
        /// </summary>
        /// <returns>My condition-bean. (NotNull)</returns>
        ${myExtendedObjectClassName} NewMyEntity();

        /// <summary>
        /// New my condition-bean.
        /// </summary>
        /// <returns>My condition-bean. (NotNull)</returns>
        ${myConditionBeanClassName} NewMyConditionBean();
        #endregion

        // ===============================================================================
        //                                                                    Basic Select
        //                                                                    ============
        #region Basic Select
        /// <summary>
        /// Select count by condition-bean.
        /// </summary>
        /// <param name="cb">Condition-bean. (NotNull)</param>
        /// <returns>Selected count. (NotNull)</returns>
        int SelectCount(${myConditionBeanClassName} cb);

        /// <summary>
        /// Select entity by condition-bean.
        /// </summary>
        /// <param name="cb">Condition-bean. (NotNull)</param>
        /// <returns>Entity that is selected from database. (Nullable: If the entity does not exist, returns null)</returns>
        /// <exception cref="${glPackageBaseCommonException}.${glRecordHasAlreadyBeenDeletedException}"></exception>
        /// <exception cref="${glPackageBaseCommonException}.${glRecordHasOverlappedException}"></exception>
        ${myExtendedObjectClassName} SelectEntity(${myConditionBeanClassName} cb);

        /// <summary>
        /// Select entity by condition-bean with deleted check.
        /// </summary>
        /// <param name="${glAttachedCBArgsVariableName}">Condition-bean. (NotNull: If the entity does not exist, throws exception)</param>
        /// <returns>Entity that is selected from database. (NotNull)</returns>
        /// <exception cref="${glPackageBaseCommonException}.${glRecordHasAlreadyBeenDeletedException}"></exception>
        ${myExtendedObjectClassName} SelectEntityWithDeletedCheck(${myConditionBeanClassName} ${glAttachedCBArgsVariableName});

#if ($table.hasPrimaryKey())
        ${myExtendedObjectClassName} SelectByPKValueWithDeletedCheck(${table.PrimaryKeyArgsString});
#end

        /// <summary>
        /// Select list as result-bean.
        /// </summary>
        /// <param name="${glAttachedCBArgsVariableName}">Condition-bean. (NotNull)</param>
        /// <returns>List-result-bean. (NotNull)</returns>
        ${glListResultBeanName}<${myExtendedObjectClassName}> SelectList(${myConditionBeanClassName} ${glAttachedCBArgsVariableName});

        /// <summary>
        /// Select page as result-bean.
        /// </summary>
        /// <param name="${glAttachedCBArgsVariableName}">Condition-bean. (NotNull)</param>
        /// <returns>Selected page. (NotNull)</returns>
        ${glPagingResultBeanName}<${myExtendedObjectClassName}> SelectPage(${myConditionBeanClassName} ${glAttachedCBArgsVariableName});

        /// <summary>
        /// Select page as result-bean.
        /// </summary>
        /// <param name="${glAttachedCBArgsVariableName}">Condition-bean. (NotNull)</param>
        /// <param name="invoker">Select-page-invoker. (NotNull)</param>
        /// <returns>Read page. (NotNull)</returns>
        ${glPagingResultBeanName}<${myExtendedObjectClassName}> SelectPage(${myConditionBeanClassName} ${glAttachedCBArgsVariableName}, SelectPageInvoker<${myExtendedObjectClassName}> invoker);
        #endregion

#if (${table.hasOnlyOnePrimaryKey()})
        // ===============================================================================
        //                                                                    Load Referer
        //                                                                    ============
        #region Load Referer
  #foreach ($referer in $table.refererList)
    #set ($refererTable = $referer.table)
    #set ($refererEntityClassName = "${glProjectPrefix}${refererTable.JavaName}")
    #set ($refererDaoClassName = "${refererEntityClassName}Dao")
    #set ($refererBhvClassName = "${refererEntityClassName}Bhv")
    #set ($refererCBClassName = "${refererEntityClassName}${glConditionBeanInitialName}")
    #set ($refererVariableName = "${glChildrenVariablePrefix}${referer.refererPropertyNameInitCap}")
    #set ($refererEntityLongClassName = "${glPackageExtendedEntity}.${refererEntityClassName}")
    #set ($genericPKChildListMap = "${table.getPrimaryKeyJavaNativeAsOne()}, java.util.List<${refererEntityClassName}>")

        // /* * * * * * * * * * * * * * * * * * * * * * *
        //   RefererTable    = [${referer.table.name}]
        //   RefererProperty = [${referer.refererPropertyName}]
        // * * * * * * * * */

        /// <summary>
        /// Load referer of ${referer.refererPropertyName}.
        /// </summary>
        /// <param name="ls">The list of entity. (NotNull)</param>
        /// <param name="conditionBeanSetupper">The condition-bean setupper of referer. (NotNull)</param>
        void Load${referer.ReffererPropertyNameInitCap}(System.Collections.Generic.IList<${myExtendedObjectClassName}> ls, ${glConditionBeanSetupperName}<${refererCBClassName}> conditionBeanSetupper);
  #end

        #endregion
#end
#if ($table.isWritable())
        // ===============================================================================
        //                                                             Basic Entity Update
        //                                                             ===================
        #region Basic Entity Update
        /// <summary>
        /// Insert.
        /// </summary>
        /// <param name="entity"> Entity. (NotNull)</param>
        void Insert(${myExtendedObjectClassName} entity);

        /// <summary>
        /// Update. {modified only}
        /// If it updates count zero, throws exception.
        /// If concurrency control of this table is valid, this update have it.
        /// So then the entity of argument should have the value of concurrency column.
        /// </summary>
        /// <param name="entity"> Entity. (NotNull)</param>
        /// <exception cref="${glPackageBaseCommonException}.${glEntityAlreadyDeletedException}"></exception>
        /// <exception cref="${glPackageBaseCommonException}.${glEntityAlreadyUpdatedException}"></exception>
        /// <exception cref="${glPackageBaseCommonException}.${glEntityDuplicatedException}"></exception>
        void Update(${myExtendedObjectClassName} entity);

        /// <summary>
        /// Update non-strictly. {modified only}
        /// This update ignores concurrency control.
        /// So if the entity of argument have the value of concurrency column, it is ignored.
        /// </summary>
        /// <param name="entity"> Entity. (NotNull)</param>
        /// <exception cref="${glPackageBaseCommonException}.${glEntityAlreadyDeletedException}"></exception>
        /// <exception cref="${glPackageBaseCommonException}.${glEntityDuplicatedException}"></exception>
        // void UpdateNonstrict(${myExtendedObjectClassName} entity);

        /// <summary>
        /// Delete.
        /// </summary>
        /// <param name="entity"> Entity. (NotNull)</param>
        /// <exception cref="${glPackageBaseCommonException}.${glEntityAlreadyDeletedException}"></exception>
        /// <exception cref="${glPackageBaseCommonException}.${glEntityAlreadyUpdatedException}"></exception>
        /// <exception cref="${glPackageBaseCommonException}.${glEntityDuplicatedException}"></exception>
        void Delete(${myExtendedObjectClassName} entity);
        #endregion
#end
    }
}