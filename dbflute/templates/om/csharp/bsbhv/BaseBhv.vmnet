#set ($myClassName = "${myExtendedBhvInterfaceName}")

using System;
using System.Collections.Generic;
using ${glPackageBaseCommon};
using ${glPackageBaseCommonBhv};
using ${glPackageBaseCommonCBean};
using ${glPackageBaseCommonDBMeta};
using ${myDBMetaPackageName};
using ${glPackageExtendedDao};
using ${glPackageExtendedEntity};
using ${glPackageCB};

#set ($myExtendClassName = "")
#if ($table.isWritable())
  #set ($myExtendClassName = "${glBehaviorWritableInterfaceName}")
#else
  #set ($myExtendClassName = "${glBehaviorReadableInterfaceName}")
#end

namespace ${glPackageExtendedBhv} {

    /// <summary>
    /// The behavior-interface of ${table.Name}. (partial class for auto-generation)
    /// Author : ${database.ClassAuthor}
    /// </summary>
    public partial interface ${myClassName} : ${glPackageBaseCommonBhv}.${myExtendClassName} {

        // =====================================================================================
        //                                                                                DBMeta
        //                                                                                ======
        #region DBMeta
        /// <summary>
        /// The property of my dbmeta.
        /// </summary>
        ${myDBMetaClassName} MyDBMeta { get; }
        #endregion

        // =====================================================================================
        //                                                                          New Instance
        //                                                                          ============
        #region New Instance
        /// <summary>
        /// New my entity.
        /// </summary>
        /// <returns>My condition-bean. (NotNull)</returns>
        ${myExtendedObjectClassName} NewMyEntity();

        /// <summary>
        /// New my condition-bean.
        /// </summary>
        /// <returns>My condition-bean. (NotNull)</returns>
        ${myConditionBeanClassName} NewMyConditionBean();
        #endregion

        // =====================================================================================
        //                                                                          Basic Select
        //                                                                          ============
        #region Basic Select
        /// <summary>
        /// Select count by condition-bean.
        /// </summary>
        /// <param name="cb">Condition-bean. (NotNull)</param>
        /// <returns>Selected count. (NotNull)</returns>
        int SelectCount(${myConditionBeanClassName} cb);

        /// <summary>
        /// Select entity by condition-bean.
        /// </summary>
        /// <param name="cb">Condition-bean. (NotNull)</param>
        /// <returns>Entity that is selected from database by select-for-update. (NotNull)</returns>
        /// <exception cref="${glPackageBaseCommonException}.${glRecordHasAlreadyBeenDeletedException}"></exception>
        /// <exception cref="${glPackageBaseCommonException}.${glRecordHasOverlappedException}"></exception>
        ${myExtendedObjectClassName} SelectEntity(${myConditionBeanClassName} cb);

        /// <summary>
        /// Select entity by condition-bean with deleted check.
        /// </summary>
        /// <param name="${glAttachedCBArgsVariableName}">Condition-bean. (NotNull)</param>
        /// <returns>Entity that is selected from database by select-for-update. (NotNull)</returns>
        /// <exception cref="${glPackageBaseCommonException}.${glRecordHasAlreadyBeenDeletedException}"></exception>
        ${myExtendedObjectClassName} SelectEntityWithDeletedCheck(${myConditionBeanClassName} ${glAttachedCBArgsVariableName});
    #if ($table.hasPrimaryKey())

        ${myExtendedObjectClassName} SelectByPKValueWithDeletedCheck(${table.PrimaryKeyArgsString});
    #end


        /// <summary>
        /// Select list as result-bean.
        /// </summary>
        /// <param name="${glAttachedCBArgsVariableName}">Condition-bean. (NotNull)</param>
        /// <returns>List-result-bean. (NotNull)</returns>
        ${glListResultBeanName}<${myExtendedObjectClassName}> SelectList(${myConditionBeanClassName} ${glAttachedCBArgsVariableName});

        /// <summary>
        /// Select page as result-bean.
        /// </summary>
        /// <param name="${glAttachedCBArgsVariableName}">Condition-bean. (NotNull)</param>
        /// <returns>Selected page. (NotNull)</returns>
        ${glPagingResultBeanName}<${myExtendedObjectClassName}> SelectPage(${myConditionBeanClassName} ${glAttachedCBArgsVariableName});

        /// <summary>
        /// Select page as result-bean.
        /// </summary>
        /// <param name="${glAttachedCBArgsVariableName}">Condition-bean. (NotNull)</param>
        /// <param name="invoker">Select-page-invoker. (NotNull)</param>
        /// <returns>Read page. (NotNull)</returns>
        ${glPagingResultBeanName}<${myExtendedObjectClassName}> SelectPage(${myConditionBeanClassName} ${glAttachedCBArgsVariableName}, SelectPageInvoker<${myExtendedObjectClassName}> invoker);

        #endregion

#if (${table.hasOnlyOnePrimaryKey()})

        // =====================================================================================
        //                                                                          Load Referer
        //                                                                          ============
        #region Load Refferer
  #foreach ($refferer in $table.Referrers)
    #set ($reffererTable = $refferer.Table)
    #set ($reffererEntityClassName = "${glProjectPrefix}${reffererTable.JavaName}")
    #set ($reffererDaoClassName = "${reffererEntityClassName}Dao")
    #set ($reffererBhvClassName = "${reffererEntityClassName}Bhv")
    #set ($reffererCBClassName = "${reffererEntityClassName}${glConditionBeanInitialName}")
    #set ($reffererVariableName = "${glChildrenVariablePrefix}${refferer.ReffererPropertyNameInitCap}")
    #set ($reffererEntityLongClassName = "${glPackageExtendedEntity}.${reffererEntityClassName}")
    #set ($genericPKChildListMap = "${table.getPrimaryKeyJavaNativeAsOne()}, java.util.List${database.filterGenericsString(${reffererEntityClassName})}")

        // /* * * * * * * * * * * * * * * * * * * * * * *
        //   RefererTable    = [${refferer.Table.Name}]
        //   RefererProperty = [${refferer.ReffererPropertyName}]
        // * * * * * * * * */

        /// <summary>
        /// Load refferer of ${refferer.ReffererPropertyName}.
        /// </summary>
        /// <param name="ls">Entity list of main table. (NotNull)</param>
        /// <param name="cbSetupper">Refferer condition-bean setupper instance for registering refferer condition. (NotNull)</param>
        void Load${refferer.ReffererPropertyNameInitCap}(System.Collections.Generic.IList<${myExtendedObjectClassName}> ls, ${reffererTable.JavaName}CBSetupper cbSetupper);
  #end

        #endregion
#end
#if ($table.isWritable())

        // =====================================================================================
        //                                                                   Basic Entity Update
        //                                                                   ===================
        #region Basic Entity Update

        /// <summary>
        /// Insert.
        /// </summary>
        /// <param name="entity"> Entity. (NotNull)</param>
        void Insert(${myExtendedObjectClassName} entity);

        /// <summary>
        /// Update.
        /// </summary>
        /// <param name="entity"> Entity. (NotNull)</param>
        void Update(${myExtendedObjectClassName} entity);

        /// <summary>
        /// Update after select.
        /// </summary>
        /// <param name="entity">Entity. This must contain primary-key value at least. (NotNull)</param>
        /// <exception cref="${glPackageBaseCommonException}.${glRecordHasAlreadyBeenDeletedException}"></exception>
        void UpdateAfterSelect(${myExtendedObjectClassName} entity);

        /// <summary>
        /// Insert or update after select.
        /// </summary>
        /// <param name="entity"> Entity. This must contain primary-key value at least. (NotNull)</param>
        /// <exception cref="${glPackageBaseCommonException}.${glRecordHasAlreadyBeenDeletedException}"></exception>
        void InsertOrUpdateAfterSelect(${myExtendedObjectClassName} entity);
      #if ($database.isMakeBehaviorForUpdate())

        /// <summary>
        /// Update after select-for-update.
        /// </summary>
        /// <param name="entity">Entity. This must contain primary-key value at least. (NotNull)</param>
        /// <exception cref="${glPackageBaseCommonException}.${glRecordHasAlreadyBeenDeletedException}"></exception>
        void UpdateAfterSelectForUpdate(${myExtendedObjectClassName} entity);

        /// <summary>
        /// Insert or update after select-for-update.
        /// </summary>
        /// <param name="entity"> Entity. This must contain primary-key value at least. (NotNull)</param>
        /// <exception cref="${glPackageBaseCommonException}.${glRecordHasAlreadyBeenDeletedException}"></exception>
        void InsertOrUpdateAfterSelectForUpdate(${myExtendedObjectClassName} entity);
      #end

        /// <summary>
        /// Delete.
        /// </summary>
        /// <param name="entity"> Entity. (NotNull)</param>
        void Delete(${myExtendedObjectClassName} entity);

        #endregion

        // =====================================================================================
        //                                                                        Various Insert
        //                                                                        ==============
        #region Various Insert
      #if ($table.isUseIdentity())
        #if ($table.hasPrimaryKey())

        int CopyInsertByPKValueAfterSelect(${table.PrimaryKeyArgsString});
        #end
      #end

        #endregion
#end

    }

    /// <summary>
    /// The interface of CBSetupper.
    /// </summary>
    public interface ${table.JavaName}CBSetupper : SimpleCBSetupper {
        /// <summary>
        /// Set up condition.
        /// </summary>
        /// <param name="${glAttachedCBArgsVariableName}">Condition-bean. (NotNull)</param>
        void Setup(${myConditionBeanClassName} ${glAttachedCBArgsVariableName});
    }

    /// <summary>
    /// The implementation of CBSetupper. {order by PK Asc}
    /// </summary>
    public class ${table.JavaName}CBSetupperPKAsc : ${table.JavaName}CBSetupper {
        /// <summary>
        /// Set up condition.
        /// </summary>
        /// <param name="${glAttachedCBArgsVariableName}">Condition-bean. (NotNull)</param>
        public void Setup(${myConditionBeanClassName} ${glAttachedCBArgsVariableName}) {
            ${glAttachedCBArgsVariableName}.AddOrderBy_PK_Asc();
        }
    }
}