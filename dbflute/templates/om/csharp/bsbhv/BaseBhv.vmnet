#set ($myClassName = "${myExtendedBhvInterfaceName}")

using System;
using System.Collections.Generic;

using Seasar.Quill;
using Seasar.Quill.Attrs;

using ${glPackageBaseCommon};
using ${glPackageBaseCommonBhv};
using ${glPackageBaseCommonBhvSetup};
using ${glPackageBaseCommonCBean};
using ${glPackageBaseCommonDBMeta};
using ${myDBMetaPackageName};
using ${glPackageExtendedDao};
using ${glPackageExtendedEntity};
using ${glPackageCB};

#set ($myExtendClassName = "")
#if ($table.isWritable())
  #set ($myExtendClassName = "${glBehaviorWritableAbstractName}")
#else
  #set ($myExtendClassName = "${glBehaviorReadableAbstractName}")
#end

namespace ${glPackageExtendedBhv} {

    /// <summary>
    /// The behavior of ${table.name}. (partial class for auto-generation)
    /// <![CDATA[
    /// [primary-key]
    ///     ${table.primaryKeyNameCommaString}
    /// 
    /// [column]
    ///     ${table.columnNameCommaString}
    /// 
    /// [sequence]
    ///     ${table.definedSequenceName}
    /// 
    /// [identity]
    ///     ${table.identityColumnName}
    /// 
    /// [version-no]
    ///     ${table.versionNoColumnName}
    /// 
    /// [foreign-table]
    ///     ${table.foreignTableNameCommaString}
    /// 
    /// [referrer-table]
    ///     ${table.referrerTableNameCommaString}
    /// 
    /// [foreign-property]
    ///     ${table.foreignPropertyNameCommaString}
    /// 
    /// [referrer-property]
    ///     ${table.referrerPropertyNameCommaString}
    /// ]]>
    /// Author: ${database.ClassAuthor}
    /// </summary>
    [Implementation]
    public partial class ${myClassName} : ${glPackageBaseCommonBhv}.${myExtendClassName} {

        // ===============================================================================
        //                                                                      Definition
        //                                                                      ==========
        ${database.behaviorQueryPathBeginMark}
        ${database.behaviorQueryPathEndMark}

        // ===============================================================================
        //                                                                       Attribute
        //                                                                       =========
        protected ${myExtendedDaoClassName} _dao;

        // ===============================================================================
        //                                                                     Constructor
        //                                                                     ===========
        public ${myClassName}() {
        }
        
        // ===============================================================================
        //                                                                Initialized Mark
        //                                                                ================
        public override bool IsInitialized { get { return _dao != null; } }

        // ===============================================================================
        //                                                                      Table Name
        //                                                                      ==========
        public override String TableDbName { get { return "${table.Name}"; } }

        // ===============================================================================
        //                                                                          DBMeta
        //                                                                          ======
        public override ${glDBMetaInterfaceName} DBMeta { get { return ${myDBMetaClassName}.GetInstance(); } }
        public ${myDBMetaClassName} MyDBMeta { get { return ${myDBMetaClassName}.GetInstance(); } }

        // ===============================================================================
        //                                                                    New Instance
        //                                                                    ============
        #region New Instance
        public override ${glEntityInterfaceName} NewEntity() { return NewMyEntity(); }
        public override ${glConditionBeanInterfaceName} NewConditionBean() { return NewMyConditionBean(); }
        public virtual ${myExtendedObjectClassName} NewMyEntity() { return new ${myExtendedObjectClassName}(); }
        public virtual ${myConditionBeanClassName} NewMyConditionBean() { return new ${myConditionBeanClassName}(); }
        #endregion

        // ===============================================================================
        //                                                                    Count Select
        //                                                                    ============
        #region Count Select
        public virtual int SelectCount(${myConditionBeanClassName} cb) {
            AssertConditionBeanNotNull(cb);
            return this.DelegateSelectCount(cb);
        }
        #endregion

        // ===============================================================================
        //                                                                   Entity Select
        //                                                                   =============
        #region Entity Select
        public virtual ${myExtendedObjectClassName} SelectEntity(${myConditionBeanClassName} cb) {
            AssertConditionBeanNotNull(cb);
            IList<${myExtendedObjectClassName}> ls = this.DelegateSelectList(cb);
            if (ls.Count == 0) { return null; }
            AssertEntitySelectedAsOne(ls, cb);
            return (${myExtendedObjectClassName})ls[0];
        }

        public virtual ${myExtendedObjectClassName} SelectEntityWithDeletedCheck(${myConditionBeanClassName} cb) {
            AssertConditionBeanNotNull(cb);
            IList<${myExtendedObjectClassName}> ls = this.DelegateSelectList(cb);
            AssertEntityNotDeleted(ls, cb);
            AssertEntitySelectedAsOne(ls, cb);
            return (${myExtendedObjectClassName})ls[0];
        }

#if ($table.hasPrimaryKey())
// TODO: @jflute
//        public ${myExtendedObjectClassName} SelectByPKValueWithDeletedCheck(${table.PrimaryKeyArgsString}) {
//            ${myExtendedObjectClassName} entity = new ${myExtendedObjectClassName}();
//            ${table.getPrimaryKeyArgsSetupStringCSharp('entity')}
//            ${myConditionBeanClassName} cb = NewMyConditionBean();
//            cb.AcceptPrimaryKeyMapString(entity.ExtractPrimaryKeyMapString());
//            return this.SelectEntityWithDeletedCheck(cb);
//        }
#end
        #endregion

        // ===============================================================================
        //                                                                     List Select
        //                                                                     ===========
        #region List Select
        public virtual ${glListResultBeanName}<${myExtendedObjectClassName}> SelectList(${myConditionBeanClassName} cb) {
            AssertConditionBeanNotNull(cb);
            return new ResultBeanBuilder<${myExtendedObjectClassName}>(TableDbName).BuildListResultBean(cb, this.DelegateSelectList(cb));
        }

        public virtual ${glPagingResultBeanName}<${myExtendedObjectClassName}> SelectPage(${myConditionBeanClassName} cb) {
            AssertConditionBeanNotNull(cb);
            PagingInvoker<${myExtendedObjectClassName}> invoker = new PagingInvoker<${myExtendedObjectClassName}>(TableDbName);
            return invoker.InvokePaging(new InternalSelectPagingHandler(this, cb));
        }

        private class InternalSelectPagingHandler : ${glPagingHandlerName}<${myExtendedObjectClassName}> {
            protected ${myClassName} _bhv; protected ${myConditionBeanClassName} _cb;
            public InternalSelectPagingHandler(${myClassName} bhv, ${myConditionBeanClassName} cb) { _bhv = bhv; _cb = cb; }
            public ${glPagingBeanInterfaceName} PagingBean { get { return _cb; } }
            public int Count() { return _bhv.SelectCount(_cb); }
            public IList<${myExtendedObjectClassName}> Paging() { return _bhv.SelectList(_cb); }
        }
        #endregion

#if (${table.hasOnlyOnePrimaryKey()})
        // ===============================================================================
        //                                                                   Load Referrer
        //                                                                   =============
        #region Load Referrer
  #foreach ($referer in $table.refererList)
    #set ($refererTable = $referer.Table)
    #set ($refererEntityClassName = "${glProjectPrefix}${refererTable.JavaName}")
    #set ($refererDaoClassName = "${refererEntityClassName}Dao")
    #set ($refererBhvClassName = "")
    #set ($refererBhvClassName = "${refererEntityClassName}Bhv")
    #set ($refererCBClassName = "${refererEntityClassName}${glConditionBeanInitialName}")
    #set ($refererVariableName = "${glChildrenVariablePrefix}${referer.ReffererPropertyNameInitCap}")
    #set ($refererEntityLongClassName = "${glPackageExtendedEntity}.${refererEntityClassName}")
    #set ($genericPKMyEntityMap = "${table.getPrimaryKeyJavaNativeAsOne()}, ${myExtendedObjectClassName}")
    #set ($genericPKChildListMap = "${table.getPrimaryKeyJavaNativeAsOne()}, IList<${refererEntityClassName}>")

        // /* * * * * * * * * * * * * * * * * * * * * * *
        //   ReferrerTable    = [${referer.table.name}]
        //   ReferrerProperty = [${referer.reffererPropertyNameInitCap}]
        // * * * * * * * * */

        public virtual void Load${referer.reffererPropertyNameInitCap}(IList<${myExtendedObjectClassName}> ls, ${glConditionBeanSetupperName}<${refererCBClassName}> conditionBeanSetupper) {
            AssertObjectNotNull("ls", ls); AssertObjectNotNull("conditionBeanSetupper", conditionBeanSetupper);
            if (ls.Count == 0) { return; }

            IDictionary<${genericPKMyEntityMap}> pkMyEntityMap = new Dictionary<${genericPKMyEntityMap}>();
            IList<${table.getPrimaryKeyJavaNativeAsOne()}> pkList = new List<${table.getPrimaryKeyJavaNativeAsOne()}>();
            foreach (${myExtendedObjectClassName} entity in ls) {
                pkList.Add(entity.${table.getPrimaryKeyJavaNameAsOne()});
                if (!pkMyEntityMap.ContainsKey(entity.${table.getPrimaryKeyJavaNameAsOne()})) {
                    pkMyEntityMap.Add(entity.${table.getPrimaryKeyJavaNameAsOne()}, entity);
                }
            }
            ${refererBhvClassName} referrerBhv = this.BehaviorSelector.Select<${refererBhvClassName}>();
            ${refererCBClassName} cb = referrerBhv.NewMyConditionBean();
            cb.Query().Set${referer.getLocalColumnJavaNameAsOne()}_InScope(pkList);
            cb.Query().AddOrderBy_${referer.getLocalColumnJavaNameAsOne()}_Asc();
            conditionBeanSetupper.Invoke(cb);
            IList<${refererEntityClassName}> referrerList = referrerBhv.SelectList(cb);

            IDictionary<${genericPKChildListMap}> pkReferrerListMap = new Dictionary<${genericPKChildListMap}>();
            foreach (${refererEntityClassName} referrerEntity in referrerList) {
                if (!pkReferrerListMap.ContainsKey(referrerEntity.${referer.getLocalColumnJavaNameAsOne()})) {
                    pkReferrerListMap.Add(referrerEntity.${referer.getLocalColumnJavaNameAsOne()}, new List<${refererEntityClassName}>());
                }
                pkReferrerListMap[referrerEntity.${referer.getLocalColumnJavaNameAsOne()}].Add(referrerEntity);

                // for Reverse Reference.
                ${myExtendedObjectClassName} myEntity = (${myExtendedObjectClassName})pkMyEntityMap[referrerEntity.${referer.getLocalColumnJavaNameAsOne()}];
                referrerEntity.${referer.ForeignPropertyNameInitCap} = myEntity;
            }

            foreach (${myExtendedObjectClassName} entity in ls) {
                if (pkReferrerListMap.ContainsKey(entity.${table.getPrimaryKeyJavaNameAsOne()})) {
                    entity.${referer.ReffererPropertyNameInitCap} = pkReferrerListMap[entity.${table.getPrimaryKeyJavaNameAsOne()}];
                } else {
                    entity.${referer.ReffererPropertyNameInitCap} = new List<${refererEntityClassName}>();
                }
            }
        }

  #end

        #endregion
#end

#if ($table.isWritable())
        // ===============================================================================
        //                                                                   Entity Update
        //                                                                   =============
        #region Basic Entity Update
        public virtual void Insert(${myExtendedObjectClassName} entity) {
            AssertEntityNotNull(entity);
            this.DelegateInsert(entity);
        }

        public virtual void Update(${myExtendedObjectClassName} entity) {
            AssertEntityNotNull(entity);
            int updatedCount = this.DelegateUpdate(entity);
            AssertUpdatedEntity(entity, updatedCount);
        }

#if ($table.hasOptimisticLock())
        public virtual void UpdateNonstrict(${myExtendedObjectClassName} entity) {
            AssertEntityNotNull(entity);
            int updatedCount = this.DelegateUpdateNonstrict(entity);
            AssertUpdatedEntity(entity, updatedCount);
        }
#end

// TODO: @jflute - In development
//        public virtual void InsertOrUpdate(${myExtendedObjectClassName} entity) {
//            AssertEntityNotNull(entity);
//            if (!entity.HasPrimaryKeyValue) {
//                this.Insert(entity);
//                return;
//            }
//            try {
//                this.Update(entity);
//            } catch (Exception) {
//                this.Insert(entity);
//                return;
//            }
//        }

        public virtual void Delete(${myExtendedObjectClassName} entity) {
            AssertEntityNotNull(entity);
            int deletedCount = this.DelegateDelete(entity);
            AssertUpdatedEntity(entity, deletedCount);
        }

#if ($table.hasOptimisticLock())
        public virtual void DeleteNonstrict(${myExtendedObjectClassName} entity) {
            AssertEntityNotNull(entity);
            int deletedCount = this.DelegateDeleteNonstrict(entity);
            AssertUpdatedEntity(entity, deletedCount);
        }
#end
        #endregion
#end

        // ===============================================================================
        //                                                                 Delegate Method
        //                                                                 ===============
        #region Delegate Method
        protected int DelegateGetCountAll() { return this.Dao.GetCountAll(); }
        protected IList<${myExtendedObjectClassName}> DelegateGetListAll() { return this.Dao.GetListAll(); }
        protected IList<${myExtendedObjectClassName}> DelegateSelectListAll() { return this.Dao.GetListAll(); }
#if ($table.hasPrimaryKey())
        protected ${myExtendedObjectClassName} DelegateGetEntity(${table.PrimaryKeyArgsString}) { return this.Dao.GetEntity(${table.getPrimaryKeyUncapitalisedJavaNameCommaString()}); }
#end
        protected int DelegateSelectCount(${myConditionBeanClassName} cb) { AssertConditionBeanNotNull(cb); return this.Dao.SelectCount(cb); }
        protected override int DoCallReadCount(${glConditionBeanInterfaceName} cb) { return this.DelegateSelectCount((${myConditionBeanClassName})cb); }
        protected ${myExtendedObjectClassName} DelegateSelectEntity(${myConditionBeanClassName} cb) { AssertConditionBeanNotNull(cb); return this.Dao.SelectEntity(cb); }
        protected IList<${myExtendedObjectClassName}> DelegateSelectList(${myConditionBeanClassName} cb) { AssertConditionBeanNotNull(cb); return this.Dao.SelectList(cb); }
        protected override int DoCallGetCountAll() { return this.DelegateGetCountAll(); }
        protected override IList<${glEntityInterfaceName}> DoCallGetListAll() { return (IList<${glEntityInterfaceName}>)this.DelegateGetListAll(); }
        protected override ${glEntityInterfaceName} DoCallReadEntity(${glConditionBeanInterfaceName} cb) { return this.DelegateSelectEntity((${myConditionBeanClassName})cb); }
        protected override IList<${glEntityInterfaceName}> DoCallReadList(${glConditionBeanInterfaceName} cb) { return (IList<${glEntityInterfaceName}>)this.DelegateSelectList((${myConditionBeanClassName})cb); }
#if ($table.isUseSequence())
        protected int DelegateSelectNextVal() { return this.Dao.SelectNextVal(); }
#end

#if ($table.isWritable())
        protected int DelegateInsert(${myExtendedObjectClassName} entity) { if (!ProcessBeforeInsert(entity)) { return 1; } return this.Dao.Insert(entity); }
        protected int DelegateUpdate(${myExtendedObjectClassName} entity) { if (!ProcessBeforeUpdate(entity)) { return 1; } return this.Dao.UpdateModifiedOnly(entity); }
#if ($table.hasOptimisticLock())
        protected int DelegateUpdateNonstrict(${myExtendedObjectClassName} entity) { if (!ProcessBeforeUpdate(entity)) { return 1; } return this.Dao.UpdateNonstrictModifiedOnly(entity); }
#end
        protected int DelegateDelete(${myExtendedObjectClassName} entity) { if (!ProcessBeforeDelete(entity)) { return 1; } return this.Dao.Delete(entity); }
#if ($table.hasOptimisticLock())
        protected int DelegateDeleteNonstrict(${myExtendedObjectClassName} entity) { if (!ProcessBeforeDelete(entity)) { return 1; } return this.Dao.DeleteNonstrict(entity); }
#end
        protected override int DoCallCreate(${glEntityInterfaceName} entity) { return this.DelegateInsert((${myExtendedObjectClassName})entity); }
        protected override int DoCallModify(${glEntityInterfaceName} entity) { return this.DelegateUpdate((${myExtendedObjectClassName})entity); }
        protected override int DoCallRemove(${glEntityInterfaceName} entity) { return this.DelegateDelete((${myExtendedObjectClassName})entity); }
#end
        #endregion

        // ===============================================================================
        //                                                                        Accessor
        //                                                                        ========
        #region Accessor
        public virtual ${myExtendedDaoClassName} Dao {
            get { return _dao; }
            set { _dao = value; }
        }
        #endregion
    }
}