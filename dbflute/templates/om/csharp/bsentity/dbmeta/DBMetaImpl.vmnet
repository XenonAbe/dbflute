#set ($myClassName = "${myDBMetaClassName}")

using System;
using System.Collections.Generic;
using System.Reflection;
using System.Text;

using ${glPackageBaseCommon};
using ${glPackageBaseCommonCBean};
using ${glPackageBaseCommonDBMeta};
using ${glPackageBaseCommonDBMetaInfo};
using ${myExtendedEntityPackageName};
#if (${isExistDao})

using ${myExtendedDaoPackageName};
#end
#if (${isExistConditionBean})
using ${glPackageCB};

#end
namespace ${myDBMetaPackageName} {

    /// <summary>
    /// The dbmeta of ${table.Name}.
    /// <![CDATA[
    /// [primary-key]
    ///     ${table.PrimaryKeyNameCommaString}
    /// 
    /// [all-columns]
    ///     ${table.ColumnNameCommaString}
    /// 
    /// [foreign-table]
    ///     ${table.ForeignPropertyNameCommaString}
    /// 
    /// [refferer-table]
    ///     ${table.ReferrerPropertyNameCommaString}
    /// 
    /// [sequence]
    ///     ${table.DefinedSequenceName}
    /// 
    /// [identity]
    ///     ${table.IdentityPropertyName}
    /// 
    /// [update-date]
    ///     ${table.UpdateDateJavaName}
    /// 
    /// [version-no]
    ///     ${table.VersionNoJavaName}
    /// 
    /// ]]>
    /// Author: ${database.ClassAuthor}
    /// </summary>
    public class ${myClassName} : ${glDBMetaAbstractName} {

        /// <summary>The type of entity.</summary>
        public static readonly Type ENTITY_TYPE = typeof(${myExtendedObjectClassName});
#if (${isExistDao})

        /// <summary>The type of dao.</summary>
        public static readonly Type DAO_TYPE = typeof(${myExtendedDaoClassName});
#end
#if (${isExistConditionBean})

        /// <summary>The type of condition-bean.</summary>
        public static readonly Type CONDITION_BEAN_TYPE = typeof(${myConditionBeanClassName});
#end

        /// <summary>Singleton instance.</summary>
        private static readonly ${myClassName} _instance = new ${myClassName}();

        /// <summary>
        /// Constructor
        /// </summary>
        private ${myClassName}() {
        }

        /// <summary>
        /// Get instance.
        /// </summary>
        /// <returns>Singleton instance.</returns>
        public static ${myClassName} GetInstance() {
            return _instance;
        }

        // ===============================================================================
        //                                                                 Name Definition
        //                                                                 ===============
        #region Name

        // -------------------------------------------------
        //                                             Table
        //                                             -----
        /// <summary>Table db-name.</summary>
        public static readonly String TABLE_DB_NAME = "$table.name";

        /// <summary>Table property-name.</summary>
        public static readonly String TABLE_PROPERTY_NAME = "$table.c";

        // -------------------------------------------------
        //                                    Column DB-Name
        //                                    --------------
#foreach ($col in $table.columns)
        /// <summary>DB name of ${col.name}.</summary>
        public static readonly String DB_NAME_${col.name} = "$col.name";
#end

        // -------------------------------------------------
        //                              Column Property-Name
        //                              --------------------
#foreach ($col in $table.columns)
        /// <summary>Property name of ${col.name}.</summary>
        public static readonly String PROPERTY_NAME_${col.name} = "$col.name";
#end

        // -------------------------------------------------
        //                                      Foreign Name
        //                                      ------------
#foreach ($foreignKeys in $table.foreignKeys)
        /// <summary>Java name of ${foreignKeys.foreignPropertyNameInitCap}.</summary>
        public static readonly String FOREIGN_PROPERTY_NAME_${foreignKeys.foreignPropertyNameInitCap} = "$foreignKeys.foreignPropertyNameInitCap";
#end

        // -------------------------------------------------
        //                                      Referer Name
        //                                      ------------
#foreach ($children in $table.refererList)
        /// <summary>Java name of ${children.refererPropertyNameInitCap}.</summary>
        public static readonly String REFERER_PROPERTY_NAME_${children.refererPropertyNameInitCap} = "$children.refererPropertyNameInitCap";
#end

        // -------------------------------------------------
        //                               DB-Property Mapping
        //                               -------------------
        protected static readonly IDictionary<String, String> _dbNamePropertyNameKeyToLowerMap;
        protected static readonly IDictionary<String, String> _propertyNameDbNameKeyToLowerMap;

        static ${myClassName}() {
            {
                IDictionary<String, String> map = new Dictionary<String, String>();
                map.Add(TABLE_DB_NAME.ToLower(), TABLE_PROPERTY_NAME);
#foreach ($col in $table.columns)
                map.Add(DB_NAME_${col.name}.ToLower(), PROPERTY_NAME_${col.name});
#end
                _dbNamePropertyNameKeyToLowerMap = map;
            }

            {
                IDictionary<String, String> map = new Dictionary<String, String>();
                map.Add(TABLE_PROPERTY_NAME.ToLower(), TABLE_DB_NAME);
#foreach ($col in $table.Columns)
                map.Add(PROPERTY_NAME_${col.name}.ToLower(), DB_NAME_${col.name});
#end
                _propertyNameDbNameKeyToLowerMap = map;
            }
        }

        #endregion

        // ===============================================================================
        //                                                                      Table Name
        //                                                                      ==========
        #region Table Name
        public override String TableDbName { get { return TABLE_DB_NAME; } }
        public override String TablePropertyName { get { return TABLE_PROPERTY_NAME; } }
        #endregion

        // ===============================================================================
        //                                                                        Name Map
        //                                                                        ========
        #region Name Map
        /// <summary>
        /// ${database.ImplementComment}
        /// </summary> 
        /// <returns>{db-name : property-name} map.</returns>
        public override IDictionary<String, String> DbNamePropertyNameKeyToLowerMap {
            get { return _dbNamePropertyNameKeyToLowerMap; }
        }

        /// <summary>
        /// ${database.ImplementComment}
        /// </summary> 
        /// <returns>{property-name : db-name} map.</returns>
        public override IDictionary<String, String> PropertyNameDbNameKeyToLowerMap {
            get { return _propertyNameDbNameKeyToLowerMap; }
        }
        #endregion

        // ===============================================================================
        //                                                                       Type Name
        //                                                                       =========
        public override String EntityTypeName { get { return "${myExtendedEntityPackageName}.${myExtendedObjectClassName}"; } }
#if (${isExistDao})
        public override String DaoTypeName { get { return "${myExtendedDaoPackageName}.${myExtendedDaoClassName}"; } }
#else
        public override String DaoTypeName { get { return null; } }
#end
#if (${isExistConditionBean})
        public override String ConditionBeanTypeName { get { return "${glPackageBaseCB}.${myConditionBeanClassName}"; } }
#else
        public override String ConditionBeanTypeName { get { return null; } }
#end
#if (${isExistBehavior})
        public override String BehaviorTypeName { get { return "${myExtendedBhvPackageName}.${myExtendedBhvClassName}"; } }
#else
        public override String BehaviorTypeName { get { return null; } }
#end

        // ===============================================================================
        //                                                                     Object Type
        //                                                                     ===========
        public override Type EntityType { get { return ENTITY_TYPE; } }
#if (${isExistDao})
        public override Type DaoType { get { return DAO_TYPE; } }
#else
        public override Type DaoType {
            get {
                String msg = "The entity does not have dao. So this method is invalid.";
                throw new SystemException(msg + " dbmeta=" + ToString());
            }
        }
#end
#if (${isExistConditionBean})
        public override Type ConditionBeanType { get { return CONDITION_BEAN_TYPE; } }
#else
        public override Type ConditionBeanType {
            get {
                String msg = "The entity does not have condition-bean. So this method is invalid.";
                throw new SystemException(msg + " dbmeta=" + ToString());
            }
        }
#end

        // ===============================================================================
        //                                                                 Object Instance
        //                                                                 ===============
        public override ${glEntityInterfaceName} NewEntity() { return NewMyEntity(); }
        public ${myExtendedObjectClassName} NewMyEntity() { return new ${myExtendedObjectClassName}(); }
#if (${isExistConditionBean})
        public override ${glConditionBeanInterfaceName} NewConditionBean() { return NewMyConditionBean(); }
#else
        public override ${glConditionBeanInterfaceName} NewConditionBean() {
            String msg = "The entity does not have condition-bean. So this method is invalid.";
            throw new SystemException(msg + " dbmeta=" + ToString());
        }
#end
#if (${isExistConditionBean})
        public ${myConditionBeanClassName} NewMyConditionBean() { return new ${myConditionBeanClassName}(); }
#end

        // ===============================================================================
        //                                                                     Column Info
        //                                                                     ===========
        public override IList<${glColumnInfoName}> GetColumnInfoList() {
            IList<${glColumnInfoName}> columnInfoList = new List<${glColumnInfoName}>();
#foreach ($col in $table.columns)
            columnInfoList.Add(Column${col.javaName});
#end
            return columnInfoList;
        }

#foreach ($col in $table.columns)
        public ${glColumnInfoName} Column${col.javaName} { get { return new ${glColumnInfoName}(this, "${col.name}", "${col.javaName}", typeof(${col.javaNative}), ${col.isPrimaryKey()}, ${col.columnSizeSettingExpression}); } }
#end

        // ===============================================================================
        //                                                                     Unique Info
        //                                                                     ===========

        public override ${glUniqueInfoName} GetPrimaryUniqueInfo() {
            // TODO: @jflute
            return null;
        }

        // -------------------------------------------------
        //                                   Primary Element
        //                                   ---------------
        public override bool HasPrimaryKey { get { return ${table.hasPrimaryKey()}; } }
        public override bool HasTwoOrMorePrimaryKeys { get { return ${table.hasTwoOrMorePrimaryKeys()}; } }

        // ===============================================================================
        //                                                                   Relation Info
        //                                                                   =============
        // -------------------------------------------------
        //                                   Foreign Element
        //                                   ---------------
#foreach ($foreignKeys in $table.foreignKeys)
#set ($genericsColumnInfoMap = "${glColumnInfoName}, ${glColumnInfoName}")
        // public ${glPackageBaseCommonDBMetaInfo}.${glForeignInfoName} Foreign${foreignKeys.foreignPropertyNameInitCap} {
        //     get {
        //         ${glPackageBaseCommonDBMetaInfo}.${glForeignInfoName} foreignInfo = new ${glPackageBaseCommonDBMetaInfo}.${glForeignInfoName}();
        //         foreignInfo.ForeignPropertyName = "${foreignKeys.foreignPropertyNameInitCap}";
        //         foreignInfo.LocalDBMeta = ${table.DBMetaClassName}.getInstance();
        //         foreignInfo.ForeignDBMeta = ${foreignKeys.foreignTableDBMetaClassName}.getInstance();
        //         IDictionary<$genericsColumnInfoMap> map = new IDictionary<$genericsColumnInfoMap>();
#foreach ($column in $foreignKeys.localColumnList)
        //         map.Add(column${column.javaName}(), ${foreignKeys.foreignTableDBMetaClassName}.getInstance().column${foreignKeys.getForeignColumnByLocalColumn(${column}).javaName}());
#end
        //         foreignInfo.LocalForeignColumnInfoMap = map;
        //         foreignInfo.RelationNo = ${table.resolveForeignIndex($foreignKeys)};
        //         foreignInfo.OneToOne = ${foreignKeys.isOneToOne()};
        //         return foreignInfo;
        //     }
        // }
#end

        // -------------------------------------------------
        //                                   Referer Element
        //                                   ---------------
        // -------------------------------------------------
        //                                    Relation Trace
        //                                    --------------

        // ===============================================================================
        //                                                                   Sequence Info
        //                                                                   =============
        public override bool HasSequence { get { return ${table.isUseSequence()}; } }

        // ===============================================================================
        //                                                            Optimistic Lock Info
        //                                                            ====================
        public override bool HasVersionNo { get { return ${table.isUseVersionNo()}; } }
        public override bool HasUpdateDate { get { return ${table.isUseUpdateDate()}; } }

        // ===============================================================================
        //                                                              Common Column Info
        //                                                              ==================
        public override bool HasCommonColumn { get { return ${table.hasAllCommonColumn()}; } }

        // ===============================================================================
        //                                                                  Foreign DBMeta
        //                                                                  ==============
        /// <summary>
        /// ${database.ImplementComment}
        /// </summary>
        /// <param name="foreignPropertyName">Foreign-property-name(Both OK - InitCap or not). (NotNull)</param>
        /// <returns>Foreign DBMeta. (NotNull)</returns>
        public ${glDBMetaInterfaceName} GetForeignDBMeta(String foreignPropertyName) {
            AssertStringNotNullAndNotTrimmedEmpty("foreignPropertyName", foreignPropertyName);
            String methodName = "GetForeignDBMeta_" + foreignPropertyName.Substring(0, 1).ToUpper() + foreignPropertyName.Substring(1);
            MethodInfo method = this.GetType().GetMethod(methodName);
            if (method == null) {
                String msg = "The foreignPropertyName is not existing: foreignPropertyName=" + foreignPropertyName;
                msg = msg + " tableName=" + TABLE_DB_NAME + " methodName=" + methodName;
                throw new SystemException(msg);
            }
            return (${glDBMetaInterfaceName})method.Invoke(this, null);
        }
#foreach ($foreignKeys in $table.foreignKeys)

        /// <summary>
        /// Get foreign dbmeta of ${foreignKeys.foreignPropertyNameInitCap}.
        /// </summary>
        /// <returns>Foreign DBMeta. (NotNull)</returns>
        public ${glProjectPrefix}${foreignKeys.ForeignTable.JavaName}Dbm GetForeignDBMeta_${foreignKeys.foreignPropertyNameInitCap}() {
            return ${glProjectPrefix}${foreignKeys.ForeignTable.JavaName}Dbm.GetInstance();
        }
#end
#foreach ($referer in $table.refererList)
  #set ($reffererTable = $referer.table)
  #set ($reffererEntityClassName = "${glProjectPrefix}${reffererTable.JavaName}")
  #set ($reffererDaoClassName = "${reffererEntityClassName}Dao")
  #set ($reffererCBClassName = "${reffererEntityClassName}${glConditionBeanInitialName}")
  #set ($reffererVariableName = "${glChildrenVariablePrefix}${referer.ReffererPropertyNameInitCap}")
  #set ($reffererEntityLongClassName = "${glPackageExtendedEntity}.${reffererEntityClassName}")
  #if (${refferer.isOneToOne()})

        /// <summary>
        /// Get foreign dbmeta of ${foreignKeys.reffererPropertyNameInitCapAsOne}.
        /// </summary>
        /// <returns>Foreign DBMeta. (NotNull)</returns>
        public ${glProjectPrefix}${referer.Table.JavaName}Dbm GetForeignDBMeta_${referer.reffererPropertyNameInitCapAsOne}() {
            return ${glProjectPrefix}${referer.Table.JavaName}Dbm.GetInstance();
        }
  #end
#end

        // =====================================================================================
        //                                                                 Entity Property Setup
        //                                                                 =====================
        protected IDictionary<String, EntityPropertySetupper<${myExtendedObjectClassName}>> _entityPropertySetupperMap = new Dictionary<String, EntityPropertySetupper<${myExtendedObjectClassName}>>();

        public override bool SetupEntityProperty(String propertyName, Object entity, Object value) {
            if (!_entityPropertySetupperMap.ContainsKey(propertyName)) {
                return false;
            }
            EntityPropertySetupper<${myExtendedObjectClassName}> callback = _entityPropertySetupperMap[propertyName];
            callback.setup((${myExtendedObjectClassName})entity, value);
            return true;
        }

#foreach ($col in $table.columns)
        public class EntityProperty${col.javaName}Setupper : EntityPropertySetupper<${myExtendedObjectClassName}> {
            public void setup(${myExtendedObjectClassName} entity, Object value) { entity.${col.javaName} = (value != null) ? (${col.javaNative})value : null; }
        }
#end
    }
}
