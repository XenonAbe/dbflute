#set ($myClassName = "${myDBMetaClassName}")

using System;
using System.Collections.Generic;
using System.Reflection;
using System.Text;

using ${glPackageBaseCommon};
using ${glPackageBaseCommonCBean};
using ${glPackageBaseCommonDBMeta};
using ${glPackageBaseCommonDBMetaInfo};
using ${myExtendedEntityPackageName};
#if (${isExistDao})

using ${myExtendedDaoPackageName};
#end
#if (${isExistConditionBean})
using ${glPackageCB};

#end
namespace ${myDBMetaPackageName} {

    /// <summary>
    /// The dbmeta of ${table.Name}.
    /// <![CDATA[
    /// [primary-key]
    ///     ${table.PrimaryKeyNameCommaString}
    /// 
    /// [all-columns]
    ///     ${table.ColumnNameCommaString}
    /// 
    /// [foreign-table]
    ///     ${table.ForeignPropertyNameCommaString}
    /// 
    /// [referrer-table]
    ///     ${table.ReferrerPropertyNameCommaString}
    /// 
    /// [sequence]
    ///     ${table.DefinedSequenceName}
    /// 
    /// [identity]
    ///     ${table.IdentityPropertyName}
    /// 
    /// [update-date]
    ///     ${table.UpdateDateJavaName}
    /// 
    /// [version-no]
    ///     ${table.VersionNoJavaName}
    /// 
    /// ]]>
    /// Author: ${database.ClassAuthor}
    /// </summary>
    public class ${myClassName} : ${glDBMetaAbstractName} {

        public static readonly Type ENTITY_TYPE = typeof(${myExtendedObjectClassName});

        private static readonly ${myClassName} _instance = new ${myClassName}();
        private ${myClassName}() {
        }
        public static ${myClassName} GetInstance() {
            return _instance;
        }

        // ===============================================================================
        //                                                                 Name Definition
        //                                                                 ===============
        #region Name

        // -------------------------------------------------
        //                                             Table
        //                                             -----
        public static readonly String TABLE_DB_NAME = "$table.name";
        public static readonly String TABLE_PROPERTY_NAME = "$table.javaName";

        // -------------------------------------------------
        //                                    Column DB-Name
        //                                    --------------
#foreach ($col in $table.columns)
        public static readonly String DB_NAME_${col.name} = "$col.name";
#end

        // -------------------------------------------------
        //                              Column Property-Name
        //                              --------------------
#foreach ($col in $table.columns)
        public static readonly String PROPERTY_NAME_${col.name} = "$col.name";
#end

        // -------------------------------------------------
        //                                      Foreign Name
        //                                      ------------
#foreach ($foreignKeys in $table.foreignKeys)
        public static readonly String FOREIGN_PROPERTY_NAME_${foreignKeys.foreignPropertyNameInitCap} = "$foreignKeys.foreignPropertyNameInitCap";
#end

        // -------------------------------------------------
        //                                     Referrer Name
        //                                     -------------
#foreach ($referrer in $table.referrers)
        public static readonly String REFERRER_PROPERTY_NAME_${referrer.referrerPropertyNameInitCap} = "$referrer.referrerPropertyNameInitCap";
#end

        // -------------------------------------------------
        //                               DB-Property Mapping
        //                               -------------------
        protected static readonly IDictionary<String, String> _dbNamePropertyNameKeyToLowerMap;
        protected static readonly IDictionary<String, String> _propertyNameDbNameKeyToLowerMap;

        static ${myClassName}() {
            {
                IDictionary<String, String> map = new Dictionary<String, String>();
                map.Add(TABLE_DB_NAME.ToLower(), TABLE_PROPERTY_NAME);
#foreach ($col in $table.columns)
                map.Add(DB_NAME_${col.name}.ToLower(), PROPERTY_NAME_${col.name});
#end
                _dbNamePropertyNameKeyToLowerMap = map;
            }

            {
                IDictionary<String, String> map = new Dictionary<String, String>();
                map.Add(TABLE_PROPERTY_NAME.ToLower(), TABLE_DB_NAME);
#foreach ($col in $table.Columns)
                map.Add(PROPERTY_NAME_${col.name}.ToLower(), DB_NAME_${col.name});
#end
                _propertyNameDbNameKeyToLowerMap = map;
            }
        }

        #endregion

        // ===============================================================================
        //                                                                      Table Name
        //                                                                      ==========
        #region Table Name
        public override String TableDbName { get { return TABLE_DB_NAME; } }
        public override String TablePropertyName { get { return TABLE_PROPERTY_NAME; } }
        #endregion

        // ===============================================================================
        //                                                                        Name Map
        //                                                                        ========
        #region Name Map
        public override IDictionary<String, String> DbNamePropertyNameKeyToLowerMap { get { return _dbNamePropertyNameKeyToLowerMap; } }
        public override IDictionary<String, String> PropertyNameDbNameKeyToLowerMap { get { return _propertyNameDbNameKeyToLowerMap; } }
        #endregion

        // ===============================================================================
        //                                                                       Type Name
        //                                                                       =========
        public override String EntityTypeName { get { return "${myExtendedEntityPackageName}.${myExtendedObjectClassName}"; } }
#if (${isExistDao})
        public override String DaoTypeName { get { return "${myExtendedDaoPackageName}.${myExtendedDaoClassName}"; } }
#else
        public override String DaoTypeName { get { return null; } }
#end
#if (${isExistConditionBean})
        public override String ConditionBeanTypeName { get { return "${glPackageBaseCB}.${myConditionBeanClassName}"; } }
#else
        public override String ConditionBeanTypeName { get { return null; } }
#end
#if (${isExistBehavior})
        public override String BehaviorTypeName { get { return "${myExtendedBhvPackageName}.${myExtendedBhvClassName}"; } }
#else
        public override String BehaviorTypeName { get { return null; } }
#end

        // ===============================================================================
        //                                                                     Object Type
        //                                                                     ===========
        public override Type EntityType { get { return ENTITY_TYPE; } }

        // ===============================================================================
        //                                                                 Object Instance
        //                                                                 ===============
        public override ${glEntityInterfaceName} NewEntity() { return NewMyEntity(); }
        public ${myExtendedObjectClassName} NewMyEntity() { return new ${myExtendedObjectClassName}(); }
#if (${isExistConditionBean})
        public override ${glConditionBeanInterfaceName} NewConditionBean() { return NewMyConditionBean(); }
#else
        public override ${glConditionBeanInterfaceName} NewConditionBean() {
            String msg = "The entity does not have condition-bean. So this method is invalid.";
            throw new SystemException(msg + " dbmeta=" + ToString());
        }
#end
#if (${isExistConditionBean})
        public ${myConditionBeanClassName} NewMyConditionBean() { return new ${myConditionBeanClassName}(); }
#end

        // ===============================================================================
        //                                                                     Column Info
        //                                                                     ===========
        public override IList<${glColumnInfoName}> ColumnInfoList {
			get {
                IList<${glColumnInfoName}> columnInfoList = new List<${glColumnInfoName}>();
#foreach ($col in $table.columns)
                columnInfoList.Add(Column${col.javaName});
#end
                return columnInfoList;
            }
		}

#foreach ($col in $table.columns)
        public ${glColumnInfoName} Column${col.javaName} { get { return new ${glColumnInfoName}(this, "${col.name}", "${col.javaName}", typeof(${col.javaNative}), ${col.isPrimaryKey()}, ${col.columnSizeSettingExpression}, ${col.columnDecimalDigitsSettingExpression}); } }
#end

        // ===============================================================================
        //                                                                     Unique Info
        //                                                                     ===========
        public override ${glUniqueInfoName} PrimaryUniqueInfo {
		    get {
#if ($table.hasPrimaryKey())
                ${glUniqueInfoName} uniqueInfo = new ${glUniqueInfoName}();
                uniqueInfo.DBMeta = this;
#foreach ($col in $table.primaryKey)
                uniqueInfo.AddUniqueColumnList(new ${glColumnInfoName}(this, "${col.name}", "${col.uncapitalisedJavaName}", typeof(${col.javaNative}), true, ${col.columnSizeSettingExpression}, ${col.columnDecimalDigitsSettingExpression}));
#end
                uniqueInfo.IsPrimary = true;
                return uniqueInfo;
#else
		        throw new NotSupportedException("The table doen not have primary key: " + TableDbName);
#end
            }
		}

        // -------------------------------------------------
        //                                   Primary Element
        //                                   ---------------
        public override bool HasPrimaryKey { get { return ${table.hasPrimaryKey()}; } }
        public override bool HasTwoOrMorePrimaryKeys { get { return ${table.hasTwoOrMorePrimaryKeys()}; } }

        // ===============================================================================
        //                                                                   Relation Info
        //                                                                   =============
        // -------------------------------------------------
        //                                   Foreign Element
        //                                   ---------------
#foreach ($foreignKeys in $table.foreignKeys)
#set ($genericsColumnInfoMap = "${glColumnInfoName}, ${glColumnInfoName}")
        public ${glPackageBaseCommonDBMetaInfo}.${glForeignInfoName} Foreign${foreignKeys.foreignJavaBeansRulePropertyNameInitCap}() {
            ${glPackageBaseCommonDBMetaInfo}.${glForeignInfoName} foreignInfo = new ${glPackageBaseCommonDBMetaInfo}.${glForeignInfoName}();
            foreignInfo.ForeignPropertyName = "${foreignKeys.foreignJavaBeansRulePropertyName}";
            foreignInfo.LocalDBMeta = ${table.DBMetaClassName}.GetInstance();
            foreignInfo.ForeignDBMeta = ${foreignKeys.foreignTableDBMetaClassName}.GetInstance();
            IDictionary<${genericsColumnInfoMap}> map = new Dictionary<${genericsColumnInfoMap}>();
#foreach ($column in $foreignKeys.localColumnList)
		    map.Add(Column${column.javaBeansRulePropertyNameInitCap}, ${foreignKeys.foreignTableDBMetaClassName}.GetInstance().Column${foreignKeys.getForeignColumnByLocalColumn(${column}).javaBeansRulePropertyNameInitCap});
#end
            foreignInfo.LocalForeignColumnInfoMap = map;
            foreignInfo.RelationNo = ${table.resolveForeignIndex($foreignKeys)};
            foreignInfo.IsOneToOne = ${foreignKeys.isOneToOne()};
            return foreignInfo;
		}
#end

#foreach ($referrer in $table.referrers)
#set ($genericsColumnInfoMap = "${glColumnInfoName}, ${glColumnInfoName}")
#if (${referrer.isOneToOne()})
        public ${glPackageBaseCommonDBMetaInfo}.${glForeignInfoName} Foreign${referrer.referrerJavaBeansRulePropertyNameAsOneInitCap}() {
            ${glPackageBaseCommonDBMetaInfo}.${glForeignInfoName} foreignInfo = new ${glPackageBaseCommonDBMetaInfo}.${glForeignInfoName}();
            foreignInfo.ForeignPropertyName = "${referrer.refererJavaBeansRulePropertyNameAsOne}";
            foreignInfo.LocalDBMeta = ${referrer.foreignTableDBMetaClassName}.GetInstance();
            foreignInfo.ForeignDBMeta = ${referrer.referrerTableDBMetaClassName}.GetInstance();
            IDictionary<${genericsColumnInfoMap}> map = new Dictionary<${genericsColumnInfoMap}>();
#foreach ($column in $referrer.foreignColumnList)
            map.Add(Column${column.javaBeansRulePropertyNameInitCap}, ${referrer.referrerTableDBMetaClassName}.GetInstance().Column${referrer.getLocalColumnByForeignColumn(${column}).javaBeansRulePropertyNameInitCap});
#end
            foreignInfo.LocalForeignColumnInfoMap = map;
            foreignInfo.RelationNo = ${table.resolveReferrerIndexAsOne($referrer)};
            foreignInfo.IsOneToOne = ${referrer.isOneToOne()};
            return foreignInfo;
        }
#end
#end

        // -------------------------------------------------
        //                                  Referrer Element
        //                                  ----------------
#foreach ($referrer in $table.referrers)
#set ($genericsColumnInfoMap = "${glColumnInfoName}, ${glColumnInfoName}")
#set ($referrerTable = $referrer.table)
        public ${glPackageBaseCommonDBMetaInfo}.${glReferrerInfoName} referrer${referrer.referrerJavaBeansRulePropertyNameInitCap}() {
            ${glPackageBaseCommonDBMetaInfo}.${glReferrerInfoName} referrerInfo = new ${glPackageBaseCommonDBMetaInfo}.${glReferrerInfoName}();
            referrerInfo.ReferrerPropertyName = "${referrer.referrerJavaBeansRulePropertyName}";
            referrerInfo.LocalDBMeta = ${referrer.foreignTableDBMetaClassName}.GetInstance();
            referrerInfo.ReferrerDBMeta = ${referrer.referrerTableDBMetaClassName}.GetInstance();
            IDictionary<${genericsColumnInfoMap}> map = new Dictionary<${genericsColumnInfoMap}>();
#foreach ($column in $referrer.foreignColumnList)
            map.Add(Column${column.javaBeansRulePropertyNameInitCap}, ${referrer.referrerTableDBMetaClassName}.GetInstance().Column${referrer.getLocalColumnByForeignColumn(${column}).javaBeansRulePropertyNameInitCap});
#end
            referrerInfo.LocalReferrerColumnInfoMap = map;
            referrerInfo.IsOneToOne = ${referrer.isOneToOne()};
            return referrerInfo;
        }
#end

        // -------------------------------------------------
        //                                    Relation Trace
        //                                    --------------

        // ===============================================================================
        //                                                                   Sequence Info
        //                                                                   =============
        public override bool HasSequence { get { return ${table.isUseSequence()}; } }

        // ===============================================================================
        //                                                            Optimistic Lock Info
        //                                                            ====================
        public override bool HasVersionNo { get { return ${table.isUseVersionNo()}; } }
        public override bool HasUpdateDate { get { return ${table.isUseUpdateDate()}; } }

        // ===============================================================================
        //                                                              Common Column Info
        //                                                              ==================
        public override bool HasCommonColumn { get { return ${table.hasAllCommonColumn()}; } }

        // ===============================================================================
        //                                                           Entity Property Setup
        //                                                           =====================
        protected IDictionary<String, EntityPropertySetupper<${myExtendedObjectClassName}>> _entityPropertySetupperMap = new Dictionary<String, EntityPropertySetupper<${myExtendedObjectClassName}>>();

		protected void InitializeEntityPropertySetupper() {
#foreach ($column in $table.columns)
	        RegisterEntityPropertySetupper("$column.name", "$column.javaName", new EntityProperty${column.javaName}Setupper(), _entityPropertySetupperMap);
#end
		}
		
	    public override bool HasEntityPropertySetupper(String propertyName) {
		    if (_entityPropertySetupperMap.Count == 0) {
			    InitializeEntityPropertySetupper();
			}
		    return _entityPropertySetupperMap.ContainsKey(propertyName);
		}

        public override void SetupEntityProperty(String propertyName, Object entity, Object value) {
            if (!_entityPropertySetupperMap.ContainsKey(propertyName)) {
		        String msg = "The propertyName was Not Found in the map of setupper of entity property:";
			    msg = msg + " propertyName=" + propertyName + " _entityPropertySetupperMap.Count=" + _entityPropertySetupperMap.Count;
		        throw new SystemException(msg);
            }
            EntityPropertySetupper<${myExtendedObjectClassName}> callback = _entityPropertySetupperMap[propertyName];
            callback.Setup((${myExtendedObjectClassName})entity, value);
        }

#foreach ($col in $table.columns)
        public class EntityProperty${col.javaName}Setupper : EntityPropertySetupper<${myExtendedObjectClassName}> {
            public void Setup(${myExtendedObjectClassName} entity, Object value) { entity.${col.javaName} = (value != null) ? (${col.javaNative})value : null; }
        }
#end
    }
}
