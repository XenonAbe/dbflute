
#set ($myClassName = "${myExtendedObjectClassName}")

using System;
using System.Reflection;
using System.Collections.Generic;
using System.Text;

using ${glPackageBaseCommon};
using ${glPackageBaseCommonCBean};
using ${glPackageBaseCommonDBMeta};
using ${glPackageBaseCommonHelper};
using ${myDBMetaPackageName};

#set ($myEntityInterfaceName = "")
#if (${table.hasAllCommonColumn()})
  #set ($myEntityInterfaceName = ${glEntityDefinedCommonColumnInterfaceName})
#else
  #set ($myEntityInterfaceName = ${glEntityInterfaceName})
#end

namespace ${myExtendedEntityPackageName} {

    /// <summary>
    /// The entity of ${table.name}. (partial class for auto-generation)
    /// <![CDATA[
    /// [primary-key]
    ///     ${table.PrimaryKeyNameCommaString}
    /// 
    /// [all-columns]
    ///     ${table.ColumnNameCommaString}
    /// 
    /// [foreign-table]
    ///     ${table.ForeignPropertyNameCommaString}
    /// 
    /// [refferer-table]
    ///     ${table.ReferrerPropertyNameCommaString}
    /// 
    /// [sequence]
    ///     ${table.DefinedSequenceName}
    /// 
    /// [identity]
    ///     ${table.IdentityPropertyName}
    /// 
    /// [update-date]
    ///     ${table.UpdateDateJavaName}
    /// 
    /// [version-no]
    ///     ${table.VersionNoJavaName}
    /// 
    /// ]]>
    /// Author: ${database.ClassAuthor}
    /// </summary>
    [Seasar.Dao.Attrs.Table("${table.AnnotationTableName}")]
#if ($table.isUseUpdateDate())
    [Seasar.Dao.Attrs.TimestampProperty("${table.UpdateDateUncapitalisedJavaName}")]
#end
#if ($table.isUseVersionNo())
    [Seasar.Dao.Attrs.VersionNoProperty("${table.VersionNoUncapitalisedJavaName}")]
#end
    [System.Serializable]
    public partial class ${myClassName} : ${myEntityInterfaceName} {

        // ===============================================================================
        //                                                                       Attribute
        //                                                                       =========
        #region Attribute
        /// <summary>The modified properties of entity. (for S2Dao)</summary>
        protected EntityModifiedProperties _modifiedProperties = new EntityModifiedProperties();
#foreach ($col in $table.columns)

        /// <summary>The value of ${col.uncapitalisedJavaName}. {${col.columnDefinitionLineDisp}}</summary>
        protected ${col.JavaNative} _${col.uncapitalisedJavaName};
#end
        #endregion

        // ===============================================================================
        //                                                                      Table Name
        //                                                                      ==========
        public String TableDbName { get { return "${table.name}"; } }
        public String TablePropertyName { get { return "${table.javaName}"; } }

#if ($isSql2Entity)
        // ===============================================================================
        //                                                                          DBMeta
        //                                                                          ======
        public ${glDBMetaInterfaceName} DBMeta { get { return ${myDBMetaClassName}.GetInstance(); } }
#else
        // ===============================================================================
        //                                                                          DBMeta
        //                                                                          ======
        public ${glDBMetaInterfaceName} DBMeta { get { return ${glDBMetaInstanceHandlerName}.FindDBMeta(TableDbName); } }
#end

        // ===============================================================================
        //                                                      Classification Classifying
        //                                                      ==========================
        #region Classify Method
#foreach ($col in $table.Columns)
  #if (${col.hasClassification()})
    #foreach ($classificationMap in $col.ClassificationMapList)

        /// <summary>
        /// Classify the value of ${col.uncapitalisedJavaName} as ${classificationMap.get('name')}.
        /// <![CDATA[
        /// ${classificationMap.get('comment')}
        /// ]]>
        /// </summary>
        public void Classify${col.javaName}${classificationMap.get('name')}() {
            String code = ${glPackageBaseCommon}.${glClassificationDefinition}.CODE_${col.ClassificationName}_${classificationMap.get('name')};
#if (${col.isJavaNativeStringObject()})
            ${col.javaName} = code;
        }
#else
            ${col.javaName} = new ${col.javaNative}(code);
        }
#end
    #end
  #end
#end

        #endregion

        // ===============================================================================
        //                                                    Classification Determination
        //                                                    ============================
        #region Classification Determination
#foreach ($col in $table.columns)
  #if (${col.hasClassification()})
    #foreach ($classificationMap in $col.ClassificationMapList)

        /// <summary>
        /// Is the value of ${col.uncapitalisedJavaName} '${classificationMap.get('name')}'?
        /// <![CDATA[
        /// The difference of capital letters and small letters is NOT distinguished.
        /// If the value is null, this method returns false!
        /// ${classificationMap.get('comment')}
        /// ]]>
        /// </summary>
        public bool Is${col.javaName}${classificationMap.get('name')} {
            get {
                if (_${col.uncapitalisedJavaName} == null) { return false; }
                String code = ${glPackageBaseCommon}.${glClassificationDefinition}.CODE_${col.ClassificationName}_${classificationMap.get('name')};
                return code.ToLower().Equals(_${col.uncapitalisedJavaName}.ToString().ToLower());
            }
        }
    #end
  #end
#end

        #endregion

        // ===============================================================================
        //                                                       Classification Name/Alias
        //                                                       =========================
        #region Classification Name/Alias
#foreach ($col in $table.Columns)
  #if (${col.hasClassification()})
    #if (${col.hasClassificationName()})

        public String ${col.javaName}Name {
            get {
                if (_${col.uncapitalisedJavaName} == null) { return null; }
                IDictionary<String, String> map = ${glPackageBaseCommon}.${glClassificationDefinition}.CODE_NAME_MAP_${col.ClassificationName};
                return map[_${col.uncapitalisedJavaName}.ToString()];
            }
        }
    #end
    #if (${col.hasClassificationAlias()})

        public String ${col.javaName}Alias {
            get {
                if (_${col.uncapitalisedJavaName} == null) { return null; }
                IDictionary<String, String> map = ${glPackageBaseCommon}.${glClassificationDefinition}.CODE_ALIAS_MAP_${col.ClassificationName};
                return map[_${col.uncapitalisedJavaName}.ToString()];
            }
        }
    #end
  #end
#end

        #endregion

        // ===============================================================================
        //                                                                   Foreign Table
        //                                                                   =============
        #region Foreign Table
#set ($foreignKeysIndex = 0)
#foreach ($foreignKeys in $table.ForeignKeys)
  #set ($foreignVariableName = "${glParentVariablePrefix}${foreignKeys.foreignPropertyNameInitCap}")
  #set ($foreignDaoClassName = "${glProjectPrefix}${foreignKeys.foreignTable.JavaName}Dao")
  #set ($foreignEntityClassName = "${glProjectPrefix}${foreignKeys.foreignTable.JavaName}")
  #set ($parentCBClassName = "${glProjectPrefix}${foreignKeys.foreignTable.JavaName}${glConditionBeanInitialName}")

        // /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
        //   ForeignTable    = [${foreignKeys.foreignTable.basicInfoDispString}]
        //   ForeignProperty = [${foreignKeys.foreignPropertyNameInitCap}]
        // * * * * * * * * */

        protected ${glPackageExtendedEntity}.${foreignEntityClassName} ${foreignVariableName};

        [Seasar.Dao.Attrs.Relno(${foreignKeysIndex}), Seasar.Dao.Attrs.Relkeys("$foreignKeys.RelationKeysCommaString")]
        public ${glPackageExtendedEntity}.${foreignEntityClassName} ${foreignKeys.foreignPropertyNameInitCap} {
            get { return ${foreignVariableName}; }
            set { ${foreignVariableName} = value; }
        }

        public ${glPackageExtendedEntity}.${foreignEntityClassName} Look${foreignKeys.foreignPropertyNameInitCap}() {
            return ${foreignVariableName} != null ? ${foreignVariableName} : new ${glPackageExtendedEntity}.${foreignEntityClassName}();
        }

        public bool HasForeignInstance${foreignKeys.foreignPropertyNameInitCap} {
            get { return ${foreignVariableName} != null; }
        }
  #set ($foreignKeysIndex = $foreignKeysIndex + 1)
#end

        #endregion

        // ===============================================================================
        //                                                                   Referer Table
        //                                                                   =============
        #region Referer Table
#foreach ($refferer in $table.refererList)
  #set ($reffererTable = $refferer.Table)
  #set ($reffererEntityClassName = "${glProjectPrefix}${reffererTable.JavaName}")
  #set ($reffererDaoClassName = "${reffererEntityClassName}Dao")
  #set ($reffererCBClassName = "${reffererEntityClassName}${glConditionBeanInitialName}")
  #set ($reffererVariableName = "${glChildrenVariablePrefix}${refferer.ReffererPropertyNameInitCap}")
  #set ($reffererEntityLongClassName = "${glPackageExtendedEntity}.${reffererEntityClassName}")

  #if (${refferer.isOneToOne()})

        // /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * {as one}
        //   RefererTable    = [${refferer.table.basicInfoDispString}]
        //   RefererProperty = [${refferer.reffererPropertyNameInitCapAsOne}]
        // * * * * * * * * */
  #else

        // /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
        //   RefererTable    = [${refferer.table.basicInfoDispString}]
        //   RefererProperty = [${refferer.reffererPropertyNameInitCap}]
        // * * * * * * * * */
  #end

        protected IList<${reffererEntityClassName}> $reffererVariableName;

        public IList<${reffererEntityClassName}> ${refferer.reffererPropertyNameInitCap} {
            get { if (${reffererVariableName} == null) { ${reffererVariableName} = new List<${reffererEntityLongClassName}>(); } return ${reffererVariableName}; }
            set { ${reffererVariableName} = value; }
        }

        public bool HasRefererElements${refferer.reffererPropertyNameInitCap} {
            get { return ${reffererVariableName} != null && ${reffererVariableName}.Count > 0; }
        }
  #if (${refferer.isOneToOne()})

        [Seasar.Dao.Attrs.Relno(${foreignKeysIndex}), Seasar.Dao.Attrs.Relkeys("$refferer.relationKeysCommaStringForOneToOneRefferer")]
        public ${reffererEntityLongClassName} ${refferer.reffererPropertyNameInitCapAsOne} {
            get {
                IList<${reffererEntityClassName}> ls = this.${refferer.reffererPropertyNameInitCap};
                if (ls == null || ls.Count == 0) { return null; }
                if (ls.Count > 1) {
                    String msg = "The size of the list must be one because this relation is 'one-to-one'";
                    msg = msg + ": list=" + ls + ": ToString()=" + ToString();
                    throw new SystemException(msg);
                }
                return (${reffererEntityLongClassName})ls[0];
            }
            set {
                if (value == null) { ${reffererVariableName} = null; return; }
                IList<${reffererEntityClassName}> ls = new List<${reffererEntityClassName}>();
                ls.Add(value);
                ${reffererVariableName} = ls;
            }
        }

        public ${glPackageExtendedEntity}.${foreignEntityClassName} Look${refferer.reffererPropertyNameInitCapAsOne}() {
            return ${refferer.reffererPropertyNameInitCapAsOne} != null ? ${refferer.reffererPropertyNameInitCapAsOne} : new ${reffererEntityClassName}();
        }

        public bool HasForeignInstance${refferer.reffererPropertyNameInitCapAsOne} {
            get { return ${refferer.reffererPropertyNameInitCapAsOne} != null; }
        }
    #set ($foreignKeysIndex = $foreignKeysIndex + 1)
  #end
#end

        #endregion

        // ===============================================================================
        //                                                                   Determination
        //                                                                   =============
        public bool HasPrimaryKeyValue {
            get {
#foreach ($col in $table.primaryKey)
                if (_${col.uncapitalisedJavaName} == null) { return false; }
#end
                return true;
            }
        }

        // ===============================================================================
        //                                                             Modified Properties
        //                                                             ===================
        public virtual IDictionary<String, Object> ModifiedPropertyNames {
            get { return _modifiedProperties.PropertyNames; }
        }

        public virtual void ClearModifiedPropertyNames() {
            _modifiedProperties.Clear();
        }

        // ===============================================================================
        //                                                                  Basic Override
        //                                                                  ==============
        #region Basic Override
#if ($table.hasPrimaryKey())
        public override bool Equals(Object other) {
            if (other == null) {
                return false;
            }
            if (!(other is $myClassName)) {
                return false;
            }
            $myClassName otherEntity = ($myClassName)other;
#foreach ($col in $table.primaryKey)
            if (this.${col.javaName} == null || !this.${col.javaName}.Equals(otherEntity.${col.javaName})) { return false; }
#end
            return true;
        }

        public override int GetHashCode() {
            int result = 0;
#foreach ($col in $table.primaryKey)
#if (!${col.isJavaNativeNumberObject()})
            if (_${col.uncapitalisedJavaName} != null) { result = result + _${col.uncapitalisedJavaName}.GetHashCode(); }
#else
            result = result + _${col.uncapitalisedJavaName}.GetHashCode();
#end
#end
            return result;
        }
#else

        public override bool Equals(Object other) {
            if (other == null) {
                return false;
            }
            if (!(other is $myClassName)) {
                return false;
            }
            $myClassName otherEntity = ($myClassName)other;
#foreach ($col in $table.columns)
            if (this.${col.javaName} == null || !this.${col.javaName}.Equals(otherEntity.${col.javaName})) { return false; }
#end
            return true;
        }

        public override int GetHashCode() {
            int result = 0;
#foreach ($col in $table.Columns)
#if (!${col.isJavaNativeNumberObject()})
            if (_${col.uncapitalisedJavaName} != null) { result = result + _${col.uncapitalisedJavaName}.GetHashCode(); }
#else
            result = result + _${col.uncapitalisedJavaName}.GetHashCode();
#end
#end
            return result;
        }
#end

        public override String ToString() {
            String delimiter = ",";
            StringBuilder sb = new StringBuilder();
#foreach ($col in $table.columns)
            sb.Append(delimiter).Append(this.${col.javaName});
#end
            sb.Remove(0, delimiter.Length);
            sb.Insert(0, "{").Append("}");
            return sb.ToString();
        }

        #endregion

        // ===============================================================================
        //                                                                        Accessor
        //                                                                        ========
        #region Accessor
#foreach ($col in $table.columns)

        /// <summary>The property of ${col.uncapitalisedJavaName}. {${col.columnDefinitionLineDisp}}</summary>
#if ($col.isIdentity())
        [Seasar.Dao.Attrs.ID("identity")]
#end
        [Seasar.Dao.Attrs.Column("${col.Name}")]
        public ${col.JavaNative} ${col.javaName} {
            get { return _${col.uncapitalisedJavaName}; }
            set {
#if ($table.isAvailableEntityModifiedPropertiesAddLogicIfNeeds())
                _modifiedProperties.AddPropertyNameIfNeeds("${col.javaBeansRulePropertyNameInitCap}", this._${col.uncapitalisedJavaName}, value);
#else
                _modifiedProperties.AddPropertyName("${col.javaBeansRulePropertyNameInitCap}");
#end
                _${col.uncapitalisedJavaName} = value;
            }
        }
#end
        #endregion
    }
}
