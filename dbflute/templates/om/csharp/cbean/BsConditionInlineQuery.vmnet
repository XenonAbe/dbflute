#set ($myClassName = "${myConditionInlineQueryClassName}")
#set ($myCQClassName = "${myBaseConditionQueryClassName}")

using System;
using System.Collections;

using ${glPackageBaseCommon};
using ${glPackageBaseCommonCBean};
using ${glPackageBaseCommonCKey};
using ${glPackageBaseCommonCValue};
using ${glPackageBaseCommonSqlClause};
using ${glPackageBaseCommonJavaLike};
using ${glPackageBaseCQ};
using ${glPackageCQ};

namespace ${glPackageCIQ} {

    [System.Serializable]
    public class ${myClassName} : ${myAbstractBaseConditionQueryClassName} {

        // ===============================================================================
        //                                                                       Attribute
        //                                                                       =========
        protected ${myCQClassName} _myCQ;

        // ===============================================================================
        //                                                                     Constructor
        //                                                                     ===========
        public ${myClassName}(${glConditionQueryInterfaceName} childQuery, ${glSqlClauseName} sqlClause, String aliasName, int nestLevel, ${myCQClassName} myCQ)
            : base(childQuery, sqlClause, aliasName, nestLevel) { _myCQ = myCQ; }

			
        // ===================================================================================
        //                                                             Override about Register
        //                                                             =======================
        protected override void reflectRelationOnUnionQuery(${glConditionQueryInterfaceName} baseQueryAsSuper, ${glConditionQueryInterfaceName} unionQueryAsSuper) {
            throw new UnsupportedOperationException("InlineQuery must not need UNION method: " + baseQueryAsSuper + " : " + unionQueryAsSuper);
        }
    
        protected override void setupConditionValueAndRegisterWhereClause(${glConditionKeyName} key, Object value, ${glConditionValueName} cvalue
                                                                 , String colName, String capPropName, String uncapPropName) {
            registerInlineQuery(key, value, cvalue, colName, capPropName, uncapPropName);
        }
    
        protected override void setupConditionValueAndRegisterWhereClause(${glConditionKeyName} key, Object value, ${glConditionValueName} cvalue
                                                                 , String colName, String capPropName, String uncapPropName, ${glConditionOptionInterfaceName} option) {
            registerInlineQuery(key, value, cvalue, colName, capPropName, uncapPropName, option);
        }
    
        protected override void registerWhereClause(String whereClause) {
            registerInlineWhereClause(whereClause);
        }
    
        protected override String getInScopeSubQueryRealColumnName(String columnName) {
    	    if (_onClauseInline) {
    		    throw new UnsupportedOperationException("InScopeSubQuery of on-clause is unsupported");
    		}
            return _onClauseInline ? getRealAliasName() + "." + columnName : columnName;
        }
    
        protected override void registerExistsSubQuery(${glConditionQueryInterfaceName} subQuery
                                     , String columnName, String relatedColumnName, String propertyName) {
            throw new UnsupportedOperationException("Sorry! ExistsSubQuery at inline view is unsupported. So please use InScopeSubQyery.");
        }

  #foreach ($col in $table.columns)
    #set ($tmpJavaName = "${col.JavaName}")
    #set ($tmpUncapitalisedJavaName = "${col.UncapitalisedJavaName}")

        protected override ${glConditionValueName} getCValue${tmpJavaName}() {
            return _myCQ.${tmpJavaName};
        }

    #if (${col.isJavaNativeStringObject()})
      #if (${col.isSingleKeyForeignKey()})
        #set ($relatedCQClassName = "${glProjectPrefix}${col.foreignKey.foreignTable.javaName}CQ")
        #set ($subQueryPropertyNameInitCap = "${tmpJavaName}_InScopeSubQuery_${col.foreignKey.foreignPropertyNameInitCap}")
        #set ($subQueryPropertyName = "${tmpUncapitalisedJavaName}_InScopeSubQuery_${col.foreignKey.foreignPropertyNameInitCap}")

        public override void keep${subQueryPropertyNameInitCap}(${relatedCQClassName} subQuery) {
            _myCQ.keep${subQueryPropertyNameInitCap}(subQuery);
        }
      #end
      #if (${col.hasSingleKeyReferrer()})
        #foreach ($refferer in $col.SingleKeyReferrers)
          #set ($relatedCQClassName = "${glProjectPrefix}${refferer.Table.JavaName}${glConditionQueryInitialName}")
          #set ($subQueryPropertyNameInitCap = "${tmpJavaName}_InScopeSubQuery_${refferer.ReffererPropertyNameInitCap}")
          #set ($subQueryPropertyName = "${tmpUncapitalisedJavaName}_InScopeSubQuery_${refferer.ReffererPropertyNameInitCap}")

        public override void keep${subQueryPropertyNameInitCap}(${relatedCQClassName} subQuery) {
            _myCQ.keep${subQueryPropertyNameInitCap}(subQuery);
        }
        #end
      #end
      #if (${col.hasSingleKeyReferrer()})
        #foreach ($refferer in $col.SingleKeyReferrers)
          #if (!$refferer.isSelfReference())
            #set ($relatedCQClassName = "${glProjectPrefix}${refferer.Table.JavaName}${glConditionQueryInitialName}")
            #set ($subQueryPropertyNameInitCap = "${tmpJavaName}_ExistsSubQuery_${refferer.ReffererPropertyNameInitCap}")
            #set ($subQueryPropertyName = "${tmpUncapitalisedJavaName}_ExistsSubQuery_${refferer.ReffererPropertyNameInitCap}")

        public override void keep${subQueryPropertyNameInitCap}(${relatedCQClassName} subQuery) {
            throw new SystemException("ExistsSubQuery at inline() is unsupported! Sorry!");
            // _myCQ.keep${subQueryPropertyNameInitCap}(subQuery);
        }
          #end
        #end
      #end
    #end
    #if (${col.isJavaNativeNumberObject()})
      #if (${col.isSingleKeyForeignKey()})
        #set ($relatedCQClassName = "${glProjectPrefix}${col.foreignKey.foreignTable.javaName}CQ")
        #set ($subQueryPropertyNameInitCap = "${tmpJavaName}_InScopeSubQuery_${col.foreignKey.foreignPropertyNameInitCap}")
        #set ($subQueryPropertyName = "${tmpUncapitalisedJavaName}_InScopeSubQuery_${col.foreignKey.foreignPropertyNameInitCap}")

        public override void keep${subQueryPropertyNameInitCap}(${relatedCQClassName} subQuery) {
            _myCQ.keep${subQueryPropertyNameInitCap}(subQuery);
        }
      #end
      #if (${col.hasSingleKeyReferrer()})
        #foreach ($refferer in $col.SingleKeyReferrers)
          #set ($relatedCQClassName = "${glProjectPrefix}${refferer.Table.JavaName}${glConditionQueryInitialName}")
          #set ($subQueryPropertyNameInitCap = "${tmpJavaName}_InScopeSubQuery_${refferer.ReffererPropertyNameInitCap}")
          #set ($subQueryPropertyName = "${tmpUncapitalisedJavaName}_InScopeSubQuery_${refferer.ReffererPropertyNameInitCap}")

        public override void keep${subQueryPropertyNameInitCap}(${relatedCQClassName} subQuery) {
            _myCQ.keep${subQueryPropertyNameInitCap}(subQuery);
        }
        #end
      #end
      #if (${col.hasSingleKeyReferrer()})
        #foreach ($refferer in $col.SingleKeyReferrers)
          #if (!$refferer.isSelfReference())
            #set ($relatedCQClassName = "${glProjectPrefix}${refferer.Table.JavaName}${glConditionQueryInitialName}")
            #set ($subQueryPropertyNameInitCap = "${tmpJavaName}_ExistsSubQuery_${refferer.ReffererPropertyNameInitCap}")
            #set ($subQueryPropertyName = "${tmpUncapitalisedJavaName}_ExistsSubQuery_${refferer.ReffererPropertyNameInitCap}")

        public override void keep${subQueryPropertyNameInitCap}(${relatedCQClassName} subQuery) {
            throw new SystemException("ExistsSubQuery at inline() is unsupported! Sorry!");
            // _myCQ.keep${subQueryPropertyNameInitCap}(subQuery);
        }
          #end
        #end
      #end
    #end
    #if (${col.isJavaNativeDateObject()})
    #end
    #if (${col.isJavaNativeBooleanObject()})
    #end
    #if (${col.isJavaNativeBinaryObject()})
    #end
    #if (!${col.isNotNull()})
    #end
    #if (!${col.isJavaNativeBinaryObject()})
    #end
  #end

    }
}
