#set ($myClassName = "${myAbstractBaseConditionQueryClassName}")

using System;
using System.Collections;

using ${glPackageBaseCommon};
using ${glPackageBaseCommonCBean};
using ${glPackageBaseCommonCKey};
using ${glPackageBaseCommonCValue};
using ${glPackageBaseCommonSqlClause};

namespace ${glPackageBaseCQ} {

    /// <summary>
    /// The condition-query of {table.Name}.
    /// Author: ${database.ClassAuthor}
    /// </summary>
    [System.Serializable]
    public abstract class ${myClassName} : ${glConditionQueryAbstractName} {

        // =====================================================================================
        //                                                                           Constructor
        //                                                                           ===========
        /// <summary>
        /// Constructor.
        /// </summary>
        /// <param name="childQuery">Child query as interface. (Nullable: If null, this is base instance.)</param>
        /// <param name="sqlClause">SQL clause instance. (NotNull)</param>
        /// <param name="aliasName">My alias name. (NotNull)</param>
        /// <param name="nestLevel">Nest level.</param>
        public ${myClassName}(${glConditionQueryInterfaceName} childQuery, ${glSqlClauseName} sqlClause, String aliasName, int nestLevel)
            : base(childQuery, sqlClause, aliasName, nestLevel) {}

        // =====================================================================================
        //                                                                            Table Name
        //                                                                            ==========
        /// <summary>
        /// ${database.ImplementComment}
        /// </summary>
        public override String GetTableDbName() {
            return "${table.Name}";
        }

        // =====================================================================================
        //                                                                                 Query
        //                                                                                 =====
  ## --------------------------------------------------------------------------------
  ##                                                  Make getter and setter methods.
  ##                                                  -------------------------------

        // /* * * * * * * * * * * * * * * * * * * * * * *
        //   MyTable = [$table.Name]
        // * * * * * * * * */

  #foreach ($col in $table.Columns)
    #set ($tmpJavaName = "${col.JavaName}")
    #set ($tmpUncapitalisedJavaName = "${col.UncapitalisedJavaName}")
    
        /// <summary> Column db name of ${col.UncapitalisedJavaName}. </summary>
        protected static readonly String COL_${col.Name} = "${col.Name}";

        /// <summary> Column java name of ${col.UncapitalisedJavaName}. </summary>
        protected static readonly String J_${col.JavaName} = "${col.JavaName}";

        /// <summary> Column uncapitalised java name of ${col.UncapitalisedJavaName}. </summary>
        protected static readonly String UJ_${col.UncapitalisedJavaName} = "${col.UncapitalisedJavaName}";
    #if (${col.isJavaNativeStringObject()})

        /// <summary>
        /// Set the value of ${col.UncapitalisedJavaName} using equal. { = }
        /// If the value is null or empty-string, this condition is ignored.
        /// </summary>
        /// <param name="value">The value of ${col.UncapitalisedJavaName} as equal.</param>
        public void Set${tmpJavaName}_Equal($col.JavaNative value) {
            Register${tmpJavaName}(${glConditionKeyName}.CK_EQUAL, FilterRemoveEmptyString(value));
        }
      #if ($database.isMakeConditionQueryEqualEmptyString())

        /// <summary>
        /// Set the empty-string of ${col.UncapitalisedJavaName} as equal. { = }
        /// </summary>
        /// <returns>this. (NotNull)</returns>
        public void Set${tmpJavaName}_Equal_EmptyString() {
            Register${tmpJavaName}(${glConditionKeyName}.CK_EQUAL, "");
        }
      #end
      #if (${col.hasClassification()})
        #foreach ($classificationMap in $col.ClassificationMapList)

        /// <summary>
        /// Set the value od ${classificationMap.get('name')} of ${col.UncapitalisedJavaName} as equal. { = }
        /// </summary>
        public void Set${tmpJavaName}_Equal_${classificationMap.get('name')}() {
            Register${tmpJavaName}(${glConditionKeyName}.CK_EQUAL, ${glClassificationDefinition}.CODE_${col.ClassificationName}_${classificationMap.get('name')});
        }
        #end
      #end

        /// <summary>
        /// Set the value of ${col.UncapitalisedJavaName} using notEqual. { != }
        /// If the value is null or empty-string, this condition is ignored.
        /// </summary>
        /// <param name="value">The value of ${col.UncapitalisedJavaName} as notEqual.</param>
        public void Set${tmpJavaName}_NotEqual($col.JavaNative value) {
            Register${tmpJavaName}(${glConditionKeyName}.CK_NOT_EQUAL, FilterRemoveEmptyString(value));
        }

        /// <summary>
        /// Set the value of ${col.UncapitalisedJavaName} using greaterThan. { &gt; }
        /// If the value is null or empty-string, this condition is ignored.
        /// </summary>
        /// <param name="value">The value of ${col.UncapitalisedJavaName} as greaterThan.</param>
        public void Set${tmpJavaName}_GreaterThan($col.JavaNative value) {
            Register${tmpJavaName}(${glConditionKeyName}.CK_GREATER_THAN, FilterRemoveEmptyString(value));
        }

        /// <summary>
        /// Set the value of ${col.UncapitalisedJavaName} using lessThan. { &lt; }
        /// If the value is null or empty-string, this condition is ignored.
        /// </summary>
        /// <param name="value">The value of ${col.UncapitalisedJavaName} as lessThan.</param>
        public void Set${tmpJavaName}_LessThan($col.JavaNative value) {
            Register${tmpJavaName}(${glConditionKeyName}.CK_LESS_THAN, FilterRemoveEmptyString(value));
        }

        /// <summary>
        /// Set the value of ${col.UncapitalisedJavaName} using greaterEqual. { &gt;= }
        /// If the value is null or empty-string, this condition is ignored.
        /// </summary>
        /// <param name="value">The value of ${col.UncapitalisedJavaName} as greaterEqual.</param>
        public void Set${tmpJavaName}_GreaterEqual($col.JavaNative value) {
            Register${tmpJavaName}(${glConditionKeyName}.CK_GREATER_EQUAL, FilterRemoveEmptyString(value));
        }

        /// <summary>
        /// Set the value of ${col.UncapitalisedJavaName} using lessEqual. { &lt;= }
        /// If the value is null or empty-string, this condition is ignored.
        /// </summary>
        /// <param name="value">The value of ${col.UncapitalisedJavaName} as lessEqual.</param>
        public void Set${tmpJavaName}_LessEqual($col.JavaNative value) {
            Register${tmpJavaName}(${glConditionKeyName}.CK_LESS_EQUAL, FilterRemoveEmptyString(value));
        }

        /// <summary>
        /// Set the value of ${col.UncapitalisedJavaName} using prefixSearch. { like 'xxx%' }
        /// If the value is null or empty-string, this condition is ignored.
        /// </summary>
        /// <param name="value">The value of ${col.UncapitalisedJavaName} as prefixSearch.</param>
        public void Set${tmpJavaName}_PrefixSearch($col.JavaNative value) {
            Register${tmpJavaName}(${glConditionKeyName}.CK_PREFIX_SEARCH, FilterRemoveEmptyString(value));
        }

        /// <summary>
        /// Set the value of ${col.UncapitalisedJavaName} using inScope. { in ('a', 'b') }
        /// If the element in the list is null or empty-string, the condition-element is ignored.
        /// </summary>
        /// <param name="valueList">The value of ${col.UncapitalisedJavaName} as inScope.</param>
        public void Set${tmpJavaName}_InScope(System.Collections.IList valueList) {
            Register${tmpJavaName}(${glConditionKeyName}.CK_IN_SCOPE, FilterRemoveEmptyStringFromList(valueList));
        }

        /// <summary>
        /// Set the value of ${col.UncapitalisedJavaName} using notInScope. { not in ('a', 'b') }
        /// If the element in the list is null or empty-string, the condition-element is ignored.
        /// </summary>
        /// <param name="valueList">The value of ${col.UncapitalisedJavaName} as notInScope.</param>
        public void Set${tmpJavaName}_NotInScope(System.Collections.IList valueList) {
            Register${tmpJavaName}(${glConditionKeyName}.CK_NOT_IN_SCOPE, FilterRemoveEmptyStringFromList(valueList));
        }
      #if (${col.hasSingleKeyReferrer()})
        #foreach ($refferer in $col.SingleKeyReferrers)
          #set ($reffererCQClassName = "${glProjectPrefix}${refferer.Table.JavaName}${glConditionQueryInitialName}")
          #set ($subQueryPropertyNameInitCap = "${tmpJavaName}_InScopeSubQuery_${refferer.ReffererPropertyNameInitCap}")
          #set ($subQueryPropertyName = "${tmpUncapitalisedJavaName}_InScopeSubQuery_${refferer.ReffererPropertyNameInitCap}")

        /// <summary>
        /// Set the sub-query of ${subQueryPropertyNameInitCap} using inScopeSubQuery.
        /// { in (select xxx.${refferer.FirstLocalColumnName} from ${refferer.Table.Name} where ...) }
        /// This method use from clause and where clause of the sub-query instance.
        /// this query save the sub-query instance for query-value.
        /// After you invoke this, If you set query in the argument[subQuery], the query is ignored.
        /// </summary>
        /// <param name="subQuery">The sub-query of ${subQueryPropertyNameInitCap} using inScopeSubQuery. (NotNull)</param>
        public void Set${subQueryPropertyNameInitCap}(${reffererCQClassName} subQuery) {
            AssertObjectNotNull("subQuery", subQuery);
            Keep${subQueryPropertyNameInitCap}(subQuery);
            RegisterInScopeSubQuery(subQuery, COL_${col.Name}, "${refferer.FirstLocalColumnName}", "${subQueryPropertyNameInitCap}");
        }

        abstract public void Keep${subQueryPropertyNameInitCap}(${reffererCQClassName} subQuery);
        #end
      #end
      #if (${col.hasSingleKeyReferrer()})
        #foreach ($refferer in $col.SingleKeyReferrers)
          #set ($reffererCQClassName = "${glProjectPrefix}${refferer.Table.JavaName}${glConditionQueryInitialName}")
          #set ($subQueryPropertyNameInitCap = "${tmpJavaName}_ExistsSubQuery_${refferer.ReffererPropertyNameInitCap}")
          #set ($subQueryPropertyName = "${tmpUncapitalisedJavaName}_ExistsSubQuery_${refferer.ReffererPropertyNameInitCap}")

        /// <summary>
        /// Set the sub-query of ${subQueryPropertyNameInitCap} using existsSubQuery.
        /// { exists (select xxx.${refferer.FirstLocalColumnName} from ${refferer.Table.Name} where ...) }
        /// This method use from clause and where clause of the sub-query instance.
        /// this query save the sub-query instance for query-value.
        /// After you invoke this, If you set query in the argument[subQuery], the query is ignored.
        /// </summary>
        /// <param name="subQuery">The sub-query of ${subQueryPropertyNameInitCap} using existsSubQuery. (NotNull)</param>
        public void Set${subQueryPropertyNameInitCap}(${reffererCQClassName} subQuery) {
            AssertObjectNotNull("subQuery", subQuery);
            Keep${subQueryPropertyNameInitCap}(subQuery);
            RegisterExistsSubQuery(subQuery, COL_${col.Name}, "${refferer.FirstLocalColumnName}", "${subQueryPropertyNameInitCap}");
        }

        abstract public void Keep${subQueryPropertyNameInitCap}(${reffererCQClassName} subQuery);
        #end
      #end
    #end
    #if (${col.isJavaNativeNumberObject()})
    
        /// <summary>
        /// Set the value of ${col.UncapitalisedJavaName} using equal. { = }
        /// </summary>
        /// <param name="value">The value of ${col.UncapitalisedJavaName} as equal.</param>
        public void Set${tmpJavaName}_Equal($col.JavaNative value) {
            Register${tmpJavaName}(${glConditionKeyName}.CK_EQUAL, value);
        }
      #if (${col.hasClassification()})
        #foreach ($classificationMap in $col.ClassificationMapList)

        /// <summary>
        /// Set the value od ${classificationMap.get('name')} of ${col.UncapitalisedJavaName} as equal. { = }
        /// </summary>
        public void Set${tmpJavaName}_Equal_${classificationMap.get('name')}() {
            String code = ${glClassificationDefinition}.CODE_${col.ClassificationName}_${classificationMap.get('name')};
            Register${tmpJavaName}(${glConditionKeyName}.CK_EQUAL, ${col.JavaNative}.Parse(code));
        }
        #end
      #end

        /// <summary>
        /// Set the value of ${col.UncapitalisedJavaName} using notEqual. { != }
        /// </summary>
        /// <param name="value">The value of ${col.UncapitalisedJavaName} as notEqual.</param>
        public void Set${tmpJavaName}_NotEqual($col.JavaNative value) {
            Register${tmpJavaName}(${glConditionKeyName}.CK_NOT_EQUAL, value);
        }

        /// <summary>
        /// Set the value of ${col.UncapitalisedJavaName} using greaterThan. { &gt; }
        /// </summary>
        /// <param name="value">The value of ${col.UncapitalisedJavaName} as greaterThan.</param>
        public void Set${tmpJavaName}_GreaterThan($col.JavaNative value) {
            Register${tmpJavaName}(${glConditionKeyName}.CK_GREATER_THAN, value);
        }

        /// <summary>
        /// Set the value of ${col.UncapitalisedJavaName} using lessThan. { &lt; }
        /// </summary>
        /// <param name="value">The value of ${col.UncapitalisedJavaName} as lessThan.</param>
        public void Set${tmpJavaName}_LessThan($col.JavaNative value) {
            Register${tmpJavaName}(${glConditionKeyName}.CK_LESS_THAN, value);
        }

        /// <summary>
        /// Set the value of ${col.UncapitalisedJavaName} using greaterEqual. { &gt;= }
        /// </summary>
        /// <param name="value">The value of ${col.UncapitalisedJavaName} as greaterEqual.</param>
        public void Set${tmpJavaName}_GreaterEqual($col.JavaNative value) {
            Register${tmpJavaName}(${glConditionKeyName}.CK_GREATER_EQUAL, value);
        }

        /// <summary>
        /// Set the value of ${col.UncapitalisedJavaName} using lessEqual. { &lt;= }
        /// </summary>
        /// <param name="value">The value of ${col.UncapitalisedJavaName} as lessEqual.</param>
        public void Set${tmpJavaName}_LessEqual($col.JavaNative value) {
            Register${tmpJavaName}(${glConditionKeyName}.CK_LESS_EQUAL, value);
        }

        /// <summary>
        /// Set the value of ${col.UncapitalisedJavaName} using inScope. { in ('a', 'b') }
        /// If the element in the list is null or empty-string, the condition-element is ignored.
        /// </summary>
        /// <param name="valueList">The value of ${col.UncapitalisedJavaName} as inScope.</param>
        public void Set${tmpJavaName}_InScope(System.Collections.IList valueList) {
            Register${tmpJavaName}(${glConditionKeyName}.CK_IN_SCOPE, FilterRemoveEmptyStringFromList(valueList));
        }

        /// <summary>
        /// Set the value of ${col.UncapitalisedJavaName} using notInScope. { not in ('a', 'b') }
        /// If the element in the list is null or empty-string, the condition-element is ignored.
        /// </summary>
        /// <param name="valueList">The value of ${col.UncapitalisedJavaName} as notInScope.</param>
        public void Set${tmpJavaName}_NotInScope(System.Collections.IList valueList) {
            Register${tmpJavaName}(${glConditionKeyName}.CK_NOT_IN_SCOPE, FilterRemoveEmptyStringFromList(valueList));
        }
      #if (${col.hasSingleKeyReferrer()})
        #foreach ($refferer in $col.SingleKeyReferrers)
          #set ($reffererCQClassName = "${glProjectPrefix}${refferer.Table.JavaName}${glConditionQueryInitialName}")
          #set ($subQueryPropertyNameInitCap = "${tmpJavaName}_InScopeSubQuery_${refferer.ReffererPropertyNameInitCap}")
          #set ($subQueryPropertyName = "${tmpUncapitalisedJavaName}_InScopeSubQuery_${refferer.ReffererPropertyNameInitCap}")

        /// <summary>
        /// Set the sub-query of ${subQueryPropertyNameInitCap} using inScopeSubQuery.
        /// { in (select xxx.${refferer.FirstLocalColumnName} from ${refferer.Table.Name} where ...) }
        /// This method use from clause and where clause of the sub-query instance.
        /// this query save the sub-query instance for query-value.
        /// After you invoke this, If you set query in the argument[subQuery], the query is ignored.
        /// </summary>
        /// <param name="subQuery">The sub-query of ${subQueryPropertyNameInitCap} using inScopeSubQuery. (NotNull)</param>
        public void Set${subQueryPropertyNameInitCap}(${reffererCQClassName} subQuery) {
            AssertObjectNotNull("subQuery", subQuery);
            Keep${subQueryPropertyNameInitCap}(subQuery);
            RegisterInScopeSubQuery(subQuery, COL_${col.Name}, "${refferer.FirstLocalColumnName}", "${subQueryPropertyNameInitCap}");
        }

        abstract public void Keep${subQueryPropertyNameInitCap}(${reffererCQClassName} subQuery);
        #end
      #end
      #if (${col.hasSingleKeyReferrer()})
        #foreach ($refferer in $col.SingleKeyReferrers)
          #set ($reffererCQClassName = "${glProjectPrefix}${refferer.Table.JavaName}${glConditionQueryInitialName}")
          #set ($subQueryPropertyNameInitCap = "${tmpJavaName}_ExistsSubQuery_${refferer.ReffererPropertyNameInitCap}")
          #set ($subQueryPropertyName = "${tmpUncapitalisedJavaName}_ExistsSubQuery_${refferer.ReffererPropertyNameInitCap}")

        /// <summary>
        /// Set the sub-query of ${subQueryPropertyNameInitCap} using existsSubQuery.
        /// { exists (select xxx.${refferer.FirstLocalColumnName} from ${refferer.Table.Name} where ...) }
        /// This method use from clause and where clause of the sub-query instance.
        /// this query save the sub-query instance for query-value.
        /// After you invoke this, If you set query in the argument[subQuery], the query is ignored.
        /// </summary>
        /// <param name="subQuery">The sub-query of ${subQueryPropertyNameInitCap} using existsSubQuery. (NotNull)</param>
        public void Set${subQueryPropertyNameInitCap}(${reffererCQClassName} subQuery) {
            AssertObjectNotNull("subQuery", subQuery);
            Keep${subQueryPropertyNameInitCap}(subQuery);
            RegisterExistsSubQuery(subQuery, COL_${col.Name}, "${refferer.FirstLocalColumnName}", "${subQueryPropertyNameInitCap}");
        }

        abstract public void Keep${subQueryPropertyNameInitCap}(${reffererCQClassName} subQuery);
        #end
      #end
    #end
    #if (${col.isJavaNativeDateObject()})
    
        /// <summary>
        /// Set the value of ${col.UncapitalisedJavaName} using equal. { = }
        /// </summary>
        /// <param name="value">The value of ${col.UncapitalisedJavaName} as equal.</param>
        public void Set${tmpJavaName}_Equal($col.JavaNative value) {
            Register${tmpJavaName}(${glConditionKeyName}.CK_EQUAL, value);
        }

        /// <summary>
        /// Set the value of ${col.UncapitalisedJavaName} using notEqual. { != }
        /// </summary>
        /// <param name="value">The value of ${col.UncapitalisedJavaName} as notEqual.</param>
        public void Set${tmpJavaName}_NotEqual($col.JavaNative value) {
            Register${tmpJavaName}(${glConditionKeyName}.CK_NOT_EQUAL, value);
        }

        /// <summary>
        /// Set the value of ${col.UncapitalisedJavaName} using greaterThan. { &gt; }
        /// </summary>
        /// <param name="value">The value of ${col.UncapitalisedJavaName} as greaterThan.</param>
        public void Set${tmpJavaName}_GreaterThan($col.JavaNative value) {
            Register${tmpJavaName}(${glConditionKeyName}.CK_GREATER_THAN, value);
        }

        /// <summary>
        /// Set the value of ${col.UncapitalisedJavaName} using lessThan. { &lt; }
        /// </summary>
        /// <param name="value">The value of ${col.UncapitalisedJavaName} as lessThan.</param>
        public void Set${tmpJavaName}_LessThan($col.JavaNative value) {
            Register${tmpJavaName}(${glConditionKeyName}.CK_LESS_THAN, value);
        }

        /// <summary>
        /// Set the value of ${col.UncapitalisedJavaName} using greaterEqual. { &gt;= }
        /// </summary>
        /// <param name="value">The value of ${col.UncapitalisedJavaName} as greaterEqual.</param>
        public void Set${tmpJavaName}_GreaterEqual($col.JavaNative value) {
            Register${tmpJavaName}(${glConditionKeyName}.CK_GREATER_EQUAL, value);
        }

        /// <summary>
        /// Set the value of ${col.UncapitalisedJavaName} using lessEqual. { &lt;= }
        /// </summary>
        /// <param name="value">The value of ${col.UncapitalisedJavaName} as lessEqual.</param>
        public void Set${tmpJavaName}_LessEqual($col.JavaNative value) {
            Register${tmpJavaName}(${glConditionKeyName}.CK_LESS_EQUAL, value);
        }
    #end
    #if (${col.isJavaNativeBooleanObject()})
    
        /// <summary>
        /// Set the value of ${col.UncapitalisedJavaName} using equal. { = }
        /// </summary>
        /// <param name="value">The value of ${col.UncapitalisedJavaName} as equal.</param>
        public void Set${tmpJavaName}_Equal($col.JavaNative value) {
            Register${tmpJavaName}(${glConditionKeyName}.CK_EQUAL, value);
        }
    #end
    #if (${col.isJavaNativeBinaryObject()})
    #end
    #if (!${col.isNotNull()})

        /// <summary>
        /// Set the value of ${col.UncapitalisedJavaName} using isNull. { is null }
        /// </summary>
        public void Set${tmpJavaName}_IsNull() {
            Register${tmpJavaName}(${glConditionKeyName}.CK_IS_NULL, DUMMY_OBJECT);
        }

        /// <summary>
        /// Set the value of ${col.UncapitalisedJavaName} using isNotNull. { is not null }
        /// </summary>
        public void Set${tmpJavaName}_IsNotNull() {
            Register${tmpJavaName}(${glConditionKeyName}.CK_IS_NOT_NULL, DUMMY_OBJECT);
        }
    #end
    
        /// <summary>
        /// Register condition of ${col.UncapitalisedJavaName}.
        /// </summary>
        /// <param name="key">Condition key. (NotNull)</param>
        /// <param name="value">The value of ${col.UncapitalisedJavaName}. (Nullable)</param>
        protected void Register${tmpJavaName}(${glConditionKeyName} key, Object value) {
            RegisterQuery(key, value, GetCValue${tmpJavaName}(), COL_${col.Name}, J_${col.JavaName}, UJ_${col.UncapitalisedJavaName});
        }

        /// <summary>
        /// Register inline condition of ${col.UncapitalisedJavaName}.
        /// </summary>
        /// <param name="key">Condition key. (NotNull)</param>
        /// <param name="value">The value of ${col.UncapitalisedJavaName}. (Nullable)</param>
        /// <returns>this. (NotNull)</returns>
        protected void RegisterInline${tmpJavaName}(${glConditionKeyName} key, Object value) {
            RegisterInlineQuery(key, value, GetCValue${tmpJavaName}(), COL_${col.Name}, J_${col.JavaName}, UJ_${col.UncapitalisedJavaName});
        }

        abstract protected ${glConditionValueName} GetCValue${tmpJavaName}();
  #end

        // =====================================================================================
        //                                                                 Basic-Override Method
        //                                                                 =====================
        /// <summary>
        /// This method overrides the method that is declared at super.
        /// </summary>
        /// <returns>Clause string. (NotNull)</returns>
        public override String ToString() {
            return GetSqlClause().GetClause();
        }
    }
}
