#set ($myClassName = "")
#if ($database.isJavaDirOnlyOne())

using ${glPackageCQ};
  #set ($myClassName = "${myBaseConditionQueryClassName}")
#else

using ${glPackageBaseCQ};
  #set ($myClassName = "${myConditionQueryClassName}")
#end

using System;
using System.Collections;

using ${glPackageBaseCommon};
using ${glPackageBaseCommonCBean};
using ${glPackageBaseCommonCKey};
using ${glPackageBaseCommonCValue};
using ${glPackageBaseCommonSqlClause};

using ${glPackageCIQ};

#if ($database.isJavaDirOnlyOne())

namespace ${glPackageBaseCQ} {
#else

namespace ${glPackageCQ} {
#end

    /// <summary>
    /// The condition-query of {table.Name}.
    /// Author: ${database.ClassAuthor}
    /// </summary>
    [System.Serializable]
    public class ${myClassName} : ${myAbstractBaseConditionQueryClassName} {

        // =====================================================================================
        //                                                                             Attribute
        //                                                                             =========
        protected ${myConditionInlineQueryClassName} _inlineQuery;

        // =====================================================================================
        //                                                                           Constructor
        //                                                                           ===========
        /// <summary>
        /// Constructor.
        /// </summary>
        /// <param name="childQuery">Child query as interfaec. (Nullable: If null, this is base instance.)</param>
        /// <param name="sqlClause">SQL clause instance. (NotNull)</param>
        /// <param name="aliasName">My alias name. (NotNull)</param>
        /// <param name="nestLevel">Nest level.</param>
        public ${myClassName}(${glConditionQueryInterfaceName} childQuery, ${glSqlClauseName} sqlClause, String aliasName, int nestLevel)
            : base(childQuery, sqlClause, aliasName, nestLevel) {}

        // =====================================================================================
        //                                                                                Inline
        //                                                                                ======
        /**
         * Get inline query.
         * 
         * @return Inline query. (NotNull)
         */
        public ${myConditionInlineQueryClassName} Inline() {
            if (_inlineQuery == null) {
                _inlineQuery = new ${myConditionInlineQueryClassName}(GetChildQuery(), GetSqlClause(), GetAliasName(), GetNestLevel(), this);
            }
            return _inlineQuery;
        }

        // =====================================================================================
        //                                                                         IncludeAsMine
        //                                                                         =============
  #foreach ($col in $table.Columns)

        /// <summary>
        /// Include select-column of ${col.UncapitalisedJavaName} as mine.
        /// Alias name is java-name of this column.
        /// Be careful to whether your table have the same column.
        /// </summary>
        public void IncludeAsMine_${col.JavaName}() {
            RegisterIncludedSelectColumn("${col.JavaName}", GetRealColumnName("${col.Name}"));
        }

        /// <summary>
        /// Include select-column of ${col.UncapitalisedJavaName} as mine.
        /// </summary>
        /// <param name="aliasName">Alias name. {select columnName as aliasName from ...} This should not contain comma. (NotNull)</param>
        public void IncludeAsMine_${col.JavaName}(String aliasName) {
            RegisterIncludedSelectColumn(aliasName, GetRealColumnName("${col.Name}"));
        }
  #end

        // =====================================================================================
        //                                                                                 Query
        //                                                                                 =====
  ## --------------------------------------------------------------------------------
  ##                                                  Make getter and setter methods.
  ##                                                  -------------------------------

        // /* * * * * * * * * * * * * * * * * * * * * * *
        //   MyTable = [$table.Name]
        // * * * * * * * * */

  #foreach ($col in $table.Columns)
    #set ($tmpJavaName = "${col.JavaName}")
    #set ($tmpUncapitalisedJavaName = "${col.UncapitalisedJavaName}")

        /// <summary> The attribute of ${col.UncapitalisedJavaName}. </summary>
        protected ${glConditionValueName} _${tmpUncapitalisedJavaName};

        /// <summary>
        /// Get the value of ${col.UncapitalisedJavaName}.
        /// </summary>
        /// <returns>The value of ${col.UncapitalisedJavaName}.</returns>
        public ${glConditionValueName} ${tmpJavaName} {
            get {
                if (_${tmpUncapitalisedJavaName} == null) {
                    _${tmpUncapitalisedJavaName} = new ${glConditionValueName}();
                }
                return _${tmpUncapitalisedJavaName};
            }
        }

        protected override ${glConditionValueName} GetCValue${tmpJavaName}() {
            return this.${tmpJavaName};
        }

    #if (${col.isJavaNativeStringObject()})
      #if ($database.isMakeDeprecated())
        #if (${col.isAvailableStringEqualOldAsInline()})

        /// <summary>
        /// Set the value of ${col.UncapitalisedJavaName} using equal as inline. { = }
        /// If the value is null or empty-string, this condition is ignored.
        /// </summary>
        /// <param name="value">The value of ${col.UncapitalisedJavaName} as equal.</param>
        public void Set${tmpJavaName}_Equal_AsInline($col.JavaNative value) {
            RegisterInline${tmpJavaName}(${glConditionKeyName}.CK_EQUAL, FilterRemoveEmptyString(value));
        }
          #if (${col.hasClassification()})
            #foreach ($classificationMap in $col.ClassificationMapList)

        /// <summary>
        /// Set the value od ${classificationMap.get('name')} of ${col.UncapitalisedJavaName} as equal as inline. { = }
        /// </summary>
        public void Set${tmpJavaName}_Equal_${classificationMap.get('name')}_AsInline() {
            RegisterInline${tmpJavaName}(${glConditionKeyName}.CK_EQUAL, ${glClassificationDefinition}.CODE_${col.ClassificationName}_${classificationMap.get('name')});
        }
            #end
          #end
        #end
      #if (${col.isAvailableStringNotEqualOldAsInline()})

        /// <summary>
        /// Set the value of ${col.UncapitalisedJavaName} using notEqual as inline. { != }
        /// If the value is null or empty-string, this condition is ignored.
        /// </summary>
        /// <param name="value">The value of ${col.UncapitalisedJavaName} as notEqual.</param>
        public void Set${tmpJavaName}_NotEqual_AsInline($col.JavaNative value) {
            RegisterInline${tmpJavaName}(${glConditionKeyName}.CK_NOT_EQUAL, FilterRemoveEmptyString(value));
        }
      #end
      #if (${col.isAvailableStringGreaterThanOldAsInline()})

        /// <summary>
        /// Set the value of ${col.UncapitalisedJavaName} using greaterThan as inline. { &gt; }
        /// If the value is null or empty-string, this condition is ignored.
        /// </summary>
        /// <param name="value">The value of ${col.UncapitalisedJavaName} as greaterThan.</param>
        public void Set${tmpJavaName}_GreaterThan_AsInline($col.JavaNative value) {
            RegisterInline${tmpJavaName}(${glConditionKeyName}.CK_GREATER_THAN, FilterRemoveEmptyString(value));
        }
      #end
      #if (${col.isAvailableStringLessThanOldAsInline()})

        /// <summary>
        /// Set the value of ${col.UncapitalisedJavaName} using lessThan as inline. { &lt; }
        /// If the value is null or empty-string, this condition is ignored.
        /// </summary>
        /// <param name="value">The value of ${col.UncapitalisedJavaName} as lessThan.</param>
        public void Set${tmpJavaName}_LessThan_AsInline($col.JavaNative value) {
            RegisterInline${tmpJavaName}(${glConditionKeyName}.CK_LESS_THAN, FilterRemoveEmptyString(value));
        }
      #end
      #if (${col.isAvailableStringGreaterEqualOldAsInline()})

        /// <summary>
        /// Set the value of ${col.UncapitalisedJavaName} using greaterEqual as inline. { &gt;= }
        /// If the value is null or empty-string, this condition is ignored.
        /// </summary>
        /// <param name="value">The value of ${col.UncapitalisedJavaName} as greaterEqual.</param>
        public void Set${tmpJavaName}_GreaterEqual_AsInline($col.JavaNative value) {
            RegisterInline${tmpJavaName}(${glConditionKeyName}.CK_GREATER_EQUAL, FilterRemoveEmptyString(value));
        }
      #end
      #if (${col.isAvailableStringLessEqualOldAsInline()})

        /// <summary>
        /// Set the value of ${col.UncapitalisedJavaName} using lessEqual as inline. { &lt;= }
        /// If the value is null or empty-string, this condition is ignored.
        /// </summary>
        /// <param name="value">The value of ${col.UncapitalisedJavaName} as lessEqual.</param>
        public void Set${tmpJavaName}_LessEqual_AsInline($col.JavaNative value) {
            RegisterInline${tmpJavaName}(${glConditionKeyName}.CK_LESS_EQUAL, FilterRemoveEmptyString(value));
        }
      #end
      #if (${col.isAvailableStringPrefixSearchOldAsInline()})

        /// <summary>
        /// Set the value of ${col.UncapitalisedJavaName} using prefixSearch as inline. { like 'xxx%' }
        /// If the value is null or empty-string, this condition is ignored.
        /// </summary>
        /// <param name="value">The value of ${col.UncapitalisedJavaName} as prefixSearch.</param>
        public void Set${tmpJavaName}_PrefixSearch_AsInline($col.JavaNative value) {
            RegisterInline${tmpJavaName}(${glConditionKeyName}.CK_PREFIX_SEARCH, FilterRemoveEmptyString(value));
        }
      #end
      #end
      #if (${col.isSingleKeyForeignKey()})
        #set ($relatedCQClassName = "${glProjectPrefix}${col.foreignKey.foreignTable.javaName}CQ")
        #set ($subQueryPropertyNameInitCap = "${tmpJavaName}_InScopeSubQuery_${col.foreignKey.foreignPropertyNameInitCap}")
        #set ($subQueryPropertyName = "${tmpUncapitalisedJavaName}_InScopeSubQuery_${col.foreignKey.foreignPropertyNameInitCap}")

        /// <summary>The sub-query of ${subQueryPropertyNameInitCap} using inScopeSubQuery.</summary>
        protected ${relatedCQClassName} _${subQueryPropertyName};

        /// <summary>
        /// The property of sub-query of ${subQueryPropertyNameInitCap} using inScopeSubQuery.
        /// </summary>
        public ${relatedCQClassName} ${subQueryPropertyNameInitCap} {
            get { return _${subQueryPropertyName}; }
        }

        public override void Keep${subQueryPropertyNameInitCap}(${relatedCQClassName} subQuery) {
            _${subQueryPropertyName} = subQuery;
        }
      #end
      #if (${col.hasSingleKeyReferrer()})
        #foreach ($refferer in $col.SingleKeyReferrers)
          #set ($relatedCQClassName = "${glProjectPrefix}${refferer.Table.JavaName}${glConditionQueryInitialName}")
          #set ($subQueryPropertyNameInitCap = "${tmpJavaName}_InScopeSubQuery_${refferer.ReffererPropertyNameInitCap}")
          #set ($subQueryPropertyName = "${tmpUncapitalisedJavaName}_InScopeSubQuery_${refferer.ReffererPropertyNameInitCap}")

        /// <summary>The sub-query of ${subQueryPropertyNameInitCap} using inScopeSubQuery.</summary>
        protected ${relatedCQClassName} _${subQueryPropertyName};

        /// <summary>
        /// The property of sub-query of ${subQueryPropertyNameInitCap} using inScopeSubQuery.
        /// </summary>
        public ${relatedCQClassName} ${subQueryPropertyNameInitCap} {
            get { return _${subQueryPropertyName}; }
        }

        public override void Keep${subQueryPropertyNameInitCap}(${relatedCQClassName} subQuery) {
            _${subQueryPropertyName} = subQuery;
        }
          #if ($database.isMakeDeprecated())
            #if (${col.isAvailableStringInScopeSubQueryOldAsInline()})

        /// <summary>The sub-query of ${subQueryPropertyNameInitCap} using inScopeSubQuery as inline.</summary>
        protected ${relatedCQClassName} _${subQueryPropertyName}_AsInline;

        /// <summary>
        /// The property of sub-query of ${subQueryPropertyNameInitCap} using inScopeSubQuery as inline.
        /// </summary>
        public ${relatedCQClassName} ${subQueryPropertyNameInitCap}_AsInline {
            get { return _${subQueryPropertyName}_AsInline; }
        }

        /// <summary>
        /// Set the sub-query of ${subQueryPropertyNameInitCap} using inScopeSubQuery as inline.
        /// { in (select xxx.${refferer.FirstLocalColumnName} from ${refferer.Table.Name} where ...) }
        /// This method use from clause and where clause of the sub-query instance.
        /// this query save the sub-query instance for query-value.
        /// After you invoke this, If you set query in the argument[subQuery], the query is ignored.
        /// </summary>
        /// <param name="subQuery">The sub-query of ${subQueryPropertyNameInitCap} using inScopeSubQuery as inline. (NotNull)</param>
        public void Set${subQueryPropertyNameInitCap}_AsInline(${relatedCQClassName} subQuery) {
            AssertObjectNotNull("subQuery", subQuery);
            _${subQueryPropertyName}_AsInline = subQuery;// for saving query-value.
            RegisterInlineInScopeSubQuery(subQuery, "${col.name}", "${refferer.FirstLocalColumnName}", "${subQueryPropertyNameInitCap}_AsInline");
        }
            #end
          #end
        #end
      #end
      #if (${col.hasSingleKeyReferrer()})
        #foreach ($refferer in $col.SingleKeyReferrers)
          #if (!$refferer.isSelfReference())
            #set ($relatedCQClassName = "${glProjectPrefix}${refferer.Table.JavaName}${glConditionQueryInitialName}")
            #set ($subQueryPropertyNameInitCap = "${tmpJavaName}_ExistsSubQuery_${refferer.ReffererPropertyNameInitCap}")
            #set ($subQueryPropertyName = "${tmpUncapitalisedJavaName}_ExistsSubQuery_${refferer.ReffererPropertyNameInitCap}")

        /// <summary>The sub-query of ${subQueryPropertyNameInitCap} using existsSubQuery.</summary>
        protected ${relatedCQClassName} _${subQueryPropertyName};

        /// <summary>
        /// The property of sub-query of ${subQueryPropertyNameInitCap} using existsSubQuery.
        /// </summary>
        public ${relatedCQClassName} ${subQueryPropertyNameInitCap} {
            get { return _${subQueryPropertyName}; }
        }

        public override void Keep${subQueryPropertyNameInitCap}(${relatedCQClassName} subQuery) {
            _${subQueryPropertyName} = subQuery;
        }
          #end
        #end
      #end
    #end
    #if (${col.isJavaNativeNumberObject()})
      #if ($database.isMakeDeprecated())
        #if (${col.isAvailableNumberEqualOldAsInline()})

        /// <summary>
        /// Set the value of ${col.UncapitalisedJavaName} using equal as inline. { = }
        /// </summary>
        /// <param name="value">The value of ${col.UncapitalisedJavaName} as equal.</param>
        public void Set${tmpJavaName}_Equal_AsInline($col.JavaNative value) {
            RegisterInline${tmpJavaName}(${glConditionKeyName}.CK_EQUAL, value);
        }
          #if (${col.hasClassification()})
            #foreach ($classificationMap in $col.ClassificationMapList)

        /// <summary>
        /// Set the value od ${classificationMap.get('name')} of ${col.UncapitalisedJavaName} as equal as inline. { = }
        /// </summary>
        public void Set${tmpJavaName}_Equal_${classificationMap.get('name')}_AsInline() {
            String code = ${glClassificationDefinition}.CODE_${col.ClassificationName}_${classificationMap.get('name')};
            RegisterInline${tmpJavaName}(${glConditionKeyName}.CK_EQUAL, ${col.JavaNative}.Parse(code));
        }
            #end
          #end
        #end
      #if (${col.isAvailableNumberNotEqualOldAsInline()})

        /// <summary>
        /// Set the value of ${col.UncapitalisedJavaName} using notEqual as inline. { != }
        /// </summary>
        /// <param name="value">The value of ${col.UncapitalisedJavaName} as notEqual.</param>
        public void Set${tmpJavaName}_NotEqual_AsInline($col.JavaNative value) {
            RegisterInline${tmpJavaName}(${glConditionKeyName}.CK_NOT_EQUAL, value);
        }
      #end
      #if (${col.isAvailableNumberGreaterThanOldAsInline()})

        /// <summary>
        /// Set the value of ${col.UncapitalisedJavaName} using greaterThan as inline. { &gt; }
        /// </summary>
        /// <param name="value">The value of ${col.UncapitalisedJavaName} as greaterThan.</param>
        public void Set${tmpJavaName}_GreaterThan_AsInline($col.JavaNative value) {
            RegisterInline${tmpJavaName}(${glConditionKeyName}.CK_GREATER_THAN, value);
        }
      #end
      #if (${col.isAvailableNumberLessThanOldAsInline()})

        /// <summary>
        /// Set the value of ${col.UncapitalisedJavaName} using lessThan as inline. { &lt; }
        /// </summary>
        /// <param name="value">The value of ${col.UncapitalisedJavaName} as lessThan.</param>
        public void Set${tmpJavaName}_LessThan_AsInline($col.JavaNative value) {
            RegisterInline${tmpJavaName}(${glConditionKeyName}.CK_LESS_THAN, value);
        }
      #end
      #if (${col.isAvailableNumberGreaterEqualOldAsInline()})

        /// <summary>
        /// Set the value of ${col.UncapitalisedJavaName} using greaterEqual as inline. { &gt;= }
        /// </summary>
        /// <param name="value">The value of ${col.UncapitalisedJavaName} as greaterEqual.</param>
        public void Set${tmpJavaName}_GreaterEqual_AsInline($col.JavaNative value) {
            RegisterInline${tmpJavaName}(${glConditionKeyName}.CK_GREATER_EQUAL, value);
        }
      #end
      #if (${col.isAvailableNumberLessEqualOldAsInline()})

        /// <summary>
        /// Set the value of ${col.UncapitalisedJavaName} using lessEqual as inline. { &lt;= }
        /// </summary>
        /// <param name="value">The value of ${col.UncapitalisedJavaName} as lessEqual.</param>
        public void Set${tmpJavaName}_LessEqual_AsInline($col.JavaNative value) {
            RegisterInline${tmpJavaName}(${glConditionKeyName}.CK_LESS_EQUAL, value);
        }
      #end
      #end
      #if (${col.isSingleKeyForeignKey()})
        #set ($relatedCQClassName = "${glProjectPrefix}${col.foreignKey.foreignTable.javaName}CQ")
        #set ($subQueryPropertyNameInitCap = "${tmpJavaName}_InScopeSubQuery_${col.foreignKey.foreignPropertyNameInitCap}")
        #set ($subQueryPropertyName = "${tmpUncapitalisedJavaName}_InScopeSubQuery_${col.foreignKey.foreignPropertyNameInitCap}")

        /// <summary>The sub-query of ${subQueryPropertyNameInitCap} using inScopeSubQuery.</summary>
        protected ${relatedCQClassName} _${subQueryPropertyName};

        /// <summary>
        /// The property of sub-query of ${subQueryPropertyNameInitCap} using inScopeSubQuery.
        /// </summary>
        public ${relatedCQClassName} ${subQueryPropertyNameInitCap} {
            get { return _${subQueryPropertyName}; }
        }

        public override void Keep${subQueryPropertyNameInitCap}(${relatedCQClassName} subQuery) {
            _${subQueryPropertyName} = subQuery;
        }
      #end
      #if (${col.hasSingleKeyReferrer()})
        #foreach ($refferer in $col.SingleKeyReferrers)
          #set ($relatedCQClassName = "${glProjectPrefix}${refferer.Table.JavaName}${glConditionQueryInitialName}")
          #set ($subQueryPropertyNameInitCap = "${tmpJavaName}_InScopeSubQuery_${refferer.ReffererPropertyNameInitCap}")
          #set ($subQueryPropertyName = "${tmpUncapitalisedJavaName}_InScopeSubQuery_${refferer.ReffererPropertyNameInitCap}")

        /// <summary>The sub-query of ${subQueryPropertyNameInitCap} using inScopeSubQuery.</summary>
        protected ${relatedCQClassName} _${subQueryPropertyName};

        /// <summary>
        /// The property of sub-query of ${subQueryPropertyNameInitCap} using inScopeSubQuery.
        /// </summary>
        public ${relatedCQClassName} ${subQueryPropertyNameInitCap} {
            get { return _${subQueryPropertyName}; }
        }

        public override void Keep${subQueryPropertyNameInitCap}(${relatedCQClassName} subQuery) {
            _${subQueryPropertyName} = subQuery;
        }
          #if ($database.isMakeDeprecated())
            #if (${col.isAvailableNumberInScopeSubQueryOldAsInline()})

        /// <summary>The sub-query of ${subQueryPropertyNameInitCap} using inScopeSubQuery as inline.</summary>
        protected ${relatedCQClassName} _${subQueryPropertyName}_AsInline;

        /// <summary>
        /// The property of sub-query of ${subQueryPropertyNameInitCap} using inScopeSubQuery as inline.
        /// </summary>
        public ${relatedCQClassName} ${subQueryPropertyNameInitCap}_AsInline {
            get { return _${subQueryPropertyName}_AsInline; }
        }

        /// <summary>
        /// Set the sub-query of ${subQueryPropertyNameInitCap} using inScopeSubQuery as inline.
        /// { in (select xxx.${refferer.FirstLocalColumnName} from ${refferer.Table.Name} where ...) }
        /// This method use from clause and where clause of the sub-query instance.
        /// this query save the sub-query instance for query-value.
        /// After you invoke this, If you set query in the argument[subQuery], the query is ignored.
        /// </summary>
        /// <param name="subQuery">The sub-query of ${subQueryPropertyNameInitCap} using inScopeSubQuery as inline. (NotNull)</param>
        public void Set${subQueryPropertyNameInitCap}_AsInline(${relatedCQClassName} subQuery) {
            AssertObjectNotNull("subQuery", subQuery);
            _${subQueryPropertyName}_AsInline = subQuery;// for saving query-value.
            RegisterInlineInScopeSubQuery(subQuery, "${col.name}", "${refferer.FirstLocalColumnName}", "${subQueryPropertyNameInitCap}_AsInline");
        }
            #end
          #end
        #end
      #end
      #if (${col.hasSingleKeyReferrer()})
        #foreach ($refferer in $col.SingleKeyReferrers)
          #if (!$refferer.isSelfReference())
            #set ($relatedCQClassName = "${glProjectPrefix}${refferer.Table.JavaName}${glConditionQueryInitialName}")
            #set ($subQueryPropertyNameInitCap = "${tmpJavaName}_ExistsSubQuery_${refferer.ReffererPropertyNameInitCap}")
            #set ($subQueryPropertyName = "${tmpUncapitalisedJavaName}_ExistsSubQuery_${refferer.ReffererPropertyNameInitCap}")

        /// <summary>The sub-query of ${subQueryPropertyNameInitCap} using existsSubQuery.</summary>
        protected ${relatedCQClassName} _${subQueryPropertyName};

        /// <summary>
        /// The property of sub-query of ${subQueryPropertyNameInitCap} using existsSubQuery.
        /// </summary>
        public ${relatedCQClassName} ${subQueryPropertyNameInitCap} {
            get { return _${subQueryPropertyName}; }
        }

        public override void Keep${subQueryPropertyNameInitCap}(${relatedCQClassName} subQuery) {
            _${subQueryPropertyName} = subQuery;
        }
          #end
        #end
      #end
    #end
    #if (${col.isJavaNativeDateObject()})
      #if ($database.isMakeDeprecated())
        #if (${col.isAvailableDateEqualOldAsInline()})

        /// <summary>
        /// Set the value of ${col.UncapitalisedJavaName} using equal as inline. { = }
        /// </summary>
        /// <param name="value">The value of ${col.UncapitalisedJavaName} as equal.</param>
        public void Set${tmpJavaName}_Equal_AsInline($col.JavaNative value) {
            RegisterInline${tmpJavaName}(${glConditionKeyName}.CK_EQUAL, value);
        }
        #end
      #if (${col.isAvailableDateNotEqualOldAsInline()})

        /// <summary>
        /// Set the value of ${col.UncapitalisedJavaName} using notEqual as inline. { != }
        /// </summary>
        /// <param name="value">The value of ${col.UncapitalisedJavaName} as notEqual.</param>
        public void Set${tmpJavaName}_NotEqual_AsInline($col.JavaNative value) {
            RegisterInline${tmpJavaName}(${glConditionKeyName}.CK_NOT_EQUAL, value);
        }
      #end
      #if (${col.isAvailableDateGreaterThanOldAsInline()})

        /// <summary>
        /// Set the value of ${col.UncapitalisedJavaName} using greaterThan as inline. { &gt; }
        /// </summary>
        /// <param name="value">The value of ${col.UncapitalisedJavaName} as greaterThan.</param>
        public void Set${tmpJavaName}_GreaterThan_AsInline($col.JavaNative value) {
            RegisterInline${tmpJavaName}(${glConditionKeyName}.CK_GREATER_THAN, value);
        }
      #end
      #if (${col.isAvailableDateLessThanOldAsInline()})

        /// <summary>
        /// Set the value of ${col.UncapitalisedJavaName} using lessThan as inline. { &lt; }
        /// </summary>
        /// <param name="value">The value of ${col.UncapitalisedJavaName} as lessThan.</param>
        public void Set${tmpJavaName}_LessThan_AsInline($col.JavaNative value) {
            RegisterInline${tmpJavaName}(${glConditionKeyName}.CK_LESS_THAN, value);
        }
      #end
      #if (${col.isAvailableDateGreaterEqualOldAsInline()})

        /// <summary>
        /// Set the value of ${col.UncapitalisedJavaName} using greaterEqual as inline. { &gt;= }
        /// </summary>
        /// <param name="value">The value of ${col.UncapitalisedJavaName} as greaterEqual.</param>
        public void Set${tmpJavaName}_GreaterEqual_AsInline($col.JavaNative value) {
            RegisterInline${tmpJavaName}(${glConditionKeyName}.CK_GREATER_EQUAL, value);
        }
      #end
      #if (${col.isAvailableDateLessEqualOldAsInline()})

        /// <summary>
        /// Set the value of ${col.UncapitalisedJavaName} using lessEqual as inline. { &lt;= }
        /// </summary>
        /// <param name="value">The value of ${col.UncapitalisedJavaName} as lessEqual.</param>
        public void Set${tmpJavaName}_LessEqual_AsInline($col.JavaNative value) {
            RegisterInline${tmpJavaName}(${glConditionKeyName}.CK_LESS_EQUAL, value);
        }
      #end
      #end
    #end
    #if (${col.isJavaNativeBooleanObject()})
    #end
    #if (${col.isJavaNativeBinaryObject()})
    #end
    #if (!${col.isNotNull()})
    #end

        /// <summary>
        /// Add order-by of ${col.UncapitalisedJavaName} as ASC. { ex) order by primaryKey asc }
        /// </summary>
        /// <returns>this. (NotNull)</returns>
        public ${myClassName} AddOrderBy_${tmpJavaName}_Asc() {
            GetSqlClause().RegisterOrderBy(GetRealColumnName("${col.name}"), true);return this;
        }

        /// <summary>
        /// Add order-by of ${col.UncapitalisedJavaName} as DESC. { ex) order by primaryKey desc }
        /// </summary>
        /// <returns>this. (NotNull)</returns>
        public ${myClassName} AddOrderBy_${tmpJavaName}_Desc() {
            GetSqlClause().RegisterOrderBy(GetRealColumnName("${col.name}"), false);return this;
        }

  #end

        // =====================================================================================
        //                                                               Query-SetupOuter-Method
        //                                                               =======================
  #foreach ($foreignKeys in $table.ForeignKeys)
    #set ($foreignCQClassName = "${glProjectPrefix}${foreignKeys.foreignTable.JavaName}${glConditionQueryInitialName}")
    
        // /* * * * * * * * * * * * * * * * * * * * * * *
        //   ForeignTable    = [${foreignKeys.ForeignTable.Name}]
        //   ForeignProperty = [${foreignKeys.ForeignPropertyName}]
        // * * * * * * * * */

        /// <summary>
        /// Query for ${foreignKeys.ForeignPropertyName}.
        /// </summary>
        /// <returns>Instance of ${foreignCQClassName} as ${foreignKeys.ForeignPropertyName}. (NotNull)</returns>
        public ${foreignCQClassName} Query${foreignKeys.ForeignPropertyNameInitCap}() {
            return this.ConditionQuery${foreignKeys.ForeignPropertyNameInitCap};
        }

        /// <summary>
        /// Setup outer join for ${foreignKeys.ForeignPropertyName}.
        /// </summary>
        public void SetupOuterJoin_${foreignKeys.ForeignPropertyNameInitCap}() {
            System.Collections.IDictionary joinOnMap = new System.Collections.Hashtable();
            String key = null;
            String value = null;
    #foreach ($columnName in $foreignKeys.LocalColumns)
      #set ($localColumn = $table.getColumn($columnName))
      #set ($foreignColumnName = $foreignKeys.getLocalForeignMapping().get($columnName))

            key = GetRealColumnName("${localColumn.Name}");
            value = this.ConditionQuery${foreignKeys.ForeignPropertyNameInitCap}.GetRealColumnName("${foreignColumnName}");
            joinOnMap.Add(key, value);
    #end

            String joinTableName = "${foreignKeys.foreignTable.Name}";
            String aliasName = this.ConditionQuery${foreignKeys.ForeignPropertyNameInitCap}.GetRealAliasName();
            GetSqlClause().RegisterOuterJoin(joinTableName, aliasName, joinOnMap);
        }

        /// <summary> Condition-query for ${foreignKeys.ForeignPropertyName}. */
        protected ${foreignCQClassName} _conditionQuery${foreignKeys.ForeignPropertyNameInitCap};

        /// <summary>
        /// Get condition-query for ${foreignKeys.ForeignPropertyName}.
        /// </summary>
        /// <returns>Instance of ${foreignCQClassName} as ${foreignKeys.ForeignPropertyName}. (NotNull)</returns>
        public ${foreignCQClassName} ConditionQuery${foreignKeys.ForeignPropertyNameInitCap} {
            get {
                if (_conditionQuery${foreignKeys.foreignPropertyNameInitCap} == null) {
                    _conditionQuery${foreignKeys.foreignPropertyNameInitCap} = NewQuery${foreignKeys.ForeignPropertyNameInitCap}();
                    SetupOuterJoin_${foreignKeys.foreignPropertyNameInitCap}();
                }
                return _conditionQuery${foreignKeys.ForeignPropertyNameInitCap};
            }
        }

        /// <summary>
        /// New query for ${foreignKeys.ForeignPropertyName}.
        /// </summary>
        /// <returns>Query for ${foreignKeys.ForeignPropertyName}. (NotNull)</returns>
        protected ${foreignCQClassName} NewQuery${foreignKeys.ForeignPropertyNameInitCap}() {
            return new ${foreignCQClassName}(this, GetSqlClause(), "${foreignKeys.ForeignPropertyNameInitCap}", GetNextNestLevel());
        }
  #end

  #foreach ($refferer in $table.Referrers)
    #set ($relatedCQClassName = "${glProjectPrefix}${refferer.Table.JavaName}${glConditionQueryInitialName}")
    #if (${refferer.isOneToOne()})

        // /* * * * * * * * * * * * * * * * * * * * * * * {as one}
        //   ReffererTable    = [${refferer.Table.Name}]
        //   ReffererProperty = [${refferer.ReffererPropertyNameAsOne}]
        // * * * * * * * * */

        /// <summary>
        /// Query for ${refferer.ReffererPropertyNameAsOne}.
        /// </summary>
        /// <returns>Instance of ${relatedCQClassName} as ${refferer.ReffererPropertyNameAsOne}. (NotNull)</returns>
        public ${relatedCQClassName} Query${refferer.ReffererPropertyNameInitCapAsOne}() {
            return this.ConditionQuery${refferer.ReffererPropertyNameInitCapAsOne};
        }

        /// <summary>
          /// Setup outer join for ${refferer.ReffererPropertyNameAsOne}.
        /// </summary>
        public void SetupOuterJoin_${refferer.ReffererPropertyNameInitCapAsOne}() {
            System.Collections.IDictionary joinOnMap = new System.Collections.Hashtable();
            String key = null;
            String value = null;
      #foreach ($columnName in $refferer.ForeignColumns)
        #set ($foreignColumn = $table.getColumn($columnName))
        #set ($reffererColumnName = $refferer.getLocalForeignMapping().get($columnName))

            key = GetRealColumnName("${foreignColumn.Name}");
            value = this.ConditionQuery${refferer.ReffererPropertyNameInitCapAsOne}.GetRealColumnName("${reffererColumnName}");
            joinOnMap.Add(key, value);
      #end

            String joinTableName = "${refferer.Table.Name}";
            String aliasName = this.ConditionQuery${refferer.ReffererPropertyNameInitCapAsOne}.GetRealAliasName();
            GetSqlClause().RegisterOuterJoin(joinTableName, aliasName, joinOnMap);
        }

        /// <summary> Condition-query for ${refferer.ReffererPropertyNameAsOne}.    </summary>
        protected ${relatedCQClassName} _conditionQuery${refferer.ReffererPropertyNameInitCapAsOne};

        /// <summary>
        /// Get condition-query for ${refferer.ReffererPropertyNameAsOne}.
        /// </summary>
        /// <returns>Instance of ${relatedCQClassName} as ${refferer.ReffererPropertyNameAsOne}. (NotNull)</returns>
        public ${relatedCQClassName} ConditionQuery${refferer.ReffererPropertyNameInitCapAsOne} {
            get {
                if (_conditionQuery${refferer.ReffererPropertyNameInitCapAsOne} == null) {
                    _conditionQuery${refferer.ReffererPropertyNameInitCapAsOne} = NewQuery${refferer.ReffererPropertyNameInitCapAsOne}();
                    SetupOuterJoin_${refferer.ReffererPropertyNameInitCapAsOne}();
                }
                return _conditionQuery${refferer.ReffererPropertyNameInitCapAsOne};
            }
        }

        /// <summary>
        /// New query for ${refferer.ReffererPropertyNameAsOne}.
        /// </summary>
        /// <returns>Query for ${refferer.ReffererPropertyNameAsOne}. (NotNull)</returns>
        protected ${relatedCQClassName} NewQuery${refferer.ReffererPropertyNameInitCapAsOne}() {
            return new ${relatedCQClassName}(this, GetSqlClause(), "${refferer.ReffererPropertyNameInitCapAsOne}", GetNextNestLevel());
        }
    #end
  #end

    }
}
