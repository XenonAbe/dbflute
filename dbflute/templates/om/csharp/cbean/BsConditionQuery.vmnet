#set ($myClassName = "")
#if ($database.isJavaDirOnlyOne())

using ${glPackageCQ};
  #set ($myClassName = "${myBaseConditionQueryClassName}")
#else

using ${glPackageBaseCQ};
  #set ($myClassName = "${myConditionQueryClassName}")
#end

using System;
using System.Collections;

using ${glPackageBaseCommon};
using ${glPackageBaseCommonCBean};
using ${glPackageBaseCommonCKey};
using ${glPackageBaseCommonCValue};
using ${glPackageBaseCommonSqlClause};

using ${glPackageCIQ};

#if ($database.isJavaDirOnlyOne())

namespace ${glPackageBaseCQ} {
#else

namespace ${glPackageCQ} {
#end

    /// <summary>
    /// The condition-query of {table.Name}.
    /// Author: ${database.ClassAuthor}
    /// </summary>
    [System.Serializable]
    public class ${myClassName} : ${myAbstractBaseConditionQueryClassName} {

        // ===============================================================================
        //                                                                       Attribute
        //                                                                       =========
        protected ${myConditionInlineQueryClassName} _inlineQuery;

        // ===============================================================================
        //                                                                     Constructor
        //                                                                     ===========
        /// <summary>
        /// Constructor.
        /// </summary>
        /// <param name="childQuery">Child query as interfaec. (Nullable: If null, this is base instance.)</param>
        /// <param name="sqlClause">SQL clause instance. (NotNull)</param>
        /// <param name="aliasName">My alias name. (NotNull)</param>
        /// <param name="nestLevel">Nest level.</param>
        public ${myClassName}(${glConditionQueryInterfaceName} childQuery, ${glSqlClauseName} sqlClause, String aliasName, int nestLevel)
            : base(childQuery, sqlClause, aliasName, nestLevel) {}

        // ===============================================================================
        //                                                                          Inline
        //                                                                          ======
        public ${myConditionInlineQueryClassName} Inline() {
            if (_inlineQuery == null) {
                _inlineQuery = new ${myConditionInlineQueryClassName}(GetChildQuery(), GetSqlClause(), GetAliasName(), GetNestLevel(), this);
            }
            return _inlineQuery;
        }

        // ===============================================================================
        //                                                                   IncludeAsMine
        //                                                                   =============
#foreach ($col in $table.columns)
        public void IncludeAsMine_${col.JavaName}() { RegisterIncludedSelectColumn("${col.JavaName}", GetRealColumnName("${col.Name}")); }
        public void IncludeAsMine_${col.JavaName}(String aliasName) { RegisterIncludedSelectColumn(aliasName, GetRealColumnName("${col.Name}")); }
#end

        // ===============================================================================
        //                                                                           Query
        //                                                                           =====
  #foreach ($col in $table.columns)
    #set ($tmpJavaName = "${col.JavaName}")
    #set ($tmpUncapitalisedJavaName = "${col.UncapitalisedJavaName}")

        protected ${glConditionValueName} _${tmpUncapitalisedJavaName};
        public ${glConditionValueName} ${tmpJavaName} {
            get { if (_${tmpUncapitalisedJavaName} == null) { _${tmpUncapitalisedJavaName} = new ${glConditionValueName}(); } return _${tmpUncapitalisedJavaName}; }
        }
        protected override ${glConditionValueName} GetCValue${tmpJavaName}() { return this.${tmpJavaName}; }

    #if (${col.isJavaNativeStringObject()})
      #if (${col.isSingleKeyForeignKey()})
        #set ($relatedCQClassName = "${glProjectPrefix}${col.foreignKey.foreignTable.javaName}CQ")
        #set ($subQueryPropertyNameInitCap = "${tmpJavaName}_InScopeSubQuery_${col.foreignKey.foreignPropertyNameInitCap}")
        #set ($subQueryPropertyName = "${tmpUncapitalisedJavaName}_InScopeSubQuery_${col.foreignKey.foreignPropertyNameInitCap}")

        protected ${relatedCQClassName} _${subQueryPropertyName};
        public ${relatedCQClassName} ${subQueryPropertyNameInitCap} { get { return _${subQueryPropertyName}; } }
        public override void Keep${subQueryPropertyNameInitCap}(${relatedCQClassName} subQuery) { _${subQueryPropertyName} = subQuery; }
      #end
      #if (${col.hasSingleKeyReferrer()})
        #foreach ($refferer in $col.SingleKeyReferrers)
          #set ($relatedCQClassName = "${glProjectPrefix}${refferer.Table.JavaName}${glConditionQueryInitialName}")
          #set ($subQueryPropertyNameInitCap = "${tmpJavaName}_InScopeSubQuery_${refferer.ReffererPropertyNameInitCap}")
          #set ($subQueryPropertyName = "${tmpUncapitalisedJavaName}_InScopeSubQuery_${refferer.ReffererPropertyNameInitCap}")

        protected ${relatedCQClassName} _${subQueryPropertyName};
        public ${relatedCQClassName} ${subQueryPropertyNameInitCap} { get { return _${subQueryPropertyName}; } }
        public override void Keep${subQueryPropertyNameInitCap}(${relatedCQClassName} subQuery) { _${subQueryPropertyName} = subQuery; }
        #end
      #end
      #if (${col.hasSingleKeyReferrer()})
        #foreach ($refferer in $col.SingleKeyReferrers)
          #if (!$refferer.isSelfReference())
            #set ($relatedCQClassName = "${glProjectPrefix}${refferer.Table.JavaName}${glConditionQueryInitialName}")
            #set ($subQueryPropertyNameInitCap = "${tmpJavaName}_ExistsSubQuery_${refferer.ReffererPropertyNameInitCap}")
            #set ($subQueryPropertyName = "${tmpUncapitalisedJavaName}_ExistsSubQuery_${refferer.ReffererPropertyNameInitCap}")

        protected ${relatedCQClassName} _${subQueryPropertyName};
        public ${relatedCQClassName} ${subQueryPropertyNameInitCap} { get { return _${subQueryPropertyName}; } }
        public override void Keep${subQueryPropertyNameInitCap}(${relatedCQClassName} subQuery) { _${subQueryPropertyName} = subQuery; }
          #end
        #end
      #end
    #end
    #if (${col.isJavaNativeNumberObject()})
      #if (${col.isSingleKeyForeignKey()})
        #set ($relatedCQClassName = "${glProjectPrefix}${col.foreignKey.foreignTable.javaName}CQ")
        #set ($subQueryPropertyNameInitCap = "${tmpJavaName}_InScopeSubQuery_${col.foreignKey.foreignPropertyNameInitCap}")
        #set ($subQueryPropertyName = "${tmpUncapitalisedJavaName}_InScopeSubQuery_${col.foreignKey.foreignPropertyNameInitCap}")

        protected ${relatedCQClassName} _${subQueryPropertyName};
        public ${relatedCQClassName} ${subQueryPropertyNameInitCap} { get { return _${subQueryPropertyName}; } }
        public override void Keep${subQueryPropertyNameInitCap}(${relatedCQClassName} subQuery) { _${subQueryPropertyName} = subQuery; }
      #end
      #if (${col.hasSingleKeyReferrer()})
        #foreach ($refferer in $col.SingleKeyReferrers)
          #set ($relatedCQClassName = "${glProjectPrefix}${refferer.Table.JavaName}${glConditionQueryInitialName}")
          #set ($subQueryPropertyNameInitCap = "${tmpJavaName}_InScopeSubQuery_${refferer.ReffererPropertyNameInitCap}")
          #set ($subQueryPropertyName = "${tmpUncapitalisedJavaName}_InScopeSubQuery_${refferer.ReffererPropertyNameInitCap}")

        protected ${relatedCQClassName} _${subQueryPropertyName};
        public ${relatedCQClassName} ${subQueryPropertyNameInitCap} { get { return _${subQueryPropertyName}; } }
        public override void Keep${subQueryPropertyNameInitCap}(${relatedCQClassName} subQuery) { _${subQueryPropertyName} = subQuery; }
        #end
      #end
      #if (${col.hasSingleKeyReferrer()})
        #foreach ($refferer in $col.SingleKeyReferrers)
          #if (!$refferer.isSelfReference())
            #set ($relatedCQClassName = "${glProjectPrefix}${refferer.Table.JavaName}${glConditionQueryInitialName}")
            #set ($subQueryPropertyNameInitCap = "${tmpJavaName}_ExistsSubQuery_${refferer.ReffererPropertyNameInitCap}")
            #set ($subQueryPropertyName = "${tmpUncapitalisedJavaName}_ExistsSubQuery_${refferer.ReffererPropertyNameInitCap}")

        protected ${relatedCQClassName} _${subQueryPropertyName};
        public ${relatedCQClassName} ${subQueryPropertyNameInitCap} { get { return _${subQueryPropertyName}; } }
        public override void Keep${subQueryPropertyNameInitCap}(${relatedCQClassName} subQuery) { _${subQueryPropertyName} = subQuery; }
          #end
        #end
      #end
    #end
    #if (${col.isJavaNativeDateObject()})
    #end
    #if (${col.isJavaNativeBooleanObject()})
    #end
    #if (${col.isJavaNativeBinaryObject()})
    #end
    #if (!${col.isNotNull()})
    #end

        public ${myClassName} AddOrderBy_${tmpJavaName}_Asc() { GetSqlClause().RegisterOrderBy(GetRealColumnName("${col.name}"), true);return this; }
        public ${myClassName} AddOrderBy_${tmpJavaName}_Desc() { GetSqlClause().RegisterOrderBy(GetRealColumnName("${col.name}"), false);return this; }

  #end

        // ===============================================================================
        //                                                                     Union Query
        //                                                                     ===========

        // ===============================================================================
        //                                                                   Foreign Query
        //                                                                   =============
  #foreach ($foreignKeys in $table.foreignKeys)
    #set ($foreignCQClassName = "${glProjectPrefix}${foreignKeys.foreignTable.JavaName}${glConditionQueryInitialName}")
    
        // /* * * * * * * * * * * * * * * * * * * * * * *
        //   ForeignTable    = [${foreignKeys.foreignTable.Name}]
        //   ForeignProperty = [${foreignKeys.foreignPropertyNameInitCap}]
        // * * * * * * * * */

        public ${foreignCQClassName} Query${foreignKeys.ForeignPropertyNameInitCap}() { return this.ConditionQuery${foreignKeys.ForeignPropertyNameInitCap}; }
        public void SetupOuterJoin_${foreignKeys.ForeignPropertyNameInitCap}() {
            System.Collections.IDictionary joinOnMap = new System.Collections.Hashtable();
            String key = null;
            String value = null;
    #foreach ($columnName in $foreignKeys.LocalColumns)
      #set ($localColumn = $table.getColumn($columnName))
      #set ($foreignColumnName = $foreignKeys.getLocalForeignMapping().get($columnName))

            key = GetRealColumnName("${localColumn.Name}");
            value = this.ConditionQuery${foreignKeys.ForeignPropertyNameInitCap}.GetRealColumnName("${foreignColumnName}");
            joinOnMap.Add(key, value);
    #end

            String joinTableName = "${foreignKeys.foreignTable.Name}";
            String aliasName = this.ConditionQuery${foreignKeys.ForeignPropertyNameInitCap}.GetRealAliasName();
            GetSqlClause().RegisterOuterJoin(joinTableName, aliasName, joinOnMap);
        }
        protected ${foreignCQClassName} _conditionQuery${foreignKeys.ForeignPropertyNameInitCap};
        public ${foreignCQClassName} ConditionQuery${foreignKeys.ForeignPropertyNameInitCap} {
            get {
                if (_conditionQuery${foreignKeys.foreignPropertyNameInitCap} == null) {
                    _conditionQuery${foreignKeys.foreignPropertyNameInitCap} = NewQuery${foreignKeys.ForeignPropertyNameInitCap}();
                    SetupOuterJoin_${foreignKeys.foreignPropertyNameInitCap}();
                }
                return _conditionQuery${foreignKeys.ForeignPropertyNameInitCap};
            }
        }
        protected ${foreignCQClassName} NewQuery${foreignKeys.ForeignPropertyNameInitCap}() {
            return new ${foreignCQClassName}(this, GetSqlClause(), "${foreignKeys.ForeignPropertyNameInitCap}", GetNextNestLevel());
        }
  #end

  #foreach ($refferer in $table.Referrers)
    #set ($relatedCQClassName = "${glProjectPrefix}${refferer.Table.JavaName}${glConditionQueryInitialName}")
    #if (${refferer.isOneToOne()})

        // /* * * * * * * * * * * * * * * * * * * * * * * {as one}
        //   RefererTable    = [${refferer.table.name}]
        //   RefererProperty = [${refferer.reffererPropertyNameInitCapAsOne}]
        // * * * * * * * * */

        public ${relatedCQClassName} Query${refferer.reffererPropertyNameInitCapAsOne}() { return this.ConditionQuery${refferer.ReffererPropertyNameInitCapAsOne}; }
        public void SetupOuterJoin_${refferer.ReffererPropertyNameInitCapAsOne}() {
            System.Collections.IDictionary joinOnMap = new System.Collections.Hashtable();
            String key = null;
            String value = null;
      #foreach ($columnName in $refferer.ForeignColumns)
        #set ($foreignColumn = $table.getColumn($columnName))
        #set ($reffererColumnName = $refferer.getLocalForeignMapping().get($columnName))

            key = GetRealColumnName("${foreignColumn.Name}");
            value = this.ConditionQuery${refferer.ReffererPropertyNameInitCapAsOne}.GetRealColumnName("${reffererColumnName}");
            joinOnMap.Add(key, value);
      #end

            String joinTableName = "${refferer.Table.Name}";
            String aliasName = this.ConditionQuery${refferer.ReffererPropertyNameInitCapAsOne}.GetRealAliasName();
            GetSqlClause().RegisterOuterJoin(joinTableName, aliasName, joinOnMap);
        }
        protected ${relatedCQClassName} _conditionQuery${refferer.ReffererPropertyNameInitCapAsOne};
        public ${relatedCQClassName} ConditionQuery${refferer.ReffererPropertyNameInitCapAsOne} {
            get {
                if (_conditionQuery${refferer.ReffererPropertyNameInitCapAsOne} == null) {
                    _conditionQuery${refferer.ReffererPropertyNameInitCapAsOne} = NewQuery${refferer.ReffererPropertyNameInitCapAsOne}();
                    SetupOuterJoin_${refferer.ReffererPropertyNameInitCapAsOne}();
                }
                return _conditionQuery${refferer.ReffererPropertyNameInitCapAsOne};
            }
        }
        protected ${relatedCQClassName} NewQuery${refferer.ReffererPropertyNameInitCapAsOne}() {
            return new ${relatedCQClassName}(this, GetSqlClause(), "${refferer.ReffererPropertyNameInitCapAsOne}", GetNextNestLevel());
        }
    #end
  #end

    }
}
