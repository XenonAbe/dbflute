#set ($myClassName = "${myBaseConditionBeanClassName}")

using System;
using System.Collections;

using ${glPackageBaseCommon};
using ${glPackageBaseCommonCBean};
using ${glPackageBaseCommonHelper};

using ${glPackageCQ};
using ${glPackageNss};

namespace ${glPackageBaseCB} {

    [System.Serializable]
    public class ${myClassName} : ${glConditionBeanAbstractName} {

        // ===============================================================================
        //                                                                       Attribute
        //                                                                       =========
        protected ${myConditionQueryClassName} _conditionQuery;

        // ===============================================================================
        //                                                                      Table Name
        //                                                                      ==========
        public override String TableDbName { get { return "${table.Name}"; } }

        // ===============================================================================
        //                                                                  Add OrderBy PK
        //                                                                  ==============
        public override ${glConditionBeanInterfaceName} AddOrderBy_PK_Asc() {
#if ($table.hasPrimaryKey())
#foreach ($col in $table.primaryKey)
            Query().AddOrderBy_${col.JavaName}_Asc();
#end
            return this;
#else
            String msg = "This method is unsupported in this table that doesn't have primary key: ";
            throw new NotSupportedException(msg + ToString());
#end
        }

        /// <summary>${database.ImplementComment}</summary><returns>this. (NotNull)</returns>
        public override ${glConditionBeanInterfaceName} AddOrderBy_PK_Desc() {
#if ($table.hasPrimaryKey())
#foreach ($col in $table.PrimaryKey)
            Query().AddOrderBy_${col.JavaName}_Desc();
#end
            return this;
#else
            String msg = "This method is unsupported in this table that doesn't have primary key: ";
            throw new NotSupportedException(msg + ToString());
#end
        }

        // ===============================================================================
        //                                                                           Query
        //                                                                           =====
        public ${myConditionQueryClassName} Query() {
            return this.ConditionQuery;
        }

        public ${myConditionQueryClassName} ConditionQuery {
            get {
                if (_conditionQuery == null) {
                    _conditionQuery = new ${myConditionQueryClassName}(null, this.SqlClause, TableDbName, 0);
                }
                return _conditionQuery;
            }
        }

        public override ${glPackageBaseCommonCBean}.${glConditionQueryInterfaceName} ConditionQueryAsInterface {
            get { return this.ConditionQuery; }
        }

        // ===============================================================================
        //                                                                     Union Query
        //                                                                     ===========
        public void Union(${myConditionQueryClassName} unionQuery) {
            query().xsetUnionQuery(unionQuery);
        }
    
        public void UnionAll(${myConditionQueryClassName} unionAllQuery) {
            query().xsetUnionAllQuery(unionAllQuery);
        }
    
        public bool HasUnionQueryOrUnionAllQuery() {
            return query().hasUnionQueryOrUnionAllQuery();
        }
	
        // ===============================================================================
        //                                                                    Setup Select
        //                                                                    ============
#foreach ($foreignKeys in $table.ForeignKeys)
  #set ($tmpPropertyName = "${foreignKeys.foreignPropertyName}")
  #set ($tmpPropertyNameInitCap = "${foreignKeys.foreignPropertyNameInitCap}")
  #set ($nestSelectSetuppperClassName = "${glProjectPrefix}${foreignKeys.foreignTable.javaName}Nss")

        // /* * * * * * * * * * * * * * * * * * * * * * *
        //   ForeignTable    = [${foreignKeys.foreignTable.Name}]
        //   ForeignProperty = [${tmpPropertyName}]
        // * * * * * * * * */

        protected ${nestSelectSetuppperClassName} _nss${tmpPropertyNameInitCap};
        public ${nestSelectSetuppperClassName} Nss${tmpPropertyNameInitCap} {
            get {
                if (_nss${tmpPropertyNameInitCap} == null) {
                    _nss${tmpPropertyNameInitCap} = new ${nestSelectSetuppperClassName}(null);// for Dummy
                }
                return _nss${tmpPropertyNameInitCap};
            }
        }
        public ${nestSelectSetuppperClassName} SetupSelect_${tmpPropertyNameInitCap}() {
            Query().Query${tmpPropertyNameInitCap}();// For setting outer join.
            if (_nss${tmpPropertyNameInitCap} == null || !_nss${tmpPropertyNameInitCap}.HasConditionQuery) {
                _nss${tmpPropertyNameInitCap} = new ${nestSelectSetuppperClassName}(Query().Query${tmpPropertyNameInitCap}());
            }
            // Set dummy string that means this foreign entity is target of select.
            _isSelect${tmpPropertyNameInitCap} = true;
            LimitSelect_Off();
            return _nss${tmpPropertyNameInitCap};
        }
#end
#foreach ($refferer in $table.referrers)
  #if (${refferer.isOneToOne()})
    #set ($tmpPropertyName = "${refferer.ReffererPropertyNameAsOne}")
    #set ($tmpPropertyNameInitCap = "${refferer.ReffererPropertyNameInitCapAsOne}")
    #set ($nestSelectSetuppperClassName = "${glProjectPrefix}${refferer.table.javaName}Nss")

        // /* * * * * * * * * * * * * * * * * * * * * * * {as one}
        //   ReferrerTable    = [${refferer.table.name}]
        //   ReferrerProperty = [${tmpPropertyName}]
        // * * * * * * * * */

        protected ${nestSelectSetuppperClassName} _nss${tmpPropertyNameInitCap};
        public ${nestSelectSetuppperClassName} Nss${tmpPropertyNameInitCap} {
            get {
                if (_nss${tmpPropertyNameInitCap} == null) {
                    _nss${tmpPropertyNameInitCap} = new ${nestSelectSetuppperClassName}(null);// for Dummy
                }
                return _nss${tmpPropertyNameInitCap};
            }
        }
        public ${nestSelectSetuppperClassName} SetupSelect_${tmpPropertyNameInitCap}() {
            String foreignTableAliasName = Query().query${tmpPropertyNameInitCap}().getRealAliasName();
    		String localRelationPath = query().getRelationPath();
    		this.SqlClause.registerSelectedSelectColumn(foreignTableAliasName, "${table.name}", "${tmpPropertyName}", localRelationPath);
    		this.SqlClause.registerSelectedForeignInfo(Query().query${tmpPropertyNameInitCap}().getRelationPath(), "${tmpPropertyName}");
            if (_nss${tmpPropertyNameInitCap} == null || !_nss${tmpPropertyNameInitCap}.HasConditionQuery) {
                _nss${tmpPropertyNameInitCap} = new ${glPackageNss}.${nestSelectSetuppperClassName}(query().query${tmpPropertyNameInitCap}());
            }
            LimitSelect_Off();
            return _nss${tmpPropertyNameInitCap};
        }
  #end
#end

        // ===============================================================================
        //                                                                  Basic Override
        //                                                                  ==============
        public override String ToString() { return GetClause(); }
    }
}
