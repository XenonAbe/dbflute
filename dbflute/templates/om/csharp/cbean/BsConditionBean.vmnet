#set ($myClassName = "${myBaseConditionBeanClassName}")

using System;
using System.Collections;

using ${glPackageBaseCommon};
using ${glPackageBaseCommonCBean};
using ${glPackageBaseCommonHelper};

using ${glPackageCQ};
using ${glPackageNss};

namespace ${glPackageBaseCB} {

    /// <summary>
    /// The condition-bean of ${table.Name}.
    /// Author: ${database.ClassAuthor}
    /// </summary>
    [Seasar.Dao.Attrs.Table("$table.Name")]
    [System.Serializable]
    public class ${myClassName} : ${glConditionBeanAbstractName} {

        // =====================================================================================
        //                                                                            Definition
        //                                                                            ==========
        /** Map-string map-mark. */
        public static readonly String MAP_STRING_MAP_MARK = "map:";

        /** Map-string list-mark. */
        public static readonly String MAP_STRING_LIST_MARK = "list:";

        /** Map-string start-brace. */
        public static readonly String MAP_STRING_START_BRACE = "${database.extractAcceptStartBrace}";

        /** Map-string end-brace. */
        public static readonly String MAP_STRING_END_BRACE = "${database.extractAcceptEndBrace}";

        /** Map-string delimiter. */
        public static readonly String MAP_STRING_DELIMITER = "${database.extractAcceptDelimiter}";

        /** Map-string equal. */
        public static readonly String MAP_STRING_EQUAL = "${database.extractAcceptEqual}";

        // =====================================================================================
        //                                                                             Attribute
        //                                                                             =========
        /// <summary> Condition query.</summary>
        protected ${myConditionQueryClassName} _conditionQuery;

        // ===============================================================================
        //                                                                     Constructor
        //                                                                     ===========
        /// <summary>
        /// Constructor.
        /// </summary>
        public ${myClassName}() {
        }

        // ===============================================================================
        //                                                                      Table Name
        //                                                                      ==========
        /// <summary>
        /// ${database.ImplementComment}
        /// </summary>
        public override String TableDbName {
            get { return "${table.Name}"; }
        }

        // =====================================================================================
        //                                                                        Add-OrderBy-PK
        //                                                                        ==============
        /// <summary>
        /// ${database.ImplementComment}
        /// </summary>
        /// <returns>this. (NotNull)</returns>
        public override ${glConditionBeanInterfaceName} AddOrderBy_PK_Asc() {
#if ($table.hasPrimaryKey())
  #foreach ($col in $table.PrimaryKey)

            Query().AddOrderBy_${col.JavaName}_Asc();
  #end

            return this;
#else

            String msg = "This method is unsupported in this table that doesn't have primary key: ";
            throw new NotSupportedException(msg + ToString());
#end

        }

        /// <summary>
        /// ${database.ImplementComment}
        /// </summary>
        /// <returns>this. (NotNull)</returns>
        public override ${glConditionBeanInterfaceName} AddOrderBy_PK_Desc() {
#if ($table.hasPrimaryKey())
  #foreach ($col in $table.PrimaryKey)

            Query().AddOrderBy_${col.JavaName}_Desc();
  #end

            return this;
#else

            String msg = "This method is unsupported in this table that doesn't have primary key: ";
            throw new NotSupportedException(msg + ToString());
#end

        }

        // =====================================================================================
        //                                                                                 Query
        //                                                                                 =====
        /// <summary>
        /// Query.
        /// </summary>
        /// <returns>Instance of query. (NotNull)</returns>
        public ${myConditionQueryClassName} Query() {
            return this.ConditionQuery;
        }

        /// <summary>
        /// The property of condition-query. {for SqlComment}
        /// </summary>
        /// <returns>Instance of condition query. (NotNull)</returns>
        public ${myConditionQueryClassName} ConditionQuery {
            get {
                if (_conditionQuery == null) {
                    _conditionQuery = new ${myConditionQueryClassName}(null, this.SqlClause, TableDbName, 0);
                }
                return _conditionQuery;
            }
        }

        /// <summary>
        /// ${database.ImplementComment}
        /// </summary>
        /// <returns>Instance of condition-query. (NotNull)</returns>
        public override ${glPackageBaseCommonCBean}.${glConditionQueryInterfaceName} ConditionQueryAsInterface {
            get { return this.ConditionQuery; }
        }

#foreach ($foreignKeys in $table.ForeignKeys)
  #set ($tmpPropertyName = "${foreignKeys.foreignPropertyName}")
  #set ($tmpPropertyNameInitCap = "${foreignKeys.foreignPropertyNameInitCap}")
  #set ($nestSelectSetuppperClassName = "${glProjectPrefix}${foreignKeys.foreignTable.javaName}Nss")

        // /* * * * * * * * * * * * * * * * * * * * * * *
        //   ForeignTable    = [${foreignKeys.foreignTable.Name}]
        //   ForeignProperty = [${tmpPropertyName}]
        // * * * * * * * * */

        /// <summary>Is select for ${tmpPropertyName}?</summary>
        protected bool _isSelect${tmpPropertyNameInitCap};
        /// <summary>Nest select setupper for ${tmpPropertyName}.</summary>
        protected ${nestSelectSetuppperClassName} _nss${tmpPropertyNameInitCap};
        /// <summary>
        /// Is select for ${tmpPropertyName}?
        /// </summary>
        /// <returns>Determination.</returns>
        public bool IsSelect${tmpPropertyNameInitCap} {
            get { return _isSelect${tmpPropertyNameInitCap}; }
        }
        /// <summary>
        /// Get nest select setupper for ${tmpPropertyName}. {For Internal}
        /// </summary>
        /// <returns>Nest select setupper. (NotNull)</returns>
        public ${nestSelectSetuppperClassName} Nss${tmpPropertyNameInitCap} {
            get {
                if (_nss${tmpPropertyNameInitCap} == null) {
                    _nss${tmpPropertyNameInitCap} = new ${nestSelectSetuppperClassName}(null);// for Dummy
                }
                return _nss${tmpPropertyNameInitCap};
            }
        }
        /// <summary>
        /// Set up select for ${tmpPropertyName}.
        /// If you invoke this, this entity is target of select.
        /// </summary>
        public ${nestSelectSetuppperClassName} SetupSelect_${tmpPropertyNameInitCap}() {
            Query().Query${tmpPropertyNameInitCap}();// For setting outer join.
            if (_nss${tmpPropertyNameInitCap} == null || !_nss${tmpPropertyNameInitCap}.HasConditionQuery) {
                _nss${tmpPropertyNameInitCap} = new ${nestSelectSetuppperClassName}(Query().Query${tmpPropertyNameInitCap}());
            }
            // Set dummy string that means this foreign entity is target of select.
            _isSelect${tmpPropertyNameInitCap} = true;
            LimitSelect_Off();
            return _nss${tmpPropertyNameInitCap};
        }
#end
#foreach ($refferer in $table.Referrers)
  #if (${refferer.isOneToOne()})
    #set ($tmpPropertyName = "${refferer.ReffererPropertyNameAsOne}")
    #set ($tmpPropertyNameInitCap = "${refferer.ReffererPropertyNameInitCapAsOne}")
    #set ($nestSelectSetuppperClassName = "${glProjectPrefix}${refferer.table.javaName}Nss")

        // /* * * * * * * * * * * * * * * * * * * * * * * {as one}
        //   RefferTable    = [${refferer.Table.Name}]
        //   RefferProperty = [${tmpPropertyName}]
        // * * * * * * * * */

        /// <summary> Is select for ${tmpPropertyName}?</summary>
        protected bool _isSelect${tmpPropertyNameInitCap};
        /// <summary>Nest select setupper for ${tmpPropertyName}.</summary>
        protected ${nestSelectSetuppperClassName} _nss${tmpPropertyNameInitCap};
        /// <summary>
        /// Is select for ${tmpPropertyName}?
        /// </summary>
        /// <returns>Determination.</returns>
        public bool IsSelect${tmpPropertyNameInitCap} {
            get { return _isSelect${tmpPropertyNameInitCap}; }
        }
        /// <summary>
        /// Get nest select setupper for ${tmpPropertyName}. {For Internal}
        /// </summary>
        /// <returns>Nest select setupper. (NotNull)</returns>
        public ${nestSelectSetuppperClassName} Nss${tmpPropertyNameInitCap} {
            get {
                if (_nss${tmpPropertyNameInitCap} == null) {
                    _nss${tmpPropertyNameInitCap} = new ${nestSelectSetuppperClassName}(null);// for Dummy
                }
                return _nss${tmpPropertyNameInitCap};
            }
        }
        /// <summary>
        /// Set up select for ${tmpPropertyName}.
        /// If you invoke this, this entity is target of select.
        /// </summary>
        public ${nestSelectSetuppperClassName} SetupSelect_${tmpPropertyNameInitCap}() {
            Query().Query${tmpPropertyNameInitCap}();// For setting outer join.
            if (_nss${tmpPropertyNameInitCap} == null || !_nss${tmpPropertyNameInitCap}.HasConditionQuery) {
                _nss${tmpPropertyNameInitCap} = new ${nestSelectSetuppperClassName}(Query().Query${tmpPropertyNameInitCap}());
            }
            // Set dummy string that means this foreign entity is target of select.
            _isSelect${tmpPropertyNameInitCap} = true;
            LimitSelect_Off();
            return _nss${tmpPropertyNameInitCap};
        }
  #end
#end

        // =====================================================================================
        //                                                                 Basic-Override Method
        //                                                                 =====================
        /// <summary>
        /// This method overrides the method that is declared at super.
        /// </summary>
        /// <returns>Clause string. (NotNull)</returns>
        override public String ToString() {
            return GetClause();
        }

    }
}
