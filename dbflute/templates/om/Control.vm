

targetdatabase = $targetDatabase

##
## Loop by data-model.
##
#foreach ($dataModel in $dataModels)

  ##
  ## Loop by database.
  ##
  #foreach ($database in $dataModel.Databases)

    ## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
    ## Initialize CustomizeDao and AdditionalForeignKey and ClassificationDeployment and IncludeQuery.
    ## - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
    ${database.initializeCustomizeDao()}
    ${database.initializeAdditionalForeignKey()}
    ${database.initializeClassificationDeployment()}
    ${database.initializeIncludeQuery()}

    ## *****************************************************************************************************************
    ##                                                                                                   Global Paramter
    ##                                                                                                   ***************
    ## ===================================================================================
    ##                                                                            Language
    ##                                                                            ========
    #set ($glTargetLanguage = ${database.targetLanguage})

    ## ===================================================================================
    ##                                                                           Extension
    ##                                                                           =========
    #set ($glTemplateFileExtension = ${database.templateFileExtension})
    #set ($glClassFileExtension = ${database.classFileExtension})

    ## -----------------------------------------------------
    ##                                                Prefix
    ##                                                ------
    #set ($glProjectPrefix = ${database.projectPrefix})
    #set ($glBasePrefix = ${database.basePrefix})
    #set ($glBaseSuffixForEntity = ${database.baseSuffixForEntity})

    ## -----------------------------------------------------
    ##                                                 Dicon
    ##                                                 -----
    #set ($glDaoDiconNamespace = "${database.daoDiconNamespace}")
    #set ($glDBFluteDiconNamespace = "${database.daoDiconNamespace}")
    #set ($glDaoDiconFileName = "${database.daoDiconFileName}")
    #set ($glDBFluteDiconFileName = "${database.DBFluteDiconFileName}")
    #set ($glCreatorDiconFileName = "${database.DBFluteCreatorDiconFileName}")
    #set ($glCustomizerDiconFileName = "${database.DBFluteCustomizerDiconFileName}")
    #set ($glJdbcDiconResourceName = "${database.jdbcDiconResourceName}")

    ## -----------------------------------------------------
    ##                                            Class Name
    ##                                            ----------
    ## [Allcommon-Annotation]
    #set ($glOutsideSqlAnnotation = "OutsideSql")

    ## [Allcommon-Base-AccessContext]
    #set ($glAccessContextName = "${glProjectPrefix}AccessContext")

    ## [Allcommon-Base-Dao]
    #set ($glDaoReadableInterfaceName = "${glProjectPrefix}DaoReadable")
    #set ($glDaoWritableInterfaceName = "${glProjectPrefix}DaoWritable")

    ## [Allcommon-Base-Entity]
    #set ($glEntityInterfaceName = "${glProjectPrefix}Entity")
    #set ($glEntityDefinedCommonColumnInterfaceName = "${glProjectPrefix}EntityDefinedCommonColumn")

    ## [Allcommon-Base-DaoSelector]
    #set ($glDaoSelectorInterfaceName = "${glProjectPrefix}DaoSelector")
    #set ($glCacheDaoSelectorName = "${glProjectPrefix}CacheDaoSelector")

    ## [Allcommon-Base-GenMetaData]
    #set ($glGenMetaDataClassName = "${glProjectPrefix}GenMetaData")

    ## [Allcommon-Base-ClassificationDefinition]
    #set ($glClassificationDefinition = "${glProjectPrefix}ClassificationDefinition")

    ## [Allcommon-Behavior]
    #set ($glBehaviorReadableAbstractName = "${glProjectPrefix}AbstractBehaviorReadable")
    #set ($glBehaviorWritableAbstractName = "${glProjectPrefix}AbstractBehaviorWritable")
    #set ($glBehaviorReadableInterfaceName = "${glProjectPrefix}BehaviorReadable")
    #set ($glBehaviorWritableInterfaceName = "${glProjectPrefix}BehaviorWritable")

    ## [Allcommon-Behavior-Batch]
    #set ($glTokenFileReflectionOptionName = "${glProjectPrefix}TokenFileReflectionOption")
    #set ($glTokenFileReflectionResultName = "${glProjectPrefix}TokenFileReflectionResult")
    #set ($glTokenFileReflectionFailureName = "${glProjectPrefix}TokenFileReflectionFailure")
    #set ($glTokenFileOutputOptionName = "${glProjectPrefix}TokenFileOutputOption")
    #set ($glTokenFileOutputResultName = "${glProjectPrefix}TokenFileOutputResult")

    ## [Allcommon-Behavior-Load]
    #set ($glLoadRefererOptionName = "${glProjectPrefix}LoadRefererOption")

    ## [Allcommon-Behavior-Setup]
    #set ($glConditionBeanSetupperName = "${glProjectPrefix}ConditionBeanSetupper")
    #set ($glEntityListSetupperName = "${glProjectPrefix}EntityListSetupper")
    #set ($glValueLabelSetupperName = "${glProjectPrefix}ValueLabelSetupper")
    #set ($glValueLabelBoxName = "${glProjectPrefix}ValueLabelBox")

    ## [Allcommon-ConditionBean]
    #set ($glFetchNarrowingBeanInterfaceName = "${glProjectPrefix}FetchNarrowingBean")
    #set ($glSimplePagingBeanName = "${glProjectPrefix}SimplePagingBean")
    #set ($glSimpleOrderByBeanName = "${glProjectPrefix}SimpleOrderByBean")
    #set ($glConditionBeanInterfaceName = "${glProjectPrefix}ConditionBean")
    #set ($glConditionQueryInterfaceName = "${glProjectPrefix}ConditionQuery")
    #set ($glOrderByBeanInterfaceName = "${glProjectPrefix}OrderByBean")
    #set ($glPagingBeanInterfaceName = "${glProjectPrefix}PagingBean")
    #set ($glSelectResourceInterfaceName = "${glProjectPrefix}SelectResource")
    #set ($glFetchNarrowingBeanContextName = "${glProjectPrefix}FetchNarrowingBeanContext")
    #set ($glPagingResultBeanName = "${glProjectPrefix}PagingResultBean")
    #set ($glListResultBeanName = "${glProjectPrefix}ListResultBean")
    #set ($glConditionBeanContextName = "${glProjectPrefix}ConditionBeanContext")
    #set ($glConditionBeanAbstractName = "${glProjectPrefix}AbstractConditionBean")
    #set ($glConditionQueryAbstractName = "${glProjectPrefix}AbstractConditionQuery")
    #set ($glConditionKeyName = "${glProjectPrefix}ConditionKey")
    #set ($glConditionValueName = "${glProjectPrefix}ConditionValue")

    ## [Allcommon-ConditionBean-Option]
    #set ($glConditionOptionInterfaceName = "${glProjectPrefix}ConditionOption")
    #set ($glConditionOptionSimpleStringName = "${glProjectPrefix}SimpleStringOption")
    #set ($glConditionOptionFromToName = "${glProjectPrefix}FromToOption")
    #set ($glConditionOptionDateFromToName = "${glProjectPrefix}DateFromToOption")
    #set ($glConditionOptionLikeSearchName = "${glProjectPrefix}LikeSearchOption")
    #set ($glConditionOptionInScopeName = "${glProjectPrefix}InScopeOption")
    #set ($glConditionOptionPartsSplitName = "${glProjectPrefix}SplitOptionParts")
    #set ($glConditionOptionPartsToUpperLowerCaseName = "${glProjectPrefix}ToUpperLowerCaseOptionParts")
    #set ($glConditionOptionPartsToSingleByteName = "${glProjectPrefix}ToSingleByteOptionParts")
    #set ($glConditionOptionPartsAgentJapaneseName = "${glProjectPrefix}JapaneseOptionPartsAgent")

    ## [Allcommon-ConditionBean-Grouping]
    #set ($glGroupingOptionName = "${glProjectPrefix}GroupingOption")
    #set ($glGroupingRowEndDeterminerName = "${glProjectPrefix}GroupingRowEndDeterminer")
    #set ($glGroupingRowResourceName = "${glProjectPrefix}GroupingRowResource")
    #set ($glGroupingRowSetupperName = "${glProjectPrefix}GroupingRowSetupper")

    ## [Allcommon-ConditionBean-Mapping]
    #set ($glEntityDtoMapperName = "${glProjectPrefix}EntityDtoMapper")

    ## [Allcommon-ConditionBean-Mapping]
    #set ($glOutsideSqlContextName = "${glProjectPrefix}OutsideSqlContext")

    ## [Allcommon-ConditionBean-Pagenavi]
    #set ($glPageNumberLinkName = "${glProjectPrefix}PageNumberLink")
    #set ($glPageNumberLinkSetupperName = "${glProjectPrefix}PageNumberLinkSetupper")
    #set ($glPageGroupBeanName = "${glProjectPrefix}PageGroupBean")
    #set ($glPageGroupOptionName = "${glProjectPrefix}PageGroupOption")
    #set ($glPageRangeBeanName = "${glProjectPrefix}PageRangeBean")
    #set ($glPageRangeOptionName = "${glProjectPrefix}PageRangeOption")

    ## [Allcommon-ConditionBean-SqlClause]
    #set ($glSqlClauseName = "${glProjectPrefix}SqlClause")
    #set ($glSqlClauseInterfaceName = "${glProjectPrefix}SqlClause")
    #set ($glSqlClauseAbstractName = "${glProjectPrefix}AbstractSqlClause")
    #set ($glOrderByClauseName = "${glProjectPrefix}OrderByClause")
    #set ($glOrderByElementName = "${glProjectPrefix}OrderByElement")

    ## [Allcommon-DBMeta]
    #set ($glDBMetaInterfaceName = "${glProjectPrefix}DBMeta")
    #set ($glDBMetaAbstractName = "${glProjectPrefix}AbstractDBMeta")
    #set ($glDBMetaInstanceHandlerName = "${glProjectPrefix}DBMetaInstanceHandler")

    ## [Allcommon-Exception]
    #set ($glDaoExceptionContextName = "${glProjectPrefix}DaoExceptionContext")
    #set ($glRecordHasOverlappedException = "${glProjectPrefix}RecordHasOverlappedException")
    #set ($glRecordHasAlreadyBeenDeletedException = "${glProjectPrefix}RecordHasAlreadyBeenDeletedException")
    #set ($glSelectedCountExceedMaxCountExceptionName = "${glProjectPrefix}SelectedCountExceedMaxCountException")

    ## [Allcommon-Helper]
    #set ($glMapListStringName = "${glProjectPrefix}MapListString")
    #set ($glMapListStringImplName = "${glProjectPrefix}MapListStringImpl")
    #set ($glMapStringBuilderName = "${glProjectPrefix}MapStringBuilder")
    #set ($glMapStringBuilderImplName = "${glProjectPrefix}MapStringBuilderImpl")

    #set ($glGeneralCharacterName = "${glProjectPrefix}GeneralCharacter")
    #set ($glGeneralCharacterImplName = "${glProjectPrefix}GeneralCharacterImpl")

    #set ($glJapaneseCharacterName = "${glProjectPrefix}JapaneseCharacter")
    #set ($glJapaneseCharacterImplName = "${glProjectPrefix}JapaneseCharacterImpl")

    #set ($glLineTokenName = "${glProjectPrefix}LineToken")
    #set ($glLineTokenImplName = "${glProjectPrefix}LineTokenImpl")
    #set ($glLineTokenizingOptionName = "${glProjectPrefix}LineTokenizingOption")
    #set ($glLineMakingOptionName = "${glProjectPrefix}LineMakingOption")

    #set ($glFileTokenName = "${glProjectPrefix}FileToken")
    #set ($glFileTokenImplName = "${glProjectPrefix}FileTokenImpl")

    #set ($glFileTokenizingOptionName = "${glProjectPrefix}FileTokenizingOption")
    #set ($glFileTokenizingRowResourceName = "${glProjectPrefix}FileTokenizingRowResource")
    #set ($glFileTokenizingCallbackName = "${glProjectPrefix}FileTokenizingCallback")
    #set ($glFileTokenizingHeaderInfoName = "${glProjectPrefix}FileTokenizingHeaderInfo")

    #set ($glFileMakingOptionName = "${glProjectPrefix}FileMakingOption")
    #set ($glFileMakingRowResourceName = "${glProjectPrefix}FileMakingRowResource")
    #set ($glFileMakingCallbackName = "${glProjectPrefix}FileMakingCallback")
    #set ($glFileMakingHeaderInfoName = "${glProjectPrefix}FileMakingHeaderInfo")
    #set ($glFileMakingSimpleFacadeName = "${glProjectPrefix}FileMakingSimpleFacade")
    #set ($glFileMakingSimpleFacadeImplName = "${glProjectPrefix}FileMakingSimpleFacadeImpl")

    ## [Allcommon-Interceptor]
    #set ($glCommonColumnSetupAbstractInterceptor = "${glProjectPrefix}CommonColumnSetupAbstractInterceptor")
    #set ($glCommonColumnSetupBeforeInsertInterceptor = "${glProjectPrefix}CommonColumnSetupBeforeInsertInterceptor")
    #set ($glCommonColumnSetupBeforeUpdateInterceptor = "${glProjectPrefix}CommonColumnSetupBeforeUpdateInterceptor")
    #set ($glCommonColumnSetupBeforeDeleteInterceptor = "${glProjectPrefix}CommonColumnSetupBeforeDeleteInterceptor")

    ## [Allcommon-JDBC-History]
    #set ($glPreparedExecutionBeanName = "${glProjectPrefix}PreparedExecutionBean")
    #set ($glPreparedParameterElementName = "${glProjectPrefix}PreparedParameterElement")
    #set ($glStatementHistoryName = "${glProjectPrefix}StatementHistory")
    #set ($glStatementHistoryWitnessName = "${glProjectPrefix}StatementHistoryWitness")
    #set ($glTraceablePreparedStatementName = "${glProjectPrefix}TraceablePreparedStatement")

    ## [Allcommon-S2Container]
    #set ($glBehaviorCreator = "${glProjectPrefix}BehaviorCreator")

    ## [Allcommon-S2Dao]
    #set ($glSelectDynamicCommand = "${glProjectPrefix}S2DaoSelectDynamicCommand")
    #set ($glDaoInterceptor = "${glProjectPrefix}S2DaoInterceptor")
    #set ($glDaoMetaDataExtension = "${glProjectPrefix}S2DaoMetaDataExtension")
    #set ($glDaoMetaDataFactoryImpl = "${glProjectPrefix}S2DaoMetaDataFactoryImpl")
    #set ($glBeanMetaDataFactoryImpl = "${glProjectPrefix}S2BeanMetaDataFactoryImpl")
    #set ($glDaoStatementFactory = "${glProjectPrefix}S2DaoStatementFactory")
    #set ($glFetchNarrowingResultSetFactory = "${glProjectPrefix}FetchNarrowingResultSetFactory")
    #set ($glFetchNarrowingResultSetWrapper = "${glProjectPrefix}FetchNarrowingResultSetWrapper")

    ## ===================================================================================
    ##                                                                            Variable
    ##                                                                            ========
    #set ($glConditionBeanInitialName = "CB")
    #set ($glConditionQueryInitialName = "CQ")
    #set ($glAttachedCBArgsVariableName = "cb")
    #set ($glParentVariablePrefix = "_parent")
    #set ($glChildrenVariablePrefix = "_children")

    ## ===================================================================================
    ##                                                                             Package
    ##                                                                             =======
    ## [Common]
    #set ($glPackageBaseCommon = "${database.baseCommonPackage}")
    #set ($glPackageBaseCommonAnnotation = "${database.baseCommonPackage}.annotation")
    #set ($glPackageBaseCommonBhv = "${database.baseCommonPackage}.bhv")
    #set ($glPackageBaseCommonBhvBatch = "${database.baseCommonPackage}.bhv.batch")
    #set ($glPackageBaseCommonBhvLoad = "${database.baseCommonPackage}.bhv.load")
    #set ($glPackageBaseCommonBhvSetup = "${database.baseCommonPackage}.bhv.setup")
    #set ($glPackageBaseCommonCBean = "${database.baseCommonPackage}.cbean")
    #set ($glPackageBaseCommonCKey = "${database.baseCommonPackage}.cbean.ckey")
    #set ($glPackageBaseCommonCBeanMapping = "${database.baseCommonPackage}.cbean.mapping")
    #set ($glPackageBaseCommonCBeanGrouping = "${database.baseCommonPackage}.cbean.grouping")
    #set ($glPackageBaseCommonCBeanOutsidesql = "${database.baseCommonPackage}.cbean.outsidesql")
    #set ($glPackageBaseCommonCBeanPagenavi = "${database.baseCommonPackage}.cbean.pagenavi")
    #set ($glPackageBaseCommonCBeanPagenaviGroup = "${database.baseCommonPackage}.cbean.pagenavi.group")
    #set ($glPackageBaseCommonCBeanPagenaviRange = "${database.baseCommonPackage}.cbean.pagenavi.range")
    #set ($glPackageBaseCommonSqlClause = "${database.baseCommonPackage}.cbean.sqlclause")
    #set ($glPackageBaseCommonCValue = "${database.baseCommonPackage}.cbean.cvalue")
    #set ($glPackageBaseCommonCOption = "${database.baseCommonPackage}.cbean.coption")
    #set ($glPackageBaseCommonCOptionParts = "${database.baseCommonPackage}.cbean.coption.parts")
    #set ($glPackageBaseCommonCOptionPartsLocal = "${database.baseCommonPackage}.cbean.coption.parts.local")
    #set ($glPackageBaseCommonDBMeta = "${database.baseCommonPackage}.dbmeta")
    #set ($glPackageBaseCommonException = "${database.baseCommonPackage}.exception")
    #set ($glPackageBaseCommonHelper = "${database.baseCommonPackage}.helper")
    #set ($glPackageBaseCommonHelperCharacter = "${database.baseCommonPackage}.helper.character")
    #set ($glPackageBaseCommonHelperCharacterImpl = "${database.baseCommonPackage}.helper.character.impl")
    #set ($glPackageBaseCommonHelperToken = "${database.baseCommonPackage}.helper.token")
    #set ($glPackageBaseCommonHelperTokenLine = "${database.baseCommonPackage}.helper.token.line")
    #set ($glPackageBaseCommonHelperTokenLineImpl = "${database.baseCommonPackage}.helper.token.line.impl")
    #set ($glPackageBaseCommonHelperTokenFile = "${database.baseCommonPackage}.helper.token.file")
    #set ($glPackageBaseCommonHelperTokenFileImpl = "${database.baseCommonPackage}.helper.token.file.impl")
    #set ($glPackageBaseCommonInterceptor = "${database.baseCommonPackage}.interceptor")
    #set ($glPackageBaseCommonJdbcHistory = "${database.baseCommonPackage}.jdbc.history")
    #set ($glPackageBaseCommonS2Container = "${database.baseCommonPackage}.s2container")
    #set ($glPackageBaseCommonS2Dao = "${database.baseCommonPackage}.s2dao")

    ## [Main]
    #set ($glPackageBaseBhv = "${database.baseBehaviorPackage}")
    #set ($glPackageBaseDao = "${database.baseDaoPackage}" )
    #set ($glPackageBaseCustomizeDao = "${database.baseDaoPackage}.customize" )
    #set ($glPackageBaseEntity = "${database.baseEntityPackage}")
    #set ($glPackageBaseCustomizeEntity = "${database.baseEntityPackage}.customize" )
    #set ($glPackageExtendedBhv = "${database.extendedBehaviorPackage}")
    #set ($glPackageExtendedDao = "${database.extendedDaoPackage}")
    #set ($glPackageExtendedCustomizeDao = "${database.extendedDaoPackage}.customize" )
    #set ($glPackageExtendedEntity = "${database.extendedEntityPackage}")
    #set ($glPackageExtendedCustomizeEntity = "${database.extendedEntityPackage}.customize" )
    #set ($glPackageBaseCB = "${database.conditionBeanPackage}.bs")
    #set ($glPackageCB = "${database.conditionBeanPackage}")
    #set ($glPackageBaseCQ = "${database.conditionBeanPackage}.cq.bs")
    #set ($glPackageCQ = "${database.conditionBeanPackage}.cq")
    #set ($glPackageCIQ = "${database.conditionBeanPackage}.cq.ciq")
    #set ($glPackageNss = "${database.conditionBeanPackage}.nss")
    #set ($glPackageBaseDBMeta = "${glPackageBaseEntity}.dbmeta")
    #set ($glPackageBaseCustomizeDBMeta = "${glPackageBaseCustomizeEntity}.dbmeta")
    #set ($glPackageBaseSqlParameterBean = "${database.SqlParameterBeanPackage}.bsparam")
    #set ($glPackageExtendedSqlParameterBean = "${database.SqlParameterBeanPackage}.exparam")
    #set ($glPackageArgumentBean = "${database.ArgumentBeanPackage}")

    ## *****************************************************************************************************************
    ##                                                                                                           Parsing
    ##                                                                                                           *******
    ## ===================================================================================
    ##                                                                          annotation
    ##                                                                          ==========
    #if (($database.isTargetLanguageJava() && $database.isAvailableGenerics()) || $database.isTargetLanguageCSharp())
      ## Setup java directory for allcommon.
      $database.setupJavaDir_for_allcommon()

      #set ($path = $strings.getPackageAsPath(${glPackageBaseCommonAnnotation}))
      $database.makeDirectory($path)

      $database.debug("public void parseAllcommonAnnotation) {")
      $database.debug("    parseOutsideSql();")

      #set ( $path = "${strings.getPackageAsPath(${glPackageBaseCommonAnnotation})}${glOutsideSqlAnnotation}.${glClassFileExtension}" )
      $generator.parse("om/${glTargetLanguage}/allcommon/annotation/OutsideSql.${glTemplateFileExtension}",$path,"", "")

      $database.debug("}")
    #end

    ## ===================================================================================
    ##                                                                            behavior
    ##                                                                            ========
    ## Setup java directory for allcommon.
    $database.setupJavaDir_for_allcommon()

    #set ($path = $strings.getPackageAsPath(${glPackageBaseCommonBhv}))
    $database.makeDirectory($path)

    $database.debug("public void parseAllcommonBehavior) {")
    $database.debug("    parseBehaviorReadable()")
    #set ( $path = "${strings.getPackageAsPath(${glPackageBaseCommonBhv})}${glBehaviorReadableInterfaceName}.${glClassFileExtension}" )
    $generator.parse("om/${glTargetLanguage}/allcommon/bhv/BehaviorReadable.${glTemplateFileExtension}",$path ,"", "")
    $database.debug("    parseBehaviorWritable()")
    #set ( $path = "${strings.getPackageAsPath(${glPackageBaseCommonBhv})}${glBehaviorWritableInterfaceName}.${glClassFileExtension}" )
    $generator.parse("om/${glTargetLanguage}/allcommon/bhv/BehaviorWritable.${glTemplateFileExtension}",$path ,"", "")
    $database.debug("    parseAbstractBehaviorReadable()")
    #set ( $path = "${strings.getPackageAsPath(${glPackageBaseCommonBhv})}${glBehaviorReadableAbstractName}.${glClassFileExtension}" )
    $generator.parse("om/${glTargetLanguage}/allcommon/bhv/AbstractBehaviorReadable.${glTemplateFileExtension}",$path ,"", "")
    $database.debug("    parseAbstractBehaviorWritable()")
    #set ( $path = "${strings.getPackageAsPath(${glPackageBaseCommonBhv})}${glBehaviorWritableAbstractName}.${glClassFileExtension}" )
    $generator.parse("om/${glTargetLanguage}/allcommon/bhv/AbstractBehaviorWritable.${glTemplateFileExtension}",$path ,"", "")

    #if ($database.isTargetLanguageJava())
      #set ($path = $strings.getPackageAsPath(${glPackageBaseCommonBhvBatch}))
      $database.makeDirectory($path)

      $database.debug("    parseTokenFileReflectionOption()")
      #set ( $path = "${strings.getPackageAsPath(${glPackageBaseCommonBhvBatch})}${glTokenFileReflectionOptionName}.${glClassFileExtension}" )
      $generator.parse("om/${glTargetLanguage}/allcommon/bhv/batch/TokenFileReflectionOption.${glTemplateFileExtension}",$path ,"", "")

      $database.debug("    parseTokenFileReflectionResult()")
      #set ( $path = "${strings.getPackageAsPath(${glPackageBaseCommonBhvBatch})}${glTokenFileReflectionResultName}.${glClassFileExtension}" )
      $generator.parse("om/${glTargetLanguage}/allcommon/bhv/batch/TokenFileReflectionResult.${glTemplateFileExtension}",$path ,"", "")

      $database.debug("    parseTokenFileReflectionFailure()")
      #set ( $path = "${strings.getPackageAsPath(${glPackageBaseCommonBhvBatch})}${glTokenFileReflectionFailureName}.${glClassFileExtension}" )
      $generator.parse("om/${glTargetLanguage}/allcommon/bhv/batch/TokenFileReflectionFailure.${glTemplateFileExtension}",$path ,"", "")

      $database.debug("    parseTokenFileOutputOption()")
      #set ( $path = "${strings.getPackageAsPath(${glPackageBaseCommonBhvBatch})}${glTokenFileOutputOptionName}.${glClassFileExtension}" )
      $generator.parse("om/${glTargetLanguage}/allcommon/bhv/batch/TokenFileOutputOption.${glTemplateFileExtension}",$path ,"", "")

      $database.debug("    parseTokenFileOutputResult()")
      #set ( $path = "${strings.getPackageAsPath(${glPackageBaseCommonBhvBatch})}${glTokenFileOutputResultName}.${glClassFileExtension}" )
      $generator.parse("om/${glTargetLanguage}/allcommon/bhv/batch/TokenFileOutputResult.${glTemplateFileExtension}",$path ,"", "")

      #if ($database.isAvailableGenerics())
        #set ($path = $strings.getPackageAsPath(${glPackageBaseCommonBhvLoad}))
        $database.makeDirectory($path)

        $database.debug("    parseLoadRefererOption()")
        #set ( $path = "${strings.getPackageAsPath(${glPackageBaseCommonBhvLoad})}${glLoadRefererOptionName}.${glClassFileExtension}" )
        $generator.parse("om/${glTargetLanguage}/allcommon/bhv/load/LoadRefererOption.${glTemplateFileExtension}",$path ,"", "")

        #set ($path = $strings.getPackageAsPath(${glPackageBaseCommonBhvSetup}))
        $database.makeDirectory($path)

        $database.debug("    parseConditionBeanSetupper()")
        #set ( $path = "${strings.getPackageAsPath(${glPackageBaseCommonBhvSetup})}${glConditionBeanSetupperName}.${glClassFileExtension}" )
        $generator.parse("om/${glTargetLanguage}/allcommon/bhv/setup/ConditionBeanSetupper.${glTemplateFileExtension}",$path ,"", "")

        $database.debug("    parseEntityListSetupper()")
        #set ( $path = "${strings.getPackageAsPath(${glPackageBaseCommonBhvSetup})}${glEntityListSetupperName}.${glClassFileExtension}" )
        $generator.parse("om/${glTargetLanguage}/allcommon/bhv/setup/EntityListSetupper.${glTemplateFileExtension}",$path ,"", "")

        $database.debug("    parseValueLabelSetupper()")
        #set ( $path = "${strings.getPackageAsPath(${glPackageBaseCommonBhvSetup})}${glValueLabelSetupperName}.${glClassFileExtension}" )
        $generator.parse("om/${glTargetLanguage}/allcommon/bhv/setup/ValueLabelSetupper.${glTemplateFileExtension}",$path ,"", "")

        $database.debug("    parseValueLabelBox()")
        #set ( $path = "${strings.getPackageAsPath(${glPackageBaseCommonBhvSetup})}${glValueLabelBoxName}.${glClassFileExtension}" )
        $generator.parse("om/${glTargetLanguage}/allcommon/bhv/setup/ValueLabelBox.${glTemplateFileExtension}",$path ,"", "")
      #end
    #end
    $database.debug("}")

    ## ===================================================================================
    ##                                                                      access-context
    ##                                                                      ==============
    ## Setup java directory for allcommon.
    $database.setupJavaDir_for_allcommon()

    #if ($database.isTargetLanguageJava())
      $database.debug("    parseAccessContext()")
      #set ( $path = "${strings.getPackageAsPath(${glPackageBaseCommon})}${glAccessContextName}.${glClassFileExtension}" )
      $generator.parse("om/${glTargetLanguage}/allcommon/AccessContext.${glTemplateFileExtension}",$path ,"", "")
    #end

    ## -----------------------------------------------------
    ##                                         allcommon dao
    ##                                         -------------
    ## Setup java directory for allcommon.
    $database.setupJavaDir_for_allcommon()

    $database.debug("    parseDaoReadable")
    #set ( $path = "${strings.getPackageAsPath(${glPackageBaseCommon})}${glDaoReadableInterfaceName}.${glClassFileExtension}" )
    $generator.parse("om/${glTargetLanguage}/allcommon/DaoReadable.${glTemplateFileExtension}",$path ,"", "")

    $database.debug("    parseDaoWritable")
    #set ( $path = "${strings.getPackageAsPath(${glPackageBaseCommon})}${glDaoWritableInterfaceName}.${glClassFileExtension}" )
    $generator.parse("om/${glTargetLanguage}/allcommon/DaoWritable.${glTemplateFileExtension}",$path ,"", "")

    ## -----------------------------------------------------
    ##                                      allcommon entity
    ##                                      ----------------
    ## Setup java directory for allcommon.
    $database.setupJavaDir_for_allcommon()

    $database.debug("public void parseEntityInterface() {")
    $database.debug("    parseEntity();")
    #set ( $path = "${strings.getPackageAsPath(${glPackageBaseCommon})}${glEntityInterfaceName}.${glClassFileExtension}" )
    $generator.parse("om/${glTargetLanguage}/allcommon/Entity.${glTemplateFileExtension}",$path ,"", "")

    $database.debug("    parseEntityDefinedCommonColumn();")
    #set ( $path = "${strings.getPackageAsPath(${glPackageBaseCommon})}${glEntityDefinedCommonColumnInterfaceName}.${glClassFileExtension}" )
    $generator.parse("om/${glTargetLanguage}/allcommon/EntityDefinedCommonColumn.${glTemplateFileExtension}",$path ,"", "")
    $database.debug("}")

    ## -----------------------------------------------------
    ##                              allcommon condition-bean
    ##                              ------------------------
    ## Setup java directory for allcommon.
    $database.setupJavaDir_for_allcommon()

    #set ($path = $strings.getPackageAsPath(${glPackageBaseCommonCBean}))
    $database.makeDirectory($path)

    $database.debug("public void parseConditionBeanFramework() {")
    $database.debug("    parseFetchNarrowingBeanContext()")
    #set ( $path = "${strings.getPackageAsPath(${glPackageBaseCommonCBean})}${glFetchNarrowingBeanContextName}.${glClassFileExtension}" )
    $generator.parse("om/${glTargetLanguage}/allcommon/cbean/FetchNarrowingBeanContext.${glTemplateFileExtension}",$path ,"", "")

    $database.debug("    parseFetchNarrowingBean()")
    #set ( $path = "${strings.getPackageAsPath(${glPackageBaseCommonCBean})}${glFetchNarrowingBeanInterfaceName}.${glClassFileExtension}" )
    $generator.parse("om/${glTargetLanguage}/allcommon/cbean/FetchNarrowingBean.${glTemplateFileExtension}",$path ,"", "")

    $database.debug("    parseSimpleOrderByBean()")
    #set ( $path = "${strings.getPackageAsPath(${glPackageBaseCommonCBean})}${glSimpleOrderByBeanName}.${glClassFileExtension}" )
    $generator.parse("om/${glTargetLanguage}/allcommon/cbean/SimpleOrderByBean.${glTemplateFileExtension}",$path ,"", "")

    $database.debug("    parseSimplePagingBean()")
    #set ( $path = "${strings.getPackageAsPath(${glPackageBaseCommonCBean})}${glSimplePagingBeanName}.${glClassFileExtension}" )
    $generator.parse("om/${glTargetLanguage}/allcommon/cbean/SimplePagingBean.${glTemplateFileExtension}",$path ,"", "")

    $database.debug("    parsePagingResultBean()")
    #set ( $path = "${strings.getPackageAsPath(${glPackageBaseCommonCBean})}${glPagingResultBeanName}.${glClassFileExtension}" )
    $generator.parse("om/${glTargetLanguage}/allcommon/cbean/PagingResultBean.${glTemplateFileExtension}",$path ,"", "")

    $database.debug("    parseListResultBean()")
    #set ( $path = "${strings.getPackageAsPath(${glPackageBaseCommonCBean})}${glListResultBeanName}.${glClassFileExtension}" )
    $generator.parse("om/${glTargetLanguage}/allcommon/cbean/ListResultBean.${glTemplateFileExtension}",$path ,"", "")

    $database.debug("    parseConditionBeanContext()")
    #set ( $path = "${strings.getPackageAsPath(${glPackageBaseCommonCBean})}${glConditionBeanContextName}.${glClassFileExtension}" )
    $generator.parse("om/${glTargetLanguage}/allcommon/cbean/ConditionBeanContext.${glTemplateFileExtension}",$path ,"", "")

    $database.debug("    parseConditionBean()")
    #set ( $path = "${strings.getPackageAsPath(${glPackageBaseCommonCBean})}${glConditionBeanInterfaceName}.${glClassFileExtension}" )
    $generator.parse("om/${glTargetLanguage}/allcommon/cbean/ConditionBean.${glTemplateFileExtension}",$path ,"", "")

    $database.debug("    parseConditionQuery()")
    #set ( $path = "${strings.getPackageAsPath(${glPackageBaseCommonCBean})}${glConditionQueryInterfaceName}.${glClassFileExtension}" )
    $generator.parse("om/${glTargetLanguage}/allcommon/cbean/ConditionQuery.${glTemplateFileExtension}",$path ,"", "")

    $database.debug("    parsePagingBean()")
    #set ( $path = "${strings.getPackageAsPath(${glPackageBaseCommonCBean})}${glPagingBeanInterfaceName}.${glClassFileExtension}" )
    $generator.parse("om/${glTargetLanguage}/allcommon/cbean/PagingBean.${glTemplateFileExtension}",$path ,"", "")

    $database.debug("    parseOrderByBean()")
    #set ( $path = "${strings.getPackageAsPath(${glPackageBaseCommonCBean})}${glOrderByBeanInterfaceName}.${glClassFileExtension}" )
    $generator.parse("om/${glTargetLanguage}/allcommon/cbean/OrderByBean.${glTemplateFileExtension}",$path ,"", "")

    $database.debug("    parseSelectResource()")
    #set ( $path = "${strings.getPackageAsPath(${glPackageBaseCommonCBean})}${glSelectResourceInterfaceName}.${glClassFileExtension}" )
    $generator.parse("om/${glTargetLanguage}/allcommon/cbean/SelectResource.${glTemplateFileExtension}",$path ,"", "")

    ## Setup java directory.
    $database.setupJavaDir_for_abstractCBean()

    #set ($path = $strings.getPackageAsPath(${glPackageBaseCommonCBean}))
    $database.makeDirectory($path)

    $database.debug("    parseAbstractConditionBean")
    #set ( $path = "${strings.getPackageAsPath(${glPackageBaseCommonCBean})}${glConditionBeanAbstractName}.${glClassFileExtension}" )
    $generator.parse("om/${glTargetLanguage}/allcommon/cbean/AbstractConditionBean.${glTemplateFileExtension}",$path ,"", "")

    $database.debug("    parseAbstractConditionQuery")
    #set ( $path = "${strings.getPackageAsPath(${glPackageBaseCommonCBean})}${glConditionQueryAbstractName}.${glClassFileExtension}" )
    $generator.parse("om/${glTargetLanguage}/allcommon/cbean/AbstractConditionQuery.${glTemplateFileExtension}",$path ,"", "")

    ## -----------------------------------------------------
    ##                allcommon condition-bean condition-key
    ##                --------------------------------------
    ## Setup java directory for allcommon.
    $database.setupJavaDir_for_allcommon()

    #set ($path = $strings.getPackageAsPath(${glPackageBaseCommonCKey}))
    $database.makeDirectory($path)

    $database.debug("    parseConditionKey")
    #set ( $path = "${strings.getPackageAsPath(${glPackageBaseCommonCKey})}${glConditionKeyName}.${glClassFileExtension}" )
    $generator.parse("om/${glTargetLanguage}/allcommon/cbean/ckey/ConditionKey.${glTemplateFileExtension}",$path ,"", "")

    $database.debug("    parseConditionKey_equal")
    #set ( $path = "${strings.getPackageAsPath(${glPackageBaseCommonCKey})}${glConditionKeyName}Equal.${glClassFileExtension}" )
    $generator.parse("om/${glTargetLanguage}/allcommon/cbean/ckey/ConditionKey_equal.${glTemplateFileExtension}",$path ,"", "")

    $database.debug("    parseConditionKey_notEqual")
    #set ( $path = "${strings.getPackageAsPath(${glPackageBaseCommonCKey})}${glConditionKeyName}NotEqual.${glClassFileExtension}" )
    $generator.parse("om/${glTargetLanguage}/allcommon/cbean/ckey/ConditionKey_notEqual.${glTemplateFileExtension}",$path ,"", "")

    $database.debug("    parseConditionKey_greaterThan")
    #set ( $path = "${strings.getPackageAsPath(${glPackageBaseCommonCKey})}${glConditionKeyName}GreaterThan.${glClassFileExtension}" )
    $generator.parse("om/${glTargetLanguage}/allcommon/cbean/ckey/ConditionKey_greaterThan.${glTemplateFileExtension}",$path ,"", "")

    $database.debug("    parseConditionKey_lessThan")
    #set ( $path = "${strings.getPackageAsPath(${glPackageBaseCommonCKey})}${glConditionKeyName}LessThan.${glClassFileExtension}" )
    $generator.parse("om/${glTargetLanguage}/allcommon/cbean/ckey/ConditionKey_lessThan.${glTemplateFileExtension}",$path ,"", "")

    $database.debug("    parseConditionKey_greaterEqual")
    #set ( $path = "${strings.getPackageAsPath(${glPackageBaseCommonCKey})}${glConditionKeyName}GreaterEqual.${glClassFileExtension}" )
    $generator.parse("om/${glTargetLanguage}/allcommon/cbean/ckey/ConditionKey_greaterEqual.${glTemplateFileExtension}",$path ,"", "")

    $database.debug("    parseConditionKey_lessEqual")
    #set ( $path = "${strings.getPackageAsPath(${glPackageBaseCommonCKey})}${glConditionKeyName}LessEqual.${glClassFileExtension}" )
    $generator.parse("om/${glTargetLanguage}/allcommon/cbean/ckey/ConditionKey_lessEqual.${glTemplateFileExtension}",$path ,"", "")

    $database.debug("    parseConditionKey_prefixSearch")
    #set ( $path = "${strings.getPackageAsPath(${glPackageBaseCommonCKey})}${glConditionKeyName}PrefixSearch.${glClassFileExtension}" )
    $generator.parse("om/${glTargetLanguage}/allcommon/cbean/ckey/ConditionKey_prefixSearch.${glTemplateFileExtension}",$path ,"", "")

    #if ($database.isTargetLanguageJava())
      $database.debug("    parseConditionKey_likeSearch")
      #set ( $path = "${strings.getPackageAsPath(${glPackageBaseCommonCKey})}${glConditionKeyName}LikeSearch.${glClassFileExtension}" )
      $generator.parse("om/${glTargetLanguage}/allcommon/cbean/ckey/ConditionKey_likeSearch.${glTemplateFileExtension}",$path ,"", "")
    #end

    $database.debug("    parseConditionKey_inScope")
    #set ( $path = "${strings.getPackageAsPath(${glPackageBaseCommonCKey})}${glConditionKeyName}InScope.${glClassFileExtension}" )
    $generator.parse("om/${glTargetLanguage}/allcommon/cbean/ckey/ConditionKey_inScope.${glTemplateFileExtension}",$path ,"", "")

    $database.debug("    parseConditionKey_notInScope")
    #set ( $path = "${strings.getPackageAsPath(${glPackageBaseCommonCKey})}${glConditionKeyName}NotInScope.${glClassFileExtension}" )
    $generator.parse("om/${glTargetLanguage}/allcommon/cbean/ckey/ConditionKey_notInScope.${glTemplateFileExtension}",$path ,"", "")

    $database.debug("    parseConditionKey_isNull")
    #set ( $path = "${strings.getPackageAsPath(${glPackageBaseCommonCKey})}${glConditionKeyName}IsNull.${glClassFileExtension}" )
    $generator.parse("om/${glTargetLanguage}/allcommon/cbean/ckey/ConditionKey_isNull.${glTemplateFileExtension}",$path ,"", "")

    $database.debug("    parseConditionKey_isNotNull")
    #set ( $path = "${strings.getPackageAsPath(${glPackageBaseCommonCKey})}${glConditionKeyName}IsNotNull.${glClassFileExtension}" )
    $generator.parse("om/${glTargetLanguage}/allcommon/cbean/ckey/ConditionKey_isNotNull.${glTemplateFileExtension}",$path ,"", "")

    #if ($database.isTargetLanguageJava())
      ## -----------------------------------------------------
      ##             allcommon condition-bean condition-option
      ##             -----------------------------------------
      ## Setup java directory for allcommon.
      $database.setupJavaDir_for_allcommon()

      #set ($path = $strings.getPackageAsPath(${glPackageBaseCommonCOption}))
      $database.makeDirectory($path)

      $database.debug("    parseConditionOption")
      #set ( $path = "${strings.getPackageAsPath(${glPackageBaseCommonCOption})}${glConditionOptionInterfaceName}.${glClassFileExtension}" )
      $generator.parse("om/${glTargetLanguage}/allcommon/cbean/coption/ConditionOption.${glTemplateFileExtension}",$path ,"", "")

      $database.debug("    parseSimpleStringOption")
      #set ( $path = "${strings.getPackageAsPath(${glPackageBaseCommonCOption})}${glConditionOptionSimpleStringName}.${glClassFileExtension}" )
      $generator.parse("om/${glTargetLanguage}/allcommon/cbean/coption/SimpleStringOption.${glTemplateFileExtension}",$path ,"", "")

      $database.debug("    parse('FromToOption');")
      #set ( $path = "${strings.getPackageAsPath(${glPackageBaseCommonCOption})}${glConditionOptionFromToName}.${glClassFileExtension}" )
      $generator.parse("om/${glTargetLanguage}/allcommon/cbean/coption/FromToOption.${glTemplateFileExtension}",$path ,"", "")

      $database.debug("    parse('DateFromToOption');")
      #set ( $path = "${strings.getPackageAsPath(${glPackageBaseCommonCOption})}${glConditionOptionDateFromToName}.${glClassFileExtension}" )
      $generator.parse("om/${glTargetLanguage}/allcommon/cbean/coption/DateFromToOption.${glTemplateFileExtension}",$path ,"", "")

      $database.debug("    parseLikeSearchOption")
      #set ( $path = "${strings.getPackageAsPath(${glPackageBaseCommonCOption})}${glConditionOptionLikeSearchName}.${glClassFileExtension}" )
      $generator.parse("om/${glTargetLanguage}/allcommon/cbean/coption/LikeSearchOption.${glTemplateFileExtension}",$path ,"", "")

      $database.debug("    parseInScopeOption")
      #set ( $path = "${strings.getPackageAsPath(${glPackageBaseCommonCOption})}${glConditionOptionInScopeName}.${glClassFileExtension}" )
      $generator.parse("om/${glTargetLanguage}/allcommon/cbean/coption/InScopeOption.${glTemplateFileExtension}",$path ,"", "")

      #set ($path = $strings.getPackageAsPath(${glPackageBaseCommonCOptionParts}))
      $database.makeDirectory($path)

      $database.debug("    parseSplitOptionParts")
      #set ( $path = "${strings.getPackageAsPath(${glPackageBaseCommonCOptionParts})}${glConditionOptionPartsSplitName}.${glClassFileExtension}" )
      $generator.parse("om/${glTargetLanguage}/allcommon/cbean/coption/parts/SplitOptionParts.${glTemplateFileExtension}",$path ,"", "")

      $database.debug("    parseToUpperLowerCaseOptionParts")
      #set ( $path = "${strings.getPackageAsPath(${glPackageBaseCommonCOptionParts})}${glConditionOptionPartsToUpperLowerCaseName}.${glClassFileExtension}" )
      $generator.parse("om/${glTargetLanguage}/allcommon/cbean/coption/parts/ToUpperLowerCaseOptionParts.${glTemplateFileExtension}",$path ,"", "")

      $database.debug("    parseToSingleByteOptionParts")
      #set ( $path = "${strings.getPackageAsPath(${glPackageBaseCommonCOptionParts})}${glConditionOptionPartsToSingleByteName}.${glClassFileExtension}" )
      $generator.parse("om/${glTargetLanguage}/allcommon/cbean/coption/parts/ToSingleByteOptionParts.${glTemplateFileExtension}",$path ,"", "")

      #set ($path = $strings.getPackageAsPath(${glPackageBaseCommonCOptionPartsLocal}))
      $database.makeDirectory($path)

      $database.debug("    parseJapaneseOptionPartsAgent")
      #set ( $path = "${strings.getPackageAsPath(${glPackageBaseCommonCOptionPartsLocal})}${glConditionOptionPartsAgentJapaneseName}.${glClassFileExtension}" )
      $generator.parse("om/${glTargetLanguage}/allcommon/cbean/coption/parts/local/JapaneseOptionPartsAgent.${glTemplateFileExtension}",$path ,"", "")
    #end

    ## -------------------------------------------------------
    ##                allcommon condition-bean condition-value
    ##                ----------------------------------------
    ## Setup java directory for allcommon.
    $database.setupJavaDir_for_allcommon()

    #set ($path = $strings.getPackageAsPath(${glPackageBaseCommonCValue}))
    $database.makeDirectory($path)

    $database.debug("    parseConditionValue")
    #set ( $path = "${strings.getPackageAsPath(${glPackageBaseCommonCValue})}${glConditionValueName}.${glClassFileExtension}" )
    $generator.parse("om/${glTargetLanguage}/allcommon/cbean/cvalue/ConditionValue.${glTemplateFileExtension}",$path ,"", "")

    ## -------------------------------------------------------
    ##                       allcommon condition-bean grouping
    ##                       ---------------------------------
    ## Setup java directory for allcommon.
    $database.setupJavaDir_for_allcommon()

    #if ($database.isTargetLanguageJava() && $database.isAvailableGenerics())
      #set ($path = $strings.getPackageAsPath(${glPackageBaseCommonCBeanGrouping}))
      $database.makeDirectory($path)

      $database.debug("    parseGroupingOption();")
      #set ( $path = "${strings.getPackageAsPath(${glPackageBaseCommonCBeanGrouping})}${glGroupingOptionName}.${glClassFileExtension}" )
      $generator.parse("om/${glTargetLanguage}/allcommon/cbean/grouping/GroupingOption.${glTemplateFileExtension}",$path ,"", "")

      $database.debug("    parseGroupingRowEndDeterminer();")
      #set ( $path = "${strings.getPackageAsPath(${glPackageBaseCommonCBeanGrouping})}${glGroupingRowEndDeterminerName}.${glClassFileExtension}" )
      $generator.parse("om/${glTargetLanguage}/allcommon/cbean/grouping/GroupingRowEndDeterminer.${glTemplateFileExtension}",$path ,"", "")

      $database.debug("    parseGroupingRowResource();")
      #set ( $path = "${strings.getPackageAsPath(${glPackageBaseCommonCBeanGrouping})}${glGroupingRowResourceName}.${glClassFileExtension}" )
      $generator.parse("om/${glTargetLanguage}/allcommon/cbean/grouping/GroupingRowResource.${glTemplateFileExtension}",$path ,"", "")

      $database.debug("    parseGroupingRowSetupper();")
      #set ( $path = "${strings.getPackageAsPath(${glPackageBaseCommonCBeanGrouping})}${glGroupingRowSetupperName}.${glClassFileExtension}" )
      $generator.parse("om/${glTargetLanguage}/allcommon/cbean/grouping/GroupingRowSetupper.${glTemplateFileExtension}",$path ,"", "")

      #set ($path = $strings.getPackageAsPath(${glPackageBaseCommonCBeanMapping}))
      $database.makeDirectory($path)

      $database.debug("    parseEntityDtoMapper();")
      #set ( $path = "${strings.getPackageAsPath(${glPackageBaseCommonCBeanMapping})}${glEntityDtoMapperName}.${glClassFileExtension}" )
      $generator.parse("om/${glTargetLanguage}/allcommon/cbean/mapping/EntityDtoMapper.${glTemplateFileExtension}",$path ,"", "")
    #end

    ## -----------------------------------------------------
    ##                  allcommon condition-bean outside-sql
    ##                  ------------------------------------
    #if ($database.isTargetLanguageJava() && $database.isAvailableGenerics())
      #set ($path = $strings.getPackageAsPath(${glPackageBaseCommonCBeanOutsidesql}))
      $database.makeDirectory($path)

      $database.debug("    parseOutsideSqlContext()")
      #set ( $path = "${strings.getPackageAsPath(${glPackageBaseCommonCBeanOutsidesql})}${glOutsideSqlContextName}.${glClassFileExtension}" )
      $generator.parse("om/${glTargetLanguage}/allcommon/cbean/outsidesql/OutsideSqlContext.${glTemplateFileExtension}",$path ,"", "")
    #end

    ## -----------------------------------------------------
    ##                    allcommon condition-bean page-navi
    ##                    ----------------------------------
    #if ($database.isTargetLanguageJava())
      #set ($path = $strings.getPackageAsPath(${glPackageBaseCommonCBeanPagenavi}))
      $database.makeDirectory($path)

      $database.debug("    parse('PageNumberLink')")
      #set ( $path = "${strings.getPackageAsPath(${glPackageBaseCommonCBeanPagenavi})}${glPageNumberLinkName}.${glClassFileExtension}" )
      $generator.parse("om/${glTargetLanguage}/allcommon/cbean/pagenavi/PageNumberLink.${glTemplateFileExtension}",$path ,"", "")

      #if ($database.isAvailableGenerics())
        $database.debug("    parse('PageNumberLinkSetupper')")
        #set ( $path = "${strings.getPackageAsPath(${glPackageBaseCommonCBeanPagenavi})}${glPageNumberLinkSetupperName}.${glClassFileExtension}" )
        $generator.parse("om/${glTargetLanguage}/allcommon/cbean/pagenavi/PageNumberLinkSetupper.${glTemplateFileExtension}",$path ,"", "")
      #end

      #set ($path = $strings.getPackageAsPath(${glPackageBaseCommonCBeanPagenaviGroup}))
      $database.makeDirectory($path)

      $database.debug("    parse('PageGroupBean')")
      #set ( $path = "${strings.getPackageAsPath(${glPackageBaseCommonCBeanPagenaviGroup})}${glPageGroupBeanName}.${glClassFileExtension}" )
      $generator.parse("om/${glTargetLanguage}/allcommon/cbean/pagenavi/group/PageGroupBean.${glTemplateFileExtension}",$path ,"", "")

      $database.debug("    parse('PageGroupOption')")
      #set ( $path = "${strings.getPackageAsPath(${glPackageBaseCommonCBeanPagenaviGroup})}${glPageGroupOptionName}.${glClassFileExtension}" )
      $generator.parse("om/${glTargetLanguage}/allcommon/cbean/pagenavi/group/PageGroupOption.${glTemplateFileExtension}",$path ,"", "")

      #set ($path = $strings.getPackageAsPath(${glPackageBaseCommonCBeanPagenaviRange}))
      $database.makeDirectory($path)

      $database.debug("    parse('PageRangeBean')")
      #set ( $path = "${strings.getPackageAsPath(${glPackageBaseCommonCBeanPagenaviRange})}${glPageRangeBeanName}.${glClassFileExtension}" )
      $generator.parse("om/${glTargetLanguage}/allcommon/cbean/pagenavi/range/PageRangeBean.${glTemplateFileExtension}",$path ,"", "")

      $database.debug("    parse('PageRangeOption')")
      #set ( $path = "${strings.getPackageAsPath(${glPackageBaseCommonCBeanPagenaviRange})}${glPageRangeOptionName}.${glClassFileExtension}" )
      $generator.parse("om/${glTargetLanguage}/allcommon/cbean/pagenavi/range/PageRangeOption.${glTemplateFileExtension}",$path ,"", "")
    #end

    ## -------------------------------------------------------
    ##                     allcommon condition-bean sql-clause
    ##                     -----------------------------------
    ## Setup java directory for allcommon.
    $database.setupJavaDir_for_allcommon()

    #set ($path = $strings.getPackageAsPath(${glPackageBaseCommonSqlClause}))
    $database.makeDirectory($path)

    $database.debug("    parseSqlClause")
    #set ( $path = "${strings.getPackageAsPath(${glPackageBaseCommonSqlClause})}${glSqlClauseInterfaceName}.${glClassFileExtension}" )
    $generator.parse("om/${glTargetLanguage}/allcommon/cbean/sqlclause/SqlClause.${glTemplateFileExtension}",$path ,"" ,"")

    $database.debug("    parseAbstractSqlClause")
    #set ( $path = "${strings.getPackageAsPath(${glPackageBaseCommonSqlClause})}${glSqlClauseAbstractName}.${glClassFileExtension}" )
    $generator.parse("om/${glTargetLanguage}/allcommon/cbean/sqlclause/AbstractSqlClause.${glTemplateFileExtension}",$path ,"" ,"")

    #if ($database.isTargetLanguageJava())
      $database.debug("    parseSqlClause_derby")
      #set ( $path = "${strings.getPackageAsPath(${glPackageBaseCommonSqlClause})}${glSqlClauseInterfaceName}Derby.${glClassFileExtension}" )
      $generator.parse("om/${glTargetLanguage}/allcommon/cbean/sqlclause/SqlClause_derby.${glTemplateFileExtension}",$path ,"" ,"")

      $database.debug("    parseSqlClause_h2")
      #set ( $path = "${strings.getPackageAsPath(${glPackageBaseCommonSqlClause})}${glSqlClauseInterfaceName}H2.${glClassFileExtension}" )
      $generator.parse("om/${glTargetLanguage}/allcommon/cbean/sqlclause/SqlClause_h2.${glTemplateFileExtension}",$path ,"" ,"")

      $database.debug("    parseSqlClause_oracle")
      #set ( $path = "${strings.getPackageAsPath(${glPackageBaseCommonSqlClause})}${glSqlClauseInterfaceName}Oracle.${glClassFileExtension}" )
      $generator.parse("om/${glTargetLanguage}/allcommon/cbean/sqlclause/SqlClause_oracle.${glTemplateFileExtension}",$path ,"" ,"")

      $database.debug("    parseSqlClause_firebird")
      #set ( $path = "${strings.getPackageAsPath(${glPackageBaseCommonSqlClause})}${glSqlClauseInterfaceName}Firebird.${glClassFileExtension}" )
      $generator.parse("om/${glTargetLanguage}/allcommon/cbean/sqlclause/SqlClause_firebird.${glTemplateFileExtension}",$path ,"" ,"")

      $database.debug("    parseSqlClause_mysql")
      #set ( $path = "${strings.getPackageAsPath(${glPackageBaseCommonSqlClause})}${glSqlClauseInterfaceName}MySql.${glClassFileExtension}" )
      $generator.parse("om/${glTargetLanguage}/allcommon/cbean/sqlclause/SqlClause_mysql.${glTemplateFileExtension}",$path ,"" ,"")

      $database.debug("    parseSqlClause_postgresql")
      #set ( $path = "${strings.getPackageAsPath(${glPackageBaseCommonSqlClause})}${glSqlClauseInterfaceName}PostgreSql.${glClassFileExtension}" )
      $generator.parse("om/${glTargetLanguage}/allcommon/cbean/sqlclause/SqlClause_postgresql.${glTemplateFileExtension}",$path ,"" ,"")

      $database.debug("    parseSqlClause_mssql")
      #set ( $path = "${strings.getPackageAsPath(${glPackageBaseCommonSqlClause})}${glSqlClauseInterfaceName}SqlServer.${glClassFileExtension}" )
      $generator.parse("om/${glTargetLanguage}/allcommon/cbean/sqlclause/SqlClause_mssql.${glTemplateFileExtension}",$path ,"" ,"")

      $database.debug("    parseSqlClause_db2")
      #set ( $path = "${strings.getPackageAsPath(${glPackageBaseCommonSqlClause})}${glSqlClauseInterfaceName}Db2.${glClassFileExtension}" )
      $generator.parse("om/${glTargetLanguage}/allcommon/cbean/sqlclause/SqlClause_db2.${glTemplateFileExtension}",$path ,"" ,"")

      $database.debug("    parseSqlClause_interbase")
      #set ( $path = "${strings.getPackageAsPath(${glPackageBaseCommonSqlClause})}${glSqlClauseInterfaceName}Interbase.${glClassFileExtension}" )
      $generator.parse("om/${glTargetLanguage}/allcommon/cbean/sqlclause/SqlClause_interbase.${glTemplateFileExtension}",$path ,"" ,"")

      $database.debug("    parseSqlClause_default")
      #set ( $path = "${strings.getPackageAsPath(${glPackageBaseCommonSqlClause})}${glSqlClauseInterfaceName}Default.${glClassFileExtension}" )
      $generator.parse("om/${glTargetLanguage}/allcommon/cbean/sqlclause/SqlClause_default.${glTemplateFileExtension}",$path ,"" ,"")
    #end
    #if ($database.isTargetLanguageCSharp())
      $database.debug("    parseSqlClause_${database.DatabaseType}")
      #set ( $path = "${strings.getPackageAsPath(${glPackageBaseCommonSqlClause})}${glSqlClauseInterfaceName}${database.DaoGenDbName}.${glClassFileExtension}" )
      $generator.parse("om/${glTargetLanguage}/allcommon/cbean/sqlclause/SqlClause_${database.DatabaseType}.${glTemplateFileExtension}",$path ,"" ,"")
    #end

    $database.debug("    parseOrderByClause")
    #set ( $path = "${strings.getPackageAsPath(${glPackageBaseCommonSqlClause})}${glOrderByClauseName}.${glClassFileExtension}" )
    $generator.parse("om/${glTargetLanguage}/allcommon/cbean/sqlclause/OrderByClause.${glTemplateFileExtension}",$path ,"" ,"")

    $database.debug("    parseOrderByElement")
    #set ( $path = "${strings.getPackageAsPath(${glPackageBaseCommonSqlClause})}${glOrderByElementName}.${glClassFileExtension}" )
    $generator.parse("om/${glTargetLanguage}/allcommon/cbean/sqlclause/OrderByElement.${glTemplateFileExtension}",$path ,"" ,"")

    $database.debug("}")

    ## -------------------------------------------------------
    ##                                        allcommon dbmeta
    ##                                        ----------------
    ## Setup java directory.
    $database.setupJavaDir_for_allcommon()

    #set ($path = $strings.getPackageAsPath(${glPackageBaseCommonDBMeta}))
    $database.makeDirectory($path)

    $database.debug("public void parseDBMetaClass() {")
    $database.debug("    parseDBMeta();")
    #set ( $path = "${strings.getPackageAsPath(${glPackageBaseCommonDBMeta})}${glDBMetaInterfaceName}.${glClassFileExtension}" )
    $generator.parse("om/${glTargetLanguage}/allcommon/dbmeta/DBMeta.${glTemplateFileExtension}",$path,"", "")

    $database.debug("    parseAbstractDBMeta();")
    #set ( $path = "${strings.getPackageAsPath(${glPackageBaseCommonDBMeta})}${glDBMetaAbstractName}.${glClassFileExtension}" )
    $generator.parse("om/${glTargetLanguage}/allcommon/dbmeta/AbstractDBMeta.${glTemplateFileExtension}",$path,"", "")

    ## Setup java directory.
    $database.setupJavaDir_for_dbmetaInstanceHandler()

    #set ($path = $strings.getPackageAsPath(${glPackageBaseCommonDBMeta}))
    $database.makeDirectory($path)

    $database.debug("    parseDBMetaInstanceHandler();")
    #set ( $path = "${strings.getPackageAsPath(${glPackageBaseCommonDBMeta})}${glDBMetaInstanceHandlerName}.${glClassFileExtension}" )
    $generator.parse("om/${glTargetLanguage}/allcommon/dbmeta/DBMetaInstanceHandler.${glTemplateFileExtension}",$path,"", "")

    ## -------------------------------------------------------
    ##                                     allcommon exception
    ##                                     -------------------
    ## Setup java directory for allcommon.
    $database.setupJavaDir_for_allcommon()

    #set ($path = $strings.getPackageAsPath(${glPackageBaseCommonException}))
    $database.makeDirectory($path)

    $database.debug("public void parseExceptionClass() {")
##    #if ($database.isTargetLanguageCSharp())
##      $database.debug("    parseDaoExceptionContext();")
##      #set ( $path = "${strings.getPackageAsPath(${glPackageBaseCommonException})}${glDaoExceptionContextName}.${glClassFileExtension}" )
##      $generator.parse("om/${glTargetLanguage}/allcommon/exception/DaoExceptionContext.${glTemplateFileExtension}",$path,"", "")
##    #end

    $database.debug("    parseRecordHasAlreadyBeenDeletedException();")
    #set ( $path = "${strings.getPackageAsPath(${glPackageBaseCommonException})}${glRecordHasAlreadyBeenDeletedException}.${glClassFileExtension}" )
    $generator.parse("om/${glTargetLanguage}/allcommon/exception/RecordHasAlreadyBeenDeletedException.${glTemplateFileExtension}",$path,"", "")

    $database.debug("    parseRecordHasOverlappedException();")
    #set ( $path = "${strings.getPackageAsPath(${glPackageBaseCommonException})}${glRecordHasOverlappedException}.${glClassFileExtension}" )
    $generator.parse("om/${glTargetLanguage}/allcommon/exception/RecordHasOverlappedException.${glTemplateFileExtension}",$path,"", "")

    $database.debug("    parseSelectedCountExceedMaxCountException();")
    #set ( $path = "${strings.getPackageAsPath(${glPackageBaseCommonException})}${glSelectedCountExceedMaxCountExceptionName}.${glClassFileExtension}" )
    $generator.parse("om/${glTargetLanguage}/allcommon/exception/SelectedCountExceedMaxCountException.${glTemplateFileExtension}",$path,"", "")
    $database.debug("}")

    ## -------------------------------------------------------
    ##                                        allcommon helper
    ##                                        ----------------
    ## Setup java directory for allcommon.
    $database.setupJavaDir_for_allcommon()

    #set ($path = $strings.getPackageAsPath(${glPackageBaseCommonHelper}))
    $database.makeDirectory($path)

    $database.debug("public void parseHelperClass() {")

    $database.debug("    parseMapListString();")
    #set ( $path = "${strings.getPackageAsPath(${glPackageBaseCommonHelper})}${glMapListStringName}.${glClassFileExtension}" )
    $generator.parse("om/${glTargetLanguage}/allcommon/helper/MapListString.${glTemplateFileExtension}",$path,"", "")

    $database.debug("    parseMapListStringImpl();")
    #set ( $path = "${strings.getPackageAsPath(${glPackageBaseCommonHelper})}${glMapListStringImplName}.${glClassFileExtension}" )
    $generator.parse("om/${glTargetLanguage}/allcommon/helper/MapListStringImpl.${glTemplateFileExtension}",$path,"", "")

    $database.debug("    parseMapStringBuilder();")
    #set ( $path = "${strings.getPackageAsPath(${glPackageBaseCommonHelper})}${glMapStringBuilderName}.${glClassFileExtension}" )
    $generator.parse("om/${glTargetLanguage}/allcommon/helper/MapStringBuilder.${glTemplateFileExtension}",$path,"", "")

    $database.debug("    parseMapStringBuilderImpl();")
    #set ( $path = "${strings.getPackageAsPath(${glPackageBaseCommonHelper})}${glMapStringBuilderImplName}.${glClassFileExtension}" )
    $generator.parse("om/${glTargetLanguage}/allcommon/helper/MapStringBuilderImpl.${glTemplateFileExtension}",$path,"", "")

    #if ($database.isTargetLanguageJava())
      #set ($path = $strings.getPackageAsPath(${glPackageBaseCommonHelperCharacter}))
      $database.makeDirectory($path)

      #set ($path = $strings.getPackageAsPath(${glPackageBaseCommonHelperCharacterImpl}))
      $database.makeDirectory($path)

      $database.debug("    parseGeneralCharacter();")
      #set ( $path = "${strings.getPackageAsPath(${glPackageBaseCommonHelperCharacter})}${glGeneralCharacterName}.${glClassFileExtension}" )
      $generator.parse("om/${glTargetLanguage}/allcommon/helper/character/GeneralCharacter.${glTemplateFileExtension}",$path,"", "")

      $database.debug("    parseGeneralCharacterImpl();")
      #set ( $path = "${strings.getPackageAsPath(${glPackageBaseCommonHelperCharacterImpl})}${glGeneralCharacterImplName}.${glClassFileExtension}" )
      $generator.parse("om/${glTargetLanguage}/allcommon/helper/character/impl/GeneralCharacterImpl.${glTemplateFileExtension}",$path,"", "")

      $database.debug("    parseJapaneseCharacter();")
      #set ( $path = "${strings.getPackageAsPath(${glPackageBaseCommonHelperCharacter})}${glJapaneseCharacterName}.${glClassFileExtension}" )
      $generator.parse("om/${glTargetLanguage}/allcommon/helper/character/JapaneseCharacter.${glTemplateFileExtension}",$path,"", "")

      $database.debug("    parseJapaneseCharacterImpl();")
      #set ( $path = "${strings.getPackageAsPath(${glPackageBaseCommonHelperCharacterImpl})}${glJapaneseCharacterImplName}.${glClassFileExtension}" )
      $generator.parse("om/${glTargetLanguage}/allcommon/helper/character/impl/JapaneseCharacterImpl.${glTemplateFileExtension}",$path,"", "")

      #set ($path = $strings.getPackageAsPath(${glPackageBaseCommonHelperToken}))
      $database.makeDirectory($path)

      #set ($path = $strings.getPackageAsPath(${glPackageBaseCommonHelperTokenLine}))
      $database.makeDirectory($path)

      #set ($path = $strings.getPackageAsPath(${glPackageBaseCommonHelperTokenLineImpl}))
      $database.makeDirectory($path)

      #set ($path = $strings.getPackageAsPath(${glPackageBaseCommonHelperTokenFile}))
      $database.makeDirectory($path)

      #set ($path = $strings.getPackageAsPath(${glPackageBaseCommonHelperTokenFileImpl}))
      $database.makeDirectory($path)

      $database.debug("    parseLineToken();")
      #set ( $path = "${strings.getPackageAsPath(${glPackageBaseCommonHelperTokenLine})}${glLineTokenName}.${glClassFileExtension}" )
      $generator.parse("om/${glTargetLanguage}/allcommon/helper/token/line/LineToken.${glTemplateFileExtension}",$path,"", "")

      $database.debug("    parseLineTokenImpl();")
      #set ( $path = "${strings.getPackageAsPath(${glPackageBaseCommonHelperTokenLineImpl})}${glLineTokenImplName}.${glClassFileExtension}" )
      $generator.parse("om/${glTargetLanguage}/allcommon/helper/token/line/impl/LineTokenImpl.${glTemplateFileExtension}",$path,"", "")

      $database.debug("    parseLineTokenizingOption();")
      #set ( $path = "${strings.getPackageAsPath(${glPackageBaseCommonHelperTokenLine})}${glLineTokenizingOptionName}.${glClassFileExtension}" )
      $generator.parse("om/${glTargetLanguage}/allcommon/helper/token/line/LineTokenizingOption.${glTemplateFileExtension}",$path,"", "")

      $database.debug("    parseLineMakingOption();")
      #set ( $path = "${strings.getPackageAsPath(${glPackageBaseCommonHelperTokenLine})}${glLineMakingOptionName}.${glClassFileExtension}" )
      $generator.parse("om/${glTargetLanguage}/allcommon/helper/token/line/LineMakingOption.${glTemplateFileExtension}",$path,"", "")

      $database.debug("    parseFileToken();")
      #set ( $path = "${strings.getPackageAsPath(${glPackageBaseCommonHelperTokenFile})}${glFileTokenName}.${glClassFileExtension}" )
      $generator.parse("om/${glTargetLanguage}/allcommon/helper/token/file/FileToken.${glTemplateFileExtension}",$path,"", "")

      $database.debug("    parseFileTokenImpl();")
      #set ( $path = "${strings.getPackageAsPath(${glPackageBaseCommonHelperTokenFileImpl})}${glFileTokenImplName}.${glClassFileExtension}" )
      $generator.parse("om/${glTargetLanguage}/allcommon/helper/token/file/impl/FileTokenImpl.${glTemplateFileExtension}",$path,"", "")

      $database.debug("    parseFileTokenizingOption();")
      #set ( $path = "${strings.getPackageAsPath(${glPackageBaseCommonHelperTokenFile})}${glFileTokenizingOptionName}.${glClassFileExtension}" )
      $generator.parse("om/${glTargetLanguage}/allcommon/helper/token/file/FileTokenizingOption.${glTemplateFileExtension}",$path,"", "")

      $database.debug("    parseFileTokenizingRowResource();")
      #set ( $path = "${strings.getPackageAsPath(${glPackageBaseCommonHelperTokenFile})}${glFileTokenizingRowResourceName}.${glClassFileExtension}" )
      $generator.parse("om/${glTargetLanguage}/allcommon/helper/token/file/FileTokenizingRowResource.${glTemplateFileExtension}",$path,"", "")

      $database.debug("    parseFileTokenizingCallback();")
      #set ( $path = "${strings.getPackageAsPath(${glPackageBaseCommonHelperTokenFile})}${glFileTokenizingCallbackName}.${glClassFileExtension}" )
      $generator.parse("om/${glTargetLanguage}/allcommon/helper/token/file/FileTokenizingCallback.${glTemplateFileExtension}",$path,"", "")

      $database.debug("    parseFileTokenizingHeaderInfo();")
      #set ( $path = "${strings.getPackageAsPath(${glPackageBaseCommonHelperTokenFile})}${glFileTokenizingHeaderInfoName}.${glClassFileExtension}" )
      $generator.parse("om/${glTargetLanguage}/allcommon/helper/token/file/FileTokenizingHeaderInfo.${glTemplateFileExtension}",$path,"", "")

      $database.debug("    parseFileMakingOption();")
      #set ( $path = "${strings.getPackageAsPath(${glPackageBaseCommonHelperTokenFile})}${glFileMakingOptionName}.${glClassFileExtension}" )
      $generator.parse("om/${glTargetLanguage}/allcommon/helper/token/file/FileMakingOption.${glTemplateFileExtension}",$path,"", "")

      $database.debug("    parseFileMakingRowResource();")
      #set ( $path = "${strings.getPackageAsPath(${glPackageBaseCommonHelperTokenFile})}${glFileMakingRowResourceName}.${glClassFileExtension}" )
      $generator.parse("om/${glTargetLanguage}/allcommon/helper/token/file/FileMakingRowResource.${glTemplateFileExtension}",$path,"", "")

      $database.debug("    parseFileMakingCallback();")
      #set ( $path = "${strings.getPackageAsPath(${glPackageBaseCommonHelperTokenFile})}${glFileMakingCallbackName}.${glClassFileExtension}" )
      $generator.parse("om/${glTargetLanguage}/allcommon/helper/token/file/FileMakingCallback.${glTemplateFileExtension}",$path,"", "")

      $database.debug("    parseFileMakingHeaderInfo();")
      #set ( $path = "${strings.getPackageAsPath(${glPackageBaseCommonHelperTokenFile})}${glFileMakingHeaderInfoName}.${glClassFileExtension}" )
      $generator.parse("om/${glTargetLanguage}/allcommon/helper/token/file/FileMakingHeaderInfo.${glTemplateFileExtension}",$path,"", "")

      $database.debug("    parseFileMakingSimpleFacade();")
      #set ( $path = "${strings.getPackageAsPath(${glPackageBaseCommonHelperTokenFile})}${glFileMakingSimpleFacadeName}.${glClassFileExtension}" )
      $generator.parse("om/${glTargetLanguage}/allcommon/helper/token/file/FileMakingSimpleFacade.${glTemplateFileExtension}",$path,"", "")

      $database.debug("    parseFileMakingSimpleFacadeImpl();")
      #set ( $path = "${strings.getPackageAsPath(${glPackageBaseCommonHelperTokenFileImpl})}${glFileMakingSimpleFacadeImplName}.${glClassFileExtension}" )
      $generator.parse("om/${glTargetLanguage}/allcommon/helper/token/file/impl/FileMakingSimpleFacadeImpl.${glTemplateFileExtension}",$path,"", "")
    #end

    $database.debug("}")

    ## -------------------------------------------------------
    ##                                allcommon classification
    ##                                ------------------------
    ## Setup java directory for allcommon.
    $database.setupJavaDir_for_allcommon()

    #set ($path = $strings.getPackageAsPath(${glPackageBaseCommon}))
    $database.makeDirectory($path)

    #if ($database.hasClassificationDefinitionMap())
      $database.debug("parseAllcommonClassification() {")
      $database.debug("    parse('ClassificationDefinition');")
      #set ( $path = "${strings.getPackageAsPath(${glPackageBaseCommon})}${glClassificationDefinition}.${glClassFileExtension}" )
      $generator.parse("om/${glTargetLanguage}/allcommon/ClassificationDefinition.${glTemplateFileExtension}",$path ,"" ,"")
      $database.debug("}")
    #end

    ## -------------------------------------------------------
    ##                                   allcommon s2container
    ##                                   ---------------------
    ## Setup java directory for daoDicon.
    $database.setupJavaDir_for_daoDicon()
    #if ($database.isTargetLanguageJava())
      $database.debug("parseAllcommonS2Container() {")
      #if ($database.isAvailableHotDeploy())
        #set ($path = $strings.getPackageAsPath(${glPackageBaseCommonS2Container}))
        $database.makeDirectory($path)

        $database.debug("    parse('BehaviorCreator');")
        #set ( $path = "${strings.getPackageAsPath(${glPackageBaseCommonS2Container})}${glBehaviorCreator}.${glClassFileExtension}" )
        $generator.parse("om/${glTargetLanguage}/allcommon/s2container/BehaviorCreator.${glTemplateFileExtension}",$path ,"" ,"")

        #foreach ($dbfluteDiconPackageName in $database.DBFluteDiconPackageNameList)
          #set ($path = "${dbfluteDiconPackageName}" )
          $database.makeDirectory($path)

          #set ($path = "${dbfluteDiconPackageName}/${glDBFluteDiconFileName}" )
          $database.debug("    ${path}")
          $generator.parse("om/${glTargetLanguage}/allcommon/s2container/DBFluteHotDeployDicon.${glTemplateFileExtension}", $path, "", "")

          #set ($path = "${dbfluteDiconPackageName}/${glCreatorDiconFileName}" )
          $database.debug("    ${path}")
          $generator.parse("om/${glTargetLanguage}/allcommon/s2container/DBFluteCreatorDicon.${glTemplateFileExtension}", $path, "", "")

          #set ($path = "${dbfluteDiconPackageName}/${glCustomizerDiconFileName}" )
          $database.debug("    ${path}")
          $generator.parse("om/${glTargetLanguage}/allcommon/s2container/DBFluteCustomizerDicon.${glTemplateFileExtension}", $path, "", "")
        #end
      #else
        #foreach ($dbfluteDiconPackageName in $database.DBFluteDiconPackageNameList)
          #set ($path = "${dbfluteDiconPackageName}" )
          $database.makeDirectory($path)

          #set ($path = "${dbfluteDiconPackageName}/${glDBFluteDiconFileName}" )
          $database.debug("    ${path}")
          $generator.parse("om/${glTargetLanguage}/allcommon/s2container/DBFluteNormalDicon.${glTemplateFileExtension}", $path, "", "")
        #end
      #end
      $database.debug("}")
    #else
      $database.debug("parseDBFluteDicon() {")
      #foreach ($dbfluteDiconPackageName in $database.DBFluteDiconPackageNameList)
        #set ($path = "${dbfluteDiconPackageName}" )
        $database.makeDirectory($path)

        #set ($path = "${dbfluteDiconPackageName}/${glDBFluteDiconFileName}" )
        $database.debug("    ${path}")
        $generator.parse("om/${glTargetLanguage}/allcommon/DaoDicon.${glTemplateFileExtension}", $path, "", "")
      #end
    #end

    ## -------------------------------------------------------
    ##                                  allcommon dao-selector
    ##                                  ----------------------
    ## Setup java directory for daoSelector.
    $database.setupJavaDir_for_daoSelector()

    #set ($path = $strings.getPackageAsPath(${glPackageBaseCommon}))
    $database.makeDirectory($path)

    $database.debug("public void parseDaoSelector() {")
    $database.debug("    parseDaoSelector();")
    #set ( $path = "${strings.getPackageAsPath(${glPackageBaseCommon})}${glDaoSelectorInterfaceName}.${glClassFileExtension}" )
    $generator.parse("om/${glTargetLanguage}/allcommon/DaoSelector.${glTemplateFileExtension}",$path ,"", "")

    ## -----------------------------------------------------------------------------------------------------
    ##                                                                              Parse cache dao-selector
    ##                                                                              ------------------------
    ## Setup java directory for cacheDaoSelector.
    $database.setupJavaDir_for_cacheDaoSelector()

    #set ($path = $strings.getPackageAsPath(${glPackageBaseCommon}))
    $database.makeDirectory($path)

    $database.debug("    parseCacheDaoSelector();")
    #set ( $path = "${strings.getPackageAsPath(${glPackageBaseCommon})}${glCacheDaoSelectorName}.${glClassFileExtension}" )
    $generator.parse("om/${glTargetLanguage}/allcommon/CacheDaoSelector.${glTemplateFileExtension}",$path ,"", "")
    $database.debug("}")

    ## -----------------------------------------------------------------------------------------------------
    ##                                                                                   Parse gen meta data
    ##                                                                                   -------------------
    ## Setup java directory for genMetaData.
    $database.setupJavaDir_for_genMetaData()

    #set ($path = $strings.getPackageAsPath(${glPackageBaseCommon}))
    $database.makeDirectory($path)

    $database.debug("parseGenMetaData();")
    #set ( $path = "${strings.getPackageAsPath(${glPackageBaseCommon})}${glGenMetaDataClassName}.${glClassFileExtension}" )
    $generator.parse("om/${glTargetLanguage}/allcommon/GenMetaData.${glTemplateFileExtension}",$path ,"" ,"")

    ## -----------------------------------------------------------------------------------------------------
    ##                                                                               Parse interceptor class
    ##                                                                               -----------------------
    ## Setup java directory for Interceptor.
    $database.setupJavaDir_for_interceptor()

    #set ($path = $strings.getPackageAsPath(${glPackageBaseCommonInterceptor}))
    $database.makeDirectory($path)

    $database.debug("public void parseInterceptorClass() {")
    $database.debug("    parseCommonColumnSetupAbstractInterceptor();")
    #set ( $path = "${strings.getPackageAsPath(${glPackageBaseCommonInterceptor})}${glCommonColumnSetupAbstractInterceptor}.${glClassFileExtension}" )
    $generator.parse("om/${glTargetLanguage}/allcommon/interceptor/CommonColumnSetupAbstractInterceptor.${glTemplateFileExtension}",$path,"", "")

    $database.debug("    parseCommonColumnSetupBeforeInsertInterceptor();")
    #set ( $path = "${strings.getPackageAsPath(${glPackageBaseCommonInterceptor})}${glCommonColumnSetupBeforeInsertInterceptor}.${glClassFileExtension}" )
    $generator.parse("om/${glTargetLanguage}/allcommon/interceptor/CommonColumnSetupBeforeInsertInterceptor.${glTemplateFileExtension}",$path,"", "")

    $database.debug("    parseCommonColumnSetupBeforeUpdateInterceptor();")
    #set ( $path = "${strings.getPackageAsPath(${glPackageBaseCommonInterceptor})}${glCommonColumnSetupBeforeUpdateInterceptor}.${glClassFileExtension}" )
    $generator.parse("om/${glTargetLanguage}/allcommon/interceptor/CommonColumnSetupBeforeUpdateInterceptor.${glTemplateFileExtension}",$path,"", "")

    $database.debug("    parseCommonColumnSetupBeforeDeleteInterceptor();")
    #set ( $path = "${strings.getPackageAsPath(${glPackageBaseCommonInterceptor})}${glCommonColumnSetupBeforeDeleteInterceptor}.${glClassFileExtension}" )
    $generator.parse("om/${glTargetLanguage}/allcommon/interceptor/CommonColumnSetupBeforeDeleteInterceptor.${glTemplateFileExtension}",$path,"", "")
    $database.debug("}")

    ## -----------------------------------------------------------------------------------------------------
    ##                                                                                      Parse jdbc class
    ##                                                                                      ----------------
    #if ($database.isTargetLanguageJava() && $database.isAvailableGenerics())
      $database.setupJavaDir_for_allcommon()
      #if ($database.isMakeTraceablePreparedStatement())
        #set ($path = $strings.getPackageAsPath(${glPackageBaseCommonJdbcHistory}))
        $database.makeDirectory($path)

        $database.debug("    parsePreparedExecutionBeanName();")
        #set ( $path = "${strings.getPackageAsPath(${glPackageBaseCommonJdbcHistory})}${glPreparedExecutionBeanName}.${glClassFileExtension}" )
        $generator.parse("om/${glTargetLanguage}/allcommon/jdbc/history/PreparedExecutionBean.${glTemplateFileExtension}",$path,"", "")

        $database.debug("    parsePreparedParameterElement();")
        #set ( $path = "${strings.getPackageAsPath(${glPackageBaseCommonJdbcHistory})}${glPreparedParameterElementName}.${glClassFileExtension}" )
        $generator.parse("om/${glTargetLanguage}/allcommon/jdbc/history/PreparedParameterElement.${glTemplateFileExtension}",$path,"", "")

        $database.debug("    parseStatementHistory();")
        #set ( $path = "${strings.getPackageAsPath(${glPackageBaseCommonJdbcHistory})}${glStatementHistoryName}.${glClassFileExtension}" )
        $generator.parse("om/${glTargetLanguage}/allcommon/jdbc/history/StatementHistory.${glTemplateFileExtension}",$path,"", "")

        $database.debug("    parseStatementHistoryWitness();")
        #set ( $path = "${strings.getPackageAsPath(${glPackageBaseCommonJdbcHistory})}${glStatementHistoryWitnessName}.${glClassFileExtension}" )
        $generator.parse("om/${glTargetLanguage}/allcommon/jdbc/history/StatementHistoryWitness.${glTemplateFileExtension}",$path,"", "")

        $database.debug("    parseTraceablePreparedStatement();")
        #set ( $path = "${strings.getPackageAsPath(${glPackageBaseCommonJdbcHistory})}${glTraceablePreparedStatementName}.${glClassFileExtension}" )
        $generator.parse("om/${glTargetLanguage}/allcommon/jdbc/history/TraceablePreparedStatement.${glTemplateFileExtension}",$path,"", "")
      #end
    #end

    ## -----------------------------------------------------------------------------------------------------
    ##                                                                            Parse extended s2dao class
    ##                                                                            --------------------------
    ## Setup java directory for s2daoObject.
    $database.setupJavaDir_for_s2daoObject()

    #set ($path = $strings.getPackageAsPath(${glPackageBaseCommonS2Dao}))
    $database.makeDirectory($path)

    #set ( $path = "${strings.getPackageAsPath(${glPackageBaseCommonS2Dao})}${glDaoInterceptor}.${glClassFileExtension}" )
    $generator.parse("om/${glTargetLanguage}/allcommon/s2dao/S2DaoInterceptor.${glTemplateFileExtension}",$path,"", "")

    #set ( $path = "${strings.getPackageAsPath(${glPackageBaseCommonS2Dao})}${glDaoMetaDataExtension}.${glClassFileExtension}" )
    $generator.parse("om/${glTargetLanguage}/allcommon/s2dao/S2DaoMetaDataExtension.${glTemplateFileExtension}",$path,"", "")

    #set ( $path = "${strings.getPackageAsPath(${glPackageBaseCommonS2Dao})}${glDaoMetaDataFactoryImpl}.${glClassFileExtension}" )
    $generator.parse("om/${glTargetLanguage}/allcommon/s2dao/S2DaoMetaDataFactoryImpl.${glTemplateFileExtension}",$path,"", "")

    #if ($database.isTargetLanguageJava() && $database.isVersionAfter1040())
      #set ( $path = "${strings.getPackageAsPath(${glPackageBaseCommonS2Dao})}${glBeanMetaDataFactoryImpl}.${glClassFileExtension}" )
      $generator.parse("om/${glTargetLanguage}/allcommon/s2dao/S2BeanMetaDataFactoryImpl.${glTemplateFileExtension}",$path,"", "")
    #end

    #set ( $path = "${strings.getPackageAsPath(${glPackageBaseCommonS2Dao})}${glSelectDynamicCommand}.${glClassFileExtension}" )
    $generator.parse("om/${glTargetLanguage}/allcommon/s2dao/S2DaoSelectDynamicCommand.${glTemplateFileExtension}",$path,"", "")

    #if ($database.isTargetLanguageJava())
      #set ( $path = "${strings.getPackageAsPath(${glPackageBaseCommonS2Dao})}${glDaoStatementFactory}.${glClassFileExtension}" )
      $generator.parse("om/${glTargetLanguage}/allcommon/s2dao/S2DaoStatementFactory.${glTemplateFileExtension}",$path,"", "")
    #end

    #set ( $path = "${strings.getPackageAsPath(${glPackageBaseCommonS2Dao})}${glFetchNarrowingResultSetFactory}.${glClassFileExtension}" )
    $generator.parse("om/${glTargetLanguage}/allcommon/s2dao/FetchNarrowingResultSetFactory.${glTemplateFileExtension}",$path,"", "")

    #set ( $path = "${strings.getPackageAsPath(${glPackageBaseCommonS2Dao})}${glFetchNarrowingResultSetWrapper}.${glClassFileExtension}" )
    $generator.parse("om/${glTargetLanguage}/allcommon/s2dao/FetchNarrowingResultSetWrapper.${glTemplateFileExtension}",$path,"", "")

    ## -----------------------------------------------------------------------------------------------------
    ##                                                                                    Parse table object
    ##                                                                                    ------------------
    ## Setup java directory for base.
    $database.setupJavaDir_for_base()

    ## for Sql2Entity
    #set ($isSql2Entity = false)

    #if ($database.isAvailableBehaviorGeneration())
      #set ($path = $strings.getPackageAsPath(${glPackageBaseBhv}))
      $database.makeDirectory($path)
    #end
    #set ($path = $strings.getPackageAsPath(${glPackageBaseDao}))
    $database.makeDirectory($path)
    #set ($path = $strings.getPackageAsPath(${glPackageBaseEntity}))
    $database.makeDirectory($path)
    #set ($path = $strings.getPackageAsPath(${glPackageBaseDBMeta}))
    $database.makeDirectory($path)

    ## Setup java directory for cbean.
    $database.setupJavaDir_for_base_cbean()

    #set ($path = $strings.getPackageAsPath(${glPackageBaseCB}))
    $database.makeDirectory($path)

    #set ($path = $strings.getPackageAsPath(${glPackageBaseCQ}))
    $database.makeDirectory($path)

    #set ($path = $strings.getPackageAsPath(${glPackageCIQ}))
    $database.makeDirectory($path)

    #set ($path = $strings.getPackageAsPath(${glPackageCQ}))
    $database.makeDirectory($path)

    #set ($path = $strings.getPackageAsPath(${glPackageNss}))
    $database.makeDirectory($path)

    ## Setup java directory for cbean.
    $database.setupJavaDir_for_extended_cbean()

    #set ($path = $strings.getPackageAsPath(${glPackageCB}))
    $database.makeDirectory($path)

    ## Setup java directory for extended.
    $database.setupJavaDir_for_extended()

    #if ($database.isAvailableBehaviorGeneration())
      #set ($path = $strings.getPackageAsPath(${glPackageExtendedBhv}))
      $database.makeDirectory($path)
    #end
    #set ($path = $strings.getPackageAsPath(${glPackageExtendedDao}))
    $database.makeDirectory($path)
    #set ($path = $strings.getPackageAsPath(${glPackageExtendedEntity}))
    $database.makeDirectory($path)

    $database.debug("public void parseTableList() {")
    $database.debug("    final List<Table> tableList = getTableList();")
    $database.debug("    for (Table tbl : tableList) {")
    ##
    ## Loop by tables.
    ##
    #foreach ($table in $database.Tables)
      #if (!$table.isForReferenceOnly())

        $database.debug("        parseTable(tbl); // ${table.Name} : ${table.JavaName}")
        ##
        ## Java name of the current table.
        ##
        #set ($myBaseBhvClassName = "${glProjectPrefix}${glBasePrefix}${table.JavaName}Bhv")
        #set ($myBaseBhvPackageName = "${glPackageBaseBhv}")
        #set ($myExtendedBhvClassName = "${glProjectPrefix}${table.JavaName}Bhv")
        #set ($myExtendedBhvPackageName = "${glPackageExtendedBhv}")

        #set ($myBaseDaoClassName = "${glProjectPrefix}${glBasePrefix}${table.JavaName}Dao")
        #set ($myBaseDaoPackageName = "${glPackageBaseDao}")

        #set ($myExtendedDaoClassName = "${glProjectPrefix}${table.JavaName}Dao")
        #set ($myExtendedDaoPackageName = "${glPackageExtendedDao}")

        #set ($myBaseObjectClassName = "${glProjectPrefix}${glBasePrefix}${table.JavaName}${glBaseSuffixForEntity}")
        #set ($myBaseEntityPackageName = "${glPackageBaseEntity}")

        #set ($myExtendedObjectClassName = "${glProjectPrefix}${table.JavaName}")
        #set ($myExtendedEntityPackageName = "${glPackageExtendedEntity}")

        #set ($myBaseConditionBeanClassName = "${myBaseObjectClassName}${glConditionBeanInitialName}")
        #set ($myConditionBeanClassName = "${myExtendedObjectClassName}${glConditionBeanInitialName}")
        #set ($myAbstractBaseConditionQueryClassName = "${glProjectPrefix}Abstract${glBasePrefix}${table.JavaName}${glConditionQueryInitialName}")
        #set ($myBaseConditionQueryClassName = "${myBaseObjectClassName}${glConditionQueryInitialName}")
        #set ($myConditionQueryClassName = "${myExtendedObjectClassName}${glConditionQueryInitialName}")
        #set ($myConditionInlineQueryClassName = "${myExtendedObjectClassName}CIQ")
        #set ($myNestSelectSetupperClassName = "${myExtendedObjectClassName}Nss")

        #set ($myDBMetaClassName = "${glProjectPrefix}${table.JavaName}Dbm")
        #set ($myDBMetaPackageName = "${glPackageBaseDBMeta}")

        #set ($myAttachedCBArgsString = "${glPackageCB}.${myConditionBeanClassName} ${glAttachedCBArgsVariableName}")

        #set ($myEntityVariableName = "${table.uncapitalisedJavaName}")
        #set ($myEntityListVariableName = "${table.uncapitalisedJavaName}List")
        #set ($myCBVariableName = "${table.uncapitalisedJavaName}")
        #set ($myBehaviorVariableName = "${table.uncapitalisedJavaName}Bhv")

        #set ($isExistBehavior = false)
        #if ($database.isAvailableBehaviorGeneration())
          #set ($isExistBehavior = true)
        #end
        #set ($isExistDao = true)
        #set ($isExistConditionBean = true)

        ## Setup java directory for base.
        $database.setupJavaDir_for_base()

        #if ($database.isAvailableBehaviorGeneration())
          #if ($database.isTargetLanguageCSharp())
            #set ($myBaseBhvInterfaceName = "${glProjectPrefix}${glBasePrefix}${table.JavaName}Bhv")
            #set ($myExtendedBhvInterfaceName = "${glProjectPrefix}${table.JavaName}Bhv")
            #set ($myBaseBhvClassName = "${glProjectPrefix}${glBasePrefix}${table.JavaName}BhvImpl")
            #set ($myExtendedBhvClassName = "${glProjectPrefix}${table.JavaName}BhvImpl")

            #set ( $path = "${strings.getPackageAsPath(${glPackageBaseBhv})}${myBaseBhvClassName}.${glClassFileExtension}" )
            $generator.parse("om/${glTargetLanguage}/bsbhv/BaseBhvImpl.${glTemplateFileExtension}", $path, "table", $table)

            #set ( $path = "${strings.getPackageAsPath(${glPackageBaseBhv})}${myBaseBhvInterfaceName}.${glClassFileExtension}" )
            $generator.parse("om/${glTargetLanguage}/bsbhv/BaseBhv.${glTemplateFileExtension}", $path, "table", $table)
          #else
            #set ( $path = "${strings.getPackageAsPath(${glPackageBaseBhv})}${myBaseBhvClassName}.${glClassFileExtension}" )
            $generator.parse("om/${glTargetLanguage}/bsbhv/BaseBhv.${glTemplateFileExtension}", $path, "table", $table)
          #end
        #end

        #set ( $path = "${strings.getPackageAsPath(${glPackageBaseDao})}${myBaseDaoClassName}.${glClassFileExtension}" )
        $generator.parse("om/${glTargetLanguage}/bsdao/BaseDao.${glTemplateFileExtension}", $path, "table", $table)

        #set ( $path = "${strings.getPackageAsPath(${glPackageBaseEntity})}${myBaseObjectClassName}.${glClassFileExtension}" )
        $generator.parse("om/${glTargetLanguage}/bsentity/BaseEntity.${glTemplateFileExtension}", $path, "table", $table)

        #set ( $path = "${strings.getPackageAsPath(${glPackageBaseDBMeta})}${myDBMetaClassName}.${glClassFileExtension}" )
        $generator.parse("om/${glTargetLanguage}/bsentity/dbmeta/DBMetaImpl.${glTemplateFileExtension}",$path,"", "")

        ## Setup java directory for extended.
        $database.setupJavaDir_for_extended()

        #if (!$database.isStopGenerateExtendedBhv())
          #if ($database.isAvailableBehaviorGeneration())
            #if ($database.isTargetLanguageCSharp())
              #set ($myBaseBhvInterfaceName = "${glProjectPrefix}${glBasePrefix}${table.JavaName}Bhv")
              #set ($myExtendedBhvInterfaceName = "${glProjectPrefix}${table.JavaName}Bhv")
              #set ($myBaseBhvClassName = "${glProjectPrefix}${glBasePrefix}${table.JavaName}BhvImpl")
              #set ($myExtendedBhvClassName = "${glProjectPrefix}${table.JavaName}BhvImpl")

              #set ( $path = "${strings.getPackageAsPath(${glPackageExtendedBhv})}${myExtendedBhvClassName}.${glClassFileExtension}" )
              #if (!$files.file(${generator.OutputPath},$path).exists())
                $generator.parse("om/${glTargetLanguage}/exbhv/ExtendedBhvImpl.${glTemplateFileExtension}", $path, "table", $table)
              #end

              #set ( $path = "${strings.getPackageAsPath(${glPackageExtendedBhv})}${myExtendedBhvInterfaceName}.${glClassFileExtension}" )
              #if (!$files.file(${generator.OutputPath},$path).exists())
                $generator.parse("om/${glTargetLanguage}/exbhv/ExtendedBhv.${glTemplateFileExtension}", $path, "table", $table)
              #end
            #else
              #set ( $path = "${strings.getPackageAsPath(${glPackageExtendedBhv})}${myExtendedBhvClassName}.${glClassFileExtension}" )
              #if (!$files.file(${generator.OutputPath},$path).exists())
                $generator.parse("om/${glTargetLanguage}/exbhv/ExtendedBhv.${glTemplateFileExtension}", $path, "table", $table)
              #end
            #end
          #end
        #end

        #if (!$database.isStopGenerateExtendedDao())
          #set ( $path = "${strings.getPackageAsPath(${glPackageExtendedDao})}${myExtendedDaoClassName}.${glClassFileExtension}" )
          #if (!$files.file(${generator.OutputPath},$path).exists())
            $generator.parse("om/${glTargetLanguage}/exdao/ExtendedDao.${glTemplateFileExtension}", $path, "table", $table)
          #end
        #end

        #if (!$database.isStopGenerateExtendedEntity())
          #set ( $path = "${strings.getPackageAsPath(${glPackageExtendedEntity})}${myExtendedObjectClassName}.${glClassFileExtension}" )
          #if (!$files.file(${generator.OutputPath},$path).exists())
            $generator.parse("om/${glTargetLanguage}/exentity/ExtendedEntity.${glTemplateFileExtension}", $path, "table", $table)
          #end
        #end

        ## Setup java directory for base-cbean.
        $database.setupJavaDir_for_base_cbean()

        #set ( $path = "${strings.getPackageAsPath(${glPackageBaseCB})}${myBaseConditionBeanClassName}.${glClassFileExtension}" )
        $generator.parse("om/${glTargetLanguage}/cbean/BsConditionBean.${glTemplateFileExtension}", $path, "table", $table)

        #set ( $path = "${strings.getPackageAsPath(${glPackageBaseCQ})}${myAbstractBaseConditionQueryClassName}.${glClassFileExtension}" )
        $generator.parse("om/${glTargetLanguage}/cbean/AbstractBsConditionQuery.${glTemplateFileExtension}", $path, "table", $table)

        #set ( $path = "${strings.getPackageAsPath(${glPackageCIQ})}${myConditionInlineQueryClassName}.${glClassFileExtension}" )
        $generator.parse("om/${glTargetLanguage}/cbean/BsConditionInlineQuery.${glTemplateFileExtension}", $path, "table", $table)

        #if ($database.isJavaDirOnlyOne())
          #set ( $path = "${strings.getPackageAsPath(${glPackageBaseCQ})}${myBaseConditionQueryClassName}.${glClassFileExtension}" )
          $generator.parse("om/${glTargetLanguage}/cbean/BsConditionQuery.${glTemplateFileExtension}", $path, "table", $table)
        #else
          #set ( $path = "${strings.getPackageAsPath(${glPackageCQ})}${myConditionQueryClassName}.${glClassFileExtension}" )
          $generator.parse("om/${glTargetLanguage}/cbean/BsConditionQuery.${glTemplateFileExtension}", $path, "table", $table)
        #end

        #set ( $path = "${strings.getPackageAsPath(${glPackageNss})}${myNestSelectSetupperClassName}.${glClassFileExtension}" )
        $generator.parse("om/${glTargetLanguage}/cbean/NestSelectSetupper.${glTemplateFileExtension}", $path, "table", $table)

        ## Setup java directory for extended-cbean.
        $database.setupJavaDir_for_extended_cbean()

        #set ( $path = "${strings.getPackageAsPath(${glPackageCB})}${myConditionBeanClassName}.${glClassFileExtension}" )
        #if (!$files.file(${generator.OutputPath},$path).exists())
          $generator.parse("om/${glTargetLanguage}/cbean/ExConditionBean.${glTemplateFileExtension}", $path, "table", $table)
        #end

        #if ($database.isJavaDirOnlyOne())
          #set ( $path = "${strings.getPackageAsPath(${glPackageCQ})}${myConditionQueryClassName}.${glClassFileExtension}" )
          #if (!$files.file(${generator.OutputPath},$path).exists())
            $generator.parse("om/${glTargetLanguage}/cbean/ExConditionQuery.${glTemplateFileExtension}", $path, "table", $table)
          #end
        #end
      #end
    #end
    $database.debug("    }")
    $database.debug("}")
  #end
#end
