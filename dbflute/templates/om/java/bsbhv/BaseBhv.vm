${database.allClassCopyright}package ${glPackageBaseBhv};

#set ($myClassName = "${myBaseBhvClassName}")

import ${glPackageBaseCommon}.*;
#if ($database.isAvailableGenerics())
import ${glPackageBaseCommonBhvSetup}.${glConditionBeanSetupperName};
import ${glPackageBaseCommonBhvSetup}.${glValueLabelSetupperName};
import ${glPackageBaseCommonDBMetaHierarchy}.${glHierarchyArrangerName};
import ${glPackageBaseCommonDBMetaHierarchy}.${glHierarchyBasicRequestName};
import ${glPackageBaseCommonDBMetaHierarchy}.${glHierarchyRequestName};
#end
import ${glPackageBaseCommonCBean}.${glConditionBeanInterfaceName};
import ${glPackageBaseCommonCBean}.${glListResultBeanName};
import ${glPackageBaseCommonCBean}.${glPagingBeanInterfaceName};
import ${glPackageBaseCommonCBean}.${glPagingResultBeanName};
import ${glPackageBaseCommonDBMeta}.${glDBMetaInterfaceName};
#if (${table.hasOnlyOnePrimaryKey()})
  #if (${table.hasReferrer()})

import ${glPackageExtendedBhv}.*;
  #end
#end

import ${glPackageExtendedDao}.*;
import ${glPackageExtendedEntity}.*;
import ${myDBMetaPackageName}.*;
import ${glPackageCB}.*;

#set ($myExtendClassName = "")
#if ($table.isWritable())
  #set ($myExtendClassName = "${glBehaviorWritableAbstractName}")
#else
  #set ($myExtendClassName = "${glBehaviorReadableAbstractName}")
#end


/**
 * The behavior of ${table.Name}.
 * 
 * <pre>
 * [primary-key]
 *     ${table.PrimaryKeyNameCommaString}
 * 
 * [column-property]
 *     ${table.ColumnNameCommaString}
 * 
 * [foreign-property]
 *     ${table.ForeignPropertyNameCommaString}
 * 
 * [refferer-property]
 *     ${table.ReferrerPropertyNameCommaString}
 * 
 * [sequence]
 *     ${table.DefinedSequenceName}
 * 
 * [identity]
 *     ${table.IdentityPropertyName}
 * 
 * [update-date]
 *     ${table.UpdateDateJavaName}
 * 
 * [version-no]
 *     ${table.VersionNoJavaName}
 * 
 * </pre>
 * 
 * @author ${database.ClassAuthor}
 */${database.outputSuppressWarningsAfterLineSeparator()}
public abstract class ${myClassName} extends ${glPackageBaseCommonBhv}.${myExtendClassName} {

    // ===================================================================================
    //                                                                           Attribute
    //                                                                           =========
    /** Dao instance. */
    protected ${myExtendedDaoClassName} _dao;

    // ===================================================================================
    //                                                                         Constructor
    //                                                                         ===========
    /**
     * Constructor.
     */
    public ${myClassName}() {
    }

    // ===================================================================================
    //                                                                          Table name
    //                                                                          ==========
    /**
     * ${database.ImplementComment}
     * 
     * @return Table db-name. (NotNull)
     */
    public String getTableDbName() {
        return "${table.Name}";
    }

    // ===================================================================================
    //                                                                              DBMeta
    //                                                                              ======
    /**
     * ${database.ImplementComment}
     * 
     * @return DBMeta. (NotNull)
     */
    public ${glDBMetaInterfaceName} getDBMeta() {
        return ${myDBMetaClassName}.getInstance();
    }

    /**
     * Get my dbmeta.
     * 
     * @return DBMeta. (NotNull)
     */
    public ${myDBMetaClassName} getMyDBMeta() {
        return ${myDBMetaClassName}.getInstance();
    }

    // ===================================================================================
    //                                                                        Dao Accessor
    //                                                                        ============
    /**
     * Get my dao.
     * 
     * @return My dao.
     */
    public ${myExtendedDaoClassName} getMyDao() {
        return _dao;
    }

    /**
     * Set my dao.
     * 
     * @param dao My dao. (NotNull)
     */
    public void setMyDao(${myExtendedDaoClassName} dao) {
        assertObjectNotNull("dao", dao);
        _dao = dao;
    }

    /**
     * ${database.ImplementComment}
     * 
     * @return Dao-readable. (NotNull)
     */
    public ${glDaoReadableInterfaceName} getDaoReadable() {
        return getMyDao();
    }

#if ($table.isWritable())
    /**
     * ${database.ImplementComment}
     * 
     * @return Dao-writable. (NotNull)
     */
    public ${glDaoWritableInterfaceName} getDaoWritable() {
        return getMyDao();
    }
#end

    // ===================================================================================
    //                                                                        New Instance
    //                                                                        ============
    /**
     * New entity.
     * 
     * @return Entity. (NotNull)
     */
    public ${glEntityInterfaceName} newEntity() {
        return newMyEntity();
    }

    /**
     * New condition-bean.
     * 
     * @return Condition-bean. (NotNull)
     */
    public ${glConditionBeanInterfaceName} newConditionBean() {
        return newMyConditionBean();
    }

    /**
     * New my entity.
     * 
     * @return My entity. (NotNull)
     */
    public ${myExtendedObjectClassName} newMyEntity() {
        return new ${myExtendedObjectClassName}();
    }

    /**
     * New my condition-bean.
     * 
     * @return My condition-bean. (NotNull)
     */
    public ${myConditionBeanClassName} newMyConditionBean() {
        return new ${myConditionBeanClassName}();
    }

    // ===================================================================================
    //                                                                     Delegate Method
    //                                                                     ===============
    // -----------------------------------------------------
    //                                                Select
    //                                                ------
    /**
     * Get count as all. {delegate method, internal for interceptor}
     * 
     * @return All count. (NotNull)
     */
    ${database.behaviorDelegateModifier} int delegateGetCountAll() {
        return getMyDao().getCountAll();
    }

    /**
     * Get list as all. {delegate method, internal for interceptor}
     * 
     * @return All list. (NotNull)
     */
    ${database.behaviorDelegateModifier} java.util.List${database.filterGenericsString(${myExtendedObjectClassName})} delegateGetListAll() {
        return getMyDao().getListAll();
    }
#if ($table.hasPrimaryKey())

    //
    // Get entity. {delegate method, internal for interceptor}
    // 
    // @param Primary-keys (NotNull)
    // @return Entity. (NotNull)
    //
    ${database.behaviorDelegateModifier} ${myExtendedObjectClassName} delegateGetEntity(${table.PrimaryKeyArgsString}) {
        return getMyDao().getEntity(${table.getPrimaryKeyUncapitalisedJavaNameCommaString()});
    }
#end

    /**
     * Select count by condition-bean. {delegate method, internal for interceptor}
     * 
     * @param cb Condition-bean. (NotNull)
     * @return Selected count. (NotNull)
     */
    ${database.behaviorDelegateModifier} int delegateSelectCount(${myConditionBeanClassName} cb) {
        assertConditionBeanNotNull(cb);
        return getMyDao().selectCount(cb);
    }

    /**
     * Select entity by condition-bean. {delegate method, internal for interceptor}
     * 
     * @param cb Condition-bean. (NotNull)
     * @return Selected entity. If the select result is zero, it returns null. (Nullable)
     */
    ${database.behaviorDelegateModifier} ${myExtendedObjectClassName} delegateSelectEntity(${myConditionBeanClassName} cb) {
        assertConditionBeanNotNull(cb);
        return getMyDao().selectEntity(cb);
    }

    /**
     * Select list by condition-bean. {delegate method, internal for interceptor}
     * 
     * @param cb Condition-bean. (NotNull)
     * @return Selected list. If the select result is zero, it returns empty list. (NotNull)
     */
    ${database.behaviorDelegateModifier} java.util.List${database.filterGenericsString(${myExtendedObjectClassName})} delegateSelectList(${myConditionBeanClassName} cb) {
        assertConditionBeanNotNull(cb);
        return getMyDao().selectList(cb);
    }

#if ($table.isUseSequence())
    /**
     * Select next value as sequence. {delegate method, internal for interceptor}
     * 
     * @return Next value. (NotNull)
     */
    ${database.behaviorDelegateModifier} ${table.sequenceReturnType} delegateSelectNextVal() {
        return getMyDao().selectNextVal();
    }
#end

#if ($table.isWritable())
    // -----------------------------------------------------
    //                                                Update
    //                                                ------
    /**
     * Insert one entity. {delegate method, internal for interceptor}
     * 
     * @param entity Entity. (NotNull)
     * @return Inserted count.
     */
    ${database.behaviorDelegateModifier} int delegateInsert(${myExtendedObjectClassName} entity) {
        if (!processBeforeInsert(entity)) { return 1;/*as Normal End*/ }
        return getMyDao().insert(entity);
    }

    /**
     * Update one entity. {modified only, delegate method}
     * 
     * @param entity Entity. (NotNull)
     * @return Updated count.
     */
    ${database.behaviorDelegateModifier} int delegateUpdate(${myExtendedObjectClassName} entity) {
        if (!processBeforeUpdate(entity)) { return 1;/*as Normal End*/ }
        return getMyDao().updateModifiedOnly(entity);
    }
  #if ($database.isVersionAfter1040() && ($table.isUseUpdateDate() || $table.isUseVersionNo()))

    /**
     * Update one entity. {delegate method, internal for interceptor}
     * {non-strict & modified only}
     * 
     * @param entity Entity. (NotNull)
     * @return Updated count.
     */
    ${database.behaviorDelegateModifier} int delegateUpdateNonstrict(${myExtendedObjectClassName} entity) {
        if (!processBeforeUpdate(entity)) { return 1;/*as Normal End*/ }
        return getMyDao().updateNonstrictModifiedOnly(entity);
    }
  #end

    /**
     * Delete one entity. {delegate method, internal for interceptor}
     * 
     * @param entity Entity. (NotNull)
     * @return Deleted count.
     */
    ${database.behaviorDelegateModifier} int delegateDelete(${myExtendedObjectClassName} entity) {
        if (!processBeforeDelete(entity)) { return 1;/*as Normal End*/ }
        return getMyDao().delete(entity);
    }
  #if ($database.isVersionAfter1040() && ($table.isUseUpdateDate() || $table.isUseVersionNo()))

    /**
     * Delete one entity. {delegate method, internal for interceptor}
     * {non-strict}
     * 
     * @param entity Entity. (NotNull)
     * @return Deleted count.
     */
    ${database.behaviorDelegateModifier} int delegateDeleteNonstrict(${myExtendedObjectClassName} entity) {
        if (!processBeforeDelete(entity)) { return 1;/*as Normal End*/ }
        return getMyDao().deleteNonstrict(entity);
    }
  #end

    /**
     * Insert several entities. {delegate method, internal for interceptor}
     * 
     * @param entityList Entity-list. (NotNull & NotEmpty)
     * @return Inserted count.
     */
    ${database.behaviorDelegateModifier} int delegateInsertList(java.util.List${database.filterGenericsString(${myExtendedObjectClassName})} entityList) {
        assertListNotNullAndNotEmpty(entityList);
        helpFilterBeforeInsertInternally(entityList);
        return getMyDao().insertList(entityList);
    }

    /**
     * Update several entities. {delegate method, internal for interceptor}
     * 
     * @param entityList Entity-list. (NotNull & NotEmpty)
     * @return Updated count.
     */
    ${database.behaviorDelegateModifier} int delegateUpdateList(java.util.List${database.filterGenericsString(${myExtendedObjectClassName})} entityList) {
        assertListNotNullAndNotEmpty(entityList);
        helpFilterBeforeUpdateInternally(entityList);
        return getMyDao().updateList(entityList);
    }

    /**
     * Delete several entities. {delegate method, internal for interceptor}
     * 
     * @param entityList Entity-list. (NotNull & NotEmpty)
     * @return Deleted count.
     */
    ${database.behaviorDelegateModifier} int delegateDeleteList(java.util.List${database.filterGenericsString(${myExtendedObjectClassName})} entityList) {
        assertListNotNullAndNotEmpty(entityList);
        helpFilterBeforeDeleteInternally(entityList);
        return getMyDao().deleteList(entityList);
    }
#else
  #if ($table.isAvailableNonPrimaryKeyWritable())

    /**
     * Insert one entity. {delegate method, internal for interceptor}
     * 
     * @param entity Entity. (NotNull)
     * @return Inserted count.
     */
    ${database.behaviorDelegateModifier} int delegateInsert(${myExtendedObjectClassName} entity) {
        assertEntityNotNull(entity);// If this table use identity, the entity does not have primary-key.
        return getMyDao().insert(entity);
    }
  #end
#end

    // ===================================================================================
    //                                                                  Basic Select Count
    //                                                                  ==================
    /**
     * Select count by condition-bean.
     * <pre>
     * If the argument 'condition-bean' is effective about fetch-scope,
     * this method invoke select count ignoring the fetch-scope.
     * </pre>
     * @param cb Condition-bean. This condition-bean should not be set up about fetch-scope. (NotNull)
     * @return Selected count.
     */
    public int selectCount(${myConditionBeanClassName} cb) {
        assertConditionBeanNotNull(cb);
        return delegateSelectCount(cb);
    }

    // ===================================================================================
    //                                                                 Basic Select Entity
    //                                                                 ===================
    /**
     * Select entity by condition-bean.
     * 
     * @param cb Condition-bean. (NotNull)
     * @return Selected entity. (Nullalble)
     * @exception ${glPackageBaseCommonException}.${glEntityDuplicatedException}
     */
    public ${myExtendedObjectClassName} selectEntity(final ${myConditionBeanClassName} cb) {
        return helpSelectEntityInternally(cb, new InternalSelectEntityCallback<${myExtendedObjectClassName}, ${myConditionBeanClassName}>() {
            public java.util.List<${myExtendedObjectClassName}> callbackSelectList(${myConditionBeanClassName} cb) { return selectList(cb); } });
    }

    /**
     * Select entity by condition-bean with deleted check.
     * 
     * @param cb Condition-bean. (NotNull)
     * @return Selected entity. (NotNull)
     * @exception ${glPackageBaseCommonException}.${glEntityAlreadyDeletedException}
     * @exception ${glPackageBaseCommonException}.${glEntityDuplicatedException}
     */
    public ${myExtendedObjectClassName} selectEntityWithDeletedCheck(final ${myConditionBeanClassName} cb) {
        return helpSelectEntityWithDeletedCheckInternally(cb, new InternalSelectEntityWithDeletedCheckCallback<${myExtendedObjectClassName}, ${myConditionBeanClassName}>() {
            public java.util.List<${myExtendedObjectClassName}> callbackSelectList(${myConditionBeanClassName} cb) { return selectList(cb); } });
    }

#if ($table.hasPrimaryKey())
    /*
     * Select entity with deleted check. {by primary-key}
     * 
     * @param primaryKey
     * @return Selected entity. (NotNull)
     * @exception ${glPackageBaseCommonException}.${glEntityAlreadyDeletedException}
     * @exception ${glPackageBaseCommonException}.${glEntityDuplicatedException}
     */
    public ${myExtendedObjectClassName} selectByPKValueWithDeletedCheck(${table.PrimaryKeyArgsString}) {
        ${myExtendedObjectClassName} entity = new ${myExtendedObjectClassName}();
        ${table.getPrimaryKeyArgsSetupString('entity')}
        final ${myConditionBeanClassName} cb = newMyConditionBean();
        cb.acceptPrimaryKeyMapString(getDBMeta().extractPrimaryKeyMapString(entity));
        return selectEntityWithDeletedCheck(cb);
    }
#end

#if ($table.hasPrimaryKey() && $database.isMakeBehaviorForUpdate())
#if ($database.isMakeDeprecated())
    /*
     * Select entity for update with deleted check. {by primary-key}
     * 
     * @param primaryKey
     * @return Selected entity. (NotNull)
     * @exception ${glPackageBaseCommonException}.${glEntityAlreadyDeletedException}
     * @exception ${glPackageBaseCommonException}.${glEntityDuplicatedException}
     * @deprecated This method is deprecated.
     */
    public ${myExtendedObjectClassName} selectByPKValueWithDeletedCheckForUpdate(${table.PrimaryKeyArgsString}) {
        ${myExtendedObjectClassName} entity = new ${myExtendedObjectClassName}();
        ${table.getPrimaryKeyArgsSetupString('entity')}
        final ${myConditionBeanClassName} cb = newMyConditionBean();
        cb.acceptPrimaryKeyMapString(getDBMeta().extractPrimaryKeyMapString(entity));
        cb.lockForUpdate();
        return selectEntityWithDeletedCheck(cb);
    }
#end
#end

    // ===================================================================================
    //                                                                   Basic Select List
    //                                                                   =================
    /**
     * Select list as result-bean.
     * 
     * @param cb Condition-bean. (NotNull)
     * @return Selected list-result-bean. (NotNull)
     */
    public ${glListResultBeanName}${database.filterGenericsString(${myExtendedObjectClassName})} selectList(${myConditionBeanClassName} cb) {
        assertConditionBeanNotNull(cb);
        return new ResultBeanBuilder${database.filterGenericsString(${myExtendedObjectClassName})}(this).buildListResultBean(cb, delegateSelectList(cb));
    }

    /**
     * Select page as result-bean.
     * 
     * @param cb Condition-bean. (NotNull)
     * @return Selected paging-result-bean. (NotNull)
     */
    public ${glPagingResultBeanName}${database.filterGenericsString(${myExtendedObjectClassName})} selectPage(final ${myConditionBeanClassName} cb) {
        assertConditionBeanNotNull(cb);
        return selectPage(cb, new SelectPageSimpleInvoker${database.filterGenericsString(${myExtendedObjectClassName})}(this));
    }

    /**
     * Select page.
     * 
     * @param cb Condition-bean. (NotNull)
     * @param invoker Select-page-invoker (NotNull)
     * @return Selected paging-result-bean. (NotNull)
     */
    public ${glPagingResultBeanName}${database.filterGenericsString(${myExtendedObjectClassName})} selectPage(final ${myConditionBeanClassName} cb, SelectPageInvoker${database.filterGenericsString(${myExtendedObjectClassName})} invoker) {
        assertConditionBeanNotNull(cb);
        final SelectPageCallback${database.filterGenericsString(${myExtendedObjectClassName})} pageCallback = new SelectPageCallback${database.filterGenericsString(${myExtendedObjectClassName})}() {
            public ${glPagingBeanInterfaceName} getPagingBean() { return cb; }
            public int selectCountIgnoreFetchScope() { return selectCount(cb); }
            public java.util.List${database.filterGenericsString(${myExtendedObjectClassName})} selectListWithFetchScope() { return selectList(cb); }
        };
        return invoker.invokeSelectPage(pageCallback);
    }

    // ===================================================================================
    //                                                                      Various Select
    //                                                                      ==============
    /**
     * Select value-label list.
     * 
     * @param cb Condition-bean. (NotNull)
     * @param valueLabelSetupper Value-label-setupper. (NotNull)
     * @return Value-label list. (NotNull)
     */
    public java.util.List<java.util.Map<String, Object>> selectValueLabelList(${myConditionBeanClassName} cb, ${glValueLabelSetupperName}<${myExtendedObjectClassName}> valueLabelSetupper) {
        return createValueLabelList(selectList(cb), valueLabelSetupper);
    }
#if ($table.isUseSequence())

    // ===================================================================================
    //                                                                            Sequence
    //                                                                            ========
    /**
     * Select next value as sequence.
     * 
     * @return Next value. (NotNull)
     */
    public ${table.sequenceReturnType} selectNextVal() {
        return delegateSelectNextVal();
    }
#end
#if (${table.hasOnlyOnePrimaryKey()})

    // ===================================================================================
    //                                                                        Load Referer
    //                                                                        ============
  #foreach ($refferer in $table.Referrers)
    #set ($reffererTable = $refferer.Table)
    #set ($reffererEntityClassName = "${refferer.refererTableExtendedEntityClassName}")
    #set ($reffererBhvClassName = "${refferer.refererTableExtendedBehaviorClassName}")
    #set ($reffererCBClassName = "${refferer.refererTableExtendedConditionBeanClassName}")
    #set ($reffererVariableName = "${glChildrenVariablePrefix}${refferer.ReffererPropertyNameInitCap}")
    #set ($reffererEntityLongClassName = "${glPackageExtendedEntity}.${reffererEntityClassName}")
    #set ($genericPKMyEntityMap = "${table.getPrimaryKeyJavaNativeAsOne()}, ${myExtendedObjectClassName}")
    #set ($genericPKChildListMap = "${table.getPrimaryKeyJavaNativeAsOne()}, java.util.List${database.filterGenericsString(${reffererEntityClassName})}")

    // /* * * * * * * * * * * * * * * * * * * * * * *
    //   RefererTable    = [${refferer.table.name}]
    //   RefererProperty = [${refferer.reffererPropertyName}]
    // * * * * * * * * */

    /**
     * Load referer of ${refferer.ReffererPropertyName}.
     * <pre>
     *   You can load referer.
     * 
     *   ex) {Client Example}
     *     final ${myConditionBeanClassName} cb = new ${myConditionBeanClassName}();
     *     cb.query().setXxx_Equal("xxx");
     *     final List&lt;${myExtendedObjectClassName}&gt; ${myEntityListVariableName} = ${myBehaviorVariableName}.selectList(cb);
     *     ${myBehaviorVariableName}.load${refferer.reffererPropertyNameInitCap}(${myEntityListVariableName});
     * 
     *   *About internal policy, the value of primary key(and others too) is treated as CaseInsensitive.
     * </pre>
     * 
     * @param ${myEntityListVariableName} Entity list of ${table.javaBeansRulePropertyName}. (NotNull)
     */
    public void load${refferer.refererJavaBeansRulePropertyNameInitCap}(java.util.List<${myExtendedObjectClassName}> ${myEntityListVariableName}) {
        final ${glConditionBeanSetupperName}<${reffererCBClassName}> conditionBeanSetupper = new ${glConditionBeanSetupperName}<${reffererCBClassName}>() {
            public void setup(${reffererCBClassName} cb) {}
        };
        load${refferer.refererJavaBeansRulePropertyNameInitCap}(${myEntityListVariableName}, conditionBeanSetupper);
    }

    /**
     * Load referer of ${refferer.refererJavaBeansRulePropertyName}.
     * <pre>
     *   You can load referer with your original condition.
     * 
     *   ex) {Client Example}: Referer conditions are 'Xxx' is not null and order-by 'Yyy' desc
     *     /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
     *     final ${myConditionBeanClassName} cb = new ${myConditionBeanClassName}();
     *     cb.query().setXxx_Equal("xxx");
     *     final List&lt;${myExtendedObjectClassName}&gt; ${myEntityListVariableName} = ${myBehaviorVariableName}.selectList(cb);
     *     final ${glConditionBeanSetupperName}&lt;${reffererCBClassName}&gt; conditionBeanSetupper = new ${glConditionBeanSetupperName}&lt;${reffererCBClassName}&gt;() {
     *         public void setup(${reffererCBClassName} cb) {
     *             cb.query().setXxx_IsNotNull();
     *             cb.query().addOrderBy_Yyy_Desc();
     *         }
     *     };
     *     ${myBehaviorVariableName}.load${refferer.reffererPropertyNameInitCap}(${myEntityListVariableName}, conditionBeanSetupper);
     *     - - - - - - - - - -/
     * 
     *   The condition-bean that the setupper provides have settings before you touch it. It is as follows:
     *     /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
     *     cb.query().set${refferer.getLocalColumnJavaNameAsOne()}_InScope(pkList);
     *     cb.query().addOrderBy_${refferer.getLocalColumnJavaNameAsOne()}_Asc();
     *     - - - - - - - - - -/
     * 
     *   *About internal policy, the value of primary key(and others too) is treated as CaseInsensitive.
     * </pre>
     * 
     * @param ${myEntityListVariableName} Entity list of ${table.javaBeansRulePropertyName}. (NotNull)
     * @param conditionBeanSetupper Referer condition setupper instance for registering referer condition. (NotNull)
     */
    public void load${refferer.refererJavaBeansRulePropertyNameInitCap}(java.util.List<${myExtendedObjectClassName}> ${myEntityListVariableName}, ${glConditionBeanSetupperName}<${reffererCBClassName}> conditionBeanSetupper) {
        assertObjectNotNull("${myEntityListVariableName}<${myExtendedObjectClassName}>", ${myEntityListVariableName});
        assertObjectNotNull("conditionBeanSetupper<${reffererCBClassName}>", conditionBeanSetupper);
        if (${myEntityListVariableName}.isEmpty()) { return; }
        load${refferer.refererJavaBeansRulePropertyNameInitCap}(${myEntityListVariableName}, new ${glPackageBaseCommonBhvLoad}.${glLoadRefererOptionName}<${reffererCBClassName}, ${reffererEntityClassName}>(conditionBeanSetupper));
    }

    /**
     * Load referer of ${refferer.refererJavaBeansRulePropertyName}.
     * <pre>
     *   You can load referer with your original condition.
     * 
     *   ex) {Client Example}: Referer conditions are 'Xxx' is not null and order-by 'Yyy' desc
     *     /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
     *     final ${myConditionBeanClassName} cb = new ${myConditionBeanClassName}();
     *     cb.query().setXxx_Equal("xxx");
     *     final List&lt;${myExtendedObjectClassName}&gt; ${myEntityListVariableName} = ${myBehaviorVariableName}.selectList(cb);
     *     final ${glConditionBeanSetupperName}&lt;${reffererCBClassName}&gt; cbSetupper = new ${glConditionBeanSetupperName}&lt;${reffererCBClassName}&gt;() {
     *         public void setup(${reffererCBClassName} cb) {
     *             cb.query().setXxx_IsNotNull();
     *             cb.query().addOrderBy_Yyy_Desc();
     *         }
     *     };
     *     ${myBehaviorVariableName}.load${refferer.reffererPropertyNameInitCap}(${myEntityListVariableName}, new ${glLoadRefererOptionName}<${reffererCBClassName}, ${reffererEntityClassName}>(cbSetupper));
     *     - - - - - - - - - -/
     * 
     *   The condition-bean that the setupper provides have settings before you touch it. It is as follows:
     *     /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
     *     cb.query().set${refferer.getLocalColumnJavaNameAsOne()}_InScope(pkList);
     *     cb.query().addOrderBy_${refferer.getLocalColumnJavaNameAsOne()}_Asc();
     *     - - - - - - - - - -/
     * 
     *   *About internal policy, the value of primary key(and others too) is treated as CaseInsensitive.
     * </pre>
     * 
     * @param ${myEntityListVariableName} Entity list of ${table.javaBeansRulePropertyName}. (NotNull)
     * @param loadRefererOption Load-referer option. (NotNull)
     */
    public void load${refferer.refererJavaBeansRulePropertyNameInitCap}(java.util.List<${myExtendedObjectClassName}> ${myEntityListVariableName}, ${glPackageBaseCommonBhvLoad}.${glLoadRefererOptionName}<${reffererCBClassName}, ${reffererEntityClassName}> loadRefererOption) {
        assertObjectNotNull("${myEntityListVariableName}<${myExtendedObjectClassName}>", ${myEntityListVariableName});
        assertObjectNotNull("loadRefererOption<${reffererEntityClassName}, ${reffererCBClassName}>", loadRefererOption);
        if (${myEntityListVariableName}.isEmpty()) { return; }
        final ${reffererBhvClassName} refererBhv = getBehaviorSelector().select(${reffererBhvClassName}.class);
        helpLoadRefererInternally(${myEntityListVariableName}, loadRefererOption, new InternalLoadRefererCallback<${myExtendedObjectClassName}, ${table.getPrimaryKeyJavaNativeAsOne()}, ${reffererCBClassName}, ${reffererEntityClassName}>() {
            public ${table.getPrimaryKeyJavaNativeAsOne()} callbackBase_getPrimaryKeyValue(${myExtendedObjectClassName} entity) { return entity.get${table.getPrimaryKeyJavaNameAsOne()}(); }
            public void callbackBase_setRefererList(${myExtendedObjectClassName} entity, java.util.List<${reffererEntityClassName}> refererList) { entity.set${refferer.ReffererPropertyNameInitCap}(refererList); }
            public ${reffererCBClassName} callbackReferer_newMyConditionBean() { return refererBhv.newMyConditionBean(); }
            public void callbackReferer_queryForeignKeyInScope(${reffererCBClassName} cb, java.util.List<${table.getPrimaryKeyJavaNativeAsOne()}> pkList) { cb.query().set${refferer.getLocalColumnJavaNameAsOne()}_InScope(pkList); }
            public void callbackReferer_queryAddOrderByForeignKeyAsc(${reffererCBClassName} cb) { cb.query().addOrderBy_${refferer.getLocalColumnJavaNameAsOne()}_Asc(); }
            public java.util.List<${reffererEntityClassName}> callbackReferer_selectList(${reffererCBClassName} cb) { return refererBhv.selectList(cb); }
            public ${table.getPrimaryKeyJavaNativeAsOne()} callbackReferer_getForeignKeyValue(${reffererEntityClassName} entity) { return entity.get${refferer.getLocalColumnJavaNameAsOne()}(); }
            public void callbackReferer_setForeignEntity(${reffererEntityClassName} refererEntity, ${myExtendedObjectClassName} baseEntity) { refererEntity.set${refferer.foreignPropertyNameInitCap}(baseEntity); }
        } );
    }
  #end
#end

    // ===================================================================================
    //                                                                    Pull Out Foreign
    //                                                                    ================
#foreach ($foreignKeys in $table.ForeignKeys)
  #set ($foreignEntityClassName = "${foreignKeys.foreignTableExtendedEntityClassName}")

    /**
     * Pull out the list of foreign table '${foreignEntityClassName}'.
     * 
     * @param ${myEntityListVariableName} The list of ${table.uncapitalisedJavaName}. (NotNull)
     * @return The list of foreign table. (NotNull)
     */
    public java.util.List<${foreignEntityClassName}> pullout${foreignKeys.foreignPropertyNameInitCap}(java.util.List<${myExtendedObjectClassName}> ${myEntityListVariableName}) {
        return helpPulloutInternally(${myEntityListVariableName}, new InternalPulloutCallback<${myExtendedObjectClassName}, ${foreignEntityClassName}>() {
            public ${foreignEntityClassName} callbackGetForeignEntity(${myExtendedObjectClassName} entity) { return entity.get${foreignKeys.foreignPropertyNameInitCap}(); } });
    }
#end
#foreach ($refferer in $table.Referrers)
  #set ($reffererTable = $refferer.Table)
  #set ($reffererEntityClassName = "${glProjectPrefix}${reffererTable.JavaName}")
  #if (${refferer.isOneToOne()})

    /**
     * Pull out the list of referer-as-one table '${reffererEntityClassName}'.
     * 
     * @param ${myEntityListVariableName} The list of ${table.uncapitalisedJavaName}. (NotNull)
     * @return The list of referer-as-one table. (NotNull)
     */
    public java.util.List<${reffererEntityClassName}> pullout${refferer.reffererPropertyNameInitCapAsOne}(java.util.List<${myExtendedObjectClassName}> ${myEntityListVariableName}) {
        return helpPulloutInternally(${myEntityListVariableName}, new InternalPulloutCallback<${myExtendedObjectClassName}, ${reffererEntityClassName}>() {
            public ${reffererEntityClassName} callbackGetForeignEntity(${myExtendedObjectClassName} entity) { return entity.get${refferer.reffererPropertyNameInitCapAsOne}(); } });
    }
  #end
#end
#if ($table.isWritable())

    // ===================================================================================
    //                                                                 Basic Entity Update
    //                                                                 ===================
    /**
     * Insert.
     * 
     * @param ${myEntityVariableName} Entity. (NotNull)
     */
    public void insert(${myExtendedObjectClassName} ${myEntityVariableName}) {
        assertEntityNotNull(${myEntityVariableName});
        delegateInsert(${myEntityVariableName});
    }

    protected void doCreate(${glEntityInterfaceName} ${myEntityVariableName}) {
        insert((${myExtendedObjectClassName})${myEntityVariableName});
    }

    /**
     * Update. {update: modified properties only} <br />
     * If it updates count zero, throws exception. <br />
     * If concurrency control of this table is valid, this update have it. <br />
     * So then the entity of argument should have the value of concurrency column.
     * 
     * @param ${myEntityVariableName} Entity. (NotNull)
     * @exception ${glPackageBaseCommonException}.${glEntityAlreadyDeletedException}
     * @exception ${glPackageBaseCommonException}.${glEntityAlreadyUpdatedException}
     * @exception ${glPackageBaseCommonException}.${glEntityDuplicatedException}
     */
    public void update(final ${myExtendedObjectClassName} ${myEntityVariableName}) {
        helpUpdateInternally(${myEntityVariableName}, new InternalUpdateCallback<${myExtendedObjectClassName}>() {
            public int callbackDelegateUpdate(${myExtendedObjectClassName} entity) { return delegateUpdate(entity); } });
    }

    protected void doModify(${glEntityInterfaceName} entity) {
        update((${myExtendedObjectClassName})entity);
    }

#if ($table.isUseUpdateDate() || $table.isUseVersionNo())
    /**
     * Update non stritct. {update: modified properties only} <br />
     * This update ignores concurrency control. <br />
     * So if the entity of argument have the value of concurrency column, it was ignored.
     * 
     * @param ${myEntityVariableName} Entity. (NotNull)
     * @exception ${glPackageBaseCommonException}.${glEntityAlreadyDeletedException}
     * @exception ${glPackageBaseCommonException}.${glEntityDuplicatedException}
     */
    public void updateNonstrict(final ${myExtendedObjectClassName} ${myEntityVariableName}) {
        helpUpdateNonstrictInternally(${myEntityVariableName}, new InternalUpdateNonstrictCallback<${myExtendedObjectClassName}>() {
            public int callbackDelegateUpdateNonstrict(${myExtendedObjectClassName} entity) { return delegateUpdateNonstrict(entity); } });
    }
#end

    protected void doModifyNonstrict(${glEntityInterfaceName} entity) {
#if ($database.isVersionAfter1040() && ($table.isUseUpdateDate() || $table.isUseVersionNo()))
        updateNonstrict((${myExtendedObjectClassName})entity);
#else
        update((${myExtendedObjectClassName})entity);
#end
    }

#if ($database.isMakeRecentlyDeprecated())
    /**
     * Update after select. {update: modified properties only}
     * <pre>
     * The merit of this method is only Deleted-Check before updating!
     * If you don't want the merit, please use update().
     * And the demerit of this method is as follows:
     *   : If the entity does not have the optimistic lock value, for example version-no and timestamp,
     *   : it does not throw optimistic lock exception. It can updates.
     * </pre>
     * @param ${myEntityVariableName} Entity. This must contain primary-key value at least. (NotNull)
     * @exception ${glPackageBaseCommonException}.${glEntityAlreadyDeletedException}
     * @exception ${glPackageBaseCommonException}.${glEntityAlreadyUpdatedException}
     * @exception ${glPackageBaseCommonException}.${glEntityDuplicatedException}
     * @deprecated Thie method is old style and has wrong performance. Please use update().
     */
    public void updateAfterSelect(${myExtendedObjectClassName} ${myEntityVariableName}) {
        assertEntityNotNullAndHasPrimaryKeyValue(${myEntityVariableName});
        final ${myConditionBeanClassName} cb = newMyConditionBean();
        cb.acceptPrimaryKeyMapString(getDBMeta().extractPrimaryKeyMapString(${myEntityVariableName}));
        final ${myExtendedObjectClassName} currentEntity = selectEntityWithDeletedCheck(cb);
        mergeEntity(${myEntityVariableName}, currentEntity);
        update(currentEntity);
    }

    protected void doModifyAfterSelect(${glEntityInterfaceName} entity) {
        updateAfterSelect((${myExtendedObjectClassName})entity);
    }
#end

    /**
     * Insert or update. {update: modified only}
     * 
     * @param ${myEntityVariableName} Entity. This should contain primary-key value at least(Except use identity). (NotNull)
     * @exception ${glPackageBaseCommonException}.${glEntityAlreadyUpdatedException}
     * @exception ${glPackageBaseCommonException}.${glEntityDuplicatedException}
     */
    public void insertOrUpdate(final ${myExtendedObjectClassName} ${myEntityVariableName}) {
        helpInsertOrUpdateInternally(${myEntityVariableName}, new InternalInsertOrUpdateCallback<${myExtendedObjectClassName}, ${myConditionBeanClassName}>() {
            public void callbackInsert(${myExtendedObjectClassName} entity) { insert(entity); }
            public void callbackUpdate(${myExtendedObjectClassName} entity) { update(entity); }
            public ${myConditionBeanClassName} callbackNewMyConditionBean() { return newMyConditionBean(); }
            public int callbackSelectCount(${myConditionBeanClassName} cb) { return selectCount(cb); }
        });
    }

    protected void doCreateOrUpdate(${glEntityInterfaceName} ${myEntityVariableName}) {
        insertOrUpdate((${myExtendedObjectClassName})${myEntityVariableName});
    }

#if ($table.isUseUpdateDate() || $table.isUseVersionNo())
#if ($database.isMakeRecentlyDeprecated())
    /**
     * Insert or update non-strict. {update: modified properties only}
     * 
     * @param ${myEntityVariableName} Entity. This should contain primary-key value at least(Except use identity). (NotNull)
     * @exception ${glPackageBaseCommonException}.${glEntityDuplicatedException}
     * @deprecated Sorry! Please use insertOrUpdateNonstrict(). This method name is wrong name.
     */
    public void insertOrUpdateNonStrict(${myExtendedObjectClassName} ${myEntityVariableName}) {
        insertOrUpdateNonstrict(${myEntityVariableName});
    }
#end

    /**
     * Insert or update non-strict. {update: modified properties only}
     * 
     * @param ${myEntityVariableName} Entity. This should contain primary-key value at least(Except use identity). (NotNull)
     * @exception ${glPackageBaseCommonException}.${glEntityDuplicatedException}
     */
    public void insertOrUpdateNonstrict(${myExtendedObjectClassName} ${myEntityVariableName}) {
        helpInsertOrUpdateInternally(${myEntityVariableName}, new InternalInsertOrUpdateNonstrictCallback<${myExtendedObjectClassName}>() {
            public void callbackInsert(${myExtendedObjectClassName} entity) { insert(entity); }
            public void callbackUpdateNonstrict(${myExtendedObjectClassName} entity) { updateNonstrict(entity); }
        });
    }
#end

    protected void doCreateOrUpdateNonstrict(${glEntityInterfaceName} entity) {
#if ($table.isUseUpdateDate() || $table.isUseVersionNo())
        insertOrUpdateNonstrict((${myExtendedObjectClassName})entity);
#else
        insertOrUpdate((${myExtendedObjectClassName})entity);
#end
    }

#if ($database.isMakeRecentlyDeprecated())
    /**
     * Insert or update after select. {update: modified properties only}
     * <pre>
     * The merit of this method is only Deleted-Check before updating!
     * If you don't want the merit, please use update().
     * And the demerit of this method is as follows:
     *   : If the entity does not have the optimistic lock value, for example version-no and timestamp,
     *   : it does not throw optimistic lock exception. It can updates.
     * </pre>
     * @param ${myEntityVariableName} Entity. This should contain primary-key value at least(Except use identity). (NotNull)
     * @exception ${glPackageBaseCommonException}.${glEntityAlreadyUpdatedException}
     * @deprecated Thie method is old style and has wrong performance. Please use insertOrUpdate().
     */
    public void insertOrUpdateAfterSelect(${myExtendedObjectClassName} ${myEntityVariableName}) {
        assertEntityNotNull(${myEntityVariableName});
        if (!${myEntityVariableName}.hasPrimaryKeyValue()) {
            insert(${myEntityVariableName});
            return;
        }
        ${myExtendedObjectClassName} currentEntity = null;
        try {
            final ${myConditionBeanClassName} cb = newMyConditionBean();
            cb.acceptPrimaryKeyMapString(getDBMeta().extractPrimaryKeyMapString(${myEntityVariableName}));
            currentEntity = selectEntityWithDeletedCheck(cb);
        } catch (${glPackageBaseCommonException}.${glEntityAlreadyDeletedException} e) {
            insert(${myEntityVariableName});
            return;
        }
        assertEntityNotNullAndHasPrimaryKeyValue(${myEntityVariableName});
        mergeEntity(${myEntityVariableName}, currentEntity);
        update(currentEntity);
    }

    protected void doCreateOrModifyAfterSelect(${glEntityInterfaceName} entity) {
        insertOrUpdateAfterSelect((${myExtendedObjectClassName})entity);
    }
#end

#if ($database.isMakeBehaviorForUpdate() && $database.isMakeDeprecated())
    /**
     * Update after select-for-update.
     * 
     * @param ${myEntityVariableName} Entity. This must contain primary-key value at least. (NotNull)
     * @exception ${glPackageBaseCommonException}.${glEntityAlreadyDeletedException}
     * @deprecated This method is deprecated.
     */
    public void updateAfterSelectForUpdate(${myExtendedObjectClassName} ${myEntityVariableName}) {
        assertEntityNotNullAndHasPrimaryKeyValue(${myEntityVariableName});
        final ${myConditionBeanClassName} cb = newMyConditionBean();
        cb.acceptPrimaryKeyMapString(getDBMeta().extractPrimaryKeyMapString(${myEntityVariableName}));
        cb.lockForUpdate();
        final ${myExtendedObjectClassName} currentEntity = selectEntityWithDeletedCheck(cb);
        mergeEntity(${myEntityVariableName}, currentEntity);
        update(currentEntity);
    }

    /**
     * @param ${myEntityVariableName} Entity. This must contain primary-key value at least. (NotNull)
     * @deprecated This method is deprecated.
     */
    protected void doModifyAfterSelectForUpdate(${glEntityInterfaceName} entity) {
        updateAfterSelectForUpdate((${myExtendedObjectClassName})entity);
    }

    /**
     * Insert or update after select-for-update. {update: modified only} <br />
     * 
     * @param ${myEntityVariableName} Entity. This must contain primary-key value at least(Except use identity). (NotNull)
     * @deprecated This method is deprecated.
     */
    public void insertOrUpdateAfterSelectForUpdate(${myExtendedObjectClassName} ${myEntityVariableName}) {
        assertEntityNotNull(${myEntityVariableName});
        if (!${myEntityVariableName}.hasPrimaryKeyValue()) {
            insert(${myEntityVariableName});
            return;
        }
        ${myExtendedObjectClassName} currentEntity = null;
        try {
            final ${myConditionBeanClassName} cb = newMyConditionBean();
            cb.acceptPrimaryKeyMapString(getDBMeta().extractPrimaryKeyMapString(${myEntityVariableName}));
            cb.lockForUpdate();
            currentEntity = selectEntityWithDeletedCheck(cb);
        } catch (${glPackageBaseCommonException}.${glEntityAlreadyDeletedException} e) {
            insert(${myEntityVariableName});
            return;
        }
        assertEntityNotNullAndHasPrimaryKeyValue(${myEntityVariableName});
        mergeEntity(${myEntityVariableName}, currentEntity);
        update(${myEntityVariableName});
    }

    /**
     * @param ${myEntityVariableName} Entity. This must contain primary-key value at least(Except use identity). (NotNull)
     * @deprecated This method is deprecated.
     */
    protected void doCreateOrModifyAfterSelectForUpdate(${glEntityInterfaceName} ${myEntityVariableName}) {
        insertOrUpdateAfterSelectForUpdate((${myExtendedObjectClassName})${myEntityVariableName});
    }
#end

#if ($database.isMakeRecentlyDeprecated())
    /**
     * ${database.ImplementComment}
     * 
     * @param sourceEntity Source entity. (NotNull)
     * @param destinationEntity Destination entity. (NotNull)
     * @deprecated Thie method is old style and has wrong performance.
     */
    protected void mergeEntity(${glEntityInterfaceName} sourceEntity, ${glEntityInterfaceName} destinationEntity) {
        assertEntityNotNull(sourceEntity);
        assertEntityNotNull(destinationEntity);
        final ${myExtendedObjectClassName} sourceMyEntity = (${myExtendedObjectClassName})sourceEntity;
        final ${myExtendedObjectClassName} destinationMyEntity = (${myExtendedObjectClassName})destinationEntity;
        destinationMyEntity.clearModifiedPropertyNames();
        final java.util.Set${database.filterGenericsString('String')} names = sourceMyEntity.getModifiedPropertyNames();

#foreach ($col in $table.Columns)
        if (names.contains("${col.UncapitalisedJavaName}")) { destinationMyEntity.set${col.JavaName}(sourceMyEntity.get${col.JavaName}()); }
#end

    }
#end

    /**
     * Delete.
     * 
     * @param ${myEntityVariableName} Entity. (NotNull)
     * @exception ${glPackageBaseCommonException}.${glEntityAlreadyDeletedException}
     * @exception ${glPackageBaseCommonException}.${glEntityAlreadyUpdatedException}
     * @exception ${glPackageBaseCommonException}.${glEntityDuplicatedException}
     */
    public void delete(${myExtendedObjectClassName} ${myEntityVariableName}) {
        helpDeleteInternally(${myEntityVariableName}, new InternalDeleteCallback<${myExtendedObjectClassName}>() {
            public int callbackDelegateDelete(${myExtendedObjectClassName} entity) { return delegateDelete(entity); } });
    }

    protected void doRemove(${glEntityInterfaceName} ${myEntityVariableName}) {
        delete((${myExtendedObjectClassName})${myEntityVariableName});
    }

#if ($database.isMakeRecentlyDeprecated())
    /**
     * Delete after select.
     * <pre>
     * The merit of this method is only Deleted-Check before deleting!
     * If you don't want the merit, please use update().
     * And the demerit of this method is as follows:
     *   : If the entity does not have the optimistic lock value, for example version-no and timestamp,
     *   : it does not throw optimistic lock exception. It can updates.
     * </pre>
     * @param ${myEntityVariableName} Entity. This must contain primary-key value at least. (NotNull)
     * @exception ${glPackageBaseCommonException}.${glEntityAlreadyDeletedException}
     * @exception ${glPackageBaseCommonException}.${glEntityDuplicatedException}
     * @deprecated Thie method is old style and has wrong performance. Please use delete().
     */
    public void deleteAfterSelect(${myExtendedObjectClassName} ${myEntityVariableName}) {
        assertEntityNotNullAndHasPrimaryKeyValue(${myEntityVariableName});
        final ${myConditionBeanClassName} cb = newMyConditionBean();
        cb.acceptPrimaryKeyMapString(getDBMeta().extractPrimaryKeyMapString(${myEntityVariableName}));
        selectEntityWithDeletedCheck(cb);
        delete(${myEntityVariableName});
    }

    /**
     * @param ${myEntityVariableName} Entity. This must contain primary-key value at least. (NotNull)
     * @deprecated Thie method is old style and has wrong performance. Please use delete().
     */
    protected void doRemoveAfterSelect(${glEntityInterfaceName} entity) {
        deleteAfterSelect((${myExtendedObjectClassName})entity);
    }
#end

#if ($table.isUseUpdateDate() || $table.isUseVersionNo())
    /**
     * Delete non-stritct. <br />
     * This delete ignores concurrency control.
     * 
     * @param ${myEntityVariableName} Entity. (NotNull)
     * @exception ${glPackageBaseCommonException}.${glEntityAlreadyDeletedException}
     * @exception ${glPackageBaseCommonException}.${glEntityDuplicatedException}
     */
    public void deleteNonstrict(${myExtendedObjectClassName} ${myEntityVariableName}) {
        helpDeleteNonstrictInternally(${myEntityVariableName}, new InternalDeleteNonstrictCallback<${myExtendedObjectClassName}>() {
            public int callbackDelegateDeleteNonstrict(${myExtendedObjectClassName} entity) { return delegateDeleteNonstrict(entity); } });
    }

    /**
     * Delete non-stritct ignoring deleted. <br />
     * This delete ignores concurrency control.
     * 
     * @param ${myEntityVariableName} Entity. (NotNull)
     * @exception ${glPackageBaseCommonException}.${glEntityAlreadyDeletedException}
     * @exception ${glPackageBaseCommonException}.${glEntityDuplicatedException}
     */
    public void deleteNonstrictIgnoreDeleted(${myExtendedObjectClassName} ${myEntityVariableName}) {
        helpDeleteNonstrictIgnoreDeletedInternally(${myEntityVariableName}, new InternalDeleteNonstrictIgnoreDeletedCallback<${myExtendedObjectClassName}>() {
            public int callbackDelegateDeleteNonstrict(${myExtendedObjectClassName} entity) { return delegateDeleteNonstrict(entity); } });
    }
#end

    // ===================================================================================
    //                                                                  Basic Batch Update
    //                                                                  ==================
    /**
     * Batch insert. This method use 'Batch Update' of java.sql.PreparedStatement.
     * 
     * @param ${myEntityListVariableName} Entity-list. (NotNull & NotEmpty)
     * @return Inserted count.
     */
    public int batchInsert(java.util.List${database.filterGenericsString(${myExtendedObjectClassName})} ${myEntityListVariableName}) {
        assertListNotNullAndNotEmpty(${myEntityListVariableName});
        return delegateInsertList(${myEntityListVariableName});
    }

    /**
     * Insert list. This method use 'Batch Update' of java.sql.PreparedStatement.
     * 
     * @param ${myEntityListVariableName} Entity-list. (NotNull & NotEmpty)
     * @return Inserted count.
     * @deprecated Sorry! This method name is very confusing. Please use batchInsert().
     */
    public int insertList(java.util.List${database.filterGenericsString(${myExtendedObjectClassName})} ${myEntityListVariableName}) {
        assertListNotNullAndNotEmpty(${myEntityListVariableName});
        return delegateInsertList(${myEntityListVariableName});
    }

    /**
     * Batch update. This method use 'Batch Update' of java.sql.PreparedStatement. <br />
     * All columns are update target. {NOT modified only}
     * 
     * @param ${myEntityListVariableName} Entity-list. (NotNull & NotEmpty)
     * @return Updated count.
     */
    public int batchUpdate(java.util.List<${myExtendedObjectClassName}> ${myEntityListVariableName}) {
        assertListNotNullAndNotEmpty(${myEntityListVariableName});
        return delegateUpdateList(${myEntityListVariableName});
    }

    /**
     * Update batch. This method use 'Batch Update' of java.sql.PreparedStatement. <br />
     * All columns are update target. {NOT modified only}
     * 
     * @param ${myEntityListVariableName} Entity-list. (NotNull & NotEmpty)
     * @return Updated count.
     * @deprecated Sorry! This method name is very confusing. Please use batchUpdate().
     */
    public int updateList(java.util.List<${myExtendedObjectClassName}> ${myEntityListVariableName}) {
        assertListNotNullAndNotEmpty(${myEntityListVariableName});
        return delegateUpdateList(${myEntityListVariableName});
    }

    /**
     * Batch delete. This method use 'Batch Update' of java.sql.PreparedStatement. <br />
     * 
     * @param ${myEntityListVariableName} Entity-list. (NotNull & NotEmpty)
     * @return Deleted count.
     */
    public int batchDelete(java.util.List<${myExtendedObjectClassName}> ${myEntityListVariableName}) {
        assertListNotNullAndNotEmpty(${myEntityListVariableName});
        return delegateDeleteList(${myEntityListVariableName});
    }

    /**
     * Delete list by Batch. This method use 'Batch Update' of java.sql.PreparedStatement. <br />
     * 
     * @param ${myEntityListVariableName} Entity-list. (NotNull & NotEmpty)
     * @return Deleted count.
     * @deprecated Sorry! This method name is very confusing. Please use batchDelete().
     */
    public int deleteList(java.util.List${database.filterGenericsString(${myExtendedObjectClassName})} ${myEntityListVariableName}) {
        assertListNotNullAndNotEmpty(${myEntityListVariableName});
        return delegateDeleteList(${myEntityListVariableName});
    }

    // ===================================================================================
    //                                                                      Various Insert
    //                                                                      ==============
  #if ($table.isUseIdentity())
    #if ($table.hasPrimaryKey())

    /* (non-javadoc) 
     * Copy-insert.
     * 
     * @param primaryKey Primary-keys. (NotNull)
     * @return Inserted count.
     * @exception ${glPackageBaseCommonException}.${glEntityAlreadyDeletedException}
     */
    public int copyInsertByPKValueAfterSelect(${table.PrimaryKeyArgsString}) {
        ${myExtendedObjectClassName} entity = new ${myExtendedObjectClassName}();
        ${table.getPrimaryKeyArgsSetupString('entity')}
        final ${myConditionBeanClassName} cb = newMyConditionBean();
        cb.acceptPrimaryKeyMapString(getDBMeta().extractPrimaryKeyMapString(entity));
        final ${myExtendedObjectClassName} currentEntity = selectEntityWithDeletedCheck(cb);
        return delegateInsert(currentEntity);
    }
    #end

    /**
     * Filter 'copy-insert' entity.
     * 
     * @param ${myEntityVariableName} Entity. (NotNull)
     */
    protected void filterCopyInsertEntity(${myExtendedObjectClassName} ${myEntityVariableName}) {
    }
  #end

    // ===================================================================================
    //                                                                      Various Update
    //                                                                      ==============
    /**
     * Loop update modified elements only.
     * 
     * @param ${myEntityListVariableName} The list of entity. (NotNull and Empty OK)
     */
    public void loopUpdateModifiedElementsOnly(java.util.List<${myExtendedObjectClassName}> ${myEntityListVariableName}) {
        assertObjectNotNull("${myEntityListVariableName}", ${myEntityListVariableName});
        for (${myExtendedObjectClassName} entity : ${myEntityListVariableName}) {
            if (entity.hasModification()) { update(entity); }
        }
    }
#else
  #if ($table.isAvailableNonPrimaryKeyWritable())

    // ===================================================================================
    //                                                                 Basic Entity Update
    //                                                                 ===================
    /**
     * Insert.
     * 
     * @param ${myEntityVariableName} Entity. (NotNull)
     */
    public void insert(${myExtendedObjectClassName} ${myEntityVariableName}) {
        assertEntityNotNull(${myEntityVariableName});
        delegateInsert(${myEntityVariableName});
    }
  #end
#end

    // ===================================================================================
    //                                                                           Hierarchy
    //                                                                           =========
    /**
     * Create the basic request of hierarchy of ${myExtendedObjectClassName}..
     * 
     * @param sourceList The list of source. (NotNull)
     * @param <SOURCE> The type of source.
     * @return Hierarchy request of ${myExtendedObjectClassName}. (NotNull)
     */
    public <SOURCE> ${glHierarchyBasicRequestName}<${myExtendedObjectClassName}, ${myDBMetaClassName}.${table.relationTraceClassName}RelationTrace> createHierarchyBasicRequest(java.util.List<SOURCE> sourceList) {
        final ${glHierarchyBasicRequestName}<${myExtendedObjectClassName}, ${myDBMetaClassName}.${table.relationTraceClassName}RelationTrace> request = new ${glHierarchyBasicRequestName}<${myExtendedObjectClassName}, ${myDBMetaClassName}.${table.relationTraceClassName}RelationTrace>(${myExtendedObjectClassName}.class);
        request.registerSourceList(sourceList);
        return request;
    }

    /**
     * Arrange hierarchy.
     * 
     * @param request Hierarchy request of ${myExtendedObjectClassName}. (NotNull)
     * @return The list of ${myExtendedObjectClassName}. (NotNull)
     */
    public java.util.List<${myExtendedObjectClassName}> arrangeHierarchy(${glHierarchyRequestName}<${myExtendedObjectClassName}> request) {
        return new ${glHierarchyArrangerName}<${myExtendedObjectClassName}>().arrangeHierarchy(request);
    }

    // ===================================================================================
    //                                                                          CBSetupper
    //                                                                          ==========
    /**
     * The interface of condition-bean setupper.
     */
    public static interface CBSetupper extends ${glConditionBeanSetupperName}<${myConditionBeanClassName}> {

        /**
         * Set up condition.
         * 
         * @param cb Condition-bean. (NotNull)
         */
        public void setup(${myConditionBeanClassName} cb);
    }

    // ===================================================================================
    //                                                                              Helper
    //                                                                              ======
    protected ${myExtendedObjectClassName} downcast(${glEntityInterfaceName} entity) {
        return helpDowncastInternally(entity, ${myExtendedObjectClassName}.class);
    }
}
