${database.allClassCopyright}package ${glPackageBaseBhv};

#set ($myClassName = "${myBaseBhvClassName}")

import java.util.List;

import ${glPackageBaseCommon}.*;
#if ($database.isAvailableGenerics())
import ${glPackageBaseCommonBhvSetup}.${glConditionBeanSetupperName};
import ${glPackageBaseCommonBhvSetup}.${glValueLabelSetupperName};
import ${glPackageBaseCommonDBMetaHierarchy}.${glHierarchyArrangerName};
import ${glPackageBaseCommonDBMetaHierarchy}.${glHierarchyBasicRequestName};
import ${glPackageBaseCommonDBMetaHierarchy}.${glHierarchyRequestName};
#end
import ${glPackageBaseCommonCBean}.${glConditionBeanInterfaceName};
import ${glPackageBaseCommonCBean}.${glListResultBeanName};
import ${glPackageBaseCommonCBean}.${glPagingHandlerName};
import ${glPackageBaseCommonCBean}.${glPagingInvokerName};
import ${glPackageBaseCommonCBean}.${glPagingBeanInterfaceName};
import ${glPackageBaseCommonCBean}.${glPagingResultBeanName};
import ${glPackageBaseCommonDBMeta}.${glDBMetaInterfaceName};
#if (${table.hasOnlyOnePrimaryKey()})
  #if (${table.hasReferrer()})

import ${glPackageExtendedBhv}.*;
  #end
#end

import ${glPackageExtendedDao}.*;
import ${glPackageExtendedEntity}.*;
import ${myDBMetaPackageName}.*;
import ${glPackageCB}.*;

#set ($myExtendClassName = "")
#if ($table.isWritable())
  #set ($myExtendClassName = "${glBehaviorWritableAbstractName}")
#else
  #set ($myExtendClassName = "${glBehaviorReadableAbstractName}")
#end


/**
 * The behavior of ${table.name}.
 * 
 * <pre>
 * [primary-key]
 *     ${table.PrimaryKeyNameCommaString}
 * 
 * [column-property]
 *     ${table.ColumnNameCommaString}
 * 
 * [foreign-property]
 *     ${table.ForeignPropertyNameCommaString}
 * 
 * [referrer-property]
 *     ${table.referrerPropertyNameCommaString}
 * 
 * [sequence]
 *     ${table.DefinedSequenceName}
 * 
 * [identity]
 *     ${table.IdentityPropertyName}
 * 
 * [update-date]
 *     ${table.UpdateDateJavaName}
 * 
 * [version-no]
 *     ${table.VersionNoJavaName}
 * 
 * </pre>
 * 
 * @author ${database.ClassAuthor}
 */${database.outputSuppressWarningsAfterLineSeparator()}
public abstract class ${myClassName} extends ${glPackageBaseCommonBhv}.${myExtendClassName} {

    // ===================================================================================
    //                                                                           Attribute
    //                                                                           =========
    /** Dao instance. */
    protected ${myExtendedDaoClassName} _dao;

    // ===================================================================================
    //                                                                         Constructor
    //                                                                         ===========
    /**
     * Constructor.
     */
    public ${myClassName}() {
    }

    // ===================================================================================
    //                                                                          Table name
    //                                                                          ==========
    /**
     * ${database.ImplementComment}
     * 
     * @return Table db-name. (NotNull)
     */
    public String getTableDbName() {
        return "${table.Name}";
    }

    // ===================================================================================
    //                                                                              DBMeta
    //                                                                              ======
    /**
     * ${database.ImplementComment}
     * 
     * @return DBMeta. (NotNull)
     */
    public ${glDBMetaInterfaceName} getDBMeta() {
        return ${myDBMetaClassName}.getInstance();
    }

    /**
     * Get my dbmeta.
     * 
     * @return DBMeta. (NotNull)
     */
    public ${myDBMetaClassName} getMyDBMeta() {
        return ${myDBMetaClassName}.getInstance();
    }

    // ===================================================================================
    //                                                                        Dao Accessor
    //                                                                        ============
    /**
     * Get my dao.
     * 
     * @return My dao.
     */
    public ${myExtendedDaoClassName} getMyDao() {
        return _dao;
    }

    /**
     * Set my dao.
     * 
     * @param dao My dao. (NotNull)
     */
    public void setMyDao(${myExtendedDaoClassName} dao) {
        assertObjectNotNull("dao", dao);
        _dao = dao;
    }

    /**
     * ${database.ImplementComment}
     * 
     * @return Dao-readable. (NotNull)
     */
    public ${glDaoReadableInterfaceName} getDaoReadable() {
        return getMyDao();
    }

#if ($table.isWritable())
    /**
     * ${database.ImplementComment}
     * 
     * @return Dao-writable. (NotNull)
     */
    public ${glDaoWritableInterfaceName} getDaoWritable() {
        return getMyDao();
    }
#end

    // ===================================================================================
    //                                                                        New Instance
    //                                                                        ============
    /**
     * New entity.
     * 
     * @return Entity. (NotNull)
     */
    public ${glEntityInterfaceName} newEntity() {
        return newMyEntity();
    }

    /**
     * New conditionBean.
     * 
     * @return Condition-bean. (NotNull)
     */
    public ${glConditionBeanInterfaceName} newConditionBean() {
        return newMyConditionBean();
    }

    /**
     * New my entity.
     * 
     * @return My entity. (NotNull)
     */
    public ${myExtendedObjectClassName} newMyEntity() {
        return new ${myExtendedObjectClassName}();
    }

    /**
     * New my conditionBean.
     * 
     * @return My conditionBean. (NotNull)
     */
    public ${myConditionBeanClassName} newMyConditionBean() {
        return new ${myConditionBeanClassName}();
    }

    // ===================================================================================
    //                                                                  Basic Select Count
    //                                                                  ==================
    /**
     * Select the count by conditionBean.
     * <pre>
     * If the argument 'conditionBean' is effective about fetch-scope,
     * this method invoke select count ignoring the fetch-scope.
     * </pre>
     * @param cb The conditionBean of ${myExtendedObjectClassName}. This conditionBean should not be set up about fetch-scope. (NotNull)
     * @return The selected count.
     */
    public int selectCount(${myConditionBeanClassName} cb) {
        assertConditionBeanNotNull(cb);
        return delegateSelectCount(cb);
    }

    // ===================================================================================
    //                                                                 Basic Select Entity
    //                                                                 ===================
    /**
     * Select the entity by conditionBean.
     * 
     * @param cb The conditionBean of ${myExtendedObjectClassName}. (NotNull)
     * @return The selected entity. (Nullalble)
     * @exception ${glPackageBaseCommonException}.${glEntityDuplicatedException} When the entity has been duplicated.
     */
    public ${myExtendedObjectClassName} selectEntity(final ${myConditionBeanClassName} cb) {
        return helpSelectEntityInternally(cb, new InternalSelectEntityCallback<${myExtendedObjectClassName}, ${myConditionBeanClassName}>() {
            public List<${myExtendedObjectClassName}> callbackSelectList(${myConditionBeanClassName} cb) { return selectList(cb); } });
    }

    /**
     * Select the entity by conditionBean with deleted check.
     * 
     * @param cb The conditionBean of ${myExtendedObjectClassName}. (NotNull)
     * @return The selected entity. (NotNull)
     * @exception ${glPackageBaseCommonException}.${glEntityAlreadyDeletedException} When the entity has already been deleted.
     * @exception ${glPackageBaseCommonException}.${glEntityDuplicatedException} When the entity has been duplicated.
     */
    public ${myExtendedObjectClassName} selectEntityWithDeletedCheck(final ${myConditionBeanClassName} cb) {
        return helpSelectEntityWithDeletedCheckInternally(cb, new InternalSelectEntityWithDeletedCheckCallback<${myExtendedObjectClassName}, ${myConditionBeanClassName}>() {
            public List<${myExtendedObjectClassName}> callbackSelectList(${myConditionBeanClassName} cb) { return selectList(cb); } });
    }

#if ($table.hasPrimaryKey())
    /*
     * Select the entity with deleted check. {by primary-key}
     * 
     * @param primaryKey
     * @return The selected entity. (NotNull)
     * @exception ${glPackageBaseCommonException}.${glEntityAlreadyDeletedException} When the entity has already been deleted.
     * @exception ${glPackageBaseCommonException}.${glEntityDuplicatedException} When the entity has been duplicated.
     */
    public ${myExtendedObjectClassName} selectByPKValueWithDeletedCheck(${table.PrimaryKeyArgsString}) {
        ${myExtendedObjectClassName} entity = new ${myExtendedObjectClassName}();
        ${table.getPrimaryKeyArgsSetupString('entity')}
        final ${myConditionBeanClassName} cb = newMyConditionBean();
        cb.acceptPrimaryKeyMapString(getDBMeta().extractPrimaryKeyMapString(entity));
        return selectEntityWithDeletedCheck(cb);
    }
#end

    // ===================================================================================
    //                                                                   Basic Select List
    //                                                                   =================
    /**
     * Select the list as result-bean.
     * 
     * @param cb The conditionBean of ${myExtendedObjectClassName}. (NotNull)
     * @return The result-bean of selected list. (NotNull)
     */
    public ${glListResultBeanName}<${myExtendedObjectClassName}> selectList(${myConditionBeanClassName} cb) {
        assertConditionBeanNotNull(cb);
        return new ${glPackageBaseCommonCBean}.${glResultBeanBuilderName}<${myExtendedObjectClassName}>(getTableDbName()).buildListResultBean(cb, delegateSelectList(cb));
    }

    /**
     * Select the page as result-bean.
     * 
     * @param cb The conditionBean of ${myExtendedObjectClassName}. (NotNull)
     * @return The result-bean of selected page. (NotNull)
     */
    public ${glPagingResultBeanName}<${myExtendedObjectClassName}> selectPage(final ${myConditionBeanClassName} cb) {
        assertConditionBeanNotNull(cb);
        final ${glPagingInvokerName}<${myExtendedObjectClassName}> invoker = new ${glPagingInvokerName}<${myExtendedObjectClassName}>(getTableDbName());
        final ${glPagingHandlerName}<${myExtendedObjectClassName}> handler = new ${glPagingHandlerName}<${myExtendedObjectClassName}>() {
            public ${glPagingBeanInterfaceName} getPagingBean() { return cb; }
            public int count() { return selectCount(cb); }
            public List<${myExtendedObjectClassName}> paging() { return selectList(cb); }
        };
        return invoker.invokePaging(handler);
    }
#if ($database.isMakeDeprecated())

    /**
     * Select the page as result-bean.
     * 
     * @param cb The conditionBean of ${myExtendedObjectClassName}. (NotNull)
     * @param invoker The invoker of select-page. (NotNull)
     * @return The result-bean of selected page. (NotNull)
     * @deprecated
     */
    public ${glPagingResultBeanName}<${myExtendedObjectClassName}> selectPage(final ${myConditionBeanClassName} cb, SelectPageInvoker<${myExtendedObjectClassName}> invoker) {
        assertConditionBeanNotNull(cb);
        final SelectPageCallback<${myExtendedObjectClassName}> pageCallback = new SelectPageCallback<${myExtendedObjectClassName}>() {
            public ${glPagingBeanInterfaceName} getPagingBean() { return cb; }
            public int selectCountIgnoreFetchScope() { return selectCount(cb); }
            public List<${myExtendedObjectClassName}> selectListWithFetchScope() { return selectList(cb); }
        };
        return invoker.invokeSelectPage(pageCallback);
    }
#end

    // ===================================================================================
    //                                                                      Various Select
    //                                                                      ==============
    /**
     * Select the list of value-label.
     * 
     * @param cb The conditionBean of ${myExtendedObjectClassName}. (NotNull)
     * @param valueLabelSetupper The setupper of value-label. (NotNull)
     * @return The list of value-label. (NotNull)
     */
    public List<java.util.Map<String, Object>> selectValueLabelList(${myConditionBeanClassName} cb, ${glValueLabelSetupperName}<${myExtendedObjectClassName}> valueLabelSetupper) {
        return createValueLabelList(selectList(cb), valueLabelSetupper);
    }

#if ($table.isUseSequence())
    // ===================================================================================
    //                                                                            Sequence
    //                                                                            ========
    /**
     * Select the next value as sequence.
     * 
     * @return The next value. (NotNull)
     */
    public ${table.sequenceReturnType} selectNextVal() {
        return delegateSelectNextVal();
    }
#end

#if (${table.hasOnlyOnePrimaryKey()})
    // ===================================================================================
    //                                                                       Load Referrer
    //                                                                       =============
  #foreach ($refferer in $table.refererList)
    #set ($reffererTable = $refferer.Table)
    #set ($reffererEntityClassName = "${refferer.refererTableExtendedEntityClassName}")
    #set ($reffererBhvClassName = "${refferer.refererTableExtendedBehaviorClassName}")
    #set ($reffererCBClassName = "${refferer.refererTableExtendedConditionBeanClassName}")
    #set ($reffererVariableName = "${glChildrenVariablePrefix}${refferer.ReffererPropertyNameInitCap}")
    #set ($reffererEntityLongClassName = "${glPackageExtendedEntity}.${reffererEntityClassName}")
    #set ($genericPKMyEntityMap = "${table.getPrimaryKeyJavaNativeAsOne()}, ${myExtendedObjectClassName}")
    #set ($genericPKChildListMap = "${table.getPrimaryKeyJavaNativeAsOne()}, List${database.filterGenericsString(${reffererEntityClassName})}")

    // /* * * * * * * * * * * * * * * * * * * * * * *
    //   ReferrerTable    = [${refferer.table.name}]
    //   ReferrerProperty = [${refferer.reffererPropertyName}]
    // * * * * * * * * */

    /**
     * Load referrer of ${refferer.ReffererPropertyName}.
     * <pre>
     *   You can load referrer.
     * 
     *   ex) {Client Example}
     *     final ${myConditionBeanClassName} cb = new ${myConditionBeanClassName}();
     *     cb.query().setXxx_Equal("xxx");
     *     final List&lt;${myExtendedObjectClassName}&gt; ${myEntityListVariableName} = ${myBehaviorVariableName}.selectList(cb);
     *     ${myBehaviorVariableName}.load${refferer.reffererPropertyNameInitCap}(${myEntityListVariableName});
     * 
     *   *About internal policy, the value of primary key(and others too) is treated as CaseInsensitive.
     * </pre>
     * 
     * @param ${myEntityListVariableName} Entity list of ${table.javaBeansRulePropertyName}. (NotNull)
     */
    public void load${refferer.refererJavaBeansRulePropertyNameInitCap}(List<${myExtendedObjectClassName}> ${myEntityListVariableName}) {
        final ${glConditionBeanSetupperName}<${reffererCBClassName}> conditionBeanSetupper = new ${glConditionBeanSetupperName}<${reffererCBClassName}>() {
            public void setup(${reffererCBClassName} cb) {}
        };
        load${refferer.refererJavaBeansRulePropertyNameInitCap}(${myEntityListVariableName}, conditionBeanSetupper);
    }

    /**
     * Load referrer of ${refferer.refererJavaBeansRulePropertyName}.
     * <pre>
     *   You can load referrer with your original condition.
     * 
     *   ex) {Client Example}: Referrer conditions are 'Xxx' is not null and order-by 'Yyy' desc
     *     /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
     *     final ${myConditionBeanClassName} cb = new ${myConditionBeanClassName}();
     *     cb.query().setXxx_Equal("xxx");
     *     final List&lt;${myExtendedObjectClassName}&gt; ${myEntityListVariableName} = ${myBehaviorVariableName}.selectList(cb);
     *     final ${glConditionBeanSetupperName}&lt;${reffererCBClassName}&gt; conditionBeanSetupper = new ${glConditionBeanSetupperName}&lt;${reffererCBClassName}&gt;() {
     *         public void setup(${reffererCBClassName} cb) {
     *             cb.query().setXxx_IsNotNull();
     *             cb.query().addOrderBy_Yyy_Desc();
     *         }
     *     };
     *     ${myBehaviorVariableName}.load${refferer.reffererPropertyNameInitCap}(${myEntityListVariableName}, conditionBeanSetupper);
     *     - - - - - - - - - -/
     * 
     *   The conditionBean that the setupper provides have settings before you touch it. It is as follows:
     *     /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
     *     cb.query().set${refferer.getLocalColumnJavaNameAsOne()}_InScope(pkList);
     *     cb.query().addOrderBy_${refferer.getLocalColumnJavaNameAsOne()}_Asc();
     *     - - - - - - - - - -/
     * 
     *   *About internal policy, the value of primary key(and others too) is treated as CaseInsensitive.
     * </pre>
     * 
     * @param ${myEntityListVariableName} Entity list of ${table.javaBeansRulePropertyName}. (NotNull)
     * @param conditionBeanSetupper Referrer condition setupper instance for registering referrer condition. (NotNull)
     */
    public void load${refferer.refererJavaBeansRulePropertyNameInitCap}(List<${myExtendedObjectClassName}> ${myEntityListVariableName}, ${glConditionBeanSetupperName}<${reffererCBClassName}> conditionBeanSetupper) {
        assertObjectNotNull("${myEntityListVariableName}<${myExtendedObjectClassName}>", ${myEntityListVariableName});
        assertObjectNotNull("conditionBeanSetupper<${reffererCBClassName}>", conditionBeanSetupper);
        if (${myEntityListVariableName}.isEmpty()) { return; }
        load${refferer.refererJavaBeansRulePropertyNameInitCap}(${myEntityListVariableName}, new ${glPackageBaseCommonBhvLoad}.${glLoadReferrerOptionName}<${reffererCBClassName}, ${reffererEntityClassName}>(conditionBeanSetupper));
    }

    /**
     * Load referrer of ${refferer.refererJavaBeansRulePropertyName}.
     * <pre>
     *   You can load referrer with your original condition.
     * 
     *   ex) {Client Example}: Referrer conditions are 'Xxx' is not null and order-by 'Yyy' desc
     *     /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
     *     final ${myConditionBeanClassName} cb = new ${myConditionBeanClassName}();
     *     cb.query().setXxx_Equal("xxx");
     *     final List&lt;${myExtendedObjectClassName}&gt; ${myEntityListVariableName} = ${myBehaviorVariableName}.selectList(cb);
     *     final ${glConditionBeanSetupperName}&lt;${reffererCBClassName}&gt; cbSetupper = new ${glConditionBeanSetupperName}&lt;${reffererCBClassName}&gt;() {
     *         public void setup(${reffererCBClassName} cb) {
     *             cb.query().setXxx_IsNotNull();
     *             cb.query().addOrderBy_Yyy_Desc();
     *         }
     *     };
     *     ${myBehaviorVariableName}.load${refferer.reffererPropertyNameInitCap}(${myEntityListVariableName}, new ${glLoadReferrerOptionName}<${reffererCBClassName}, ${reffererEntityClassName}>(cbSetupper));
     *     - - - - - - - - - -/
     * 
     *   The conditionBean that the setupper provides have settings before you touch it. It is as follows:
     *     /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
     *     cb.query().set${refferer.getLocalColumnJavaNameAsOne()}_InScope(pkList);
     *     cb.query().addOrderBy_${refferer.getLocalColumnJavaNameAsOne()}_Asc();
     *     - - - - - - - - - -/
     * 
     *   *About internal policy, the value of primary key(and others too) is treated as CaseInsensitive.
     * </pre>
     * 
     * @param ${myEntityListVariableName} Entity list of ${table.javaBeansRulePropertyName}. (NotNull)
     * @param loadReferrerOption Load-referrer option. (NotNull)
     */
    public void load${refferer.refererJavaBeansRulePropertyNameInitCap}(List<${myExtendedObjectClassName}> ${myEntityListVariableName}, ${glPackageBaseCommonBhvLoad}.${glLoadReferrerOptionName}<${reffererCBClassName}, ${reffererEntityClassName}> loadReferrerOption) {
        assertObjectNotNull("${myEntityListVariableName}<${myExtendedObjectClassName}>", ${myEntityListVariableName});
        assertObjectNotNull("loadReferrerOption<${reffererEntityClassName}, ${reffererCBClassName}>", loadReferrerOption);
        if (${myEntityListVariableName}.isEmpty()) { return; }
        final ${reffererBhvClassName} referrerBhv = getBehaviorSelector().select(${reffererBhvClassName}.class);
        helpLoadReferrerInternally(${myEntityListVariableName}, loadReferrerOption, new InternalLoadReferrerCallback<${myExtendedObjectClassName}, ${table.getPrimaryKeyJavaNativeAsOne()}, ${reffererCBClassName}, ${reffererEntityClassName}>() {
            public ${table.getPrimaryKeyJavaNativeAsOne()} callbackBase_getPrimaryKeyValue(${myExtendedObjectClassName} entity) { return entity.get${table.getPrimaryKeyJavaNameAsOne()}(); }
            public void callbackBase_setReferrerList(${myExtendedObjectClassName} entity, List<${reffererEntityClassName}> referrerList) { entity.set${refferer.ReffererPropertyNameInitCap}(referrerList); }
            public ${reffererCBClassName} callbackReferrer_newMyConditionBean() { return referrerBhv.newMyConditionBean(); }
            public void callbackReferrer_queryForeignKeyInScope(${reffererCBClassName} cb, List<${table.getPrimaryKeyJavaNativeAsOne()}> pkList) { cb.query().set${refferer.getLocalColumnJavaNameAsOne()}_InScope(pkList); }
            public void callbackReferrer_queryAddOrderByForeignKeyAsc(${reffererCBClassName} cb) { cb.query().addOrderBy_${refferer.getLocalColumnJavaNameAsOne()}_Asc(); }
            public List<${reffererEntityClassName}> callbackReferrer_selectList(${reffererCBClassName} cb) { return referrerBhv.selectList(cb); }
            public ${table.getPrimaryKeyJavaNativeAsOne()} callbackReferrer_getForeignKeyValue(${reffererEntityClassName} entity) { return entity.get${refferer.getLocalColumnJavaNameAsOne()}(); }
            public void callbackReferrer_setForeignEntity(${reffererEntityClassName} referrerEntity, ${myExtendedObjectClassName} baseEntity) { referrerEntity.set${refferer.foreignPropertyNameInitCap}(baseEntity); }
        } );
    }
  #end
#end

    // ===================================================================================
    //                                                                    Pull Out Foreign
    //                                                                    ================
#foreach ($foreignKeys in $table.ForeignKeys)
  #set ($foreignEntityClassName = "${foreignKeys.foreignTableExtendedEntityClassName}")

    /**
     * Pull out the list of foreign table '${foreignEntityClassName}'.
     * 
     * @param ${myEntityListVariableName} The list of ${table.uncapitalisedJavaName}. (NotNull)
     * @return The list of foreign table. (NotNull)
     */
    public List<${foreignEntityClassName}> pullout${foreignKeys.foreignPropertyNameInitCap}(List<${myExtendedObjectClassName}> ${myEntityListVariableName}) {
        return helpPulloutInternally(${myEntityListVariableName}, new InternalPulloutCallback<${myExtendedObjectClassName}, ${foreignEntityClassName}>() {
            public ${foreignEntityClassName} callbackGetForeignEntity(${myExtendedObjectClassName} entity) { return entity.get${foreignKeys.foreignPropertyNameInitCap}(); } });
    }
#end
#foreach ($refferer in $table.Referrers)
  #set ($reffererTable = $refferer.Table)
  #set ($reffererEntityClassName = "${glProjectPrefix}${reffererTable.JavaName}")
  #if (${refferer.isOneToOne()})

    /**
     * Pull out the list of referrer-as-one table '${reffererEntityClassName}'.
     * 
     * @param ${myEntityListVariableName} The list of ${table.uncapitalisedJavaName}. (NotNull)
     * @return The list of referrer-as-one table. (NotNull)
     */
    public List<${reffererEntityClassName}> pullout${refferer.reffererPropertyNameInitCapAsOne}(List<${myExtendedObjectClassName}> ${myEntityListVariableName}) {
        return helpPulloutInternally(${myEntityListVariableName}, new InternalPulloutCallback<${myExtendedObjectClassName}, ${reffererEntityClassName}>() {
            public ${reffererEntityClassName} callbackGetForeignEntity(${myExtendedObjectClassName} entity) { return entity.get${refferer.reffererPropertyNameInitCapAsOne}(); } });
    }
  #end
#end
#if ($table.isWritable())

    // ===================================================================================
    //                                                                 Basic Entity Update
    //                                                                 ===================
    /**
     * Insert the entity.
     * 
     * @param ${myEntityVariableName} The entity of insert target. (NotNull)
     */
    public void insert(${myExtendedObjectClassName} ${myEntityVariableName}) {
        assertEntityNotNull(${myEntityVariableName});
        delegateInsert(${myEntityVariableName});
    }

    @Override
    protected void doCreate(${glEntityInterfaceName} ${myEntityVariableName}) {
        insert((${myExtendedObjectClassName})${myEntityVariableName});
    }

    /**
     * Update the entity modified-only. <br />
     * If it updates count zero, throws exception. <br />
     * If concurrency control of this table is valid, this update have it. <br />
     * So then the entity of argument should have the value of concurrency column.
     * 
     * @param ${myEntityVariableName} The entity of update target. (NotNull)
     * @exception ${glPackageBaseCommonException}.${glEntityAlreadyUpdatedException} When the entity has already been updated.
     * @exception ${glPackageBaseCommonException}.${glEntityAlreadyDeletedException} When the entity has already been deleted.
     * @exception ${glPackageBaseCommonException}.${glEntityDuplicatedException} When the entity has been duplicated.
     */
    public void update(final ${myExtendedObjectClassName} ${myEntityVariableName}) {
        helpUpdateInternally(${myEntityVariableName}, new InternalUpdateCallback<${myExtendedObjectClassName}>() {
            public int callbackDelegateUpdate(${myExtendedObjectClassName} entity) { return delegateUpdate(entity); } });
    }

    @Override
    protected void doModify(${glEntityInterfaceName} entity) {
        update((${myExtendedObjectClassName})entity);
    }

#if ($table.hasOptimisticLock())
    /**
     * Update the entity non-strictly modified-only. <br />
     * This update ignores concurrency control. <br />
     * So if the entity of argument have the value of concurrency column, it is ignored.
     * 
     * @param ${myEntityVariableName} The entity of update target. (NotNull)
     * @exception ${glPackageBaseCommonException}.${glEntityAlreadyDeletedException} When the entity has already been deleted.
     * @exception ${glPackageBaseCommonException}.${glEntityDuplicatedException} When the entity has been duplicated.
     */
    public void updateNonstrict(final ${myExtendedObjectClassName} ${myEntityVariableName}) {
        helpUpdateNonstrictInternally(${myEntityVariableName}, new InternalUpdateNonstrictCallback<${myExtendedObjectClassName}>() {
            public int callbackDelegateUpdateNonstrict(${myExtendedObjectClassName} entity) { return delegateUpdateNonstrict(entity); } });
    }
#end

    @Override
    protected void doModifyNonstrict(${glEntityInterfaceName} entity) {
#if ($database.isVersionAfter1040() && ($table.isUseUpdateDate() || $table.isUseVersionNo()))
        updateNonstrict((${myExtendedObjectClassName})entity);
#else
        update((${myExtendedObjectClassName})entity);
#end
    }

    /**
     * Insert or update the entity modified-only.
     * 
     * @param ${myEntityVariableName} The entity of insert or update target. This should contain primary-key value at least(Except use identity). (NotNull)
     * @exception ${glPackageBaseCommonException}.${glEntityAlreadyUpdatedException} When the entity has already been updated.
     * @exception ${glPackageBaseCommonException}.${glEntityAlreadyDeletedException} When the entity has already been deleted.
     * @exception ${glPackageBaseCommonException}.${glEntityDuplicatedException} When the entity has been duplicated.
     */
    public void insertOrUpdate(final ${myExtendedObjectClassName} ${myEntityVariableName}) {
        helpInsertOrUpdateInternally(${myEntityVariableName}, new InternalInsertOrUpdateCallback<${myExtendedObjectClassName}, ${myConditionBeanClassName}>() {
            public void callbackInsert(${myExtendedObjectClassName} entity) { insert(entity); }
            public void callbackUpdate(${myExtendedObjectClassName} entity) { update(entity); }
            public ${myConditionBeanClassName} callbackNewMyConditionBean() { return newMyConditionBean(); }
            public int callbackSelectCount(${myConditionBeanClassName} cb) { return selectCount(cb); }
        });
    }

    @Override
    protected void doCreateOrUpdate(${glEntityInterfaceName} ${myEntityVariableName}) {
        insertOrUpdate((${myExtendedObjectClassName})${myEntityVariableName});
    }

#if ($table.hasOptimisticLock())

    /**
     * Insert or update the entity non-strictly modified-only.
     * 
     * @param ${myEntityVariableName} The entity of insert or update target. This should contain primary-key value at least(Except use identity). (NotNull)
     * @exception ${glPackageBaseCommonException}.${glEntityAlreadyDeletedException} When the entity has already been deleted.
     * @exception ${glPackageBaseCommonException}.${glEntityDuplicatedException} When the entity has been duplicated.
     */
    public void insertOrUpdateNonstrict(${myExtendedObjectClassName} ${myEntityVariableName}) {
        helpInsertOrUpdateInternally(${myEntityVariableName}, new InternalInsertOrUpdateNonstrictCallback<${myExtendedObjectClassName}>() {
            public void callbackInsert(${myExtendedObjectClassName} entity) { insert(entity); }
            public void callbackUpdateNonstrict(${myExtendedObjectClassName} entity) { updateNonstrict(entity); }
        });
    }
#end

    @Override
    protected void doCreateOrUpdateNonstrict(${glEntityInterfaceName} entity) {
#if ($table.isUseUpdateDate() || $table.isUseVersionNo())
        insertOrUpdateNonstrict((${myExtendedObjectClassName})entity);
#else
        insertOrUpdate((${myExtendedObjectClassName})entity);
#end
    }

    /**
     * Delete the entity.
     * 
     * @param ${myEntityVariableName} The entity of delete target. (NotNull)
     * @exception ${glPackageBaseCommonException}.${glEntityAlreadyUpdatedException} When the entity has already been updated.
     * @exception ${glPackageBaseCommonException}.${glEntityAlreadyDeletedException} When the entity has already been deleted.
     * @exception ${glPackageBaseCommonException}.${glEntityDuplicatedException} When the entity has been duplicated.
     */
    public void delete(${myExtendedObjectClassName} ${myEntityVariableName}) {
        helpDeleteInternally(${myEntityVariableName}, new InternalDeleteCallback<${myExtendedObjectClassName}>() {
            public int callbackDelegateDelete(${myExtendedObjectClassName} entity) { return delegateDelete(entity); } });
    }

    @Override
    protected void doRemove(${glEntityInterfaceName} ${myEntityVariableName}) {
        delete((${myExtendedObjectClassName})${myEntityVariableName});
    }

#if ($table.hasOptimisticLock())
    /**
     * Delete the entity non-strictly. <br />
     * This delete ignores concurrency control.
     * 
     * @param ${myEntityVariableName} Entity. (NotNull)
     * @exception ${glPackageBaseCommonException}.${glEntityAlreadyDeletedException} When the entity has already been deleted.
     * @exception ${glPackageBaseCommonException}.${glEntityDuplicatedException} When the entity has been duplicated.
     */
    public void deleteNonstrict(${myExtendedObjectClassName} ${myEntityVariableName}) {
        helpDeleteNonstrictInternally(${myEntityVariableName}, new InternalDeleteNonstrictCallback<${myExtendedObjectClassName}>() {
            public int callbackDelegateDeleteNonstrict(${myExtendedObjectClassName} entity) { return delegateDeleteNonstrict(entity); } });
    }

    /**
     * Delete the entity non-strictly ignoring deleted. <br />
     * This delete ignores concurrency control.
     * 
     * @param ${myEntityVariableName} Entity. (NotNull)
     * @exception ${glPackageBaseCommonException}.${glEntityDuplicatedException}
     * @exception ${glPackageBaseCommonException}.${glEntityDuplicatedException} When the entity has been duplicated.
     */
    public void deleteNonstrictIgnoreDeleted(${myExtendedObjectClassName} ${myEntityVariableName}) {
        helpDeleteNonstrictIgnoreDeletedInternally(${myEntityVariableName}, new InternalDeleteNonstrictIgnoreDeletedCallback<${myExtendedObjectClassName}>() {
            public int callbackDelegateDeleteNonstrict(${myExtendedObjectClassName} entity) { return delegateDeleteNonstrict(entity); } });
    }
#end

#set ($batchUpdateReturnType = "")
#if ($database.isVersionAfter1047())
  #set ($batchUpdateReturnType = "int[]")
#else
  #set ($batchUpdateReturnType = "int")
#end
#set ($batchUpdateReturnValueMethod = "")
#if ($database.isVersionAfter1047())
  #set ($batchUpdateReturnValueMethod = ".length")
#else
  #set ($batchUpdateReturnValueMethod = "")
#end

    // ===================================================================================
    //                                                                  Basic Batch Update
    //                                                                  ==================
    /**
     * Batch insert the list. This method use 'Batch Update' of java.sql.PreparedStatement.
     * 
     * @param ${myEntityListVariableName} The list of the entity. (NotNull)
     * @return The array of inserted count.
     */
    public ${batchUpdateReturnType} batchInsert(List<${myExtendedObjectClassName}> ${myEntityListVariableName}) {
        assertObjectNotNull("${myEntityListVariableName}", ${myEntityListVariableName});
        return delegateInsertList(${myEntityListVariableName});
    }

    /**
     * Batch update the list. All columns are update target. {NOT modified only} <br />
     * This method use 'Batch Update' of java.sql.PreparedStatement.
     * 
     * @param ${myEntityListVariableName} The list of the entity. (NotNull)
     * @return The array of updated count.
     * @exception ${glPackageBaseCommonException}.${glEntityAlreadyUpdatedException} If s2dao's version is over 1.0.47 (contains 1.0.47).
     */
    public ${batchUpdateReturnType} batchUpdate(List<${myExtendedObjectClassName}> ${myEntityListVariableName}) {
        assertObjectNotNull("${myEntityListVariableName}", ${myEntityListVariableName});
        return delegateUpdateList(${myEntityListVariableName});
    }

#if ($table.isUseUpdateDate() || $table.isUseVersionNo())
    /**
     * Batch update the list non-strictly. All columns are update target. {NOT modified only} <br />
     * This method use 'Batch Update' of java.sql.PreparedStatement.
     * 
     * @param ${myEntityListVariableName} The list of the entity. (NotNull)
     * @return The array of updated count.
     */
    public ${batchUpdateReturnType} batchUpdateNonstrict(List<${myExtendedObjectClassName}> ${myEntityListVariableName}) {
        assertObjectNotNull("${myEntityListVariableName}", ${myEntityListVariableName});
        return delegateUpdateListNonstrict(${myEntityListVariableName});
    }
#end

    /**
     * Batch delete the list. <br />
     * This method use 'Batch Update' of java.sql.PreparedStatement.
     * 
     * @param ${myEntityListVariableName} The list of the entity. (NotNull)
     * @return The array of deleted count.
     * @exception ${glPackageBaseCommonException}.${glEntityAlreadyUpdatedException} If s2dao's version is over 1.0.47 (contains 1.0.47).
     */
    public ${batchUpdateReturnType} batchDelete(List<${myExtendedObjectClassName}> ${myEntityListVariableName}) {
        assertObjectNotNull("${myEntityListVariableName}", ${myEntityListVariableName});
        return delegateDeleteList(${myEntityListVariableName});
    }

#if ($table.isUseUpdateDate() || $table.isUseVersionNo())
    /**
     * Batch delete the list non-strictly. <br />
     * This method use 'Batch Update' of java.sql.PreparedStatement.
     * 
     * @param ${myEntityListVariableName} The list of the entity. (NotNull)
     * @return The array of deleted count.
     */
    public ${batchUpdateReturnType} batchDeleteNonstrict(List<${myExtendedObjectClassName}> ${myEntityListVariableName}) {
        assertObjectNotNull("${myEntityListVariableName}", ${myEntityListVariableName});
        return delegateDeleteListNonstrict(${myEntityListVariableName});
    }
#end

    // ===================================================================================
    //                                                                      Various Insert
    //                                                                      ==============
#if ($database.isMakeBehaviorCopyInsert())
#if ($table.isUseIdentity())
#if ($table.hasPrimaryKey())

    /* (non-javadoc) 
     * Copy-insert.
     * 
     * @param primaryKey Primary-keys. (NotNull)
     * @return Inserted count.
     * @exception ${glPackageBaseCommonException}.${glEntityAlreadyDeletedException}
     */
    public int copyInsertByPKValueAfterSelect(${table.PrimaryKeyArgsString}) {
        ${myExtendedObjectClassName} entity = new ${myExtendedObjectClassName}();
        ${table.getPrimaryKeyArgsSetupString('entity')}
        final ${myConditionBeanClassName} cb = newMyConditionBean();
        cb.acceptPrimaryKeyMapString(getDBMeta().extractPrimaryKeyMapString(entity));
        final ${myExtendedObjectClassName} currentEntity = selectEntityWithDeletedCheck(cb);
        return delegateInsert(currentEntity);
    }
#end

    /**
     * Filter 'copy-insert' entity.
     * 
     * @param ${myEntityVariableName} Entity. (NotNull)
     */
    protected void filterCopyInsertEntity(${myExtendedObjectClassName} ${myEntityVariableName}) {
    }
#end
#end
    // ===================================================================================
    //                                                                      Various Update
    //                                                                      ==============
#if ($database.isMakeBehaviorLoopUpdate())
    /**
     * Loop update modified elements only.
     * 
     * @param ${myEntityListVariableName} The list of entity. (NotNull and Empty OK)
     */
    public void loopUpdateModifiedElementsOnly(List<${myExtendedObjectClassName}> ${myEntityListVariableName}) {
        assertObjectNotNull("${myEntityListVariableName}", ${myEntityListVariableName});
        for (${myExtendedObjectClassName} entity : ${myEntityListVariableName}) { if (entity.hasModification()) { update(entity); } }
    }

#if ($table.isUseUpdateDate() || $table.isUseVersionNo())
    /**
     * Loop update modified elements only non-strictly.
     * 
     * @param ${myEntityListVariableName} The list of entity. (NotNull and Empty OK)
     */
    public void loopUpdateModifiedElementsOnlyNonstrict(List<${myExtendedObjectClassName}> ${myEntityListVariableName}) {
        assertObjectNotNull("${myEntityListVariableName}", ${myEntityListVariableName});
        for (${myExtendedObjectClassName} entity : ${myEntityListVariableName}) { if (entity.hasModification()) { updateNonstrict(entity); } }
    }
#end
#end

#if (${table.hasOnlyOnePrimaryKey()})
    // ===================================================================================
    //                                                                      Various Delete
    //                                                                      ==============
    /**
     * Query delete the several entities.
     * 
     * @param cb Condition-bean. (NotNull)
     * @return The deleted count.
     */
    public int queryDelete(${myConditionBeanClassName} cb) {
	    assertConditionBeanNotNull(cb);
	    return getMyDao().deleteByQuery(cb);
	}
#end
#else
  #if ($table.isAvailableNonPrimaryKeyWritable())

    // ===================================================================================
    //                                                                 Basic Entity Update
    //                                                                 ===================
    /**
     * Insert.
     * 
     * @param ${myEntityVariableName} Entity. (NotNull)
     */
    public void insert(${myExtendedObjectClassName} ${myEntityVariableName}) {
        assertEntityNotNull(${myEntityVariableName});
        delegateInsert(${myEntityVariableName});
    }
  #end
#end

    // ===================================================================================
    //                                                                     Delegate Method
    //                                                                     ===============
    // -----------------------------------------------------
    //                                                Select
    //                                                ------
    ${database.behaviorDelegateModifier} int delegateGetCountAll() { return getMyDao().getCountAll(); }
    ${database.behaviorDelegateModifier} List<${myExtendedObjectClassName}> delegateGetListAll() { return getMyDao().getListAll(); }
#if ($table.hasPrimaryKey())
    ${database.behaviorDelegateModifier} ${myExtendedObjectClassName} delegateGetEntity(${table.PrimaryKeyArgsString}) { return getMyDao().getEntity(${table.getPrimaryKeyUncapitalisedJavaNameCommaString()}); }
#end
    ${database.behaviorDelegateModifier} int delegateSelectCount(${myConditionBeanClassName} cb) { assertConditionBeanNotNull(cb); return getMyDao().selectCount(cb); }
    ${database.behaviorDelegateModifier} ${myExtendedObjectClassName} delegateSelectEntity(${myConditionBeanClassName} cb) { assertConditionBeanNotNull(cb); return getMyDao().selectEntity(cb); }
    ${database.behaviorDelegateModifier} List<${myExtendedObjectClassName}> delegateSelectList(${myConditionBeanClassName} cb) { assertConditionBeanNotNull(cb); return getMyDao().selectList(cb); }
#if ($table.isUseSequence())
    ${database.behaviorDelegateModifier} ${table.sequenceReturnType} delegateSelectNextVal() { return getMyDao().selectNextVal(); }
#end
#if ($table.isWritable())

    // -----------------------------------------------------
    //                                                Update
    //                                                ------
    ${database.behaviorDelegateModifier} int delegateInsert(${myExtendedObjectClassName} entity) { if (!processBeforeInsert(entity)) { return 1; } return getMyDao().insert(entity); }
    ${database.behaviorDelegateModifier} int delegateUpdate(${myExtendedObjectClassName} entity) { if (!processBeforeUpdate(entity)) { return 1; } return getMyDao().updateModifiedOnly(entity); }
#if ($table.hasOptimisticLock())
    ${database.behaviorDelegateModifier} int delegateUpdateNonstrict(${myExtendedObjectClassName} entity) { if (!processBeforeUpdate(entity)) { return 1; } return getMyDao().updateNonstrictModifiedOnly(entity); }
#end
    ${database.behaviorDelegateModifier} int delegateDelete(${myExtendedObjectClassName} entity) { if (!processBeforeDelete(entity)) { return 1; } return getMyDao().delete(entity); }
#if ($table.hasOptimisticLock())
    ${database.behaviorDelegateModifier} int delegateDeleteNonstrict(${myExtendedObjectClassName} entity) { if (!processBeforeDelete(entity)) { return 1; } return getMyDao().deleteNonstrict(entity); }
#end
#set ($batchUpdateReturnType = "")
#if ($database.isVersionAfter1047())
  #set ($batchUpdateReturnType = "int[]")
#else
  #set ($batchUpdateReturnType = "int")
#end

    ${database.behaviorDelegateModifier} ${batchUpdateReturnType} delegateInsertList(List<${myExtendedObjectClassName}> entityList) {
        assertObjectNotNull("${myEntityListVariableName}", entityList); return getMyDao().insertList(helpFilterBeforeInsertInternally(entityList));
    }
    ${database.behaviorDelegateModifier} ${batchUpdateReturnType} delegateUpdateList(List<${myExtendedObjectClassName}> entityList) {
        assertObjectNotNull("${myEntityListVariableName}", entityList); return getMyDao().updateList(helpFilterBeforeUpdateInternally(entityList));
    }
#if ($table.hasOptimisticLock())
    ${database.behaviorDelegateModifier} ${batchUpdateReturnType} delegateUpdateListNonstrict(List<${myExtendedObjectClassName}> entityList) {
        assertObjectNotNull("${myEntityListVariableName}", entityList); return getMyDao().updateListNonstrict(helpFilterBeforeUpdateInternally(entityList));
    }
#end
    ${database.behaviorDelegateModifier} ${batchUpdateReturnType} delegateDeleteList(List<${myExtendedObjectClassName}> entityList) {
        assertObjectNotNull("${myEntityListVariableName}", entityList); return getMyDao().deleteList(helpFilterBeforeDeleteInternally(entityList));
    }
#if ($table.hasOptimisticLock())
    ${database.behaviorDelegateModifier} ${batchUpdateReturnType} delegateDeleteListNonstrict(List<${myExtendedObjectClassName}> entityList) {
        assertObjectNotNull("${myEntityListVariableName}", entityList); return getMyDao().deleteListNonstrict(helpFilterBeforeDeleteInternally(entityList));
    }
#end
#else
#if ($table.isAvailableNonPrimaryKeyWritable())
    ${database.behaviorDelegateModifier} int delegateInsert(${myExtendedObjectClassName} entity) {
        assertEntityNotNull(entity);// If this table use identity, the entity does not have primary-key.
        return getMyDao().insert(entity);
    }
#end
#end

    // ===================================================================================
    //                                                                           Hierarchy
    //                                                                           =========
    /**
     * Create the basic request of hierarchy of ${myExtendedObjectClassName}..
     * 
     * @param sourceList The list of source. (NotNull)
     * @param <SOURCE> The type of source.
     * @return Hierarchy request of ${myExtendedObjectClassName}. (NotNull)
     */
    public <SOURCE> ${glHierarchyBasicRequestName}<${myExtendedObjectClassName}, ${myDBMetaClassName}.${table.relationTraceClassName}RelationTrace> createHierarchyBasicRequest(List<SOURCE> sourceList) {
        final ${glHierarchyBasicRequestName}<${myExtendedObjectClassName}, ${myDBMetaClassName}.${table.relationTraceClassName}RelationTrace> request = new ${glHierarchyBasicRequestName}<${myExtendedObjectClassName}, ${myDBMetaClassName}.${table.relationTraceClassName}RelationTrace>(${myExtendedObjectClassName}.class);
        request.registerSourceList(sourceList);
        return request;
    }

    /**
     * Arrange hierarchy.
     * 
     * @param request Hierarchy request of ${myExtendedObjectClassName}. (NotNull)
     * @return The list of ${myExtendedObjectClassName}. (NotNull)
     */
    public List<${myExtendedObjectClassName}> arrangeHierarchy(${glHierarchyRequestName}<${myExtendedObjectClassName}> request) {
        return new ${glHierarchyArrangerName}<${myExtendedObjectClassName}>().arrangeHierarchy(request);
    }

    // ===================================================================================
    //                                                                          CBSetupper
    //                                                                          ==========
    /**
     * The interface of conditionBean setupper.
     */
    public static interface CBSetupper extends ${glConditionBeanSetupperName}<${myConditionBeanClassName}> {

        /**
         * Set up condition.
         * 
         * @param cb The conditionBean of ${myExtendedObjectClassName}. (NotNull)
         */
        public void setup(${myConditionBeanClassName} cb);
    }

    // ===================================================================================
    //                                                                              Helper
    //                                                                              ======
    protected ${myExtendedObjectClassName} downcast(${glEntityInterfaceName} entity) {
        return helpDowncastInternally(entity, ${myExtendedObjectClassName}.class);
    }
}
