#set ($myClassName = "${myBaseBhvClassName}")

package ${glPackageBaseBhv};

import ${glPackageBaseCommon}.*;
import ${glPackageBaseCommonCBean}.${glConditionBeanInterfaceName};
import ${glPackageBaseCommonCBean}.${glListResultBeanName};
import ${glPackageBaseCommonCBean}.${glPagingBeanInterfaceName};
import ${glPackageBaseCommonCBean}.${glPagingResultBeanName};
import ${glPackageBaseCommonDBMeta}.${glDBMetaInterfaceName};
#if (${table.hasOnlyOnePrimaryKey()})
  #if (${table.hasReferrer()})

import ${glPackageExtendedBhv}.*;
  #end
#end

import ${glPackageExtendedDao}.*;
import ${glPackageExtendedEntity}.*;
import ${myDBMetaPackageName}.*;
import ${glPackageCB}.*;

#set ($myExtendClassName = "")
#if ($table.isWritable())
  #set ($myExtendClassName = "${glBehaviorWritableAbstractName}")
#else
  #set ($myExtendClassName = "${glBehaviorReadableAbstractName}")
#end


/**
 * The behavior of ${table.Name}.
 * 
 * @author ${database.ClassAuthor}
 */
public abstract class ${myClassName} extends ${glPackageBaseCommonBhv}.${myExtendClassName} {

    // =====================================================================================
    //                                                                             Attribute
    //                                                                             =========
    /** Dao instance. */
    protected ${myExtendedDaoClassName} _dao;

    // =====================================================================================
    //                                                                           Constructor
    //                                                                           ===========
    /**
     * Constructor.
     */
    public ${myClassName}() {
    }

    // =====================================================================================
    //                                                                            Table name
    //                                                                            ==========
    /**
     * ${database.ImplementComment}
     * 
     * @return Table db-name. (NotNull)
     */
    public String getTableDbName() {
        return "${table.Name}";
    }

    // =====================================================================================
    //                                                                                DBMeta
    //                                                                                ======
    /**
     * ${database.ImplementComment}
     * 
     * @return DBMeta. (NotNull)
     */
    public ${glDBMetaInterfaceName} getDBMeta() {
        return ${myDBMetaClassName}.getInstance();
    }

    /**
     * Get my dbmeta.
     * 
     * @return DBMeta. (NotNull)
     */
    public ${myDBMetaClassName} getMyDBMeta() {
        return ${myDBMetaClassName}.getInstance();
    }

    // =====================================================================================
    //                                                                          Dao Accessor
    //                                                                          ============
    /**
     * Get my dao.
     * 
     * @return My dao.
     */
    public ${myExtendedDaoClassName} getMyDao() {
        return _dao;
    }

    /**
     * Set my dao.
     * 
     * @param dao My dao. (NotNull)
     */
    public void setMyDao(${myExtendedDaoClassName} dao) {
        assertObjectNotNull("dao", dao);
        _dao = dao;
    }

    /**
     * ${database.ImplementComment}
     * 
     * @return Dao-readable. (NotNull)
     */
    public ${glDaoReadableInterfaceName} getDaoReadable() {
        return getMyDao();
    }

#if ($table.isWritable())
    /**
     * ${database.ImplementComment}
     * 
     * @return Dao-writable. (NotNull)
     */
    public ${glDaoWritableInterfaceName} getDaoWritable() {
        return getMyDao();
    }
#end

    // =====================================================================================
    //                                                                          New Instance
    //                                                                          ============
    /**
     * New entity.
     * 
     * @return Entity. (NotNull)
     */
    public ${glEntityInterfaceName} newEntity() {
        return newMyEntity();
    }

    /**
     * New condition-bean.
     * 
     * @return Condition-bean. (NotNull)
     */
    public ${glConditionBeanInterfaceName} newConditionBean() {
        return newMyConditionBean();
    }

    /**
     * New my entity.
     * 
     * @return My entity. (NotNull)
     */
    public ${myExtendedObjectClassName} newMyEntity() {
        return new ${myExtendedObjectClassName}();
    }

    /**
     * New my condition-bean.
     * 
     * @return My condition-bean. (NotNull)
     */
    public ${myConditionBeanClassName} newMyConditionBean() {
        return new ${myConditionBeanClassName}();
    }

    // =====================================================================================
    //                                                                       Delegate Method
    //                                                                       ===============
    /**
     * Get count as all. (Delegate-Method)
     * 
     * @return All count. (NotNull)
     */
    public int delegateGetCountAll() {
        return getMyDao().getCountAll();
    }

    /**
     * Get list as all. (Delegate-Method)
     * 
     * @return All list. (NotNull)
     */
    public java.util.List${database.filterGenericsString(${myExtendedObjectClassName})} delegateGetListAll() {
        return getMyDao().getListAll();
    }
#if ($table.hasPrimaryKey())

    //
    // Get entity. (Delegate-Method)
    // 
    // @param Primary-keys (NotNull)
    // @return Entity. (NotNull)
    //
    public ${myExtendedObjectClassName} delegateGetEntity(${table.PrimaryKeyArgsString}) {
        return getMyDao().getEntity(${table.getPrimaryKeyUncapitalisedJavaNameCommaString()});
    }
#end

    /**
     * Select count by condition-bean. (Delegate-Method)
     * 
     * @param cb Condition-bean. (NotNull)
     * @return Selected count. (NotNull)
     */
    public int delegateSelectCount(${myConditionBeanClassName} cb) {
        assertConditionBeanNotNull(cb);
        return getMyDao().selectCount(cb);
    }
#if ($database.isMakeDeprecated())

    /**
     * Select count ignore fetch scope by condition-bean. (Delegate-Method)
     * 
     * @param cb Condition-bean. (NotNull)
     * @return Selected count. (NotNull)
     * @deprecated This method is deprecated. Please use delegateSelectCount()!
     */
    public int delegateSelectCountIgnoreFetchScope(${myConditionBeanClassName} cb) {
        assertConditionBeanNotNull(cb);
        return getMyDao().selectCountIgnoreFetchScope(cb);
    }
#end

    /**
     * Select entity by condition-bean. (Delegate-Method)
     * 
     * @param cb Condition-bean. (NotNull)
     * @return Selected entity. If the select result is zero, it returns null. (Nullable)
     */
    public ${myExtendedObjectClassName} delegateSelectEntity(${myConditionBeanClassName} cb) {
        assertConditionBeanNotNull(cb);
        return getMyDao().selectEntity(cb);
    }

    /**
     * Select list by condition-bean. (Delegate-Method)
     * 
     * @param cb Condition-bean. (NotNull)
     * @return Selected list. If the select result is zero, it returns empty list. (NotNull)
     */
    public java.util.List${database.filterGenericsString(${myExtendedObjectClassName})} delegateSelectList(${myConditionBeanClassName} cb) {
        assertConditionBeanNotNull(cb);
        return getMyDao().selectList(cb);
    }

#if ($table.isUseSequence())

    /**
     * Select next value as sequence. (Delegate-Method)
     * 
     * @return Next value. (NotNull)
     */
    public java.math.BigDecimal delegateSelectNextVal() {
        return getMyDao().selectNextVal();
    }
#end

#if ($table.isWritable())

    /**
     * Insert one entity. (Delegate-Method)
     * 
     * @param entity Entity. (NotNull)
     * @return Inserted count.
     */
    public int delegateInsert(${myExtendedObjectClassName} entity) {
        assertEntityNotNull(entity);// If this table use identity, the entity does not have primary-key.
        filterEntityOfInsert(entity);
        assertEntityOfInsert(entity);
        return getMyDao().insert(entity);
    }

    /**
     * Update one entity. (Delegate-Method)
     * {modified only}
     * 
     * @param entity Entity. (NotNull)
     * @return Updated count.
     */
    public int delegateUpdate(${myExtendedObjectClassName} entity) {
        assertEntityNotNullAndHasPrimaryKeyValue(entity);
        filterEntityOfUpdate(entity);
        assertEntityOfUpdate(entity);
        return getMyDao().updateModifiedOnly(entity);
    }
  #if ($database.isVersionAfter1040() && ($table.isUseUpdateDate() || $table.isUseVersionNo()))

    /**
     * Update one entity. (Delegate-Method)
     * {non strict & modified only}
     * 
     * @param entity Entity. (NotNull)
     * @return Updated count.
     */
    public int delegateUpdateNonstrict(${myExtendedObjectClassName} entity) {
        assertEntityNotNullAndHasPrimaryKeyValue(entity);
        filterEntityOfUpdate(entity);
        assertEntityOfUpdate(entity);
        return getMyDao().updateNonstrictModifiedOnly(entity);
    }
  #end

    /**
     * Delete one entity. (Delegate-Method)
     * 
     * @param entity Entity. (NotNull)
     * @return Deleted count.
     */
    public int delegateDelete(${myExtendedObjectClassName} entity) {
        assertEntityNotNullAndHasPrimaryKeyValue(entity);
        filterEntityOfDelete(entity);
        assertEntityOfDelete(entity);
        return getMyDao().delete(entity);
    }

    /**
     * Insert several entities. (Delegate-Method)
     * 
     * @param entityList Entity-list. (NotNull & NotEmpty)
     * @return Inserted count.
     */
    public int delegateInsertList(java.util.List${database.filterGenericsString(${myExtendedObjectClassName})} entityList) {
        assertListNotNullAndNotEmpty(entityList);
        return getMyDao().insertList(entityList);
    }

    /**
     * Update several entities. (Delegate-Method)
     * 
     * @param entityList Entity-list. (NotNull & NotEmpty)
     * @return Updated count.
     */
    public int delegateUpdateList(java.util.List${database.filterGenericsString(${myExtendedObjectClassName})} entityList) {
        assertListNotNullAndNotEmpty(entityList);
        return getMyDao().updateList(entityList);
    }

    /**
     * Delete several entities. (Delegate-Method)
     * 
     * @param entityList Entity-list. (NotNull & NotEmpty)
     * @return Deleted count.
     */
    public int delegateDeleteList(java.util.List${database.filterGenericsString(${myExtendedObjectClassName})} entityList) {
        assertListNotNullAndNotEmpty(entityList);
        return getMyDao().deleteList(entityList);
    }
#end

    // =====================================================================================
    //                                                                    Basic Select Count
    //                                                                    ==================
    /**
     * Select count by condition-bean.
     * <pre>
     * If the argument 'condition-bean' is effective about fetch-scope,
     * this method invoke select count ignoring the fetch-scope.
     * </pre>
     * @param cb Condition-bean. This condition-bean should not be set up about fetch-scope. (NotNull)
     * @return Selected count.
     */
    public int selectCount(${myConditionBeanClassName} cb) {
        assertConditionBeanNotNull(cb);
        return delegateSelectCount(cb);
    }

    // =====================================================================================
    //                                                                   Basic Select Entity
    //                                                                   ===================
    /**
     * Select entity by condition-bean.
     * 
     * @param cb Condition-bean. (NotNull)
     * @return Selected entity. (Nullalble)
     * @exception ${glPackageBaseCommonException}.${glRecordHasOverlappedException}
     */
    public ${myExtendedObjectClassName} selectEntity(${myConditionBeanClassName} cb) {
        assertConditionBeanNotNull(cb);
        final java.util.List${database.filterGenericsString(${myExtendedObjectClassName})} ls = selectList(cb);
        if (ls.isEmpty()) {
            return null;
        }
        assertRecordHasBeenSelectedAsOne(ls, cb);
        return (${myExtendedObjectClassName})ls.get(0);
    }

    /**
     * Select entity by condition-bean with deleted check.
     * 
     * @param cb Condition-bean. (NotNull)
     * @return Selected entity. (NotNull)
     * @exception ${glPackageBaseCommonException}.${glRecordHasAlreadyBeenDeletedException}
     * @exception ${glPackageBaseCommonException}.${glRecordHasOverlappedException}
     */
    public ${myExtendedObjectClassName} selectEntityWithDeletedCheck(${myConditionBeanClassName} cb) {
        assertConditionBeanNotNull(cb);
        final java.util.List${database.filterGenericsString(${myExtendedObjectClassName})} ls = selectList(cb);
        assertRecordHasNotBeenDeleted(ls, cb);
        assertRecordHasBeenSelectedAsOne(ls, cb);
        return (${myExtendedObjectClassName})ls.get(0);
    }
#if ($table.hasPrimaryKey())

    /*
     * Select entity with deleted check. {by primary-key}
     * 
     * @param primaryKey
     * @return Selected entity. (NotNull)
     * @exception ${glPackageBaseCommonException}.${glRecordHasAlreadyBeenDeletedException}
     * @exception ${glPackageBaseCommonException}.${glRecordHasOverlappedException}
     */
    public ${myExtendedObjectClassName} selectByPKValueWithDeletedCheck(${table.PrimaryKeyArgsString}) {
        ${myExtendedObjectClassName} entity = new ${myExtendedObjectClassName}();
        ${table.getPrimaryKeyArgsSetupString('entity')}
        final ${myConditionBeanClassName} cb = newMyConditionBean();
        cb.acceptPrimaryKeyMapString(entity.extractPrimaryKeyMapString());
        return selectEntityWithDeletedCheck(cb);
    }
#end
#if ($table.hasPrimaryKey() && $database.isMakeBehaviorForUpdate())

    /*
     * Select entity for update with deleted check. {by primary-key}
     * 
     * @param primaryKey
     * @return Selected entity. (NotNull)
     * @exception ${glPackageBaseCommonException}.${glRecordHasAlreadyBeenDeletedException}
     * @exception ${glPackageBaseCommonException}.${glRecordHasOverlappedException}
     */
    public ${myExtendedObjectClassName} selectByPKValueWithDeletedCheckForUpdate(${table.PrimaryKeyArgsString}) {
        ${myExtendedObjectClassName} entity = new ${myExtendedObjectClassName}();
        ${table.getPrimaryKeyArgsSetupString('entity')}
        final ${myConditionBeanClassName} cb = newMyConditionBean();
        cb.acceptPrimaryKeyMapString(entity.extractPrimaryKeyMapString());
        cb.lockForUpdate();
        return selectEntityWithDeletedCheck(cb);
    }
#end

    // =====================================================================================
    //                                                                     Basic Select List
    //                                                                     =================
    /**
     * Select list as result-bean.
     * 
     * @param cb Condition-bean. (NotNull)
     * @return Selected list-result-bean. (NotNull)
     */
    public ${glListResultBeanName}${database.filterGenericsString(${myExtendedObjectClassName})} selectList(${myConditionBeanClassName} cb) {
        assertConditionBeanNotNull(cb);
        return new ResultBeanBuilder${database.filterGenericsString(${myExtendedObjectClassName})}(this).buildListResultBean(cb, delegateSelectList(cb));
    }

    /**
     * Select page as result-bean.
     * 
     * @param cb Condition-bean. (NotNull)
     * @return Selected paging-result-bean. (NotNull)
     */
    public ${glPagingResultBeanName}${database.filterGenericsString(${myExtendedObjectClassName})} selectPage(final ${myConditionBeanClassName} cb) {
        assertConditionBeanNotNull(cb);
        return selectPage(cb, new SelectPageSimpleInvoker${database.filterGenericsString(${myExtendedObjectClassName})}(this));
    }

    /**
     * Select page.
     * 
     * @param cb Condition-bean. (NotNull)
     * @param invoker Select-page-invoker (NotNull)
     * @return Selected paging-result-bean. (NotNull)
     */
    public ${glPagingResultBeanName}${database.filterGenericsString(${myExtendedObjectClassName})} selectPage(final ${myConditionBeanClassName} cb, SelectPageInvoker${database.filterGenericsString(${myExtendedObjectClassName})} invoker) {
        assertConditionBeanNotNull(cb);
        final SelectPageCallback${database.filterGenericsString(${myExtendedObjectClassName})} pageCallback = new SelectPageCallback${database.filterGenericsString(${myExtendedObjectClassName})}() {
            public ${glPagingBeanInterfaceName} getPagingBean() { return cb; }
            public int selectCountIgnoreFetchScope() {
                return selectCount(cb);
            }
            public java.util.List${database.filterGenericsString(${myExtendedObjectClassName})} selectListWithFetchScope() {
                return selectList(cb);
            }
        };
        return invoker.invokeSelectPage(pageCallback);
    }


#if ($database.isMakeDeprecated())

    // This is deprecated!!!
    /**
     * Select list after checking count(ignore fetch scope).
     * 
     * @param cb Condition-bean. (NotNull)
     * @param maxCount Max count.
     * @return List-result-bean. (NotNull)
     * @exception ${glPackageBaseCommonException}.${glSelectedCountExceedMaxCountExceptionName}
     * @deprecated Please don't use this.
     */
    public ${glListResultBeanName} selectListAfterCheckingCountIgnoreFetchScope(${myConditionBeanClassName} cb, int maxCount) {
        assertConditionBeanNotNull(cb);
        final int selectedCount = selectCount(cb);
        assertSelectedCountHasNotExceededMaxCount(selectedCount, maxCount, cb);
        return selectList(cb);
    }
#end
#if ($table.hasPrimaryKey())
  #if ($database.isMakeDeprecated())

    // This is deprecated!!!
    /**
     * @deprecated Please use selectByPKValueWithDeletedCheck().
     */
    public ${myExtendedObjectClassName} selectForReadOnlyByPKValueWithDeletedCheck(${table.PrimaryKeyArgsString}) {
        ${myExtendedObjectClassName} entity = new ${myExtendedObjectClassName}();
        ${table.getPrimaryKeyArgsSetupString('entity')}
        final ${myConditionBeanClassName} cb = newMyConditionBean();
        cb.acceptPrimaryKeyMapString(entity.extractPrimaryKeyMapString());
        return selectEntityWithDeletedCheck(cb);
    }
  #end
#end
#if ($table.isUseSequence())

    // =====================================================================================
    //                                                                              Sequence
    //                                                                              ========
    /**
     * Select next value as sequence.
     * 
     * @return Next value. (NotNull)
     */
    public java.math.BigDecimal selectNextVal() {
        return getMyDao().selectNextVal();
    }
#end
#if (${table.hasOnlyOnePrimaryKey()})

    // =====================================================================================
    //                                                                         Load Refferer
    //                                                                         =============
  #foreach ($refferer in $table.Referrers)
    #set ($reffererTable = $refferer.Table)
    #set ($reffererEntityClassName = "${glProjectPrefix}${reffererTable.JavaName}")
    #set ($reffererDaoClassName = "${reffererEntityClassName}Dao")
    #set ($reffererBhvClassName = "${reffererEntityClassName}Bhv")
    #set ($reffererCBClassName = "${reffererEntityClassName}${glConditionBeanInitialName}")
    #set ($reffererVariableName = "${glChildrenVariablePrefix}${refferer.ReffererPropertyNameInitCap}")
    #set ($reffererEntityLongClassName = "${glPackageExtendedEntity}.${reffererEntityClassName}")
    #set ($genericPKMyEntityMap = "${table.getPrimaryKeyJavaNativeAsOne()}, ${myExtendedObjectClassName}")
    #set ($genericPKChildListMap = "${table.getPrimaryKeyJavaNativeAsOne()}, java.util.List${database.filterGenericsString(${reffererEntityClassName})}")

    // /* * * * * * * * * * * * * * * * * * * * * * *
    //   ReffererTable    = [${refferer.Table.Name}]
    //   ReffererProperty = [${refferer.ReffererPropertyName}]
    // * * * * * * * * */

    /**
     * Load refferer of ${refferer.ReffererPropertyName}.
     * 
     * Default refferer order-by is 'primary-key asc'.
     * <pre>
     *   ex) Refferer order-by is ${refferer.getLocalColumnJavaNameAsOne()}.
     * 
     *     final ${myClassName} bhv = (${myClassName})getDaoSelector().getRBhv(${myClassName}.class);
     *     final ${myConditionBeanClassName} cb = bhv.newMyConditionBean();
     *     cb.query().setXxx_Equal("xxx");
     *     final List<${myExtendedObjectClassName}> ls = bhv.selectList(cb);
     *     bhv.load${refferer.ReffererPropertyNameInitCap}(ls);
     * 
     *  *About internal policy, the value of primary key(and others too) is treated as CaseInsensitive.
     * </pre>
     * 
     * @param ls Entity list of main table. (NotNull)
     */
    public void load${refferer.ReffererPropertyNameInitCap}(java.util.List${database.filterGenericsString(${myExtendedObjectClassName})} ls) {
        final ${reffererBhvClassName}.CBSetupper cbSetupper = new ${reffererBhvClassName}.CBSetupper() {
            public void setup(${reffererCBClassName} cb) {
                cb.addOrderBy_PK_Asc();// Default OrderBy for Refferer.
            }
        };
        load${refferer.ReffererPropertyNameInitCap}(ls, cbSetupper);
    }

    /**
     * Load refferer of ${refferer.ReffererPropertyName}.
     * 
     * <pre>
     *   ex) Refferer order-by is ${refferer.getLocalColumnJavaNameAsOne()}.
     * 
     *     final ${myClassName} bhv = (${myClassName})getDaoSelector().getRBhv(${myClassName}.class);
     *     final ${myConditionBeanClassName} cb = bhv.newMyConditionBean();
     *     cb.query().setXxx_Equal("xxx");
     *     final List<${myExtendedObjectClassName}> ls = bhv.selectList(cb);
     *     final ${reffererBhvClassName}.CBSetupper cbSetupper = new ${reffererBhvClassName}.CBSetupper() {
     *         public void setup(${reffererCBClassName} cb) {
     *             cb.query().addOrderBy_${refferer.getLocalColumnJavaNameAsOne()}_Asc();
     *         }
     *     };
     *     bhv.load${refferer.ReffererPropertyNameInitCap}(ls, cbSetupper);
     * 
     *  *About internal policy, the value of primary key(and others too) is treated as CaseInsensitive.
     * </pre>
     * 
     * @param ls Entity list of main table. (NotNull)
     * @param cbSetupper Refferer condition setupper instance for registering refferer condition. (NotNull)
     */
    public void load${refferer.ReffererPropertyNameInitCap}(java.util.List${database.filterGenericsString(${myExtendedObjectClassName})} ls, ${reffererBhvClassName}.CBSetupper cbSetupper) {
        assertObjectNotNull("ls", ls);
        assertObjectNotNull("cbSetupper", cbSetupper);
        if (ls.isEmpty()) {
            return;
        }

        final java.util.Map${database.filterGenericsString(${genericPKMyEntityMap})} pkMyEntityMap = new java.util.LinkedHashMap${database.filterGenericsString(${genericPKMyEntityMap})}();
        final java.util.List${database.filterGenericsString(${table.getPrimaryKeyJavaNativeAsOne()})} pkList = new java.util.ArrayList${database.filterGenericsString(${table.getPrimaryKeyJavaNativeAsOne()})}();
        for (final java.util.Iterator ite = ls.iterator(); ite.hasNext(); ) {
            final ${myExtendedObjectClassName} entity = (${myExtendedObjectClassName})ite.next();
            pkList.add(entity.get${table.getPrimaryKeyJavaNameAsOne()}());
            pkMyEntityMap.put((${table.getPrimaryKeyJavaNativeAsOne()})toLowerCaseIfString(entity.get${table.getPrimaryKeyJavaNameAsOne()}()), entity);
        }
        final ${reffererBhvClassName} reffererBhv = (${reffererBhvClassName})getDaoSelector().getRBhv(${reffererBhvClassName}.class);
        final ${reffererCBClassName} cb = reffererBhv.newMyConditionBean();
        cb.query().set${refferer.getLocalColumnJavaNameAsOne()}_InScope(pkList);
        cb.query().addOrderBy_${refferer.getLocalColumnJavaNameAsOne()}_Asc();
        cbSetupper.setup(cb);
        final java.util.List${database.filterGenericsString(${reffererEntityClassName})} reffererList = reffererBhv.selectList(cb);

        final java.util.Map${database.filterGenericsString(${genericPKChildListMap})} pkReffererListMap;
        pkReffererListMap = new java.util.LinkedHashMap${database.filterGenericsString(${genericPKChildListMap})}();
        for (final java.util.Iterator ite = reffererList.iterator(); ite.hasNext(); ) {
            final ${reffererEntityClassName} reffererEntity = (${reffererEntityClassName})ite.next();
            if (!pkReffererListMap.containsKey(toLowerCaseIfString(reffererEntity.get${refferer.getLocalColumnJavaNameAsOne()}()))) {
                pkReffererListMap.put((${table.getPrimaryKeyJavaNativeAsOne()})toLowerCaseIfString(reffererEntity.get${refferer.getLocalColumnJavaNameAsOne()}()), new java.util.ArrayList${database.filterGenericsString(${reffererEntityClassName})}());
            }
            ((java.util.List${database.filterGenericsString(${reffererEntityClassName})})pkReffererListMap.get(toLowerCaseIfString(reffererEntity.get${refferer.getLocalColumnJavaNameAsOne()}()))).add(reffererEntity);

            // for Reverse Reference.
            final ${myExtendedObjectClassName} myEntity = (${myExtendedObjectClassName})pkMyEntityMap.get(toLowerCaseIfString(reffererEntity.get${refferer.getLocalColumnJavaNameAsOne()}()));
            reffererEntity.set${refferer.ForeignPropertyNameInitCap}(myEntity);
        }

        for (final java.util.Iterator ite = ls.iterator(); ite.hasNext(); ) {
            final ${myExtendedObjectClassName} entity = (${myExtendedObjectClassName})ite.next();
            if (pkReffererListMap.containsKey(toLowerCaseIfString(entity.get${table.getPrimaryKeyJavaNameAsOne()}()))) {
                entity.set${refferer.ReffererPropertyNameInitCap}((java.util.List${database.filterGenericsString(${reffererEntityClassName})})pkReffererListMap.get(toLowerCaseIfString(entity.get${table.getPrimaryKeyJavaNameAsOne()}())));
            } else {
                entity.set${refferer.ReffererPropertyNameInitCap}(new java.util.ArrayList${database.filterGenericsString(${reffererEntityClassName})}());
            }
        }
    }
    #if ($database.isMakeDeprecated())

    /**
     * The interface of refferer condition for ${refferer.ReffererPropertyName}.
     * 
     * @deprecated Not for public use in the future. Please use ${reffererBhvClassName}.CBSetupper.
     */
    public static interface ReffererCondition${refferer.ReffererPropertyNameInitCap} extends ${reffererBhvClassName}.CBSetupper {
    }
    #end
  #end
#end
#if ($table.isWritable())

    // =====================================================================================
    //                                                                   Basic Entity Update
    //                                                                   ===================
    /**
     * Insert.
     * 
     * @param entity Entity. (NotNull)
     */
    public void insert(${myExtendedObjectClassName} entity) {
        assertEntityNotNull(entity);
        delegateInsert(entity);
    }

    protected void doCreate(${glEntityInterfaceName} entity) {
        insert((${myExtendedObjectClassName})entity);
    }

    /**
     * Update.
     * <pre>
     * If it updates count zero, throws exception.
     * If concurrency control of this table is valid, this update have it.
     * </pre>
     * @param entity Entity. (NotNull)
     * @exception ${glPackageBaseCommonException}.${glRecordHasAlreadyBeenDeletedException}
     * @exception ${glPackageBaseCommonException}.${glRecordHasOverlappedException}
     */
    public void update(${myExtendedObjectClassName} entity) {
        assertEntityNotNull(entity);
        final int updatedCount = delegateUpdate(entity);
        if (updatedCount == 0) {
            throw new ${glPackageBaseCommonException}.${glRecordHasAlreadyBeenDeletedException}(entity.toString());
        } else if (updatedCount > 1) {
            String msg = "updatedCount=" + updatedCount + ": " + entity.toString();
            throw new ${glPackageBaseCommonException}.${glRecordHasOverlappedException}(msg);
        }
    }

    protected void doModify(${glEntityInterfaceName} entity) {
        update((${myExtendedObjectClassName})entity);
    }
  #if ($database.isVersionAfter1040() && ($table.isUseUpdateDate() || $table.isUseVersionNo()))

    /**
     * Update non stritct.
     * <pre>
     * This update ignores concurrency control.
     * This method is faster than updateAfterSelect().
     * </pre>
     * @param entity Entity. (NotNull)
     * @exception ${glPackageBaseCommonException}.${glRecordHasAlreadyBeenDeletedException}
     * @exception ${glPackageBaseCommonException}.${glRecordHasOverlappedException}
     */
    public void updateNonstrict(${myExtendedObjectClassName} entity) {
        assertEntityNotNull(entity);
        final int updatedCount = delegateUpdateNonstrict(entity);
        if (updatedCount == 0) {
            throw new ${glPackageBaseCommonException}.${glRecordHasAlreadyBeenDeletedException}(entity.toString());
        } else if (updatedCount > 1) {
            String msg = "updatedCount=" + updatedCount + ": " + entity.toString();
            throw new ${glPackageBaseCommonException}.${glRecordHasOverlappedException}(msg);
        }
    }
  #end

    /**
     * Update after select.
     * 
     * @param entity Entity. This must contain primary-key value at least. (NotNull)
     * @exception ${glPackageBaseCommonException}.${glRecordHasAlreadyBeenDeletedException}
     */
    public void updateAfterSelect(${myExtendedObjectClassName} entity) {
        assertEntityNotNullAndHasPrimaryKeyValue(entity);
        final ${myConditionBeanClassName} cb = newMyConditionBean();
        cb.acceptPrimaryKeyMapString(entity.extractPrimaryKeyMapString());
        final ${myExtendedObjectClassName} currentEntity = selectEntityWithDeletedCheck(cb);
        mergeEntity(entity, currentEntity);
        update(currentEntity);
    }

    protected void doModifyAfterSelect(${glEntityInterfaceName} entity) {
        updateAfterSelect((${myExtendedObjectClassName})entity);
    }
  #if ($database.isVersionAfter1040() && ($table.isUseUpdateDate() || $table.isUseVersionNo()))

    /**
     * Insert or update non strict.
     * {update: modified only}
     * <pre>
     * This method is faster than insertOrUpdateAfterSelect().
     * </pre>
     * @param entity Entity. This should contain primary-key value at least(Except use identity). (NotNull)
     * @exception ${glPackageBaseCommonException}.${glRecordHasOverlappedException}
     */
    public void insertOrUpdateNonStrict(${myExtendedObjectClassName} entity) {
        assertEntityNotNull(entity);
        if (!entity.hasPrimaryKeyValue()) {
            insert(entity);
        } else {
            try {
                updateNonstrict(entity);
            } catch (${glPackageBaseCommonException}.${glRecordHasAlreadyBeenDeletedException} e) {
                insert(entity);
            }
        }
    }
  #end

    /**
     * Insert or update after select.
     * {update: modified only}
     * 
     * @param entity Entity. This should contain primary-key value at least(Except use identity). (NotNull)
     */
    public void insertOrUpdateAfterSelect(${myExtendedObjectClassName} entity) {
        assertEntityNotNull(entity);
        if (!entity.hasPrimaryKeyValue()) {
            insert(entity);
            return;
        }
        ${myExtendedObjectClassName} currentEntity = null;
        try {
            final ${myConditionBeanClassName} cb = newMyConditionBean();
            cb.acceptPrimaryKeyMapString(entity.extractPrimaryKeyMapString());
            currentEntity = selectEntityWithDeletedCheck(cb);
        } catch (${glPackageBaseCommonException}.${glRecordHasAlreadyBeenDeletedException} e) {
            insert(entity);
            return;
        }
        assertEntityNotNullAndHasPrimaryKeyValue(entity);
        mergeEntity(entity, currentEntity);
        update(currentEntity);
    }

    protected void doCreateOrModifyAfterSelect(${glEntityInterfaceName} entity) {
        insertOrUpdateAfterSelect((${myExtendedObjectClassName})entity);
    }
  #if ($database.isMakeBehaviorForUpdate())

    /**
     * Update after select-for-update.
     * 
     * @param entity Entity. This must contain primary-key value at least. (NotNull)
     * @exception ${glPackageBaseCommonException}.${glRecordHasAlreadyBeenDeletedException}
     */
    public void updateAfterSelectForUpdate(${myExtendedObjectClassName} entity) {
        assertEntityNotNullAndHasPrimaryKeyValue(entity);
        final ${myConditionBeanClassName} cb = newMyConditionBean();
        cb.acceptPrimaryKeyMapString(entity.extractPrimaryKeyMapString());
        cb.lockForUpdate();
        final ${myExtendedObjectClassName} currentEntity = selectEntityWithDeletedCheck(cb);
        mergeEntity(entity, currentEntity);
        update(currentEntity);
    }

    protected void doModifyAfterSelectForUpdate(${glEntityInterfaceName} entity) {
        updateAfterSelectForUpdate((${myExtendedObjectClassName})entity);
    }

    /**
     * Insert or update after select-for-update.
     * {update: modified only}
     * 
     * @param entity Entity. This must contain primary-key value at least(Except use identity). (NotNull)
     */
    public void insertOrUpdateAfterSelectForUpdate(${myExtendedObjectClassName} entity) {
        assertEntityNotNull(entity);
        if (!entity.hasPrimaryKeyValue()) {
            insert(entity);
            return;
        }
        ${myExtendedObjectClassName} currentEntity = null;
        try {
            final ${myConditionBeanClassName} cb = newMyConditionBean();
            cb.acceptPrimaryKeyMapString(entity.extractPrimaryKeyMapString());
            cb.lockForUpdate();
            currentEntity = selectEntityWithDeletedCheck(cb);
        } catch (${glPackageBaseCommonException}.${glRecordHasAlreadyBeenDeletedException} e) {
            insert(entity);
            return;
        }
        assertEntityNotNullAndHasPrimaryKeyValue(entity);
        mergeEntity(entity, currentEntity);
        update(entity);
    }

    protected void doCreateOrModifyAfterSelectForUpdate(${glEntityInterfaceName} entity) {
        insertOrUpdateAfterSelectForUpdate((${myExtendedObjectClassName})entity);
    }
  #end

    /**
     * ${database.ImplementComment}
     * 
     * @param sourceEntity Source entity. (NotNull)
     * @param destinationEntity Destination entity. (NotNull)
     */
    protected void mergeEntity(${glEntityInterfaceName} sourceEntity, ${glEntityInterfaceName} destinationEntity) {
        assertEntityNotNull(sourceEntity);
        assertEntityNotNull(destinationEntity);
        final ${myExtendedObjectClassName} sourceMyEntity = (${myExtendedObjectClassName})sourceEntity;
        final ${myExtendedObjectClassName} destinationMyEntity = (${myExtendedObjectClassName})destinationEntity;
        destinationMyEntity.clearModifiedPropertyNames();
        final java.util.Set${database.filterGenericsString('String')} names = sourceMyEntity.getModifiedPropertyNames();
  #foreach ($col in $table.Columns)

        if (names.contains("${col.UncapitalisedJavaName}")) {
            destinationMyEntity.set${col.JavaName}(sourceMyEntity.get${col.JavaName}());
        }
  #end

    }

    /**
     * Delete.
     * 
     * @param entity Entity. (NotNull)
     * @exception ${glPackageBaseCommonException}.${glRecordHasAlreadyBeenDeletedException}
     * @exception ${glPackageBaseCommonException}.${glRecordHasOverlappedException}
     */
    public void delete(${myExtendedObjectClassName} entity) {
        assertEntityNotNull(entity);
        final int deletedCount = delegateDelete(entity);
        if (deletedCount == 0) {
            throw new ${glPackageBaseCommonException}.${glRecordHasAlreadyBeenDeletedException}(entity.toString());
        } else if (deletedCount > 1) {
            String msg = "deletedCount=" + deletedCount + ": " + entity.toString();
            throw new ${glPackageBaseCommonException}.${glRecordHasOverlappedException}(msg);
        }
    }

    protected void doRemove(${glEntityInterfaceName} entity) {
        delete((${myExtendedObjectClassName})entity);
    }

    /**
     * Delete after select.
     * 
     * @param entity Entity. This must contain primary-key value at least. (NotNull)
     * @exception ${glPackageBaseCommonException}.${glRecordHasAlreadyBeenDeletedException}
     */
    public void deleteAfterSelect(${myExtendedObjectClassName} entity) {
        assertEntityNotNullAndHasPrimaryKeyValue(entity);
        final ${myConditionBeanClassName} cb = newMyConditionBean();
        cb.acceptPrimaryKeyMapString(entity.extractPrimaryKeyMapString());
        selectEntityWithDeletedCheck(cb);
        delete(entity);
    }

    protected void doRemoveAfterSelect(${glEntityInterfaceName} entity) {
        deleteAfterSelect((${myExtendedObjectClassName})entity);
    }

    // =====================================================================================
    //                                                                    Basic Batch Update
    //                                                                    ==================
    /**
     * Insert list.
     * 
     * @param entityList Entity-list. (NotNull & NotEmpty)
     * @return Inserted count.
     */
    public int insertList(java.util.List${database.filterGenericsString(${myExtendedObjectClassName})} entityList) {
        assertListNotNullAndNotEmpty(entityList);
        return delegateInsertList(entityList);
    }

    /**
     * Update list.
     * 
     * @param entityList Entity-list. (NotNull & NotEmpty)
     * @return Updated count.
     */
    public int updateList(java.util.List${database.filterGenericsString(${myExtendedObjectClassName})} entityList) {
        assertListNotNullAndNotEmpty(entityList);
        return delegateUpdateList(entityList);
    }

    /**
     * Delete list.
     * 
     * @param entityList Entity-list. (NotNull & NotEmpty)
     * @return Deleted count.
     */
    public int deleteList(java.util.List${database.filterGenericsString(${myExtendedObjectClassName})} entityList) {
        assertListNotNullAndNotEmpty(entityList);
        return delegateDeleteList(entityList);
    }

    // =====================================================================================
    //                                                                        Various Insert
    //                                                                        ==============
  #if ($table.isUseIdentity())
    #if ($table.hasPrimaryKey())

    /* (non-javadoc) 
     * Copy-insert.
     * 
     * @param primaryKey Primary-keys. (NotNull)
     * @return Inserted count.
     * @exception ${glPackageBaseCommonException}.${glRecordHasAlreadyBeenDeletedException}
     */
    public int copyInsertByPKValueAfterSelect(${table.PrimaryKeyArgsString}) {
        ${myExtendedObjectClassName} entity = new ${myExtendedObjectClassName}();
        ${table.getPrimaryKeyArgsSetupString('entity')}
        final ${myConditionBeanClassName} cb = newMyConditionBean();
        cb.acceptPrimaryKeyMapString(entity.extractPrimaryKeyMapString());
        final ${myExtendedObjectClassName} currentEntity = selectEntityWithDeletedCheck(cb);
        return delegateInsert(currentEntity);
    }
    #end

    /**
     * Filter 'copy-insert' entity.
     * 
     * @param entity Entity. (NotNull)
     */
    protected void filterCopyInsertEntity(${myExtendedObjectClassName} entity) {
    }
  #end
#end

    // =====================================================================================
    //                                                                            CBSetupper
    //                                                                            ==========
    /**
     * The interface of condition-bean setupper.
     */
    public static interface CBSetupper extends SimpleCBSetupper {
        /**
         * Set up condition.
         * 
         * @param cb Condition-bean. (NotNull)
         */
        public void setup(${myConditionBeanClassName} cb);
    }
}
