${database.allClassCopyright}package ${myBaseDaoPackageName};

#set ($myClassName = "${myBaseDaoClassName}")
import java.util.List;

import ${glPackageExtendedEntity}.${myExtendedObjectClassName};
import ${glPackageCB}.${myConditionBeanClassName};
#set ($InterfaceName = "")
#if ($table.isWritable())
  #set ($InterfaceName = "${glPackageBaseCommon}.${glDaoWritableInterfaceName}")
#else
  #set ($InterfaceName = "${glPackageBaseCommon}.${glDaoReadableInterfaceName}")
#end

/**
 * The dao interface of ${table.name}.
 * @author ${database.ClassAuthor}
 */${database.outputSuppressWarningsAfterLineSeparator()}
public interface ${myClassName} extends ${InterfaceName} {

    public Class BEAN = ${glPackageExtendedEntity}.${myExtendedObjectClassName}.class;
    public static final String getCountAll_SQL = "select count(*) from ${table.Name}";
    public int getCountAll();
    public static final String getListAll_SQL = "select ${table.columnNameCommaString} from ${table.Name}";
    public java.util.List${database.filterGenericsString(${myExtendedObjectClassName})} getListAll();
#if ($table.isWritable())
    public static final String getEntity_SQL = "select ${table.columnNameCommaString} from ${table.Name} where ${table.PrimaryKeyWhereStringWithSqlComment}";
    public static final String getEntity_ARGS = "${table.PrimaryKeyUncapitalisedJavaNameCommaString}";
    public ${myExtendedObjectClassName} getEntity(${table.PrimaryKeyArgsString});
#end
#if ($table.isWritable() && $table.hasOnlyOnePrimaryKey() && $database.isUseBuri())
    public static final String getEntityByIds_ARGS = "ids";
    public static final String getEntityByIds_QUERY = "${table.primaryKeyNameAsOne} in /*ids*/(1)";
    List<${myExtendedObjectClassName}> getEntityByIds(List<${table.primaryKeyJavaNativeAsOne}> ids);
#end

    /**
     * @param cb Condition-bean. (NotNull)
     * @return Selected count.
     */
    public int selectCount(${myConditionBeanClassName} cb);

    /**
     * @param cb Condition-bean. (NotNull)
     * @return Selected entity. If the select result is zero, it returns null. (Nullable)
     */
    public ${myExtendedObjectClassName} selectEntity(${myConditionBeanClassName} cb);

    /**
     * @param cb Condition-bean. (NotNull)
     * @return Selected list. If the select result is zero, it returns empty list. (NotNull)
     */
    public List<${myExtendedObjectClassName}> selectList(${myConditionBeanClassName} cb);
#if ($table.isWritable())

    /**
     * @param entity The entity of insert target. (NotNull)
     * @return The count of insert.
     */
    public int insert(${myExtendedObjectClassName} entity);

    /**
     * @param entity The entity of update target. (NotNull)
     * @return The count of Update.
     */
    public int updateModifiedOnly(${myExtendedObjectClassName} entity);

#if ($table.hasOptimisticLock())
    /**
     * @param entity The entity of update target. (NotNull)
     * @return The count of Update.
     */
    public int updateNonstrictModifiedOnly(${myExtendedObjectClassName} entity);
#end

    /**
     * @param entity The entity of delete target. (NotNull)
     * @return The count of delete.
     */
    public int delete(${myExtendedObjectClassName} entity);

#if ($table.hasOptimisticLock())
    /**
     * @param entity The entity of delete target. (NotNull)
     * @return The count of delete.
     */
    public int deleteNonstrict(${myExtendedObjectClassName} entity);
#end

#set ($batchUpdateReturnType = "")
#if ($database.isVersionAfter1047())
  #set ($batchUpdateReturnType = "int[]")
#else
  #set ($batchUpdateReturnType = "int")
#end

    /**
     * @param entityList The list of entity. (NotNull)
     * @return The array of inserted count.
     */
    public ${batchUpdateReturnType} insertList(List<${myExtendedObjectClassName}> entityList);

    /**
     * @param entityList The list of entity. (NotNull)
     * @return The array of updated count.
     */
    public ${batchUpdateReturnType} updateList(List<${myExtendedObjectClassName}> entityList);

#if ($database.isVersionAfter1040() && ($table.isUseUpdateDate() || $table.isUseVersionNo()))
    /**
     * @param the entityList The list of entity. (NotNull)
     * @return The array of updated count.
     */
    public ${batchUpdateReturnType} updateListNonstrict(List<${myExtendedObjectClassName}> entityList);
#end

    /**
     * @param entityList The list of entity. (NotNull)
     * @return The array of deleted count.
     */
    public ${batchUpdateReturnType} deleteList(List<${myExtendedObjectClassName}> entityList);
#if ($database.isVersionAfter1040() && ($table.isUseUpdateDate() || $table.isUseVersionNo()))

	/**
     * @param entityList The list of entity. (NotNull)
     * @return The array of deleted count.
     */
    public ${batchUpdateReturnType} deleteListNonstrict(List<${myExtendedObjectClassName}> entityList);
#end
#if (${table.hasOnlyOnePrimaryKey()})

    /**
     * @param cb Condition-bean. (NotNull)
     * @return The deleted count.
     */
    public int deleteByQuery(${myConditionBeanClassName} cb);
#end
#else
  #if ($table.isAvailableNonPrimaryKeyWritable())

    public static final String insert_SQL = "insert into ${table.Name}(${table.columnNameCommaString}) values(${table.insertClauseValuesAsSqlComment})";
    public int insert(${myExtendedObjectClassName} entity);
  #end
#end
#if ($table.isUseSequence())

    public String selectNextVal_SQL = "${table.SequenceNextSql}";
    public ${table.sequenceReturnType} selectNextVal();
#end
}
