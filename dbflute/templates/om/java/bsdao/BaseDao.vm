${database.allClassCopyright}package ${myBaseDaoPackageName};

#set ($myClassName = "${myBaseDaoClassName}")

import ${glPackageExtendedEntity}.${myExtendedObjectClassName};
#set ($InterfaceName = "")
#if ($table.isWritable())
  #set ($InterfaceName = "${glPackageBaseCommon}.${glDaoWritableInterfaceName}")
#else
  #set ($InterfaceName = "${glPackageBaseCommon}.${glDaoReadableInterfaceName}")
#end

/**
 * The dao interface of ${table.name}.
 * 
 * <pre>
 * [primary-key]
 *     ${table.primaryKeyNameCommaString}
 * 
 * [column-property]
 *     ${table.columnNameCommaString}
 * 
 * [foreign-property]
 *     ${table.foreignPropertyNameCommaString}
 * 
 * [referrer-property]
 *     ${table.referrerPropertyNameCommaString}
 * 
 * [sequence]
 *     ${table.definedSequenceName}
 * 
 * [identity]
 *     ${table.identityPropertyName}
 * 
 * [update-date]
 *     ${table.updateDateJavaName}
 * 
 * [version-no]
 *     ${table.versionNoJavaName}
 * 
 * </pre>
 * 
 * @author ${database.ClassAuthor}
 */${database.outputSuppressWarningsAfterLineSeparator()}
public interface ${myClassName} extends ${InterfaceName} {

    /** BEAN-Annotation. */
    public Class BEAN = ${glPackageExtendedEntity}.${myExtendedObjectClassName}.class;

    /** SQL-Annotation for getCountAll(). */
    public static final String getCountAll_SQL = "select count(*) from ${table.Name}";

    /**
     * Get the count as all.
     * 
     * @return All count.
     */
    public int getCountAll();

    /** SQL-Annotation for getListAll(). */
    public static final String getListAll_SQL = "select ${table.columnNameCommaString} from ${table.Name}";

    /**
     * Get the list as all.
     * 
     * @return All list. (NotNull)
     */
    public java.util.List${database.filterGenericsString(${myExtendedObjectClassName})} getListAll();
#if ($table.isWritable())

    /** SQL-Annotation for getEntity(). */
    public static final String getEntity_SQL = "select ${table.columnNameCommaString} from ${table.Name} where ${table.PrimaryKeyWhereStringWithSqlComment}";

    /** Args-Annotation for getEntity(). */
    public static final String getEntity_ARGS = "${table.PrimaryKeyUncapitalisedJavaNameCommaString}";

    /* (non-javadoc)
     * Get the entity by primary key.
     * 
     * @param primaryKey Primary key. (NotNull)
     */
    public ${myExtendedObjectClassName} getEntity(${table.PrimaryKeyArgsString});
#end
#if ($table.isWritable() && $table.hasOnlyOnePrimaryKey() && $database.isUseBuri())

    public static final String getEntityByIds_ARGS = "ids";
    public static final String getEntityByIds_QUERY = "${table.primaryKeyNameAsOne} in /*ids*/(1)";
    java.util.List<${myExtendedObjectClassName}> getEntityByIds(java.util.List<${table.primaryKeyJavaNativeAsOne}> ids);
#end

    /**
     * Select the count by condition-bean. <br />
     * Ignore fetchFirst() and fetchScope() and fetchPage(). <br />
     * But the fetch status of the condition-bean remains as it is.
     * 
     * @param cb Condition-bean. (NotNull)
     * @return Selected count. (NotNull)
     */
    public int selectCount(${myAttachedCBArgsString});

    /**
     * Select the entity '${myExtendedObjectClassName}' by condition-bean.
     * 
     * @param cb Condition-bean. (NotNull)
     * @return Selected entity. If the select result is zero, it returns null. (Nullable)
     */
    public ${myExtendedObjectClassName} selectEntity(${myAttachedCBArgsString});

    /**
     * Select the list by condition-bean.
     * 
     * @param cb Condition-bean. (NotNull)
     * @return Selected list. If the select result is zero, it returns empty list. (NotNull)
     */
    public java.util.List${database.filterGenericsString(${myExtendedObjectClassName})} selectList(${myAttachedCBArgsString});
#if ($table.isWritable())

    /**
     * Insert the entity.
     * 
     * @param entity The entity of insert target. (NotNull)
     * @return The count of insert.
     */
    public int insert(${myExtendedObjectClassName} entity);
#if ($database.isMakeDeprecated())

    /**
     * Update the entity.
     * 
     * @param entity The entity of update target. (NotNull)
     * @return The count of update.
     * @deprecated Please use updateModifiedOnly()
     */
    public int update(${myExtendedObjectClassName} entity);
#end

    /**
     * Update the entity modified-only.
     * 
     * @param entity The entity of update target. (NotNull)
     * @return The count of Update.
     */
    public int updateModifiedOnly(${myExtendedObjectClassName} entity);

#if ($table.hasOptimisticLock())
    /**
     * Update the entity non-strictly modified-only.
     * 
     * @param entity The entity of update target. (NotNull)
     * @return The count of Update.
     */
    public int updateNonstrictModifiedOnly(${myExtendedObjectClassName} entity);
#end

    /**
     * Delete the entity.
     * 
     * @param entity The entity of delete target. (NotNull)
     * @return The count of delete.
     */
    public int delete(${myExtendedObjectClassName} entity);

#if ($table.hasOptimisticLock())
    /**
     * Delete the entity non-strictly.
     * 
     * @param entity The entity of delete target. (NotNull)
     * @return The count of delete.
     */
    public int deleteNonstrict(${myExtendedObjectClassName} entity);
#end

#set ($batchUpdateReturnType = "")
#if ($database.isVersionAfter1047())
  #set ($batchUpdateReturnType = "int[]")
#else
  #set ($batchUpdateReturnType = "int")
#end

    /**
     * Insert the several entities.
     * 
     * @param entityList The list of entity. (NotNull)
     * @return The array of inserted count.
     */
    public ${batchUpdateReturnType} insertList(java.util.List<${myExtendedObjectClassName}> entityList);

    /**
     * Update the several entities.
     * 
     * @param entityList The list of entity. (NotNull)
     * @return The array of updated count.
     */
    public ${batchUpdateReturnType} updateList(java.util.List<${myExtendedObjectClassName}> entityList);

#if ($database.isVersionAfter1040() && ($table.isUseUpdateDate() || $table.isUseVersionNo()))
    /**
     * Update several entities non-strictly.
     * 
     * @param the entityList The list of entity. (NotNull)
     * @return The array of updated count.
     */
    public ${batchUpdateReturnType} updateListNonstrict(java.util.List<${myExtendedObjectClassName}> entityList);
#end

    /**
     * Delete the several entities.
     * 
     * @param entityList The list of entity. (NotNull)
     * @return The array of deleted count.
     */
    public ${batchUpdateReturnType} deleteList(java.util.List<${myExtendedObjectClassName}> entityList);

#if ($database.isVersionAfter1040() && ($table.isUseUpdateDate() || $table.isUseVersionNo()))
    /**
     * Delete the several entities non-strictly.
     * 
     * @param entityList The list of entity. (NotNull)
     * @return The array of deleted count.
     */
    public ${batchUpdateReturnType} deleteListNonstrict(java.util.List<${myExtendedObjectClassName}> entityList);
#end

#else
  #if ($table.isAvailableNonPrimaryKeyWritable())

    /** SQL-Annotation for insert(). */
    public static final String insert_SQL = "insert into ${table.Name}(${table.columnNameCommaString}) values(${table.insertClauseValuesAsSqlComment})";

    /**
     * Insert the entity.
     * 
     * @param entity The entity of insert target. (NotNull)
     * @return Inserted count.
     */
    public int insert(${myExtendedObjectClassName} entity);
  #end
#end
#if ($table.isUseSequence())

    /** SQL-Annotation for selectNextVal(). */
    public String selectNextVal_SQL = "${table.SequenceNextSql}";

    /**
     * Select next value as sequence.
     * 
     * @return Next value. (NotNull)
     */
    public ${table.sequenceReturnType} selectNextVal();
#end
}
