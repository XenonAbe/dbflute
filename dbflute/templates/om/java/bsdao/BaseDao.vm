${database.allClassCopyright}package ${myBaseDaoPackageName};
#set ($myClassName = "${myBaseDaoClassName}")

import ${glPackageExtendedEntity}.${myExtendedObjectClassName};
#set ($InterfaceName = "")
#if ($table.isWritable())
#set ($InterfaceName = "${glPackageBaseCommon}.${glDaoWritableInterfaceName}")
#else
#set ($InterfaceName = "${glPackageBaseCommon}.${glDaoReadableInterfaceName}")
#end

/**
 * The DAO interface of ${table.name}.
 * @author ${database.ClassAuthor}
 */
public interface ${myClassName} extends ${InterfaceName} {

    public Class<?> BEAN = ${myExtendedObjectClassName}.class; // For S2Dao
#if ($table.isWritable() && $table.hasOnlyOnePrimaryKey() && $table.isBuriTarget())

    public static final String getEntity_SQL = "select ${table.columnNameCommaString} from ${table.Name} where ${table.primaryKeyWhereStringWithSqlComment}";
    public static final String getEntity_ARGS = "${table.primaryKeyUncapitalisedJavaNameCommaString}";
    public ${myExtendedObjectClassName} getEntity(${table.primaryKeyArgsString}); // For Buri

    public static final String getEntityByIds_ARGS = "ids";
    public static final String getEntityByIds_QUERY = "${table.primaryKeyNameAsOne} in /*ids*/(1)";
    java.util.List<${myExtendedObjectClassName}> getEntityByIds(java.util.List<${table.primaryKeyJavaNativeAsOne}> ids); // For Buri
#end
#if ($table.isWritable())

    int insert(${myExtendedObjectClassName} entity);
    int updateModifiedOnly(${myExtendedObjectClassName} entity);
#if ($table.hasOptimisticLock())
    int updateNonstrictModifiedOnly(${myExtendedObjectClassName} entity);
#end
    int delete(${myExtendedObjectClassName} entity);
#if ($table.hasOptimisticLock())
    int deleteNonstrict(${myExtendedObjectClassName} entity);
#end
#else

#if ($table.isAvailableNonPrimaryKeyWritable())
    int insert(${myExtendedObjectClassName} entity);
#end
#end
#if ($table.isUseSequence())

    ${table.sequenceReturnType} selectNextVal();
#end
}
