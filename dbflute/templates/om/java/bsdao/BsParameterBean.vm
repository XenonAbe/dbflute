${database.allClassCopyright}package ${glPackageBaseParameterBean};

#set ($myClassName = "${myBaseParameterBeanClassName}")

/**
 * The parametaer-bean of ${pmbClassName}.
 * 
 * @author ${database.ClassAuthor}
 */
public class ${myClassName} ${database.getPmbMetaDataSuperClassDefinition($pmbClassName)}{

    // ===================================================================================
    //                                                                           Attribute
    //                                                                           =========
#foreach ($propertyName in $database.getPmbMetaDataPropertySet($pmbClassName))
  #set ($propertyType = $database.getPmbMetaDataPropertyType($pmbClassName, $propertyName))

    /** The value of ${propertyName}. */
    protected ${propertyType} _${propertyName};
#end

    // ===================================================================================
    //                                                                         Constructor
    //                                                                         ===========
    /**
     * Constructor.
     */
    public ${myClassName}() {
    }

    // ===================================================================================
    //                                                                            Accessor
    //                                                                            ========
#foreach ($propertyName in $database.getPmbMetaDataPropertySet($pmbClassName))
  #set ($propertyType = $database.getPmbMetaDataPropertyType($pmbClassName, $propertyName))

    /**
     * Get the value of ${propertyName}. (Converted empty to null)
     * 
     * @return The value of ${propertyName}. (NotEmptyString: if the value is empty string, returns null)
     */
    public ${propertyType} get${database.initCap($propertyName)}() {
        return ($propertyType)convertEmptyToNullIfString(_${propertyName});
    }

    /**
     * Set the value of ${propertyName}.
     * 
     * @param ${propertyName} The value of ${propertyName}.
     */
    public void set${database.initCap($propertyName)}(${propertyType} ${propertyName}) {
        _${propertyName} = ${propertyName};
    }
#end

    /**
     * @param value Query value. (Nullable)
     * @return Converted value. (Nullable)
     */
    protected Object convertEmptyToNullIfString(Object value) {
        if (value instanceof String) { return filterRemoveEmptyString((String)value); } else { return value; }
    }

    /**
     * @param value Query value string. (Nullable)
     * @return Removed-empty value. (Nullable)
     */
    protected String filterRemoveEmptyString(String value) {
        return ((value != null && !"".equals(value)) ? value : null);
    }

    // ===================================================================================
    //                                                                      Basic Override
    //                                                                      ==============
    /**
     * ${database.OverrideComment}
     * 
     * @return Property-string. (NotNull)
     */
    public String toString() {
        final StringBuffer sb = new StringBuffer();
#foreach ($propertyName in $database.getPmbMetaDataPropertySet($pmbClassName))

        sb.append(" ${propertyName}=").append(_${propertyName});
#end

        return sb.toString();
    }
}
