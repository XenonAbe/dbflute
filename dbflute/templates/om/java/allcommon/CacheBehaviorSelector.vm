${database.allClassCopyright}package ${glPackageBaseCommon};

import ${glPackageBaseCommonBhv}.${glBehaviorReadableInterfaceName};

import ${glPackageBaseCommonDBMeta}.${glDBMetaInstanceHandlerName};
import ${glPackageBaseCommonDBMeta}.${glDBMetaInterfaceName};

/**
 * The implementation of behavior-selector.
 * 
 * @author ${database.ClassAuthor}
 */${database.outputSuppressWarningsAfterLineSeparator()}
public class ${glCacheBehaviorSelectorName} extends ${glCacheAbstractSelector} implements ${glBehaviorSelectorInterfaceName} {

    // ===================================================================================
    //                                                                           Attribute
    //                                                                           =========
    /** The cache of behavior. (It's the generics hell!) */
    protected java.util.Map<Class<? extends ${glBehaviorReadableInterfaceName}>, ${glBehaviorReadableInterfaceName}> _behaviorCache = new java.util.LinkedHashMap<Class<? extends ${glBehaviorReadableInterfaceName}>, ${glBehaviorReadableInterfaceName}>();

    // ===================================================================================
    //                                                                            Selector
    //                                                                            ========
    /**
     * Select behavior.
     * @param <BEHAVIOR_TYPE> The type of behavior.
     * @param behaviorType Behavior type. (NotNull)
     * @return Behavior. (NotNull)
     */
    public <BEHAVIOR_TYPE extends ${glBehaviorReadableInterfaceName}> BEHAVIOR_TYPE select(Class<BEHAVIOR_TYPE> behaviorType) {
        if (_behaviorCache.containsKey(behaviorType)) {
            return (BEHAVIOR_TYPE)_behaviorCache.get(behaviorType);
        }
        final BEHAVIOR_TYPE bhv = (BEHAVIOR_TYPE)getComponent(behaviorType);
        _behaviorCache.put(behaviorType, bhv);
        return bhv;
    }

    /**
     * Select behavior-readable by name.
     * @param tableFlexibleName Table flexible-name. (NotNull)
     * @return Behavior-readable. (NotNull)
     */
    public ${glBehaviorReadableInterfaceName} byName(String tableFlexibleName) {
        assertStringNotNullAndNotTrimmedEmpty("tableFlexibleName", tableFlexibleName);
        final ${glDBMetaInterfaceName} dbmeta = ${glDBMetaInstanceHandlerName}.findDBMeta(tableFlexibleName);
        return select(getBehaviorType(dbmeta));
    }

    /**
     * Get behavior-type by dbmeta.
     * @param dbmeta Dbmeta. (NotNull)
     * @return Behavior-type. (NotNull)
     */
    protected Class<${glBehaviorReadableInterfaceName}> getBehaviorType(${glDBMetaInterfaceName} dbmeta) {
        final String behaviorTypeName = dbmeta.getBehaviorTypeName();
        if (behaviorTypeName == null) {
            String msg = "The dbmeta.getBehaviorTypeName() should not return null: dbmeta=" + dbmeta;
            throw new IllegalStateException(msg);
        }
        final Class<${glBehaviorReadableInterfaceName}> behaviorType;
        try {
            behaviorType = (Class<${glBehaviorReadableInterfaceName}>)Class.forName(behaviorTypeName);
        } catch (ClassNotFoundException e) {
            throw new RuntimeException("The class does not exist: " + behaviorTypeName, e);
        }
        return behaviorType;
    }
}
