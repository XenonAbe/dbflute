${database.allClassCopyright}package ${glPackageBaseCommon};

#set ($myClassName = "${glClassificationDefinition}")

/**
 * The definition class that has classification.
 * 
 * @author ${database.ClassAuthor}
 */${database.outputSuppressWarningsAfterLineSeparator()}
public class ${myClassName} {

    // =====================================================================================
    //                                                        Classification-Code-Definition
    //                                                        ==============================
#foreach ($classificationName in $database.ClassificationNameList)
  #set ($classificationMapList = $database.ClassificationDefinitionMap.get($classificationName))
  #foreach ($classificationMap in $classificationMapList)

    /**
     * The classification code of ${classificationMap.get('name')}. <br />
     * ${classificationMap.get('comment')} <br />
     */
    public static final String CODE_${classificationName}_${classificationMap.get('name')} = "$classificationMap.get('code')";
  #end
#end

    // =====================================================================================
    //                                                 Classification-CodeNameMap-Definition
    //                                                 =====================================
#foreach ($classificationName in $database.ClassificationNameListValidNameOnly)
  #set ($classificationMapList = $database.ClassificationDefinitionMap.get($classificationName))

    /** The classification code-name map of ${classificationName}. */
    public static final java.util.Map${database.filterGenericsString('String, String')} CODE_NAME_MAP_${classificationName};
    static {
        final java.util.Map${database.filterGenericsString('String, String')} map = new java.util.LinkedHashMap${database.filterGenericsString('String, String')}();
  #foreach ($classificationMap in $classificationMapList)
      map.put(CODE_${classificationName}_${classificationMap.get('name')}, "${classificationMap.get('name')}");
  #end

        CODE_NAME_MAP_${classificationName} = java.util.Collections.unmodifiableMap(map);
    }
#end

#foreach ($classificationName in $database.ClassificationNameListValidAliasOnly)
  #set ($classificationMapList = $database.ClassificationDefinitionMap.get($classificationName))

    /** The classification code-alias map of ${classificationName}. */
    public static final java.util.Map${database.filterGenericsString('String, String')} CODE_ALIAS_MAP_${classificationName};
    static {
        final java.util.Map${database.filterGenericsString('String, String')} map = new java.util.LinkedHashMap${database.filterGenericsString('String, String')}();
  #foreach ($classificationMap in $classificationMapList)
      map.put(CODE_${classificationName}_${classificationMap.get('name')}, "${classificationMap.get('alias')}");
  #end

        CODE_ALIAS_MAP_${classificationName} = java.util.Collections.unmodifiableMap(map);
    }
#end


    // =====================================================================================
    //                                              Classification-ValueLabelList-Definition
    //                                              ========================================
#foreach ($classificationName in $database.ClassificationNameListValidNameOnly)
  #set ($classificationMapList = $database.ClassificationDefinitionMap.get($classificationName))

    /** The classification code-name map of ${classificationName}. */
    public static final java.util.List${database.filterGenericsString('java.util.Map<String, String>')} VALUE_LABEL_NAME_LIST_${classificationName};
    static {
        final java.util.List${database.filterGenericsString('java.util.Map<String, String>')} list = new java.util.ArrayList${database.filterGenericsString('java.util.Map<String, String>')}();
  #foreach ($classificationMap in $classificationMapList)
      setupValueLabelElement(list, CODE_${classificationName}_${classificationMap.get('name')}, "${classificationMap.get('name')}");
  #end

        VALUE_LABEL_NAME_LIST_${classificationName} = java.util.Collections.unmodifiableList(list);
    }
    public static java.util.List${database.filterGenericsString('java.util.Map<String, String>')} createValueLabelNameList${classificationName}() {
        return setupValueLabelList(VALUE_LABEL_NAME_LIST_${classificationName});
    }
#end
#foreach ($classificationName in $database.ClassificationNameListValidAliasOnly)
  #set ($classificationMapList = $database.ClassificationDefinitionMap.get($classificationName))

    /** The classification code-name map of ${classificationName}. */
    public static final java.util.List${database.filterGenericsString('java.util.Map<String, String>')} VALUE_LABEL_ALIAS_LIST_${classificationName};
    static {
        final java.util.List${database.filterGenericsString('java.util.Map<String, String>')} list = new java.util.ArrayList${database.filterGenericsString('java.util.Map<String, String>')}();
  #foreach ($classificationMap in $classificationMapList)
      setupValueLabelElement(list, CODE_${classificationName}_${classificationMap.get('name')}, "${classificationMap.get('alias')}");
  #end

        VALUE_LABEL_ALIAS_LIST_${classificationName} = java.util.Collections.unmodifiableList(list);
    }
    public static java.util.List${database.filterGenericsString('java.util.Map<String, String>')} createValueLabelAliasList${classificationName}() {
        return setupValueLabelList(VALUE_LABEL_ALIAS_LIST_${classificationName});
    }
#end

    protected static java.util.List${database.filterGenericsString('java.util.Map<String, String>')} setupValueLabelList(java.util.List${database.filterGenericsString('java.util.Map<String, String>')} ls) {
        final java.util.List${database.filterGenericsString('java.util.Map<String, String>')} newList = new java.util.ArrayList${database.filterGenericsString('java.util.Map<String, String>')}();
        for (final java.util.Iterator ite = ls.iterator(); ite.hasNext(); ) {
            final java.util.Map${database.filterGenericsString('String, String')} map = (java.util.Map${database.filterGenericsString('String, String')})ite.next();
            final java.util.Map${database.filterGenericsString('String, String')} newMap = new java.util.LinkedHashMap${database.filterGenericsString('String, String')}(map);
            newList.add(newMap);
        }
        return newList;
    }

    protected static void setupValueLabelElement(java.util.List${database.filterGenericsString('java.util.Map<String, String>')} ls, String value, String label) {
        final java.util.Map${database.filterGenericsString('String, String')} map = new java.util.LinkedHashMap${database.filterGenericsString('String, String')}();
        map.put("value", value);
        map.put("label", label);
        ls.add(java.util.Collections.unmodifiableMap(map));
    }
}
