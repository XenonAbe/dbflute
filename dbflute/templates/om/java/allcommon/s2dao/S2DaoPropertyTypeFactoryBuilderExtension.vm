${database.allClassCopyright}package ${glPackageBaseCommonS2Dao};

import java.util.ArrayList;
import java.util.List;
import java.sql.DatabaseMetaData;

import org.seasar.extension.jdbc.PropertyType;
import org.seasar.framework.beans.BeanDesc;
import org.seasar.framework.beans.PropertyDesc;
import org.seasar.dao.BeanAnnotationReader;
import org.seasar.dao.ColumnNaming;
import org.seasar.dao.DaoNamingConvention;
import org.seasar.dao.Dbms;
import org.seasar.dao.PropertyTypeFactory;
import org.seasar.dao.PropertyTypeFactoryBuilder;
import org.seasar.dao.ValueTypeFactory;
import org.seasar.dao.impl.AbstractPropertyTypeFactory;

import ${glPackageBaseCommon}.${glEntityInterfaceName};
import ${glPackageBaseCommonDBMeta}.${glDBMetaInterfaceName};

/**
 * The factory builder of property type for S2Dao. {Since S2Dao-1.0.47}
 * @author ${database.ClassAuthor}
 */${database.outputSuppressWarningsAfterLineSeparator()}
public class ${glDaoPropertyTypeFactoryBuilderExtension} implements PropertyTypeFactoryBuilder {

    // ===================================================================================
    //                                                                           Attribute
    //                                                                           =========
    protected ValueTypeFactory valueTypeFactory;

    protected ColumnNaming columnNaming;

    // ===================================================================================
    //                                                                               Build
    //                                                                               =====
    public PropertyTypeFactory build(Class beanClass, BeanAnnotationReader beanAnnotationReader) {
        return new FastPropertyTypeFactoryExtension(beanClass, beanAnnotationReader, valueTypeFactory, columnNaming);
    }

    public PropertyTypeFactory build(Class beanClass, BeanAnnotationReader beanAnnotationReader, Dbms dbms, DatabaseMetaData databaseMetaData) {
        return new FastPropertyTypeFactoryExtension(beanClass, beanAnnotationReader, valueTypeFactory, columnNaming, dbms);
    }

    // ===================================================================================
    //                                                                     Extension Class
    //                                                                     ===============
    protected static class FastPropertyTypeFactoryExtension extends AbstractPropertyTypeFactory {

        protected ${glDBMetaInterfaceName} _dbmeta;

        public FastPropertyTypeFactoryExtension(Class beanClass, BeanAnnotationReader beanAnnotationReader,
                ValueTypeFactory valueTypeFactory, ColumnNaming columnNaming) {
            super(beanClass, beanAnnotationReader, valueTypeFactory, columnNaming);
            if (isEntity()) {
                _dbmeta = findDBMeta();
            }
        }

        public FastPropertyTypeFactoryExtension(Class beanClass, BeanAnnotationReader beanAnnotationReader,
                ValueTypeFactory valueTypeFactory, ColumnNaming columnNaming, Dbms dbms) {
            super(beanClass, beanAnnotationReader, valueTypeFactory, columnNaming, dbms);
            if (isEntity()) {
                _dbmeta = findDBMeta();
            }
        }

        protected boolean isEntity() {
            return ${glEntityInterfaceName}.class.isAssignableFrom(beanClass);
        }

        protected ${glDBMetaInterfaceName} findDBMeta() {
            try {
                final ${glEntityInterfaceName} entity = (${glEntityInterfaceName}) beanClass.newInstance();
                return entity.getDBMeta();
            } catch (Exception e) {
                String msg = "beanClass.newInstance() threw the exception: beanClass=" + beanClass;
                throw new RuntimeException(msg, e);
            }
        }

        public PropertyType[] createBeanPropertyTypes(String tableName) {
            final List<PropertyType> list = new ArrayList<PropertyType>();
            final BeanDesc beanDesc = getBeanDesc();
            for (int i = 0; i < beanDesc.getPropertyDescSize(); ++i) {
                final PropertyDesc pd = beanDesc.getPropertyDesc(i);
                
                // Read-only property is unnecessary! {DBFlute Original Extension}
                if (!pd.hasWriteMethod()) {
                    continue;
                }
                
                if (isRelation(pd)) {
                    continue;
                }
                final PropertyType pt = createPropertyType(pd);
                pt.setPrimaryKey(isPrimaryKey(pd));
                pt.setPersistent(isPersistent(pt));
                list.add(pt);
            }
            return list.toArray(new PropertyType[list.size()]);
        }

        @Override
        protected boolean isPrimaryKey(PropertyDesc propertyDesc) {
            if (isEntity() && _dbmeta.hasPrimaryKey() && _dbmeta.hasColumn(propertyDesc.getPropertyName())) {
                if (_dbmeta.findColumnInfo(propertyDesc.getPropertyName()).isPrimary()) {
                    return true;
                }
            }
            return super.isPrimaryKey(propertyDesc); // by ID annotation.
        }

        @Override
        protected boolean isPersistent(PropertyType propertyType) {
            // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
            // It determines by the column annotation and the no-persistent-props annotation.
            // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
            if (beanAnnotationReader.getColumnAnnotation(propertyType.getPropertyDesc()) == null) {
                return false;
            }
            final String[] props = beanAnnotationReader.getNoPersisteneProps();
            if (props != null) {
                String propertyName = propertyType.getPropertyName();
                for (int i = 0; i < props.length; ++i) {
                    if (props[i].equals(propertyName)) {
                        return false;
                    }
                }
            }
            return true;
        }

        protected boolean isNoPersistentProperty(PropertyType propertyType) {
            final String[] props = beanAnnotationReader.getNoPersisteneProps();
            if (props != null) {
                String propertyName = propertyType.getPropertyName();
                for (int i = 0; i < props.length; ++i) {
                    if (props[i].equals(propertyName)) {
                        return true;
                    }
                }
            }
            return false;
        }
    }

    // ===================================================================================
    //                                                                            Accessor
    //                                                                            ========
    public ValueTypeFactory getValueTypeFactory() {
        return valueTypeFactory;
    }

    public void setValueTypeFactory(ValueTypeFactory valueTypeFactory) {
        this.valueTypeFactory = valueTypeFactory;
    }

    public ColumnNaming getColumnNaming() {
        return columnNaming;
    }

    public void setColumnNaming(ColumnNaming columnNaming) {
        this.columnNaming = columnNaming;
    }
}
