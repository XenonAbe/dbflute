${database.allClassCopyright}package ${glPackageBaseCommonS2Dao};

import org.seasar.extension.jdbc.ResultSetFactory;
import org.seasar.framework.util.PreparedStatementUtil;

import ${glPackageBaseCommonCBean}.${glFetchNarrowingBeanInterfaceName};
import ${glPackageBaseCommonCBean}.${glFetchNarrowingBeanContextName};

#if ($database.isAvailableGenerics())
import ${glPackageBaseCommonCBeanOutsidesql}.${glOutsideSqlContextName};
#end

/**
 * Fetch page result set factory.
 * 
 * @author ${database.ClassAuthor}
 */
public class ${glFetchNarrowingResultSetFactory} implements ResultSetFactory {

    // ===================================================================================
    //                                                                         Constructor
    //                                                                         ===========
    /**
     * Constructor.
     */
    public ${glFetchNarrowingResultSetFactory}() {
    }

    // ===================================================================================
    //                                                                                Main
    //                                                                                ====
    /**
     * @param statement Statement. (NotNull)
     * @return Result set for procedure executing of s2dao. (NotNull)
     */
    public java.sql.ResultSet getResultSet(java.sql.Statement statement) {
        // return org.seasar.framework.util.StatementUtil.getResultSet(statement);
        return doGetResultSet(statement);// This behavior is same as StatementUtil.getResultSet().
    }

    protected java.sql.ResultSet doGetResultSet(java.sql.Statement statement) throws org.seasar.framework.exception.SQLRuntimeException {
        try {
            return statement.getResultSet();
        } catch (java.sql.SQLException ex) {
            throw new org.seasar.framework.exception.SQLRuntimeException(ex);
        }
    }

    /**
     * Create result set.
     * 
     * @param ps Prepared statement. (NotNull)
     * @return Result set. (NotNull)
     */
    public java.sql.ResultSet createResultSet(java.sql.PreparedStatement ps) {
        final java.sql.ResultSet resultSet = PreparedStatementUtil.executeQuery(ps);

        if (!${glFetchNarrowingBeanContextName}.isExistFetchNarrowingBeanOnThread()) {
            return resultSet;
        }
        final ${glFetchNarrowingBeanInterfaceName} cb = ${glFetchNarrowingBeanContextName}.getFetchNarrowingBeanOnThread();
        if (!isUseFetchNarrowingResultSetWrapper(cb)) {
            return resultSet;
        }
        final ${glFetchNarrowingResultSetWrapper} wrapper;
        if (${glOutsideSqlContextName}.isExistOutsideSqlContextOnThread()) {
            final ${glOutsideSqlContextName} outsideSqlContext = ${glOutsideSqlContextName}.getOutsideSqlContextOnThread();
            wrapper = new ${glFetchNarrowingResultSetWrapper}(resultSet, ${glAttachedCBArgsVariableName}, outsideSqlContext.isOffsetByCursorForcedly(), outsideSqlContext.isLimitByCursorForcedly());
        } else {
            wrapper = new ${glFetchNarrowingResultSetWrapper}(resultSet, ${glAttachedCBArgsVariableName}, false, false);
        }
        return wrapper;
    }

    protected boolean isUseFetchNarrowingResultSetWrapper(${glFetchNarrowingBeanInterfaceName} cb) {
        if (cb.getSafetyMaxResultSize() > 0) {
            return true;
        }
        if (!cb.isFetchNarrowingEffective()) {
            return false;// It is not necessary to control.
        }
        if (${glOutsideSqlContextName}.isExistOutsideSqlContextOnThread()) {
            final ${glOutsideSqlContextName} outsideSqlContext = ${glOutsideSqlContextName}.getOutsideSqlContextOnThread();
            if (outsideSqlContext.isOffsetByCursorForcedly() || outsideSqlContext.isLimitByCursorForcedly()) {
                return true;
            }
        }
        if (cb.isFetchNarrowingSkipStartIndexEffective() || cb.isFetchNarrowingLoopCountEffective()) {
            return true;
        }
        return false;
    }
}
