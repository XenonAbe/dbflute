${database.allClassCopyright}package ${glPackageBaseCommonS2Dao};

import java.sql.PreparedStatement;
import java.sql.ResultSet;

import org.seasar.extension.jdbc.ResultSetFactory;
import org.seasar.framework.util.PreparedStatementUtil;

import ${glPackageBaseCommonCBean}.${glFetchNarrowingBeanInterfaceName};
import ${glPackageBaseCommonCBean}.${glFetchNarrowingBeanContextName};

#if ($database.isAvailableGenerics())
import ${glPackageBaseCommonCBeanOutsidesql}.${glOutsideSqlContextName};
#end

/**
 * Fetch page result set factory.
 * 
 * @author ${database.ClassAuthor}
 */
public class ${glFetchNarrowingResultSetFactory} implements ResultSetFactory {

    // ===================================================================================
    //                                                                         Constructor
    //                                                                         ===========
    /**
     * Constructor.
     */
    public ${glFetchNarrowingResultSetFactory}() {
    }

    // ===================================================================================
    //                                                                                Main
    //                                                                                ====
    /**
     * Create result set.
     * 
     * @param ps Prepared statement. (NotNull)
     * @return Result set. (NotNull)
     */
    public ResultSet createResultSet(PreparedStatement ps) {
        final ResultSet resultSet = PreparedStatementUtil.executeQuery(ps);
        if (!${glFetchNarrowingBeanContextName}.isExistFetchNarrowingBeanOnThread()) {
            return resultSet;
        }
        final ${glFetchNarrowingBeanInterfaceName} cb = ${glFetchNarrowingBeanContextName}.getFetchNarrowingBeanOnThread();
        if (!isUseFetchNarrowingResultSetWrapper(cb)) {
            return resultSet;
        }
#if ($database.isAvailableGenerics())
        final ${glFetchNarrowingResultSetWrapper} wrapper = new ${glFetchNarrowingResultSetWrapper}(resultSet, ${glAttachedCBArgsVariableName});
        if (${glOutsideSqlContextName}.isExistOutsideSqlContextOnThread()) {
            final ${glOutsideSqlContextName} outsideSqlContext = ${glOutsideSqlContextName}.getOutsideSqlContextOnThread();
            wrapper.setOffsetByCursorForcedly(outsideSqlContext.isOffsetByCursorForcedly());
            wrapper.setLimitByCursorForcedly(outsideSqlContext.isLimitByCursorForcedly());
        }
        return wrapper;
#else
        return new ${glFetchNarrowingResultSetWrapper}(resultSet, ${glAttachedCBArgsVariableName});
#end
    }

    protected boolean isUseFetchNarrowingResultSetWrapper(${glFetchNarrowingBeanInterfaceName} cb) {
        if (cb.getSafetyMaxResultSize() <= 0 && !cb.isFetchNarrowingEffective()) {
            return false;// It is not necessary to control.
        }
        if (cb.getSafetyMaxResultSize() <= 0 && !cb.isFetchNarrowingSkipStartIndexEffective() && !cb.isFetchNarrowingLoopCountEffective()) {
            return false;// It is not necessary to control. The sql already have been controlled.
        }
        return true;
    }
}
