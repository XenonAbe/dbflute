package ${glPackageBaseCommonS2Dao};

import java.sql.Connection;
import java.sql.DatabaseMetaData;
import javax.sql.DataSource;
#if ($database.isVersionAfter1040())

import org.seasar.dao.AnnotationReaderFactory;
import org.seasar.dao.BeanEnhancer;
import org.seasar.dao.impl.DaoMetaDataFactoryImpl;
import org.seasar.dao.impl.DaoMetaDataImpl;
import org.seasar.extension.jdbc.ResultSetFactory;
import org.seasar.extension.jdbc.StatementFactory;
#else

import org.seasar.dao.AnnotationReaderFactory;
import org.seasar.dao.DaoMetaData;
import org.seasar.dao.impl.DaoMetaDataFactoryImpl;
import org.seasar.dao.impl.DaoMetaDataImpl;
import org.seasar.extension.jdbc.ResultSetFactory;
import org.seasar.extension.jdbc.StatementFactory;
#end

import org.seasar.dao.Dbms;
import org.seasar.dao.dbms.DbmsManager;
import org.seasar.extension.jdbc.util.ConnectionUtil;
import org.seasar.extension.jdbc.util.DataSourceUtil;

import ${glPackageBaseCommonCBean}.${glConditionBeanContextName};

/**
 * DaoMetaDataFactoryImpl for DBFlute.
 * 
 * @author ${database.ClassAuthor}
 */
public class ${glDaoMetaDataFactoryImpl} extends DaoMetaDataFactoryImpl {

    // =====================================================================================
    //                                                                           Constructor
    //                                                                           ===========
    /**
     * Constructor.
     * 
     * @param dataSource Data source.
     * @param statementFactory Statement factory.
     * @param resultSetFactory Result set factory.
     * @param readerFactory Annotation reader factory.
     */
    public ${glDaoMetaDataFactoryImpl}(DataSource dataSource,
            StatementFactory statementFactory,
            ResultSetFactory resultSetFactory,
            AnnotationReaderFactory readerFactory) {
        super(dataSource, statementFactory, resultSetFactory, readerFactory);

        initializeDatabaseProductNameOfContext(dataSource);
    }

    // --------------------------------------
    //                  Database Product Name
    //                  ---------------------
    protected void initializeDatabaseProductNameOfContext(DataSource dataSource) {
        if (getDatabaseProductNameFromContext() != null) {
            return;
        }
        final Connection con = DataSourceUtil.getConnection(dataSource);
        String suffix = null;
        try {
            final DatabaseMetaData dbMetaData = ConnectionUtil.getMetaData(con);
            final Dbms dbms = DbmsManager.getDbms(dbMetaData);
            suffix = dbms.getSuffix();
        } finally {
            ConnectionUtil.close(con);
        }
        if (suffix == null) {
            setDatabaseProductNameToContext("${database.DaoGenDbName}");
            return;
        }
        suffix = suffix.startsWith("_") ? suffix.substring("_".length()) : suffix;
        setDatabaseProductNameToContext(suffix);
    }

    protected String getDatabaseProductNameFromContext() {
        return ${glConditionBeanContextName}.getDatabaseProductName();
    }

    protected void setDatabaseProductNameToContext(String name) {
        ${glConditionBeanContextName}.setDatabaseProductName(name);
    }

#if ($database.isVersionAfter1040())

    // =====================================================================================
    //                                                        DataMetaData Creation Override
    //                                                        ==============================
    protected BeanEnhancer beanEnhancer;

    public BeanEnhancer getBeanEnhancer() {
        return beanEnhancer;
    }

    public void setBeanEnhancer(final BeanEnhancer beanEnhancer) {
        this.beanEnhancer = beanEnhancer;
    }

    protected DaoMetaDataImpl createDaoMetaDataImpl() {// Override!
        ${glDaoMetaDataExtension} dmdExtension = new ${glDaoMetaDataExtension}();
        dmdExtension.setBeanEnhancer(this.beanEnhancer);
        return dmdExtension;
    }
#else

    // =====================================================================================
    //                                                                           DaoMetaData
    //                                                                           ===========
    /**
     * Create data meta data.
     * 
     * @param daoClass Dao class
     * @return Data meta data.
     */
    protected DaoMetaData createDaoMetaData(Class daoClass) {
        DaoMetaDataImpl daoMetaData = new ${glDaoMetaDataExtension}();
        daoMetaData.setDaoClass(daoClass);
        daoMetaData.setDataSource(dataSource);
        daoMetaData.setStatementFactory(statementFactory);
        daoMetaData.setResultSetFactory(resultSetFactory);
        daoMetaData.setAnnotationReaderFactory(annotationReaderFactory);
        daoMetaData.setValueTypeFactory(valueTypeFactory);
        if (sqlFileEncoding != null) {
            daoMetaData.setSqlFileEncoding(sqlFileEncoding);
        }
        if (daoSuffixes != null) {
            daoMetaData.setDaoSuffixes(daoSuffixes);
        }
        if (insertPrefixes != null) {
            daoMetaData.setInsertPrefixes(insertPrefixes);
        }
        if (updatePrefixes != null) {
            daoMetaData.setUpdatePrefixes(updatePrefixes);
        }
        if (deletePrefixes != null) {
            daoMetaData.setDeletePrefixes(deletePrefixes);
        }
        daoMetaData.initialize();
        return daoMetaData;
    }
#end

}