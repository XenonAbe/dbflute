package ${glPackageBaseCommonS2Dao};

import java.util.ArrayList;
import java.util.List;

import javax.sql.DataSource;
#if ($database.isSelectQueryTimeoutValid())

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
#end

import org.seasar.dao.CommandContext;
import org.seasar.dao.impl.SelectDynamicCommand;
import org.seasar.extension.jdbc.ResultSetFactory;
import org.seasar.extension.jdbc.ResultSetHandler;
import org.seasar.extension.jdbc.StatementFactory;
import org.seasar.extension.jdbc.impl.BasicSelectHandler;

import ${glPackageBaseCommonCBean}.${glConditionBeanInterfaceName};
import ${glPackageBaseCommonCBean}.${glConditionBeanContextName};

/**
 * My-SelectDynamicCommand.
 * Overrides original class 'SelectDynamicCommand'.
 * 
 * @author ${database.ClassAuthor}
 */
public class ${glSelectDynamicCommand} extends SelectDynamicCommand {
#if ($database.isSelectQueryTimeoutValid())

    /** Log-instance. */
    private static final Log _log = LogFactory.getLog(${glDaoInterceptor}.class);
#end

    /** Result-set handler. */
    private ResultSetHandler resultSetHandler;

    /** Result-set factory. */
    private ResultSetFactory resultSetFactory;

    /** Cache of select clause command. */
    protected ${glSelectDynamicCommand} _selectClauseCommand;

    /** Cache of select clause PK-only command. */
    protected ${glSelectDynamicCommand} _selectClausePKOnlyCommand;

    /**
     * Constructor.
     * 
     * @param dataSource Data source.
     * @param statementFactory Statement factory.
     * @param resultSetHandler Result-set handler.
     * @param resultSetFactory Result-set factory.
     */
    public ${glSelectDynamicCommand}(DataSource dataSource,
            StatementFactory statementFactory,
            ResultSetHandler resultSetHandler, ResultSetFactory resultSetFactory) {

        super(dataSource, statementFactory, resultSetHandler, resultSetFactory);

        this.resultSetHandler = resultSetHandler;
        this.resultSetFactory = resultSetFactory;
    }

    public CommandContext doApply(Object[] args) {
        return apply(args);
    }

    /**
     * Set select clause.
     * 
     * @param value Select clause. (Nullable)
     * @return this. (NotNull)
     */
    public ${glSelectDynamicCommand} setSelectClause(String value) {
        _selectClauseCommand = createMySelectDynamicCommand();
        _selectClauseCommand.setSql(value);
        return this;
    }

    /**
     * Set select clause PK only.
     * 
     * @param value Select clause PK only. (Nullable)
     * @return this. (NotNull)
     */
    public ${glSelectDynamicCommand} setSelectClausePKOnly(String value) {
        _selectClausePKOnlyCommand = createMySelectDynamicCommand();
        _selectClausePKOnlyCommand.setSql(value);
        return this;
    }

    protected ${glSelectDynamicCommand} createMySelectDynamicCommand() {
        return new ${glSelectDynamicCommand}(getDataSource(), getStatementFactory(), resultSetHandler, resultSetFactory);
    }

    public Object execute(Object[] args) {
        if (!${glConditionBeanContextName}.isExistConditionBeanOnThread()) {
            return super.execute(args);
        }
        assertSelectClauseCommand();
        final List<Object> bindVariableList = new ArrayList<Object>();
        final List<Class> bindVariableTypeList = new ArrayList<Class>();

        final StringBuffer sb = new StringBuffer();
        sb.append(setupRealSelectClause(args, bindVariableList, bindVariableTypeList));
        sb.append(" ");
        sb.append(setupRealFromWhereClause(args, bindVariableList, bindVariableTypeList));

        BasicSelectHandler selectHandler = createBasicSelectHandler(sb.toString());
        selectHandler.setFetchSize(-1);

        return selectHandler.execute(bindVariableList.toArray(), toClassArray(bindVariableTypeList));
    }

    protected String setupRealSelectClause(Object[] args, List<Object> bindVariableList,
            List<Class> bindVariableTypeList) {
        final ${glConditionBeanInterfaceName} cb = ${glConditionBeanContextName}.getConditionBeanOnThread();
        if (cb.isSelectCountIgnoreFetchScope()) {
            return "select count(*)";
        }
        final String realSelectClause;
        {
            final CommandContext ctx;
            if (cb.isLimitSelect_PKOnly()) {
                ctx = _selectClausePKOnlyCommand.doApply(args);
            } else {
                ctx = _selectClauseCommand.doApply(args);
            }
            realSelectClause = ctx.getSql();
            final Object[] bindVariables = ctx.getBindVariables();
            addBindVariableList(bindVariableList, bindVariables);
            final Class[] bindVariableTypes = ctx.getBindVariableTypes();
            addBindVariableTypeList(bindVariableTypeList, bindVariableTypes);
        }
        return realSelectClause;
    }

    protected String setupRealFromWhereClause(Object[] args, List<Object> bindVariableList,
            List<Class> bindVariableTypeList) {
        final ${glConditionBeanInterfaceName} cb = ${glConditionBeanContextName}.getConditionBeanOnThread();
        final String realFromWhereClause;
        {
            final ${glSelectDynamicCommand} fromWhereCommand = createMySelectDynamicCommand();
            fromWhereCommand.setSql(cb.getSqlClause().getClause());
            CommandContext ctx = fromWhereCommand.doApply(args);
            realFromWhereClause = ctx.getSql();
            final Object[] bindVariables = ctx.getBindVariables();
            addBindVariableList(bindVariableList, bindVariables);
            final Class[] bindVariableTypes = ctx.getBindVariableTypes();
            addBindVariableTypeList(bindVariableTypeList, bindVariableTypes);
        }
        return realFromWhereClause;
    }

    protected BasicSelectHandler createBasicSelectHandler(String realSql) {
#if ($database.isSelectQueryTimeoutValid())

        final StatementFactory statementFactoryReal = getStatementFactory();
        final StatementFactory statementFactoryWrapper = new StatementFactory() {
            public java.sql.PreparedStatement createPreparedStatement(java.sql.Connection arg0, String arg1) {
                final java.sql.PreparedStatement ps = statementFactoryReal.createPreparedStatement(arg0, arg1);
                try {
                    final int timeout = ${database.SelectQueryTimeout};
                    if (_log.isDebugEnabled()) {
                        _log.debug("@SelectDynamicCommand: ps.setQueryTimeout(" + timeout + ");// from ${database.SelectQueryTimeout}");
                    }
                    ps.setQueryTimeout(timeout);
                } catch (java.sql.SQLException e) {
                    throw new org.seasar.framework.exception.SQLRuntimeException(e);
                }
                return ps;
            }
            public java.sql.CallableStatement createCallableStatement(java.sql.Connection arg0, String arg1) {
                return statementFactoryReal.createCallableStatement(arg0, arg1);
            }
        };
        return new BasicSelectHandler(getDataSource(), realSql, resultSetHandler, statementFactoryWrapper, resultSetFactory);
#else

        return new BasicSelectHandler(getDataSource(), realSql, resultSetHandler, getStatementFactory(), resultSetFactory);
#end

    }

    protected Class[] toClassArray(List<Class> bindVariableTypeList) {
        final Class[] bindVariableTypesArray = new Class[bindVariableTypeList.size()];
        for (int i = 0; i < bindVariableTypeList.size(); i++) {
            final Class bindVariableType = (Class) bindVariableTypeList.get(i);
            bindVariableTypesArray[i] = bindVariableType;
        }
        return bindVariableTypesArray;
    }

    protected void assertSelectClauseCommand() {
        if (_selectClauseCommand == null) {
            String msg = "Select clause command should not be null.";
            throw new IllegalStateException(msg);
        }
    }

    protected void addBindVariableList(List<Object> bindVariableList, Object[] bindVariables) {
        for (Object bindVariable : bindVariables) {
            bindVariableList.add(bindVariable);
        }
    }

    protected void addBindVariableTypeList(List<Class> bindVariableTypeList, Class[] bindVariableTypes) {
        for (Class bindVariableType : bindVariableTypes) {
            bindVariableTypeList.add(bindVariableType);
        }
    }
}