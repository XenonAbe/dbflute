${database.allClassCopyright}package ${glPackageBaseCommonS2Dao};

#if ($database.isAvailableGenerics())

import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
#end

import java.lang.reflect.Method;
import java.sql.DatabaseMetaData;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import java.util.ArrayList;

#if ($database.isAvailableOtherConnectionDaoInitialization())

import javax.transaction.InvalidTransactionException;
import javax.transaction.Status;
import javax.transaction.SystemException;
import javax.transaction.Transaction;
import javax.transaction.TransactionManager;
import org.seasar.framework.exception.EmptyRuntimeException;
#end

import org.seasar.dao.BeanEnhancer;
import org.seasar.dao.BeanMetaData;
import org.seasar.dao.BeanMetaDataFactory;

import org.seasar.dao.Dbms;
import org.seasar.dao.RelationPropertyType;
import org.seasar.dao.RelationRowCreator;
import org.seasar.dao.SqlCommand;
import org.seasar.dao.impl.BeanMetaDataImpl;
import org.seasar.dao.impl.DaoMetaDataImpl;
import org.seasar.dao.impl.AbstractSqlCommand;
import org.seasar.dao.impl.SelectDynamicCommand;
import org.seasar.dao.impl.UpdateAutoDynamicCommand;
import org.seasar.dao.impl.UpdateDynamicCommand;
import org.seasar.dao.impl.UpdateModifiedOnlyCommand;
import org.seasar.dao.impl.UpdateBatchAutoStaticCommand;
import org.seasar.dao.impl.DeleteAutoStaticCommand;
import org.seasar.dao.impl.DeleteBatchAutoStaticCommand;

#if ($database.isVersionAfter1047())
import org.seasar.dao.BeanAnnotationReader;
import org.seasar.dao.PropertyTypeFactoryBuilder;
import org.seasar.dao.RelationPropertyTypeFactoryBuilder;
import org.seasar.dao.TableNaming;
import org.seasar.dao.ColumnNaming;
import org.seasar.dao.PropertyTypeFactory;
#if ($database.isAvailableDaoMethodMetaDataInitializing())
import org.seasar.dao.impl.PropertyTypeFactoryImpl;
#end
import org.seasar.dao.impl.PropertyTypeFactoryBuilderImpl;
#end

import org.seasar.framework.beans.MethodNotFoundRuntimeException;
import org.seasar.extension.jdbc.PropertyType;
import org.seasar.extension.jdbc.ResultSetHandler;
import org.seasar.extension.jdbc.types.ValueTypes;
import org.seasar.extension.jdbc.ValueType;
#if (!$database.isVersionAfter1047())
import org.seasar.framework.beans.BeanDesc;
#end
import org.seasar.framework.util.StringUtil;

import ${glPackageBaseCommonAnnotation}.${glOutsideSqlAnnotation};
import ${glPackageBaseCommonCBean}.${glConditionBeanContextName};
import ${glPackageBaseCommonCBeanOutsidesql}.${glOutsideSqlContextName};
import ${glPackageBaseCommonSqlClause}.${glSqlClauseInterfaceName};
import ${glPackageBaseCommonJdbc}.${glCursorHandlerName};

/**
 * DaoMetaDataImpl for DBFlute.
 * 
 * @author ${database.ClassAuthor}
 */${database.outputSuppressWarningsAfterLineSeparator()}
public class ${glDaoMetaDataExtension} extends DaoMetaDataImpl {

    // ===================================================================================
    //                                                                          Definition
    //                                                                          ==========
    /** The determination of internal debug. */
    private static final boolean _internalDebug = false;
#if ($database.isSelectQueryTimeoutValid() || ${database.isStatementResultSetTypeValid()})

    /** Log instance. */
    private static final org.apache.commons.logging.Log _log = org.apache.commons.logging.LogFactory.getLog(${glDaoMetaDataExtension}.class);
#end

    // ===================================================================================
    //                                                                           Attribute
    //                                                                           =========
    /** Bean enhancer. */
    protected BeanEnhancer beanEnhancer;

#if ($database.isVersionAfter1046())
    /** The factory of annotation reader. */
    protected org.seasar.dao.AnnotationReaderFactory annotationReaderFactory;
#end

#if ($database.isVersionAfter1047())
    /** The naming of column. {After S2Dao-1.0.47} */
    protected ColumnNaming columnNaming;

    /** The builder of property type factory. {After S2Dao-1.0.47} */
    protected PropertyTypeFactoryBuilder propertyTypeFactoryBuilder;

    /** The builder of relation property type factory. {After S2Dao-1.0.47} */
    protected RelationPropertyTypeFactoryBuilder relationPropertyTypeFactoryBuilder;

    /** The builder of table naming. {After S2Dao-1.0.47} */
    protected TableNaming tableNaming;
#end

#if ($database.isAvailableOtherConnectionDaoInitialization())
    protected TransactionManager transactionManager;
#end

    // ===================================================================================
    //                                                                         Constructor
    //                                                                         ===========
    /**
     * Constructor.
     */
    public ${glDaoMetaDataExtension}() {
    }

#if ($database.isAvailableOtherConnectionDaoInitialization())

    // ===================================================================================
    //                                        Other Connection Dao Initialization Override
    //                                        ============================================
    public void setTransactionManager(TransactionManager transactionManager) {
        this.transactionManager = transactionManager;
    }

    public void initialize() {// Override!
        final TransactionSuspendEventInvoker transactionSuspendEventHandler = new TransactionSuspendEventInvoker();
        transactionSuspendEventHandler.setTransactionManager(transactionManager);
        final TransactionSuspendEventCallback callback = new TransactionSuspendEventCallback() {
            public Object callback() {
                executeSuperInitialize();
                return null;
            }
        };
        transactionSuspendEventHandler.callbackAfterSuspendAndResumeLater(callback);
    }
    
    protected void executeSuperInitialize() {
        super.initialize();
    }

    protected static interface TransactionSuspendEventCallback {
        public Object callback();
    }

    protected static class TransactionSuspendEventInvoker {

        private static final org.apache.commons.logging.Log _log = org.apache.commons.logging.LogFactory.getLog(TransactionSuspendEventInvoker.class);
        
        protected TransactionManager transactionManager;

        public void setTransactionManager(TransactionManager transactionManager) {
            this.transactionManager = transactionManager;
        }

        public boolean hasTransaction() throws SystemException {
            return transactionManager.getStatus() != Status.STATUS_NO_TRANSACTION;
        }

        public Transaction suspend() throws SystemException {
            if (transactionManager == null) {
                throw new EmptyRuntimeException("transactionManager");
            }
            return transactionManager.suspend();
        }

        public void resume(final Transaction transaction) throws InvalidTransactionException, IllegalStateException, SystemException {
            if (transactionManager == null) {
                throw new EmptyRuntimeException("transactionManager");
            }
            transactionManager.resume(transaction);
        }

        public Object callbackAfterSuspendAndResumeLater(TransactionSuspendEventCallback callback) {
            Transaction tx = null;
            try {
                if (!hasTransaction()) {
                    return callback.callback();
                }
                _log.debug("...Suspending the transaction!");
                tx = suspend();
                return callback.callback();
            } catch (Exception e) {
                String msg = "The initialize() that is overrided threw the exception: tx=" + tx;
                throw new RuntimeException(msg, e);
            } finally {
                if (tx != null) {
                    try {
                        _log.debug("...Resuming the transaction: tx=" + tx);
                        resume(tx);
                    } catch (Exception ignored) {
                        _log.warn("resume(tx) threw the exception: tx=" + tx, ignored);
                    }
                }
            }
        }
    }
#end

    // ===================================================================================
    //                                                           OutsideSql Check Override
    //                                                           =========================
    protected void setupMethodByAuto(Method method) {
        final ${glOutsideSqlAnnotation} outsideSql = method.getAnnotation(${glOutsideSqlAnnotation}.class);
        if (outsideSql != null) {
            String msg = "This method '" + method.getName() + "()' should use Outside Sql but the file was not found!";
            msg = msg + " Expected sql file name is '" + method.getDeclaringClass().getSimpleName() + "_" + method.getName() + ".sql'";
            throw new IllegalStateException(msg);
        }
        super.setupMethodByAuto(method);
    }

#if ($database.isVersionAfter1046())
    // ===================================================================================
    //                                                           ResultSetHandler Override
    //                                                           =========================
    protected ResultSetHandler createResultSetHandler(Method method) {
        return this.resultSetHandlerFactory.getResultSetHandler(daoAnnotationReader, beanMetaData, method);
    }

    protected ResultSetHandler createResultSetHandler(BeanMetaData specifiedBeanMetaData, Method method) {
        return this.resultSetHandlerFactory.getResultSetHandler(daoAnnotationReader, specifiedBeanMetaData, method);
    }
#else
#if ($database.isVersionAfter1043())
    // ===================================================================================
    //                                                    ResultSetHandlerFactory Override
    //                                                    ================================
    protected org.seasar.dao.ResultSetHandlerFactory createResultSetHandlerFactory() {
        return new ResultSetHandlerFactoryExtension(beanMetaData, annotationReader, dtoMetaDataFactory);
    }
#else

    // ===================================================================================
    //                                                    ResultSetHandlerFactory Override
    //                                                    ================================
    protected org.seasar.dao.ResultSetHandlerFactory createResultSetHandlerFactory(final BeanMetaData beanMetaData) {
        return new ResultSetHandlerFactoryExtension(beanMetaData);
    }
#end
#end

    // ===================================================================================
    //                                                           SqlCommand Setup Override
    //                                                           =========================
    @Override
    protected void setupSqlCommand() {
        // Do nothing for lazy initializing!
    }

    @Override
    public SqlCommand getSqlCommand(String methodName) throws MethodNotFoundRuntimeException {
        final SqlCommand cmd = (SqlCommand) sqlCommands.get(methodName);
        if (cmd != null) {
            return cmd;
        }
        if (_internalDebug) {
            _log.debug("...initializing sqlCommand: " + methodName);
        }
        return initializeSqlCommand(methodName);
    }

    protected SqlCommand initializeSqlCommand(String methodName) throws MethodNotFoundRuntimeException {
        if (${glOutsideSqlContextName}.isExistOutsideSqlContextOnThread()) {
            final ${glOutsideSqlContextName} outsideSqlContext = ${glOutsideSqlContextName}.getOutsideSqlContextOnThread();
            if (outsideSqlContext != null && outsideSqlContext.isSpecifiedOutsideSql()) {
                return initializeSpecifiedOutsideSqlCommand(methodName, outsideSqlContext);
            }
        }
        final Method[] methods = daoBeanDesc.getMethods(methodName);
        if (methods.length == 1 && org.seasar.framework.util.MethodUtil.isAbstract(methods[0])) {
            setupMethod(methods[0]);
        }
        final SqlCommand cmd = (SqlCommand) sqlCommands.get(methodName);
        if (cmd != null) {
            return cmd;
        }
        throw new MethodNotFoundRuntimeException(daoClass, methodName, null);
    }

    protected SqlCommand initializeSpecifiedOutsideSqlCommand(String sqlCommandKey, ${glOutsideSqlContextName} outsideSqlContext) throws MethodNotFoundRuntimeException {
        final Method[] methods = daoBeanDesc.getMethods(outsideSqlContext.getMethodName());// By real method name.
        if (methods.length == 1 && org.seasar.framework.util.MethodUtil.isAbstract(methods[0])) {
            final Method method = methods[0];
            if (isOutsideSqlDaoMethodSelect(method)) {
                setupSpecifiedOutsideSqlSelectCommand(sqlCommandKey, method, outsideSqlContext);
            } else {
                setupSpecifiedOutsideSqlExecuteCommand(sqlCommandKey, method, outsideSqlContext);
            }
        }
        final SqlCommand cmd = (SqlCommand) sqlCommands.get(sqlCommandKey);
        if (cmd != null) {
            return cmd;
        }
        String msg = "Internal Error! The methodName is not found:";
        msg = msg + " sqlCommandKey=" + sqlCommandKey;
        msg = msg + " sqlCommands=" + sqlCommands;
        throw new IllegalStateException(msg);
    }

    protected boolean isOutsideSqlDaoMethodSelect(Method method) {
        return method.getName().startsWith("select");
    }

    // ===================================================================================
    //                                             Customize SelectDynamicCommand Creation
    //                                             =======================================
    /**
     * Create customize select dynamic command.
     * 
     * @param handler The handler of result set. (NotNull)
     * @return Customize select dynamic command. (NotNull)
     */
    protected ${glSelectDynamicCommand} createCustomizeSelectDynamicCommand(org.seasar.extension.jdbc.ResultSetHandler handler) {
        final org.seasar.extension.jdbc.ResultSetFactory customizeResultSetFactory = new ${glPackageBaseCommonS2Dao}.${glFetchNarrowingResultSetFactory}();
#if ($database.isSelectQueryTimeoutValid() || ${database.isStatementResultSetTypeValid()})
        final org.seasar.extension.jdbc.impl.ConfigurableStatementFactory confSf;
        if (statementFactory instanceof org.seasar.extension.jdbc.impl.ConfigurableStatementFactory) {
            confSf = (org.seasar.extension.jdbc.impl.ConfigurableStatementFactory)statementFactory;
        } else {
            confSf = null;
        }
        final org.seasar.extension.jdbc.StatementFactory customizeStatementFactory = new org.seasar.extension.jdbc.StatementFactory() {
            public java.sql.PreparedStatement createPreparedStatement(java.sql.Connection con, String sql) {
                try {
#if ($database.isStatementResultSetTypeValid())
                    if (_internalDebug && _log.isDebugEnabled()) {
                        _log.debug("...Invoking ps.prepareStatement(sql, ${database.statementResultSetType}, ${database.statementResultSetConcurrency})");
                    }
                    final java.sql.PreparedStatement ps = con.prepareStatement(sql, ${database.statementResultSetType}, ${database.statementResultSetConcurrency});
#else
                    final java.sql.PreparedStatement ps = con.prepareStatement(sql);
#end
#if ($database.isSelectQueryTimeoutValid())
                    final int timeout = ${database.SelectQueryTimeout};
                    if (_internalDebug && _log.isDebugEnabled()) {
                        _log.debug("...Invoking ps.setQueryTimeout(" + timeout + ")");
                    }
                    ps.setQueryTimeout(timeout);
#end
                    if (confSf == null) {
                        return ps;
                    }
                    final Class confSfType = org.seasar.extension.jdbc.impl.ConfigurableStatementFactory.class;
                    final String confMethodName = "configurePreparedStatement";
                    final Class[] confMethodParameterType = new Class[]{java.sql.PreparedStatement.class};
                    try {
                        final Method confMethod = confSfType.getDeclaredMethod(confMethodName, confMethodParameterType);
                        confMethod.setAccessible(true);// Because the method is protected!
                        if (_internalDebug && _log.isDebugEnabled()) {
                            _log.debug("...Invoking configurableStatementFactory." + confMethodName + "(ps)");
                        }
                        confMethod.invoke(confSf, new Object[]{ps});
                        return ps;
                    } catch (Exception e) {
                        String msg = "The configuration of statement factory threw exception:";
                        msg = msg + " class=" + confSfType + " method=" + confMethodName + " parameter=java.sql.PreparedStatement";
                        throw new RuntimeException(msg, e);
                    }
                } catch (java.sql.SQLException e) {
                    throw new org.seasar.framework.exception.SQLRuntimeException(e);
                }
            }
            public java.sql.CallableStatement createCallableStatement(java.sql.Connection con, String sql) {
                return org.seasar.extension.jdbc.util.ConnectionUtil.prepareCall(con, sql);
            }
        };
#else
        final org.seasar.extension.jdbc.StatementFactory customizeStatementFactory = statementFactory;
#end
        return new ${glSelectDynamicCommand}(dataSource, customizeStatementFactory, handler, customizeResultSetFactory);
    }

    // ===================================================================================
    //                                                              ConditionBean Override
    //                                                              ======================

    protected SelectDynamicCommand setupNonQuerySelectMethodByDto(Method method, ResultSetHandler handler, String[] argNames, String query) {
        Class[] types = method.getParameterTypes();
        Class clazz = types[0];
        if (!${glConditionBeanContextName}.isTheTypeConditionBean(clazz)) {
            return super.setupNonQuerySelectMethodByDto(method, handler, argNames, query);
        }
        // /----------------------------------------------------- [MyExtension]
        argNames = new String[] { "dto" };
        final String sqlNormal = getSelectClause(getBeanMetaData(), clazz);
        final String sqlPKOnly = getSelectClausePKOnly(getBeanMetaData());
        final ${glSelectDynamicCommand} dynamicCommand = createCustomizeSelectDynamicCommand(handler);
        String sql = sqlNormal;
        final SelectDynamicCommand cmd = dynamicCommand;
        dynamicCommand.setSelectClause(sqlNormal);
        dynamicCommand.setSelectClausePKOnly(sqlPKOnly);
        // -----------/
        if (query != null) {
            sql = sql + " " + query;
        }
        cmd.setSql(sql);
        cmd.setArgNames(argNames);
        cmd.setArgTypes(types);
        return cmd;
    }

    /**
     * Get select clause.
     * 
     * @param beanMetaData BeanMetaData. (NotNull)
     * @param conditionBeanClass Condition-bean class. (NotNull)
     * @return Select clause. (NotNull)
     */
    protected String getSelectClause(BeanMetaData beanMetaData, Class conditionBeanClass) {
        final StringBuffer sb = new StringBuffer(100);
        sb.append("select/*$dto.selectHint*/ ");

        final StringBuffer sbMySelectList = new StringBuffer(100);
        for (int i = 0; i < beanMetaData.getPropertyTypeSize(); ++i) {
            final PropertyType pt = beanMetaData.getPropertyType(i);
            if (pt.isPersistent()) {
                if (sbMySelectList.length() != 0) {
                    sbMySelectList.append(", ");
                }
                final String columnFullName = beanMetaData.getTableName() + "." + pt.getColumnName();
                sbMySelectList.append(columnFullName);

                ${glConditionBeanContextName}.addColumnAliasInfo(conditionBeanClass, columnFullName, pt.getColumnName());
            }
        }
        sb.append(sbMySelectList);

        setupRelationSelectClause(sb, beanMetaData, "", "", 1, conditionBeanClass);
        return sb.toString();
    }

    protected void setupRelationSelectClause(StringBuffer sb, BeanMetaData baseBmd, String judgeProp, String preNoSuffix, int cqNestNo, Class conditionBeanClass) {
        for (int i = 0; i < baseBmd.getRelationPropertyTypeSize(); ++i) {
            final StringBuffer sbYourSelectList = new StringBuffer(100);
            final RelationPropertyType rpt = baseBmd.getRelationPropertyType(i);
            if (rpt == null) {
                continue;
                // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                // Comment out because it is possible that s2dao make relation property type as null.
                //   Ref: org.seasar.dao.impl.BeanMetaDataImpl#addRelationPropertyType();
                // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                // String msg = "The baseBmd.getRelationPropertyType(" + i + ") returned null";
                // msg = msg + ": baseBmd.getTableName()=" + baseBmd.getTableName();
                // msg = msg + ": baseBmd.getRelationPropertyTypeSize()=" + baseBmd.getRelationPropertyTypeSize();
                // throw new IllegalStateException(msg);
            }

            final BeanMetaData relationBmd = rpt.getBeanMetaData();
            final String initCapPropertyName = StringUtil.capitalize(rpt.getPropertyName());
            final String ifComment = "/*IF dto." + judgeProp + "isSelect" + initCapPropertyName + "()*/";
            final String endComment = "/*END*/";
            for (int j = 0; j < relationBmd.getPropertyTypeSize(); ++j) {
                final PropertyType pt = relationBmd.getPropertyType(j);
                final String relationPath = preNoSuffix + "_" + rpt.getRelationNo();
                final String tableAliasName = resolveJoinAliasName(relationPath, cqNestNo);
                if (pt.isPersistent()) {
                    final String columnName = pt.getColumnName();
                    final String columnFullName = tableAliasName + "." + columnName;
                    final String columnAliasName = pt.getColumnName() + relationPath;
                    sbYourSelectList.append(", ");
                    sbYourSelectList.append(columnFullName).append(" AS ").append(columnAliasName);

                    ${glConditionBeanContextName}.addColumnAliasInfo(conditionBeanClass, columnFullName, columnAliasName);
                }
            }
            if (relationBmd.getRelationPropertyTypeSize() > 0) {
                final String nssString = "nss" + initCapPropertyName + ".";
                final String nextPreNoSuffix = preNoSuffix + "_" + rpt.getRelationNo();
                final int nextCQNestNo = cqNestNo + 1;
                setupRelationSelectClause(sbYourSelectList, relationBmd, nssString, nextPreNoSuffix, nextCQNestNo, conditionBeanClass);
            }
            sb.append(ifComment).append(sbYourSelectList).append(endComment);
        }
    }

    protected String resolveJoinAliasName(String relationPath, int cqNestNo) {
        final ${glSqlClauseInterfaceName} sqlClause = ${glConditionBeanContextName}.createSqlClause("dummy");
        return sqlClause.resolveJoinAliasName(relationPath, cqNestNo);
    }

    /**
     * Get select clause PK only.
     * 
     * @param beanMetaData BeanMetaData. (NotNull)
     * @return Select clause PK only. (NotNull)
     */
    protected String getSelectClausePKOnly(BeanMetaData beanMetaData) {
        final StringBuffer sb = new StringBuffer(100);
        sb.append("select/*$dto.selectHint*/ ");

        final StringBuffer sbMySelectList = new StringBuffer(100);
        for (int i = 0; i < beanMetaData.getPropertyTypeSize(); ++i) {
            final PropertyType pt = beanMetaData.getPropertyType(i);
            if (pt.isPersistent() && pt.isPrimaryKey()) {
                if (sbMySelectList.length() != 0) {
                    sbMySelectList.append(", ");
                }
                sbMySelectList.append(beanMetaData.getTableName());
                sbMySelectList.append(".");
                sbMySelectList.append(pt.getColumnName());
            }
        }
        sb.append(sbMySelectList);

        return sb.toString();
    }

    // ===================================================================================
    //                                                  Update and Delete By Auto Override
    //                                                  ==================================
#if (!$database.isVersionAfter1047())
    ${database.outputOverrideAnnotation()}
    protected void setupUpdateMethodByAuto(Method method) {
        checkAutoUpdateMethod(method);
        String[] propertyNames = getPersistentPropertyNames(method);
        AbstractSqlCommand cmd;
        if (isUpdateSignatureForBean(method)) {
            if (isUnlessNull(method.getName())) {
                cmd = createUpdateAutoDynamicCommand(method, propertyNames);
            } else if (isModifiedOnly(method.getName())) {
                cmd = createUpdateModifiedOnlyCommand(method, propertyNames);
            } else {
                cmd = new org.seasar.dao.impl.UpdateAutoStaticCommand(dataSource, statementFactory, createBeanMetaData4UpdateDeleteByAuto(method), propertyNames);// Extension Point!
            }
        } else {
            cmd = new UpdateBatchAutoStaticCommand(dataSource, statementFactory, createBeanMetaData4UpdateDeleteByAuto(method), propertyNames) {
                public Object execute(Object[] args) {
                    final Object result = super.execute(args);
                    handleBatchUpdateResultWithOptimisticLock(args, result);
                    return result;
                }
            };// Extension Point!
        }
        sqlCommands.put(method.getName(), cmd);
    }
#end
#if ($database.isVersionAfter1047())
    ${database.outputOverrideAnnotation()}
#end
    protected AbstractSqlCommand createUpdateAutoDynamicCommand(Method method, String[] propertyNames) {
        AbstractSqlCommand cmd;
        final UpdateAutoDynamicCommand uac = newUpdateAutoDynamicCommand(dataSource, statementFactory);
        uac.setBeanMetaData(createBeanMetaData4UpdateDeleteByAuto(method));// Extension Point!
        uac.setPropertyNames(propertyNames);
        uac.setNotSingleRowUpdatedExceptionClass(getNotSingleRowUpdatedExceptionClass(method));
        cmd = uac;
        return cmd;
    }

    protected UpdateAutoDynamicCommand newUpdateAutoDynamicCommand(javax.sql.DataSource ds, org.seasar.extension.jdbc.StatementFactory sf) {
        return new UpdateAutoDynamicCommand(ds, sf);
    }

#if ($database.isVersionAfter1047())
    ${database.outputOverrideAnnotation()}
#end
    protected AbstractSqlCommand createUpdateModifiedOnlyCommand(final Method method, final String[] propertyNames) {
        UpdateModifiedOnlyCommand uac = newUpdateModifiedOnlyCommand(dataSource, statementFactory);
        uac.setBeanMetaData(createBeanMetaData4UpdateDeleteByAuto(method));// Extension Point!
        uac.setPropertyNames(propertyNames);
        uac.setNotSingleRowUpdatedExceptionClass(getNotSingleRowUpdatedExceptionClass(method));
        return uac;
    }

    protected UpdateModifiedOnlyCommand newUpdateModifiedOnlyCommand(javax.sql.DataSource ds, org.seasar.extension.jdbc.StatementFactory sf) {
        return new UpdateModifiedOnlyCommand(ds, sf);
    }

#if ($database.isVersionAfter1047())
    ${database.outputOverrideAnnotation()}
    protected UpdateBatchAutoStaticCommand createUpdateBatchAutoStaticCommand(final Method method, final String[] propertyNames, boolean returningRows) {
        return new UpdateBatchAutoStaticCommand(dataSource, statementFactory, createBeanMetaData4UpdateDeleteByAuto(method), propertyNames, returningRows) {
            public Object execute(Object[] args) {
                final Object result = super.execute(args);
                handleBatchUpdateResultWithOptimisticLock(args, result);
                return result;
            }
        };
    }
#end

    protected void handleBatchUpdateResultWithOptimisticLock(Object[] args, Object result) {
        if (args.length == 0) {
            return;// for Safety!
        }
        if (result instanceof int[]) {
            final int[] updatedCountArray = (int[])result;
            int index = 0;
            for (int updatedCount : updatedCountArray) {
                if (updatedCount == 0) {
                    if (args.length <= index) {
                        return;// for Safety!
                    }
                    throw new org.seasar.dao.NotSingleRowUpdatedRuntimeException(args[index], updatedCount);
                }
            }
        }
    }

#if (!$database.isVersionAfter1047())
    ${database.outputOverrideAnnotation()}
    protected void setupDeleteMethodByAuto(Method method) {
        checkAutoUpdateMethod(method);
        String[] propertyNames = getPersistentPropertyNames(method);
        org.seasar.dao.SqlCommand cmd = null;
        if (isUpdateSignatureForBean(method)) {
            cmd = new DeleteAutoStaticCommand(dataSource, statementFactory, createBeanMetaData4UpdateDeleteByAuto(method), propertyNames);
        } else {
            cmd = new DeleteBatchAutoStaticCommand(dataSource, statementFactory, createBeanMetaData4UpdateDeleteByAuto(method), propertyNames);
        }
        sqlCommands.put(method.getName(), cmd);
    }
#end

#if ($database.isVersionAfter1047())
    ${database.outputOverrideAnnotation()}
    protected DeleteAutoStaticCommand createDeleteAutoStaticCommand(final Method method, final String[] propertyNames) {
        return new DeleteAutoStaticCommand(dataSource, statementFactory, createBeanMetaData4UpdateDeleteByAuto(method), propertyNames);
    }

    ${database.outputOverrideAnnotation()}
    protected DeleteBatchAutoStaticCommand createDeleteBatchAutoStaticCommand(final Method method, final String[] propertyNames, boolean returningRows) {
        return new DeleteBatchAutoStaticCommand(dataSource, statementFactory, createBeanMetaData4UpdateDeleteByAuto(method), propertyNames, returningRows);
    }
#end

#if ($database.isAvailableOtherConnectionDaoInitialization())

    protected BeanMetaData createBeanMetaData4UpdateDeleteByAuto(Method method) {
#if ($database.isAvailableGenerics())
        if (method.getName().contains("Nonstrict")) {
#else
        if (method.getName().indexOf("Nonstrict") >= 0) {
#end
            final TransactionSuspendEventInvoker transactionSuspendEventHandler = new TransactionSuspendEventInvoker();
            transactionSuspendEventHandler.setTransactionManager(transactionManager);
            final TransactionSuspendEventCallback callback = new TransactionSuspendEventCallback() {
                public Object callback() {
                    return createNonConcurrencyBmdFactory().createBeanMetaData(getBeanClass());
                }
            };
            return (BeanMetaData)transactionSuspendEventHandler.callbackAfterSuspendAndResumeLater(callback);
        } else {
            return getBeanMetaData();
        }
    }
#else

    protected BeanMetaData createBeanMetaData4UpdateDeleteByAuto(Method method) {
#if ($database.isAvailableGenerics())
        if (method.getName().contains("Nonstrict")) {
#else
        if (method.getName().indexOf("Nonstrict") >= 0) {
#end
            return createNonConcurrencyBmdFactory().createBeanMetaData(getBeanClass());
        } else {
            return getBeanMetaData();
        }
    }
#end

    protected BeanMetaDataFactory createNonConcurrencyBmdFactory() {
        final ${glBeanMetaDataFactoryImpl} nonConcurrencyBmdFactory = new ${glBeanMetaDataFactoryImpl}() {
            protected BeanMetaDataImpl createBeanMetaDataImpl() {
                return new BeanMetaDataImpl() {
                    public boolean hasVersionNoPropertyType() {
                        return false;
                    }

                    public boolean hasTimestampPropertyType() {
                        return false;
                    }
                };
            }
        };
        nonConcurrencyBmdFactory.setAnnotationReaderFactory(this.annotationReaderFactory);
#if ($database.isVersionAfter1047())
        nonConcurrencyBmdFactory.setPropertyTypeFactoryBuilder(this.propertyTypeFactoryBuilder);
        nonConcurrencyBmdFactory.setRelationPropertyTypeFactoryBuilder(this.relationPropertyTypeFactoryBuilder);
        nonConcurrencyBmdFactory.setTableNaming(this.tableNaming);
#else
        nonConcurrencyBmdFactory.setValueTypeFactory(this.valueTypeFactory);
#end
        nonConcurrencyBmdFactory.setDataSource(this.dataSource);
        nonConcurrencyBmdFactory.setDaoNamingConvention(this.daoNamingConvention);
        nonConcurrencyBmdFactory.setBeanEnhancer(this.beanEnhancer);
        return nonConcurrencyBmdFactory;
    }

    // ===================================================================================
    //                                                                 OutsideSql Override
    //                                                                 ===================
    // -----------------------------------------------------
    //                                     Normal OutsideSql
    //                                     -----------------
    @Override
    protected void setupSelectMethodByManual(Method method, String sql) {
        final Class<?>[] parameterTypes = method.getParameterTypes();
#if ($database.isVersionAfter1046())
        final String[] argNames = this.daoAnnotationReader.getArgNames(method);
#else
        final String[] argNames = this.annotationReader.getArgNames(method);
#end
        final Class<?>[] argTypes;
        if (parameterTypes != null && parameterTypes.length > 0
                && ${glCursorHandlerName}.class.isAssignableFrom(parameterTypes[parameterTypes.length-1])) {
            argTypes = new Class<?>[parameterTypes.length - 1];
            for (int i=0; i < parameterTypes.length - 1; i++) {
                argTypes[i] = parameterTypes[i];
            }
        } else {
            argTypes = parameterTypes;
        }
        final BeanMetaData myBeanMetaData = getOutsideSqlBeanMetaData(method);
        registerSqlCommand(method.getName(), method, sql, argNames, argTypes, myBeanMetaData);
    }

    protected BeanMetaData getOutsideSqlBeanMetaData(Method method) {
        final Class beanClass4SelectMethodByManual = getOutsideSqlDefaultBeanClass(method);
        if (beanClass4SelectMethodByManual.equals(getBeanClass())) {
            return getBeanMetaData();
        }
        return createOutsideSqlCustomizeBeanMetaDataFactory().createBeanMetaData(getOutsideSqlDefaultBeanClass(method));
    }

    // -----------------------------------------------------
    //                                  Specified OutsideSql
    //                                  --------------------
    // - - - - - - - - - - - -
    //                  Select
    //                   - - -
    protected void setupSpecifiedOutsideSqlSelectCommand(String sqlCommandKey, Method method, ${glOutsideSqlContextName} outsideSqlContext) {
        // - - - - - - - - - - - - - - - - - - - - - - -
        // The attribute of Specified-OutsideSqlContext.
        // - - - - - - - - - - - - - - - - - - - - - - -
        final String sql = outsideSqlContext.readOutsideSqlPath(getSqlFileEncoding(), dbms.getSuffix());
        final Object pmb = outsideSqlContext.getParameterBean();
        final Object resultTypeSpecification = outsideSqlContext.getResultTypeSpecification();

        // - - - - - - - - - - - - - - -
        // The attribute of SqlCommand.
        // - - - - - - - - - - - - - - -
        final String[] argNames = (pmb != null ? new String[] {"pmb"} : new String[]{});
        final Class<?>[] argTypes = (pmb != null ? new Class<?>[] {pmb.getClass()} : new Class<?>[]{});

        // - - - - - - - - - - - - - - - -
        // Create customized BeanMetaData.
        // - - - - - - - - - - - - - - - -
        final Class<?> lastestArguementType = method.getParameterTypes()[method.getParameterTypes().length-1];
        final ResultSetHandler myResultSetHandler;
        if (Class.class.isAssignableFrom(lastestArguementType)) {
            // - - - - - - - -
            // EntityHandling
            // - - - - - - - -
            final Class<?> customizeEntityType = (Class<?>)resultTypeSpecification;
            final BeanMetaData myBeanMetaData = createSpecifiedOutsideSqlCustomizeBeanMetaData(customizeEntityType);
            if (List.class.isAssignableFrom(method.getReturnType())) {
                myResultSetHandler = createSpecifiedOutsideSqlCustomizeBeanListResultSetHandler(myBeanMetaData, customizeEntityType);
            } else {
                throw new UnsupportedOperationException("The return type of method is unsupported: method.getReturnType()=" + method.getReturnType());
                // myResultSetHandler = createSpecifiedOutsideSqlCustomizeBeanResultSetHandler(myBeanMetaData, customizeEntityType);
            }
        } else if (${glCursorHandlerName}.class.isAssignableFrom(lastestArguementType)) {
            // - - - - - - - -
            // CursorHandling
            // - - - - - - - -
            final BeanMetaData myBeanMetaData = createSpecifiedOutsideSqlCursorBeanMetaData(method);
            myResultSetHandler = createSpecifiedOutsideSqlCursorResultSetHandler(myBeanMetaData);
        } else {
            String msg = "The lastestArguementType is unsupported:";
            msg = msg + " lastestArguementType=" + lastestArguementType;
            msg = msg + " method=" + method;
            throw new IllegalStateException(msg);
        }

        // - - - - - - - - - - -
        // Register Sql-Command.
        // - - - - - - - - - - -
        registerSqlCommand(sqlCommandKey, method, sql, argNames, argTypes, myResultSetHandler);
    }

    protected BeanMetaData createSpecifiedOutsideSqlCustomizeBeanMetaData(Class clazz) {
        return createOutsideSqlCustomizeBeanMetaDataFactory().createBeanMetaData(clazz);
    }

// [Unsupported]
// The return type of method is unsupported!
// Because the method of outside-sql that selects one entity is unnecessary!
//
//    /**
//     * Create the handler of result set of specified outside-sql for customize bean.
//     * 
//     * @param specifiedBeanMetaData Specified bean meta data. (NotNull)
//     * @param customizeEntityType The type of customize entity. (NotNull)
//     * @return The handler of result set. (NotNull)
//     */
//    protected ResultSetHandler createSpecifiedOutsideSqlCustomizeBeanResultSetHandler(BeanMetaData specifiedBeanMetaData, Class<?> customizeEntityType) {
//        final ValueType valueType = ValueTypes.getValueType(customizeEntityType);
//        if (valueType == null || !valueType.equals(ValueTypes.OBJECT)) {
//            return new org.seasar.extension.jdbc.impl.ObjectResultSetHandler();
//        }
#if ($database.isVersionAfter1047())
//        return new org.seasar.dao.impl.BeanMetaDataResultSetHandler(specifiedBeanMetaData, new org.seasar.dao.impl.RowCreatorImpl(), new RelationRowCreatorExtension());
#else
//        return new org.seasar.dao.impl.BeanMetaDataResultSetHandler(specifiedBeanMetaData, new RelationRowCreatorExtension());
#end
//    }

    /**
     * Create the handler of result set of specified outside-sql for the list of customize bean.
     * 
     * @param specifiedBeanMetaData Specified bean meta data. (NotNull)
     * @param customizeEntityType The type of customize entity. (NotNull)
     * @return The handler of result set. (NotNull)
     */
    protected ResultSetHandler createSpecifiedOutsideSqlCustomizeBeanListResultSetHandler(BeanMetaData specifiedBeanMetaData, Class<?> customizeEntityType) {
        final ValueType valueType = ValueTypes.getValueType(customizeEntityType);
        if (valueType == null || !valueType.equals(ValueTypes.OBJECT)) {
            return new InternalObjectListResultSetHandler(valueType);
        }
#if ($database.isVersionAfter1047())
        return new org.seasar.dao.impl.BeanListMetaDataResultSetHandler(specifiedBeanMetaData, new org.seasar.dao.impl.RowCreatorImpl(), new RelationRowCreatorExtension());
#else
        return new org.seasar.dao.impl.BeanListMetaDataResultSetHandler(specifiedBeanMetaData, new RelationRowCreatorExtension());
#end
    }

    protected class InternalObjectListResultSetHandler implements ResultSetHandler {
        private ValueType valueType;
        public InternalObjectListResultSetHandler(ValueType valueType) {
            this.valueType = valueType;
        }
        public Object handle(ResultSet rs) throws SQLException {
            final List<Object> ret = new ArrayList<Object>();
            while (rs.next()) {
                ret.add(valueType.getValue(rs, 1));
            }
            return ret;
        }
    }

    protected BeanMetaData createSpecifiedOutsideSqlCursorBeanMetaData(Method method) {
        return createOutsideSqlCustomizeBeanMetaDataFactory().createBeanMetaData(getOutsideSqlDefaultBeanClass(method));
    }

    /**
     * Create the handler of result set of specified outside-sql for cursor.
     * 
     * @param specifiedBeanMetaData Specified bean meta data. (NotNull)
     * @return The handler of result set. (NotNull)
     */
    protected ResultSetHandler createSpecifiedOutsideSqlCursorResultSetHandler(BeanMetaData specifiedBeanMetaData) {
        return new org.seasar.extension.jdbc.impl.ObjectResultSetHandler();
    }

    // - - - - - - - - - - - -
    //                 Execute
    //                 - - - -
    protected void setupSpecifiedOutsideSqlExecuteCommand(String sqlCommandKey, Method method, ${glOutsideSqlContextName} outsideSqlContext) {
        // - - - - - - - - - - - - - - - - - - - - - - -
        // The attribute of Specified-OutsideSqlContext.
        // - - - - - - - - - - - - - - - - - - - - - - -
        final String sql = outsideSqlContext.readOutsideSqlPath(getSqlFileEncoding(), dbms.getSuffix());
        final Object pmb = outsideSqlContext.getParameterBean();

        // - - - - - - - - - - - - - - -
        // The attribute of SqlCommand.
        // - - - - - - - - - - - - - - -
        final String[] argNames = (pmb != null ? new String[] {"pmb"} : new String[]{});
        final Class<?>[] argTypes = (pmb != null ? new Class<?>[] {pmb.getClass()} : new Class<?>[]{});

        final UpdateDynamicCommand cmd = new UpdateDynamicCommand(dataSource, statementFactory) {
            @Override
            public Object execute(Object[] args) {
                if (args.length != 3) {
                    String msg = "Internal Error! OutsideSqlDao.execute() should have 3 arguements: args.length=" + args.length;
                    throw new IllegalStateException(msg);
                }
                Object arg = args[1];
                return super.execute(new Object[] {arg});
            }
        };
        cmd.setSql(sql);
        cmd.setArgNames(argNames);
        cmd.setArgTypes(argTypes);
        cmd.setNotSingleRowUpdatedExceptionClass(getNotSingleRowUpdatedExceptionClass(method));
        registerSqlCommand(sqlCommandKey, method, sql, argNames, argTypes, cmd);
    }

    // -----------------------------------------------------
    //                                  Common of OutsideSql
    //                                  --------------------
    protected BeanMetaDataFactory createOutsideSqlCustomizeBeanMetaDataFactory() {
        final ${glBeanMetaDataFactoryImpl} originalBmdFactory = new ${glBeanMetaDataFactoryImpl}() {
            protected BeanMetaDataImpl createBeanMetaDataImpl() {
                return newOutsideSqlCustomizeBeanMetaDataImpl();
            }
        };
        originalBmdFactory.setAnnotationReaderFactory(this.annotationReaderFactory);
#if ($database.isVersionAfter1047())
        originalBmdFactory.setPropertyTypeFactoryBuilder(newOutsideSqlPropertyTypeFactoryBuilderImpl());
        originalBmdFactory.setRelationPropertyTypeFactoryBuilder(this.relationPropertyTypeFactoryBuilder);
        originalBmdFactory.setTableNaming(this.tableNaming);
#else
        originalBmdFactory.setValueTypeFactory(this.valueTypeFactory);
#end
        originalBmdFactory.setDataSource(this.dataSource);
        originalBmdFactory.setDaoNamingConvention(this.daoNamingConvention);
        originalBmdFactory.setBeanEnhancer(this.beanEnhancer);
        return originalBmdFactory;
    }

    protected BeanMetaDataImpl newOutsideSqlCustomizeBeanMetaDataImpl() {
        return new OutsideSqlCustomizeBeanMetaDataImpl();
    }

    protected static class OutsideSqlCustomizeBeanMetaDataImpl extends BeanMetaDataImpl {
#if (!$database.isVersionAfter1047())
        @Override
        protected void setupDatabaseMetaData(BeanDesc beanDesc, DatabaseMetaData dbMetaData, Dbms dbms) {
            // Nothing.
        }
#end
    }

#if ($database.isVersionAfter1047())
    protected PropertyTypeFactoryBuilderImpl newOutsideSqlPropertyTypeFactoryBuilderImpl() {
        final PropertyTypeFactoryBuilderImpl impl = new OutsideSqlPropertyTypeFactoryBuilderImpl();
        if (columnNaming == null) {
            String msg = "Internal Error! The columnNaming should not be null! {Failed to Injection!}";
            throw new IllegalStateException(msg);
        }
        impl.setColumnNaming(columnNaming);
        impl.setDaoNamingConvention(daoNamingConvention);
        impl.setValueTypeFactory(valueTypeFactory);
        return impl;
    }

    protected static class OutsideSqlPropertyTypeFactoryBuilderImpl extends PropertyTypeFactoryBuilderImpl {
        @Override
        public PropertyTypeFactory build(Class beanClass, BeanAnnotationReader beanAnnotationReader, Dbms dbms, DatabaseMetaData databaseMetaData) {
#if ($database.isAvailableDaoMethodMetaDataInitializing())
            return new PropertyTypeFactoryImpl(beanClass, beanAnnotationReader, valueTypeFactory, columnNaming, dbms, databaseMetaData) {
                @Override
                protected void setupPrimaryKey(PropertyType[] propertyTypes, String tableName) {
                    try {
                        super.setupPrimaryKey(propertyTypes, tableName);
                    } catch (RuntimeException e) {
                        // Nothing because MySQL throws Exception when the table does not exist.
                    }
                }
            };
#else
            return new ${glDaoPropertyTypeFactoryBuilderExtension}.FastPropertyTypeFactoryExtension(beanClass, beanAnnotationReader, valueTypeFactory, columnNaming, daoNamingConvention, dbms);
#end
        }
    }
#end

    protected Class getOutsideSqlDefaultBeanClass(Method method) {
        final Class retType = method.getReturnType();
        if (java.util.List.class.isAssignableFrom(retType)) {
            final Class elementType = InternalMethodUtil.getElementTypeOfListFromReturnMethod(method);
            if (elementType != null) {
                return elementType;
            } else {
                return getBeanClass();
            }
        } else if (retType.isArray()) {
            return retType.getComponentType();
        } else if (retType.isPrimitive() || !ValueTypes.getValueType(retType).equals(ValueTypes.OBJECT)) {
            return getBeanClass();
        } else {
            return retType;
        }
    }

    protected void registerSqlCommand(String sqlCommandKey, Method method, String sql, String[] argNames, Class[] argTypes, BeanMetaData myBeanMetaData) {
#if ($database.isVersionAfter1046())
        registerSqlCommand(sqlCommandKey, method, sql, argNames, argTypes, createResultSetHandler(myBeanMetaData, method));
#else
#if ($database.isVersionAfter1043())
        final org.seasar.dao.ResultSetHandlerFactory factory = new ResultSetHandlerFactoryExtension(myBeanMetaData, annotationReader, dtoMetaDataFactory);
#else
        final org.seasar.dao.ResultSetHandlerFactory factory = new ResultSetHandlerFactoryExtension(myBeanMetaData);
#end
        registerSqlCommand(sqlCommandKey, method, sql, argNames, argTypes, factory.createResultSetHandler(method));
#end
    }

    protected void registerSqlCommand(String sqlCommandKey, Method method, String sql, String[] argNames, Class[] argTypes, ResultSetHandler myResultSetHandler) {
        final SelectDynamicCommand cmd = createCustomizeSelectDynamicCommand(myResultSetHandler);
        registerSqlCommand(sqlCommandKey, method, sql, argNames, argTypes, cmd);
    }

    protected void registerSqlCommand(String sqlCommandKey, Method method, String sql, String[] argNames, Class[] argTypes, SelectDynamicCommand cmd) {
        cmd.setSql(sql);
        cmd.setArgNames(argNames);
        cmd.setArgTypes(argTypes);
        this.sqlCommands.put(sqlCommandKey, cmd);
    }

    protected void registerSqlCommand(String sqlCommandKey, Method method, String sql, String[] argNames, Class[] argTypes, UpdateDynamicCommand cmd) {
        cmd.setSql(sql);
        cmd.setArgNames(argNames);
        cmd.setArgTypes(argTypes);
        this.sqlCommands.put(sqlCommandKey, cmd);
    }

    // ===================================================================================
    //                                                                       Vert Internal
    //                                                                       =============
    protected static class InternalMethodUtil {
        public static Class getElementTypeOfListFromReturnMethod(Method method) {
            return InternalReflectionUtil.getElementTypeOfListFromReturnType(method);
        }
    }
#if ($database.isAvailableGenerics())

    protected static class InternalReflectionUtil {
        public static Class<?> getElementTypeOfList(final Type parameterizedList) {
            if (!(parameterizedList instanceof ParameterizedType)) {
                return null;
            }

            final ParameterizedType parameterizedType = ParameterizedType.class.cast(parameterizedList);
            final Type rawType = parameterizedType.getRawType();
            if (!(rawType instanceof Class)) {
                return null;
            }

            final Class<?> rawClass = Class.class.cast(rawType);
            if (!rawClass.isAssignableFrom(List.class)) {
                return null;
            }

            final Type[] actualTypeArgument = parameterizedType.getActualTypeArguments();
            if (actualTypeArgument == null || actualTypeArgument.length != 1) {
                return null;
            }
            if (!(actualTypeArgument[0] instanceof Class)) {
                return null;
            }

            return Class.class.cast(actualTypeArgument[0]);
        }

        public static Class<?> getElementTypeOfListFromParameterType(final Method method, final int parameterPosition) {
            final Type[] parameterTypes = method.getGenericParameterTypes();
            return getElementTypeOfList(parameterTypes[parameterPosition]);
        }

        public static Class<?> getElementTypeOfListFromReturnType(final Method method) {
            return getElementTypeOfList(method.getGenericReturnType());
        }
    }
#else

    protected static class InternalReflectionUtil {
        public static Class getElementTypeOfListFromReturnType(final Method method) {
            return null;
        }
    }
#end

#if ($database.isVersionAfter1046())
    // ===================================================================================
    //                                               ResultSetHandlerFactoryImpl Extension
    //                                               =====================================
    public static class ResultSetHandlerFactoryExtension extends org.seasar.dao.impl.ResultSetHandlerFactoryImpl {
        public ResultSetHandlerFactoryExtension() {
            super();
        }
        protected RelationRowCreator createRelationRowCreator() {
            return new RelationRowCreatorExtension();
        }
    }
#else
    // ===================================================================================
    //                                               ResultSetHandlerFactoryImpl Extension
    //                                               =====================================
    public static class ResultSetHandlerFactoryExtension extends ResultSetHandlerFactoryImpl {
#if ($database.isVersionAfter1043())
        public ResultSetHandlerFactoryExtension(BeanMetaData beanMetaData, org.seasar.dao.DaoAnnotationReader annotationReader, org.seasar.dao.DtoMetaDataFactory dtoMetaDataFactory) {
            super(beanMetaData, annotationReader, dtoMetaDataFactory);
        }
#else
        public ResultSetHandlerFactoryExtension(BeanMetaData beanMetaData) {
            super(beanMetaData);
        }
#end
        protected RelationRowCreator createRelationRowCreator() {
            return new RelationRowCreatorExtension();
        }
    }
#end

#if ($database.isVersionAfter1047())
    // ===================================================================================
    //                                                    RelationRowCreatorImpl Extension
    //                                                    ================================
    public static class RelationRowCreatorExtension extends org.seasar.dao.impl.RelationRowCreatorImpl {
        protected boolean isTargetProperty(org.seasar.dao.impl.RelationRowCreationResource res) throws java.sql.SQLException {
            final PropertyType pt = res.getCurrentPropertyType();
            if (!pt.getPropertyDesc().hasWriteMethod()) {
                return false;
            }
            if (java.util.List.class.isAssignableFrom(pt.getPropertyDesc().getPropertyType())) {
                return false;
            }
            return true;
        }

        protected boolean isCreateDeadLink() {
            return false;
        }

        protected int getLimitRelationNestLevel() {
            return 2;
        }
    }
#else
    // ===================================================================================
    //                                                    RelationRowCreatorImpl Extension
    //                                                    ================================
    public static class RelationRowCreatorExtension extends org.seasar.dao.impl.RelationRowCreatorImpl {

        public Object createRelationRow(java.sql.ResultSet rs, RelationPropertyType rpt, java.util.Set columnNames, java.util.Map relKeyValues)
                throws java.sql.SQLException {
            return createRelationRow(rs, rpt, columnNames, relKeyValues, "");
        }

        public Object createRelationRow(java.sql.ResultSet rs, RelationPropertyType rpt, java.util.Set columnNames, java.util.Map relKeyValues,
                String preRelationNoSuffix) throws java.sql.SQLException {
            // It must doesn't need to invoke this!
            // final Object row = setupRelationKeyValue(rpt, columnNames, relKeyValues);

            return setupRelationAllValue(rs, rpt, columnNames, relKeyValues, preRelationNoSuffix);
        }

        protected Object setupRelationAllValue(java.sql.ResultSet rs, RelationPropertyType rpt, java.util.Set columnNames,
                java.util.Map relKeyValues, String preRelationNoSuffix) throws java.sql.SQLException {
            Object row = null;
            final String relationNoSuffix = preRelationNoSuffix + "_" + rpt.getRelationNo();
            final BeanMetaData bmd = rpt.getBeanMetaData();
            int existColumn = 0;
            for (int i = 0; i < bmd.getPropertyTypeSize(); ++i) {
                final PropertyType pt = bmd.getPropertyType(i);

                // Excludes non writable property for performance tuning!
                if (!pt.getPropertyDesc().hasWriteMethod()) {
                    continue;
                }

                // Excludes java.util.List property for pinpont performance tuning!
                if (java.util.List.class.isAssignableFrom(pt.getPropertyDesc().getPropertyType())) {
                    continue;
                }

                final String columnName = pt.getColumnName() + relationNoSuffix;
                if (!columnNames.contains(columnName)) {
                    continue;
                }

                // Return null if the primary key of foreign table is invalid(The foreign key is deadlink).
                if (pt.isPrimaryKey()) {
                    if (!isValidValue(rs, pt, columnName, relKeyValues)) {
                        return null;
                    }
                }

                existColumn++;
                if (row == null) {
                    row = createRelationRow(rpt);
                }
                registerRelationValue(row, rs, rpt, pt, columnName, relKeyValues);
            }

            // Return null if setupSelect_Xxx() or withXxx() has not been invoked.
            if (existColumn == 0) {
                return null;
            }

            if (rpt.getBeanMetaData().getRelationPropertyTypeSize() != 0) {
                createParentRelationRow(rs, rpt.getBeanMetaData(), columnNames, relationNoSuffix, row);
            }
            return row;
        }

        protected boolean isValidValue(java.sql.ResultSet rs, PropertyType pt, String columnName, java.util.Map relKeyValues) throws java.sql.SQLException {
            Object value = null;
            if (relKeyValues != null && relKeyValues.containsKey(columnName)) {
                value = relKeyValues.get(columnName);
            } else {
                final org.seasar.extension.jdbc.ValueType valueType = pt.getValueType();
                value = valueType.getValue(rs, columnName);
            }
            return value != null;
        }

        protected void createParentRelationRow(java.sql.ResultSet rs, BeanMetaData parentBmd, java.util.Set columnNames,
                String relationNoSuffix, Object row) throws java.sql.SQLException {
            for (int i = 0; i < parentBmd.getRelationPropertyTypeSize(); ++i) {
                RelationPropertyType parentParentRpt = parentBmd.getRelationPropertyType(i);
                if (parentParentRpt == null) {
                    continue;
                }
                Object relationRow = createRelationRow(rs, parentParentRpt, columnNames, null, relationNoSuffix);
                if (relationRow != null) {
                    org.seasar.framework.beans.PropertyDesc pd = parentParentRpt.getPropertyDesc();
                    pd.setValue(row, relationRow);
                }
            }
        }
    }
#end

    // ===================================================================================
    //                                                                   Sql File Encoding
    //                                                                   =================
    public String getSqlFileEncoding() {
        return sqlFileEncoding;
    }

    // ===================================================================================
    //                                                                       Bean Enhancer
    //                                                                       =============
    public BeanEnhancer getBeanEnhancer() {
        return beanEnhancer;
    }

    public void setBeanEnhancer(final BeanEnhancer beanEnhancer) {
        this.beanEnhancer = beanEnhancer;
    }

#if ($database.isVersionAfter1046())
    // ===================================================================================
    //                                                           Annotation Reader Factory
    //                                                           =========================
    public void setAnnotationReaderFactory(org.seasar.dao.AnnotationReaderFactory annotationReaderFactory) {
        this.annotationReaderFactory = annotationReaderFactory;
    }
#end

#if ($database.isVersionAfter1047())
    // ===================================================================================
    //                                                                Version After 1.0.47
    //                                                                ====================
    public ColumnNaming getColumnNaming() {
        return columnNaming;
    }

    public void setColumnNaming(final ColumnNaming columnNaming) {
        this.columnNaming = columnNaming;
    }

    public PropertyTypeFactoryBuilder getPropertyTypeFactoryBuilder() {
        return propertyTypeFactoryBuilder;
    }

    public void setPropertyTypeFactoryBuilder(final PropertyTypeFactoryBuilder propertyTypeFactoryBuilder) {
        this.propertyTypeFactoryBuilder = propertyTypeFactoryBuilder;
    }

    public RelationPropertyTypeFactoryBuilder getRelationPropertyTypeFactoryBuilder() {
        return relationPropertyTypeFactoryBuilder;
    }

    public void setRelationPropertyTypeFactoryBuilder(final RelationPropertyTypeFactoryBuilder relationPropertyTypeFactoryBuilder) {
        this.relationPropertyTypeFactoryBuilder = relationPropertyTypeFactoryBuilder;
    }

    public TableNaming getTableNaming() {
        return tableNaming;
    }

    public void setTableNaming(final TableNaming tableNaming) {
        this.tableNaming = tableNaming;
    }
#end

}
