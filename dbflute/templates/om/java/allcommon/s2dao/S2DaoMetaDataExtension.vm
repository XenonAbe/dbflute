${database.allClassCopyright}package ${glPackageBaseCommonS2Dao};

#if ($database.isAvailableGenerics())

import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
#end

import java.lang.reflect.Method;
import java.sql.DatabaseMetaData;
import java.util.List;

#if ($database.isAvailableOtherConnectionDaoInitialization())

import javax.transaction.InvalidTransactionException;
import javax.transaction.Status;
import javax.transaction.SystemException;
import javax.transaction.Transaction;
import javax.transaction.TransactionManager;
import org.seasar.framework.exception.EmptyRuntimeException;
#end

import org.seasar.dao.BeanEnhancer;
import org.seasar.dao.BeanMetaData;
import org.seasar.dao.BeanMetaDataFactory;

import org.seasar.dao.Dbms;
import org.seasar.dao.RelationPropertyType;
import org.seasar.dao.RelationRowCreator;
import org.seasar.dao.SqlCommand;
import org.seasar.dao.impl.BeanMetaDataImpl;
import org.seasar.dao.impl.DaoMetaDataImpl;
import org.seasar.dao.impl.AbstractSqlCommand;
import org.seasar.dao.impl.SelectDynamicCommand;
import org.seasar.dao.impl.UpdateAutoDynamicCommand;
import org.seasar.dao.impl.UpdateAutoStaticCommand;
import org.seasar.dao.impl.UpdateBatchAutoStaticCommand;
import org.seasar.dao.impl.UpdateModifiedOnlyCommand;
import org.seasar.dao.impl.DeleteAutoStaticCommand;
import org.seasar.dao.impl.DeleteBatchAutoStaticCommand;
import org.seasar.extension.jdbc.PropertyType;
import org.seasar.extension.jdbc.ResultSetHandler;
import org.seasar.extension.jdbc.types.ValueTypes;
import org.seasar.framework.beans.BeanDesc;
import org.seasar.framework.util.StringUtil;

import ${glPackageBaseCommonCBean}.${glConditionBeanContextName};
#if ($database.isAvailableGenerics())

import ${glPackageBaseCommonAnnotation}.${glOutsideSqlAnnotation};
#end

/**
 * DaoMetaDataImpl for DBFlute.
 * 
 * @author ${database.ClassAuthor}
 */${database.outputSuppressWarningsAfterLineSeparator()}
public class ${glDaoMetaDataExtension} extends DaoMetaDataImpl {

    // ===================================================================================
    //                                                                         Constructor
    //                                                                         ===========
    /**
     * Constructor.
     */
    public ${glDaoMetaDataExtension}() {
    }

    // ===================================================================================
    //                                                                   Sql File Encoding
    //                                                                   =================
    public String getSqlFileEncoding() {
        return sqlFileEncoding;
    }

#if ($database.isVersionAfter1046())
    // ===================================================================================
    //                                                           Annotation Reader Factory
    //                                                           =========================
    protected org.seasar.dao.AnnotationReaderFactory annotationReaderFactory;

    public void setAnnotationReaderFactory(org.seasar.dao.AnnotationReaderFactory annotationReaderFactory) {
        this.annotationReaderFactory = annotationReaderFactory;
    }
#end

#if ($database.isAvailableOtherConnectionDaoInitialization())

    // ===================================================================================
    //                                        Other Connection Dao Initialization Override
    //                                        ============================================
    protected TransactionManager transactionManager;

    public void setTransactionManager(TransactionManager transactionManager) {
        this.transactionManager = transactionManager;
    }

    public void initialize() {// Override!
        final TransactionSuspendEventInvoker transactionSuspendEventHandler = new TransactionSuspendEventInvoker();
        transactionSuspendEventHandler.setTransactionManager(transactionManager);
        final TransactionSuspendEventCallback callback = new TransactionSuspendEventCallback() {
            public Object callback() {
                executeSuperInitialize();
                return null;
            }
        };
        transactionSuspendEventHandler.callbackAfterSuspendAndResumeLater(callback);
    }
    
    protected void executeSuperInitialize() {
        super.initialize();
    }

    protected static interface TransactionSuspendEventCallback {
        public Object callback();
    }

    protected static class TransactionSuspendEventInvoker {

        private static final org.apache.commons.logging.Log _log = org.apache.commons.logging.LogFactory.getLog(TransactionSuspendEventInvoker.class);
        
        protected TransactionManager transactionManager;

        public void setTransactionManager(TransactionManager transactionManager) {
            this.transactionManager = transactionManager;
        }

        public boolean hasTransaction() throws SystemException {
            return transactionManager.getStatus() != Status.STATUS_NO_TRANSACTION;
        }

        public Transaction suspend() throws SystemException {
            if (transactionManager == null) {
                throw new EmptyRuntimeException("transactionManager");
            }
            return transactionManager.suspend();
        }

        public void resume(final Transaction transaction) throws InvalidTransactionException, IllegalStateException, SystemException {
            if (transactionManager == null) {
                throw new EmptyRuntimeException("transactionManager");
            }
            transactionManager.resume(transaction);
        }

        public Object callbackAfterSuspendAndResumeLater(TransactionSuspendEventCallback callback) {
            Transaction tx = null;
            try {
                if (!hasTransaction()) {
                    return callback.callback();
                }
                _log.debug("...Suspending the transaction!");
                tx = suspend();
                return callback.callback();
            } catch (Exception e) {
                String msg = "The initialize() that is overrided threw the exception: tx=" + tx;
                throw new RuntimeException(msg, e);
            } finally {
                if (tx != null) {
                    try {
                        _log.debug("...Resuming the transaction: tx=" + tx);
                        resume(tx);
                    } catch (Exception ignored) {
                        _log.warn("resume(tx) threw the exception: tx=" + tx, ignored);
                    }
                }
            }
        }
    }
#end

    // ===================================================================================
    //                                                                       Bean Enhancer
    //                                                                       =============
    protected BeanEnhancer beanEnhancer;

    public BeanEnhancer getBeanEnhancer() {
        return beanEnhancer;
    }

    public void setBeanEnhancer(final BeanEnhancer beanEnhancer) {
        this.beanEnhancer = beanEnhancer;
    }
#if ($database.isAvailableGenerics())

    // ===================================================================================
    //                                                           OutsideSql Check Override
    //                                                           =========================
    protected void setupMethodByAuto(Method method) {
        final ${glOutsideSqlAnnotation} outsideSql = method.getAnnotation(${glOutsideSqlAnnotation}.class);
        if (outsideSql != null) {
            String msg = "This method '" + method.getName() + "()' should use Outside Sql but the file was not found!";
            msg = msg + " Expected sql file name is '" + method.getDeclaringClass().getSimpleName() + "_" + method.getName() + ".sql'";
            throw new IllegalStateException(msg);
        }
        super.setupMethodByAuto(method);
    }
#end
#if ($database.isVersionAfter1046())
    // ===================================================================================
    //                                                           ResultSetHandler Override
    //                                                           =========================
    protected ResultSetHandler createResultSetHandler(Method method) {
        return this.resultSetHandlerFactory.getResultSetHandler(daoAnnotationReader, beanMetaData, method);
    }

    protected ResultSetHandler createResultSetHandler(BeanMetaData specifiedBeanMetaData, Method method) {
        return this.resultSetHandlerFactory.getResultSetHandler(daoAnnotationReader, specifiedBeanMetaData, method);
    }
#else
#if ($database.isVersionAfter1043())
    // ===================================================================================
    //                                                    ResultSetHandlerFactory Override
    //                                                    ================================
    protected org.seasar.dao.ResultSetHandlerFactory createResultSetHandlerFactory() {
        return new ResultSetHandlerFactoryExtension(beanMetaData, annotationReader, dtoMetaDataFactory);
    }
#else

    // ===================================================================================
    //                                                    ResultSetHandlerFactory Override
    //                                                    ================================
    protected org.seasar.dao.ResultSetHandlerFactory createResultSetHandlerFactory(final BeanMetaData beanMetaData) {
        return new ResultSetHandlerFactoryExtension(beanMetaData);
    }
#end
#end
#if ($database.isAvailableDaoMethodLazyInitializing())

    // ===================================================================================
    //                                                           SqlCommand Setup Override
    //                                                           =========================
    protected void setupSqlCommand() {
        // Do nothing for lazy initializing!
    }

    public org.seasar.dao.SqlCommand getSqlCommand(String methodName) throws org.seasar.framework.beans.MethodNotFoundRuntimeException {
        {
            final org.seasar.dao.SqlCommand cmd = (org.seasar.dao.SqlCommand) sqlCommands.get(methodName);
            if (cmd != null) {
                return cmd;
            }
        }

        final Method[] methods = daoBeanDesc.getMethods(methodName);
        if (methods.length == 1 && org.seasar.framework.util.MethodUtil.isAbstract(methods[0])) {
            setupMethod(methods[0]);
        }

        {
            final org.seasar.dao.SqlCommand cmd = (org.seasar.dao.SqlCommand) sqlCommands.get(methodName);
            if (cmd != null) {
                return cmd;
            }
            throw new org.seasar.framework.beans.MethodNotFoundRuntimeException(daoClass, methodName, null);
        }
    }
#end

    // ===================================================================================
    //                                                    My SelectDynamicCommand Creation
    //                                                    ================================
    /**
     * New my select dynamic command.
     * 
     * @param handler ResultSetHandler
     * @return My select dynamic command. (NotNull)
     */
    protected ${glSelectDynamicCommand} newMySelectDynamicCommand(ResultSetHandler handler) {
        return new ${glSelectDynamicCommand}(dataSource, statementFactory, handler, resultSetFactory);
    }

    // ===================================================================================
    //                                                              ConditionBean Override
    //                                                              ======================

    protected SelectDynamicCommand setupNonQuerySelectMethodByDto(Method method, ResultSetHandler handler, String[] argNames, String query) {
        Class[] types = method.getParameterTypes();
        Class clazz = types[0];
        if (!${glConditionBeanContextName}.isTheTypeConditionBean(clazz)) {
            return super.setupNonQuerySelectMethodByDto(method, handler, argNames, query);
        }
        // /----------------------------------------------------- [MyExtension]
        argNames = new String[] { "dto" };
        final String sqlNormal = getSelectClause(getBeanMetaData(), clazz);
        final String sqlPKOnly = getSelectClausePKOnly(getBeanMetaData());
        final ${glSelectDynamicCommand} dynamicCommand = newMySelectDynamicCommand(handler);
        String sql = sqlNormal;
        final SelectDynamicCommand cmd = dynamicCommand;
        dynamicCommand.setSelectClause(sqlNormal);
        dynamicCommand.setSelectClausePKOnly(sqlPKOnly);
        // -----------/
        if (query != null) {
            sql = sql + " " + query;
        }
        cmd.setSql(sql);
        cmd.setArgNames(argNames);
        cmd.setArgTypes(types);
        return cmd;
    }

    /**
     * Get select clause.
     * 
     * @param beanMetaData BeanMetaData. (NotNull)
     * @param conditionBeanClass Condition-bean class. (NotNull)
     * @return Select clause. (NotNull)
     */
    protected String getSelectClause(BeanMetaData beanMetaData, Class conditionBeanClass) {
        final StringBuffer sb = new StringBuffer(100);
        sb.append("select/*$dto.selectHint*/ ");

        final StringBuffer sbMySelectList = new StringBuffer(100);
        for (int i = 0; i < beanMetaData.getPropertyTypeSize(); ++i) {
            final PropertyType pt = beanMetaData.getPropertyType(i);
            if (pt.isPersistent()) {
                if (sbMySelectList.length() != 0) {
                    sbMySelectList.append(", ");
                }
                final String columnFullName = beanMetaData.getTableName() + "." + pt.getColumnName();
                sbMySelectList.append(columnFullName);

                ${glConditionBeanContextName}.addColumnAliasInfo(conditionBeanClass, columnFullName, pt.getColumnName());
            }
        }
        sb.append(sbMySelectList);

        setupRelationSelectClause(sb, beanMetaData, "", "", 1, conditionBeanClass);
        return sb.toString();
    }

    protected void setupRelationSelectClause(StringBuffer sb, BeanMetaData baseBmd, String judgeProp, String preNoSuffix, int cqNestNo, Class conditionBeanClass) {
        for (int i = 0; i < baseBmd.getRelationPropertyTypeSize(); ++i) {
            final StringBuffer sbYourSelectList = new StringBuffer(100);
            final RelationPropertyType rpt = baseBmd.getRelationPropertyType(i);
            if (rpt == null) {
                String msg = "The baseBmd.GetRelationPropertyType(" + i + ") returned null";
                msg = msg + ": baseBmd.getTableName()=" + baseBmd.getTableName();
                msg = msg + ": baseBmd.getRelationPropertyTypeSize()=" + baseBmd.getRelationPropertyTypeSize();
                throw new IllegalStateException(msg);
            }

            final BeanMetaData relationBmd = rpt.getBeanMetaData();
            final String initCapPropertyName = StringUtil.capitalize(rpt.getPropertyName());
            final String ifComment = "/*IF dto." + judgeProp + "isSelect" + initCapPropertyName + "()*/";
            final String endComment = "/*END*/";
            for (int j = 0; j < relationBmd.getPropertyTypeSize(); ++j) {
                final PropertyType pt = relationBmd.getPropertyType(j);
                final String tableAliasName = StringUtil.capitalize(rpt.getPropertyName()) + (cqNestNo > 1 ? "_n" + cqNestNo : "");
                if (pt.isPersistent()) {
                    final String columnName = pt.getColumnName();
                    final String columnFullName = tableAliasName + "." + columnName;
                    final String columnAliasName = pt.getColumnName() + preNoSuffix + "_" + rpt.getRelationNo();
                    sbYourSelectList.append(", ");
                    sbYourSelectList.append(columnFullName).append(" AS ").append(columnAliasName);

                    ${glConditionBeanContextName}.addColumnAliasInfo(conditionBeanClass, columnFullName, columnAliasName);
                }
            }
            if (relationBmd.getRelationPropertyTypeSize() > 0) {
                final String nssString = "nss" + initCapPropertyName + ".";
                final String nextPreNoSuffix = preNoSuffix + "_" + rpt.getRelationNo();
                final int nextCQNestNo = cqNestNo + 1;
                setupRelationSelectClause(sbYourSelectList, relationBmd, nssString, nextPreNoSuffix, nextCQNestNo, conditionBeanClass);
            }
            sb.append(ifComment).append(sbYourSelectList).append(endComment);
        }
    }

    /**
     * Get select clause PK only.
     * 
     * @param beanMetaData BeanMetaData. (NotNull)
     * @return Select clause PK only. (NotNull)
     */
    protected String getSelectClausePKOnly(BeanMetaData beanMetaData) {
        final StringBuffer sb = new StringBuffer(100);
        sb.append("select/*$dto.selectHint*/ ");

        final StringBuffer sbMySelectList = new StringBuffer(100);
        for (int i = 0; i < beanMetaData.getPropertyTypeSize(); ++i) {
            final PropertyType pt = beanMetaData.getPropertyType(i);
            if (pt.isPersistent() && pt.isPrimaryKey()) {
                if (sbMySelectList.length() != 0) {
                    sbMySelectList.append(", ");
                }
                sbMySelectList.append(beanMetaData.getTableName());
                sbMySelectList.append(".");
                sbMySelectList.append(pt.getColumnName());
            }
        }
        sb.append(sbMySelectList);

        return sb.toString();
    }

    // ===================================================================================
    //                                                               UpdateByAuto Override
    //                                                               =====================
    protected void setupUpdateMethodByAuto(Method method) {
        checkAutoUpdateMethod(method);
        String[] propertyNames = getPersistentPropertyNames(method);
        AbstractSqlCommand cmd;
        if (isUpdateSignatureForBean(method)) {
            if (isUnlessNull(method.getName())) {
                cmd = createUpdateAutoDynamicCommand(method, propertyNames);
            } else if (isModifiedOnly(method.getName())) {
                cmd = createUpdateModifiedOnlyCommand(method, propertyNames);
            } else {
                cmd = new UpdateAutoStaticCommand(dataSource, statementFactory, createNonConcurrencyBeanMetaData(method), propertyNames);// Extension Point!
            }
        } else {
            cmd = new UpdateBatchAutoStaticCommand(dataSource, statementFactory, createNonConcurrencyBeanMetaData(method), propertyNames);// Extension Point!
        }
        sqlCommands.put(method.getName(), cmd);
    }

    protected AbstractSqlCommand createUpdateAutoDynamicCommand(Method method, String[] propertyNames) {
        AbstractSqlCommand cmd;
        UpdateAutoDynamicCommand uac = new UpdateAutoDynamicCommand(dataSource, statementFactory);
        uac.setBeanMetaData(createNonConcurrencyBeanMetaData(method));// Extension Point!
        uac.setPropertyNames(propertyNames);
        uac.setNotSingleRowUpdatedExceptionClass(getNotSingleRowUpdatedExceptionClass(method));
        cmd = uac;
        return cmd;
    }

    protected AbstractSqlCommand createUpdateModifiedOnlyCommand(final Method method, final String[] propertyNames) {
        UpdateModifiedOnlyCommand uac = new UpdateModifiedOnlyCommand(dataSource, statementFactory);
        uac.setBeanMetaData(createNonConcurrencyBeanMetaData(method));// Extension Point!
        uac.setPropertyNames(propertyNames);
        uac.setNotSingleRowUpdatedExceptionClass(getNotSingleRowUpdatedExceptionClass(method));
        return uac;
    }

#if ($database.isAvailableOtherConnectionDaoInitialization())

    protected BeanMetaData createNonConcurrencyBeanMetaData(Method method) {
#if ($database.isAvailableGenerics())
        if (method.getName().contains("Nonstrict")) {
#else
        if (method.getName().indexOf("Nonstrict") >= 0) {
#end
            final TransactionSuspendEventInvoker transactionSuspendEventHandler = new TransactionSuspendEventInvoker();
            transactionSuspendEventHandler.setTransactionManager(transactionManager);
            final TransactionSuspendEventCallback callback = new TransactionSuspendEventCallback() {
                public Object callback() {
                    return createNonConcurrencyBmdFactory().createBeanMetaData(getBeanClass());
                }
            };
            return (BeanMetaData)transactionSuspendEventHandler.callbackAfterSuspendAndResumeLater(callback);
        } else {
            return getBeanMetaData();
        }
    }
#else

    protected BeanMetaData createNonConcurrencyBeanMetaData(Method method) {
#if ($database.isAvailableGenerics())
        if (method.getName().contains("Nonstrict")) {
#else
        if (method.getName().indexOf("Nonstrict") >= 0) {
#end
            return createNonConcurrencyBmdFactory().createBeanMetaData(getBeanClass());
        } else {
            return getBeanMetaData();
        }
    }
#end

    protected BeanMetaDataFactory createNonConcurrencyBmdFactory() {
        final ${glBeanMetaDataFactoryImpl} nonConcurrencyBmdFactory = new ${glBeanMetaDataFactoryImpl}() {
            protected BeanMetaDataImpl createBeanMetaDataImpl() {
                return new BeanMetaDataImpl() {
                    public boolean hasVersionNoPropertyType() {
                        return false;
                    }

                    public boolean hasTimestampPropertyType() {
                        return false;
                    }
                };
            }
        };
        nonConcurrencyBmdFactory.setAnnotationReaderFactory(this.annotationReaderFactory);
        nonConcurrencyBmdFactory.setValueTypeFactory(this.valueTypeFactory);
        nonConcurrencyBmdFactory.setDataSource(this.dataSource);
        nonConcurrencyBmdFactory.setDaoNamingConvention(this.daoNamingConvention);
        nonConcurrencyBmdFactory.setBeanEnhancer(this.beanEnhancer);
        return nonConcurrencyBmdFactory;
    }

    // ===================================================================================
    //                                                               DeleteByAuto Override
    //                                                               =====================
    protected void setupDeleteMethodByAuto(Method method) {
        checkAutoUpdateMethod(method);
        String[] propertyNames = getPersistentPropertyNames(method);
        SqlCommand cmd = null;
        if (isUpdateSignatureForBean(method)) {
            cmd = new DeleteAutoStaticCommand(dataSource, statementFactory, createNonConcurrencyBeanMetaData(method), propertyNames);
        } else {
            cmd = new DeleteBatchAutoStaticCommand(dataSource, statementFactory, createNonConcurrencyBeanMetaData(method), propertyNames);
        }
        sqlCommands.put(method.getName(), cmd);
    }

    // ===================================================================================
    //                                                                 OutsideSql Override
    //                                                                 ===================
    protected void setupSelectMethodByManual(Method method, String sql) {
        final BeanMetaData myBeanMetaData = getOutsideSqlBeanMetaData(method);
#if ($database.isVersionAfter1046())
        final SelectDynamicCommand cmd = newMySelectDynamicCommand(createResultSetHandler(myBeanMetaData, method));
        cmd.setSql(sql);
        cmd.setArgNames(this.daoAnnotationReader.getArgNames(method));
        cmd.setArgTypes(method.getParameterTypes());
        this.sqlCommands.put(method.getName(), cmd);
#else
#if ($database.isVersionAfter1043())
        final org.seasar.dao.ResultSetHandlerFactory factory = new ResultSetHandlerFactoryExtension(myBeanMetaData, annotationReader, dtoMetaDataFactory);
#else
        final org.seasar.dao.ResultSetHandlerFactory factory = new ResultSetHandlerFactoryExtension(myBeanMetaData);
#end

        final SelectDynamicCommand cmd = newMySelectDynamicCommand(factory.createResultSetHandler(method));
        cmd.setSql(sql);
        cmd.setArgNames(this.annotationReader.getArgNames(method));
        cmd.setArgTypes(method.getParameterTypes());
        this.sqlCommands.put(method.getName(), cmd);
#end
    }

    protected BeanMetaData getOutsideSqlBeanMetaData(Method method) {
        final Class beanClass4SelectMethodByManual = getOutsideSqlDefaultBeanClass(method);
        if (beanClass4SelectMethodByManual.equals(getBeanClass())) {
            return getOutsideSqlDefaultBeanMetaData(method);
        }
        return getOutsideSqlCustomizeBeanMetaData(method);
    }

    protected BeanMetaData getOutsideSqlDefaultBeanMetaData(Method method) {
        return getBeanMetaData();
    }

    protected BeanMetaData getOutsideSqlCustomizeBeanMetaData(Method method) {
        return createOutsideSqlCustomizeBeanMetaDataFactory().createBeanMetaData(getOutsideSqlDefaultBeanClass(method));
    }

    protected BeanMetaDataFactory createOutsideSqlCustomizeBeanMetaDataFactory() {
        final ${glBeanMetaDataFactoryImpl} originalBmdFactory = new ${glBeanMetaDataFactoryImpl}() {
            protected BeanMetaDataImpl createBeanMetaDataImpl() {
                return newOutsideSqlCustomizeBeanMetaDataImpl();
            }
        };
        originalBmdFactory.setAnnotationReaderFactory(this.annotationReaderFactory);
        originalBmdFactory.setValueTypeFactory(this.valueTypeFactory);
        originalBmdFactory.setDataSource(this.dataSource);
        originalBmdFactory.setDaoNamingConvention(this.daoNamingConvention);
        originalBmdFactory.setBeanEnhancer(this.beanEnhancer);
        return originalBmdFactory;
    }

    protected BeanMetaDataImpl newOutsideSqlCustomizeBeanMetaDataImpl() {
        return new OutsideSqlCustomizeBeanMetaDataImpl();
    }

    public static class OutsideSqlCustomizeBeanMetaDataImpl extends BeanMetaDataImpl {
        protected void setupDatabaseMetaData(BeanDesc beanDesc, DatabaseMetaData dbMetaData, Dbms dbms) {
            // Nothing.
        }
    }

    protected Class getOutsideSqlDefaultBeanClass(Method method) {
        final Class retType = method.getReturnType();
        if (java.util.List.class.isAssignableFrom(retType)) {
            final Class elementType = InternalMethodUtil.getElementTypeOfListFromReturnMethod(method);
            if (elementType != null) {
                return elementType;
            } else {
                return getBeanClass();
            }
        } else if (retType.isArray()) {
            return retType.getComponentType();
        } else if (retType.isPrimitive() || !ValueTypes.getValueType(retType).equals(ValueTypes.OBJECT)) {
            return getBeanClass();
        } else {
            return retType;
        }
    }

    // ===================================================================================
    //                                                                       Vert Internal
    //                                                                       =============
    protected static class InternalMethodUtil {
        public static Class getElementTypeOfListFromReturnMethod(Method method) {
            return InternalReflectionUtil.getElementTypeOfListFromReturnType(method);
        }
    }
#if ($database.isAvailableGenerics())

    protected static class InternalReflectionUtil {
        public static Class<?> getElementTypeOfList(final Type parameterizedList) {
            if (!(parameterizedList instanceof ParameterizedType)) {
                return null;
            }

            final ParameterizedType parameterizedType = ParameterizedType.class.cast(parameterizedList);
            final Type rawType = parameterizedType.getRawType();
            if (!(rawType instanceof Class)) {
                return null;
            }

            final Class<?> rawClass = Class.class.cast(rawType);
            if (!rawClass.isAssignableFrom(List.class)) {
                return null;
            }

            final Type[] actualTypeArgument = parameterizedType.getActualTypeArguments();
            if (actualTypeArgument == null || actualTypeArgument.length != 1) {
                return null;
            }
            if (!(actualTypeArgument[0] instanceof Class)) {
                return null;
            }

            return Class.class.cast(actualTypeArgument[0]);
        }

        public static Class<?> getElementTypeOfListFromParameterType(final Method method, final int parameterPosition) {
            final Type[] parameterTypes = method.getGenericParameterTypes();
            return getElementTypeOfList(parameterTypes[parameterPosition]);
        }

        public static Class<?> getElementTypeOfListFromReturnType(final Method method) {
            return getElementTypeOfList(method.getGenericReturnType());
        }
    }
#else

    protected static class InternalReflectionUtil {
        public static Class getElementTypeOfListFromReturnType(final Method method) {
            return null;
        }
    }
#end

#if ($database.isVersionAfter1046())
    // ===================================================================================
    //                                               ResultSetHandlerFactoryImpl Extension
    //                                               =====================================
    public static class ResultSetHandlerFactoryExtension extends org.seasar.dao.impl.ResultSetHandlerFactoryImpl {
        public ResultSetHandlerFactoryExtension() {
            super();
        }
        protected RelationRowCreator createRelationRowCreator() {
            return new RelationRowCreatorExtension();
        }
    }
#else
    // ===================================================================================
    //                                               ResultSetHandlerFactoryImpl Extension
    //                                               =====================================
    public static class ResultSetHandlerFactoryExtension extends ResultSetHandlerFactoryImpl {
#if ($database.isVersionAfter1043())
        public ResultSetHandlerFactoryExtension(BeanMetaData beanMetaData, org.seasar.dao.DaoAnnotationReader annotationReader, org.seasar.dao.DtoMetaDataFactory dtoMetaDataFactory) {
            super(beanMetaData, annotationReader, dtoMetaDataFactory);
        }
#else
        public ResultSetHandlerFactoryExtension(BeanMetaData beanMetaData) {
            super(beanMetaData);
        }
#end
        protected RelationRowCreator createRelationRowCreator() {
            return new RelationRowCreatorExtension();
        }
    }
#end

#if ($database.isVersionAfter1047())
    // ===================================================================================
    //                                                    RelationRowCreatorImpl Extension
    //                                                    ================================
    public static class RelationRowCreatorExtension extends org.seasar.dao.impl.RelationRowCreatorImpl {
        protected boolean isCreateDeadLink() {
            return false;
        }

        protected int getLimitRelationNestLevel() {
            return 2;
        }
    }
#else
    // ===================================================================================
    //                                                    RelationRowCreatorImpl Extension
    //                                                    ================================
    public static class RelationRowCreatorExtension extends org.seasar.dao.impl.RelationRowCreatorImpl {

        public Object createRelationRow(java.sql.ResultSet rs, RelationPropertyType rpt, java.util.Set columnNames, java.util.Map relKeyValues)
                throws java.sql.SQLException {
            return createRelationRow(rs, rpt, columnNames, relKeyValues, "");
        }

        public Object createRelationRow(java.sql.ResultSet rs, RelationPropertyType rpt, java.util.Set columnNames, java.util.Map relKeyValues,
                String preRelationNoSuffix) throws java.sql.SQLException {
            // It must doesn't need to invoke this!
            // final Object row = setupRelationKeyValue(rpt, columnNames, relKeyValues);

            return setupRelationAllValue(rs, rpt, columnNames, relKeyValues, preRelationNoSuffix);
        }

        protected Object setupRelationAllValue(java.sql.ResultSet rs, RelationPropertyType rpt, java.util.Set columnNames,
                java.util.Map relKeyValues, String preRelationNoSuffix) throws java.sql.SQLException {
            Object row = null;
            final String relationNoSuffix = preRelationNoSuffix + "_" + rpt.getRelationNo();
            final BeanMetaData bmd = rpt.getBeanMetaData();
            int existColumn = 0;
            for (int i = 0; i < bmd.getPropertyTypeSize(); ++i) {
                final PropertyType pt = bmd.getPropertyType(i);

                // Excludes non writable property for performance tuning!
                if (!pt.getPropertyDesc().isWritable()) {
                    continue;
                }

                // Excludes java.util.List property for pinpont performance tuning!
                if (java.util.List.class.isAssignableFrom(pt.getPropertyDesc().getPropertyType())) {
                    continue;
                }

                final String columnName = pt.getColumnName() + relationNoSuffix;
                if (!columnNames.contains(columnName)) {
                    continue;
                }

                // Return null if the primary key of foreign table is invalid(The foreign key is deadlink).
                if (pt.isPrimaryKey()) {
                    if (!isValidValue(rs, pt, columnName, relKeyValues)) {
                        return null;
                    }
                }

                existColumn++;
                if (row == null) {
                    row = createRelationRow(rpt);
                }
                registerRelationValue(row, rs, rpt, pt, columnName, relKeyValues);
            }

            // Return null if setupSelect_Xxx() or withXxx() has not been invoked.
            if (existColumn == 0) {
                return null;
            }

            if (rpt.getBeanMetaData().getRelationPropertyTypeSize() != 0) {
                createParentRelationRow(rs, rpt.getBeanMetaData(), columnNames, relationNoSuffix, row);
            }
            return row;
        }

        protected boolean isValidValue(java.sql.ResultSet rs, PropertyType pt, String columnName, java.util.Map relKeyValues) throws java.sql.SQLException {
            Object value = null;
            if (relKeyValues != null && relKeyValues.containsKey(columnName)) {
                value = relKeyValues.get(columnName);
            } else {
                final org.seasar.extension.jdbc.ValueType valueType = pt.getValueType();
                value = valueType.getValue(rs, columnName);
            }
            return value != null;
        }

        protected void createParentRelationRow(java.sql.ResultSet rs, BeanMetaData parentBmd, java.util.Set columnNames,
                String relationNoSuffix, Object row) throws java.sql.SQLException {
            for (int i = 0; i < parentBmd.getRelationPropertyTypeSize(); ++i) {
                RelationPropertyType parentParentRpt = parentBmd.getRelationPropertyType(i);
                if (parentParentRpt == null) {
                    continue;
                }
                Object relationRow = createRelationRow(rs, parentParentRpt, columnNames, null, relationNoSuffix);
                if (relationRow != null) {
                    org.seasar.framework.beans.PropertyDesc pd = parentParentRpt.getPropertyDesc();
                    pd.setValue(row, relationRow);
                }
            }
        }
    }
#end
}
