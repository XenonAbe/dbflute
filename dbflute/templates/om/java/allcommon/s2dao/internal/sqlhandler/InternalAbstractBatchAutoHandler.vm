${database.allClassCopyright}package ${glPackageBaseCommonS2DaoInternalSqlHandler};

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.util.Arrays;
import java.util.Iterator;
import java.util.List;

import javax.sql.DataSource;

import org.seasar.dao.BeanMetaData;
import org.seasar.extension.jdbc.PropertyType;
import org.seasar.extension.jdbc.StatementFactory;
import org.seasar.extension.jdbc.util.ConnectionUtil;
import org.seasar.framework.exception.SQLRuntimeException;
import org.seasar.framework.util.PreparedStatementUtil;
import org.seasar.framework.util.StatementUtil;

/**
 * @author ${database.ClassAuthor}
 */
public abstract class ${glInternalAbstractBatchAutoHandler} extends ${glInternalAbstractAutoHandler} {

    // ===================================================================================
    //                                                                         Constructor
    //                                                                         ===========
    public ${glInternalAbstractBatchAutoHandler}(DataSource dataSource,
            StatementFactory statementFactory, BeanMetaData beanMetaData,
            PropertyType[] propertyTypes) {

        super(dataSource, statementFactory, beanMetaData, propertyTypes);
    }

    // ===================================================================================
    //                                                                             Execute
    //                                                                             =======
    public int[] execute(List list, Class[] argTypes) throws SQLRuntimeException {
        return execute(list);
    }

    public int[] execute(List list) throws SQLRuntimeException {
        if (list == null) {
            throw new IllegalArgumentException("list");
        }
        Connection connection = getConnection();
        try {
            PreparedStatement ps = prepareStatement(connection);
            try {
                for (Iterator iter = list.iterator(); iter.hasNext();) {
                    Object bean = (Object) iter.next();
                    execute(ps, bean);
                }
                return PreparedStatementUtil.executeBatch(ps);
            } finally {
                StatementUtil.close(ps);
            }
        } finally {
            ConnectionUtil.close(connection);
        }
    }
	
    public int execute(Object[] args) throws SQLRuntimeException {
        List list = null;
        if (args[0] instanceof Object[]) {
            list = Arrays.asList((Object[]) args[0]);
        } else if (args[0] instanceof List) {
            list = (List) args[0];
        }
        if (list == null) {
            throw new IllegalArgumentException("args[0]");
        }
        int[] ret = execute(list);
        int updatedRow = 0;
        for (int i = 0; i < ret.length; i++) {
            if (ret[i] > 0) {
                updatedRow += ret[i];
            }
        }
        return updatedRow;
    }

    public int[] executeBatch(Object[] args) throws SQLRuntimeException {
        List list = null;
        if (args[0] instanceof Object[]) {
            list = Arrays.asList((Object[]) args[0]);
        } else if (args[0] instanceof List) {
            list = (List) args[0];
        }
        if (list == null) {
            throw new IllegalArgumentException("args[0]");
        }
        return execute(list);
    }

    protected void execute(PreparedStatement ps, Object bean) {
        setupBindVariables(bean);
        logSql(getBindVariables(), getArgTypes(getBindVariables()));
        bindArgs(ps, getBindVariables(), getBindVariableValueTypes());
        PreparedStatementUtil.addBatch(ps);
    }
}
