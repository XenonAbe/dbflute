${database.allClassCopyright}package ${glPackageBaseCommonS2DaoInternalSqlCommand};


import javax.sql.DataSource;

import org.seasar.extension.jdbc.StatementFactory;
import org.seasar.dao.BeanMetaData;

import ${glPackageBaseCommonS2DaoInternalSqlHandler}.${glInternalAbstractBatchAutoHandler};

/**
 * @author ${database.ClassAuthor}
 */
public abstract class ${glInternalAbstractBatchAutoStaticCommand} extends ${glInternalAbstractAutoStaticCommand} {

	// ===================================================================================
    //                                                                         Constructor
    //                                                                         ===========
    public ${glInternalAbstractBatchAutoStaticCommand}(DataSource dataSource,
            StatementFactory statementFactory, BeanMetaData beanMetaData,
            String[] propertyNames) {
        this(dataSource, statementFactory, beanMetaData, propertyNames, DEFAULT_VERSION_NO_AUTO_INCREMENT_ON_MEMORY);
    }

    public ${glInternalAbstractBatchAutoStaticCommand}(DataSource dataSource,
            StatementFactory statementFactory, BeanMetaData beanMetaData,
            String[] propertyNames, boolean versionNoAutoIncrementOnMemory) {
        super(dataSource, statementFactory, beanMetaData, propertyNames, versionNoAutoIncrementOnMemory);
    }

	// ===================================================================================
    //                                                                             Execute
    //                                                                             =======
    @Override
    public Object execute(Object[] args) {
        final ${glInternalAbstractBatchAutoHandler} handler = createBatchAutoHandler();
        handler.setOptimisticLockHandling(optimisticLockHandling);
		handler.setSql(getSql());
		// The logging message SQL of procedure is unnecessary.
        // handler.setLoggingMessageSqlArgs(args);
        return handler.executeBatch(args);
    }

    protected abstract ${glInternalAbstractBatchAutoHandler} createBatchAutoHandler();
}
