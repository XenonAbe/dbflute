${database.allClassCopyright}package ${glPackageBaseCommonS2DaoInternalSqlCommand};

import javax.sql.DataSource;

import org.seasar.extension.jdbc.StatementFactory;
import org.seasar.dao.CommandContext;
import org.seasar.dao.Node;
import org.seasar.dao.SqlCommand;
import ${glPackageBaseCommonCBean}.${glConditionBeanInterfaceName};
import ${glPackageBaseCommonDBMeta}.${glDBMetaInterfaceName};
import ${glPackageBaseCommonDBMeta}.${glDBMetaInstanceHandlerName};
import ${glPackageBaseCommonS2DaoInternalSqlHandler}.${glInternalCommandContextHandler};
import ${glPackageBaseCommonS2DaoInternalSqlParser}.${glInternalCommandContextCreator};
import ${glPackageBaseCommonS2DaoInternalSqlParser}.${glInternalSqlParser};
import ${glPackageBaseCommonUtil}.${glSimpleSystemUtil};

/**
 * @author ${database.ClassAuthor}
 */
public class ${glInternalDeleteQueryAutoDynamicCommand} implements SqlCommand  {

    // ===================================================================================
    //                                                                           Attribute
    //                                                                           =========
    protected DataSource dataSource;
    protected StatementFactory statementFactory;

    // ===================================================================================
    //                                                                         Constructor
    //                                                                         ===========
    public ${glInternalDeleteQueryAutoDynamicCommand}(DataSource dataSource, StatementFactory statementFactory) {
        this.dataSource = dataSource;
        this.statementFactory = statementFactory;
    }

    // ===================================================================================
    //                                                                             Execute
    //                                                                             =======
    public Object execute(Object[] args) {
        final ${glConditionBeanInterfaceName} cb = extractConditionBeanWithCheck(args);
        final String[] argNames = new String[]{"dto"};
        final Class<?>[] argTypes = new Class<?>[]{cb.getClass()};
        final String twoWaySql = buildQueryDeleteTwoWaySql(cb);
        final CommandContext context = createCommandContext(twoWaySql, argNames, argTypes, args);
        final ${glInternalCommandContextHandler} handler = createCommandContextHandler(context);
        int rows = handler.execute(args);
        return new Integer(rows);
    }
    
    protected ${glConditionBeanInterfaceName} extractConditionBeanWithCheck(Object[] args) {
        if (args == null || args.length == 0) {
            String msg = "The arguments should have one argument! But:";
            msg = msg + " args=" + (args != null ? args.length : null);
            throw new IllegalArgumentException(msg);
        }
        final Object fisrtArg = args[0];
        if (!(fisrtArg instanceof ${glConditionBeanInterfaceName})) {
            String msg = "The type of argument should be " + ${glConditionBeanInterfaceName}.class + "! But:";
            msg = msg + " type=" + fisrtArg.getClass();
            throw new IllegalArgumentException(msg);
        }
        return (${glConditionBeanInterfaceName}) fisrtArg;
    }
    
    protected ${glInternalCommandContextHandler} createCommandContextHandler(CommandContext context) {
        return new ${glInternalCommandContextHandler}(dataSource, statementFactory, context);
    }

    protected String buildQueryDeleteTwoWaySql(${glConditionBeanInterfaceName} cb) {
        // 
        // @jflute -- Move the logic to SqlClause at the future... 
        // 
        final String tableSqlName = cb.getTableSqlName();
        final String aliasName = cb.getSqlClause().getLocalTableAliasName();
        final ${glDBMetaInterfaceName} dbmeta = ${glDBMetaInstanceHandlerName}.findDBMeta(cb.getTableDbName());
        if (dbmeta.hasTwoOrMorePrimaryKeys()) {
            String msg = "The target table of queryDelete() should have only one primary key:";
            msg = msg + " primaryKeys=" + dbmeta.getPrimaryUniqueInfo().getUniqueColumnList();
            throw new IllegalStateException(msg);
        }
        final String primaryKeyName = dbmeta.getPrimaryUniqueInfo().getFirstColumn().getColumnDbName();
		final String selectClause = "select " + aliasName + "." + primaryKeyName;
        String fromWhereClause = cb.getSqlClause().getClauseFromWhereWithUnionTemplate();
		
		// Replace template marks. These are very important!
		fromWhereClause = replaceString(fromWhereClause, cb.getSqlClause().getUnionSelectClauseMark(), selectClause);
		fromWhereClause = replaceString(fromWhereClause, cb.getSqlClause().getUnionWhereClauseMark(), "");
		fromWhereClause = replaceString(fromWhereClause, cb.getSqlClause().getUnionWhereFirstConditionMark(), "");
		
		if (cb.getSqlClause() instanceof ${glPackageBaseCommonSqlClause}.${glSqlClauseInterfaceName}MySql) {
		    String subQuery = cb.getSqlClause().filterSubQueryIndent(fromWhereClause);
		    subQuery = replaceString(subQuery, aliasName + ".", "");
		    subQuery = replaceString(subQuery, " " + aliasName + " ", " ");
		    subQuery = subQuery.substring(subQuery.indexOf("from "));
		    return "delete " + subQuery;
        } else {
            final String subQuery = cb.getSqlClause().filterSubQueryIndent(selectClause + " " + fromWhereClause);
            final StringBuilder sb = new StringBuilder();
		    String ln = "";
            if (cb.getSqlClause().isFormatClauseEffective()) {
                ln = getLineSeparator();
		    }
            sb.append("delete from ").append(tableSqlName).append(ln);
            sb.append(" where ").append(primaryKeyName);
            sb.append(" in (").append(ln).append(subQuery).append(ln).append(")");
            return sb.toString();
		}
    }
    
    protected CommandContext createCommandContext(String twoWaySql, String[] argNames, Class<?>[] argTypes, Object[] args) {
        final CommandContext context;
        {
            final ${glInternalSqlParser} parser = new ${glInternalSqlParser}(twoWaySql);
            final Node node = parser.parse();
            final ${glInternalCommandContextCreator} creator = new ${glInternalCommandContextCreator}(argNames, argTypes);
            context = creator.createCommandContext(args);
            node.accept(context);
        }
        return context;
    }
	
    // ===================================================================================
    //                                                                      General Helper
    //                                                                      ==============
    protected final String replaceString(String text, String fromText, String toText) {
        if (text == null || fromText == null || toText == null)
            return null;
        StringBuffer buf = new StringBuffer(100);
        int pos = 0;
        int pos2 = 0;
        do {
            pos = text.indexOf(fromText, pos2);
            if (pos == 0) {
                buf.append(toText);
                pos2 = fromText.length();
            } else if (pos > 0) {
                buf.append(text.substring(pos2, pos));
                buf.append(toText);
                pos2 = pos + fromText.length();
            } else {
                buf.append(text.substring(pos2));
                return buf.toString();
            }
        } while (true);
    }

    protected String getLineSeparator() {
        return ${glSimpleSystemUtil}.getLineSeparator();
    }
}
