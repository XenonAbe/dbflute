${database.allClassCopyright}package ${glPackageBaseCommonBhv};

#set ($myClassName = "${glBehaviorWritableAbstractName}")

import ${glPackageBaseCommon}.${glEntityInterfaceName};
import ${glPackageBaseCommonDBMeta}.${glDBMetaInterfaceName};
import ${glPackageBaseCommonHelper}.${glMapStringBuilderName};
import ${glPackageBaseCommonHelper}.${glMapStringBuilderImplName};

import ${glPackageBaseCommonBhvBatch}.${glTokenFileReflectionOptionName};
import ${glPackageBaseCommonBhvBatch}.${glTokenFileReflectionResultName};
import ${glPackageBaseCommonBhvBatch}.${glTokenFileReflectionFailureName};

import ${glPackageBaseCommonHelperTokenFile}.${glFileTokenName};
import ${glPackageBaseCommonHelperTokenFile}.${glFileTokenizingCallbackName};
import ${glPackageBaseCommonHelperTokenFile}.${glFileTokenizingRowResourceName};
import ${glPackageBaseCommonHelperTokenFile}.${glFileTokenizingHeaderInfoName};
import ${glPackageBaseCommonHelperTokenFile}.${glFileTokenizingOptionName};
import ${glPackageBaseCommonHelperTokenFileImpl}.${glFileTokenImplName};

/**
 * The abstract class of behavior-writable.
 * 
 * @author ${database.ClassAuthor}
 */
public abstract class ${myClassName} extends ${glBehaviorReadableAbstractName} implements ${glBehaviorWritableInterfaceName} {
#if ($database.isCommonColumnInterceptingOnBehaviorFilter())

    /** Log-instance. */
    private static final org.apache.commons.logging.Log _log = org.apache.commons.logging.LogFactory.getLog(${myClassName}.class);
#end

    // =====================================================================================
    //                                                                           Constructor
    //                                                                           ===========
    /**
     * Constructor.
     */
    public ${myClassName}() {
    }

    // =====================================================================================
    //                                                                       Delegate Method
    //                                                                       ===============
    /**
     * ${database.ImplementComment}
     * 
     * @param entity Entity that the type is entity-interface. (NotNull)
     * @return Inserted count.
     */
    public int callCreate(${glEntityInterfaceName} entity) {
        assertEntityNotNull(entity);// If this table use identity, the entity does not have primary-key.
        filterEntityOfInsert(entity);
        assertEntityOfInsert(entity);
        return getDaoWritable().create(entity);
    }

    /**
     * ${database.ImplementComment}
     * {modified only}
     * 
     * @param entity Entity that the type is entity-interface. (NotNull)
     * @return Updated count.
     */
    public int callModify(${glEntityInterfaceName} entity) {
        assertEntityNotNullAndHasPrimaryKeyValue(entity);
        filterEntityOfUpdate(entity);
        assertEntityOfUpdate(entity);
        return getDaoWritable().modifyModifiedOnly(entity);
    }

    /**
     * ${database.ImplementComment}
     * 
     * @param entity Entity that the type is entity-interface. (NotNull)
     * @return Deleted count.
     */
    public int callRemove(${glEntityInterfaceName} entity) {
        assertEntityNotNullAndHasPrimaryKeyValue(entity);
        filterEntityOfDelete(entity);
        assertEntityOfDelete(entity);
        return getDaoWritable().remove(entity);
    }

    /**
     * Filter the entity of insert.
     * 
     * @param targetEntity Target entity that the type is entity-interface. (NotNull)
     */
    protected void filterEntityOfInsert(${glEntityInterfaceName} targetEntity) {
#if ($database.isAvailableBehaviorInsertSequenceInjection())
        injectSequenceToPrimaryKeyIfNeeds(targetEntity);
#end
#if ($database.isCommonColumnInterceptingOnBehaviorFilter())
        if (!(targetEntity instanceof ${glPackageBaseCommon}.${glEntityDefinedCommonColumnInterfaceName})) {
            return;
        }
        final ${glPackageBaseCommon}.${glEntityDefinedCommonColumnInterfaceName} entity = (${glPackageBaseCommon}.${glEntityDefinedCommonColumnInterfaceName})targetEntity;
        if (_log.isDebugEnabled()) {
            String msg = "...Filtering entity of INSERT about the column columns of " + getTableDbName();
            msg = msg + ": entity=" + entity.getDBMeta().extractPrimaryKeyMapString(entity);
            _log.debug(msg);
            _log.debug("  before setup : " + entity.getDBMeta().extractCommonColumnValueMapString(entity));
        }
#foreach ($columnName in ${database.CommonColumnNameList})
  #set ($filteredColumnName = ${database.filterCommonColumn(${columnName})})
  #set ($entityCommonColumnMap = ${database.CommonColumnMap})
  #set ($columnType = ${entityCommonColumnMap.get(${columnName})})
  #set ($javaNative = ${database.convertJavaNativeByJdbcType(${columnType})})
  #set ($javaName = ${database.convertJavaNameByJdbcNameAsColumn(${filteredColumnName})})
  #set ($uncapitalisedJavaName = ${database.convertUncapitalisedJavaNameByJdbcNameAsColumn(${filteredColumnName})})
  #if (${database.containsValidColumnNameKeyCommonColumnSetupBeforeInsertInterceptorLogicMap(${columnName})})
    #set ($logic = ${database.getCommonColumnSetupBeforeInsertInterceptorLogicByColumnName(${columnName})})
    #if ($database.isCommonColumnSetupInvokingLogic($logic))
      #set ($filteredLogic = $database.removeCommonColumnSetupInvokingMark($logic))

        ${filteredLogic}
        if (_log.isDebugEnabled()) {
            _log.debug("    ${filteredColumnName} has been set up: invoking=${filteredLogic}");
        }
    #else

        final ${javaNative} ${uncapitalisedJavaName} = ${logic};
        entity.set${javaName}(${uncapitalisedJavaName});
        if (_log.isDebugEnabled()) {
            _log.debug("    ${filteredColumnName} has been set up: value=" + ${uncapitalisedJavaName});
        }
    #end
  #end
#end

        if (_log.isDebugEnabled()) {
            _log.debug("  after setup  : " + entity.getDBMeta().extractCommonColumnValueMapString(entity));
        }
#end
    }

    /**
     * Assert the entity of insert.
     * 
     * @param entity Entity that the type is entity-interface. (NotNull)
     */
    protected void assertEntityOfInsert(${glEntityInterfaceName} entity) {
    }

    /**
     * Filter the entity of update.
     * 
     * @param targetEntity Target entity that the type is entity-interface. (NotNull)
     */
    protected void filterEntityOfUpdate(${glEntityInterfaceName} targetEntity) {
#if ($database.isCommonColumnInterceptingOnBehaviorFilter())
        if (!(targetEntity instanceof ${glPackageBaseCommon}.${glEntityDefinedCommonColumnInterfaceName})) {
            return;
        }
        final ${glPackageBaseCommon}.${glEntityDefinedCommonColumnInterfaceName} entity = (${glPackageBaseCommon}.${glEntityDefinedCommonColumnInterfaceName})targetEntity;
        if (_log.isDebugEnabled()) {
            String msg = "...Filtering entity of UPDATE about the column columns of " + getTableDbName();
            msg = msg + ": entity=" + entity.getDBMeta().extractPrimaryKeyMapString(entity);
            _log.debug(msg);
            _log.debug("  before setup : " + entity.getDBMeta().extractCommonColumnValueMapString(entity));
        }
#foreach ($columnName in ${database.CommonColumnNameList})
  #set ($filteredColumnName = ${database.filterCommonColumn(${columnName})})
  #set ($entityCommonColumnMap = ${database.CommonColumnMap})
  #set ($columnType = ${entityCommonColumnMap.get(${columnName})})
  #set ($javaNative = ${database.convertJavaNativeByJdbcType(${columnType})})
  #set ($javaName = ${database.convertJavaNameByJdbcNameAsColumn(${filteredColumnName})})
  #set ($uncapitalisedJavaName = ${database.convertUncapitalisedJavaNameByJdbcNameAsColumn(${filteredColumnName})})
  #if (${database.containsValidColumnNameKeyCommonColumnSetupBeforeUpdateInterceptorLogicMap(${columnName})})
    #set ($logic = ${database.getCommonColumnSetupBeforeUpdateInterceptorLogicByColumnName(${columnName})})
    #if ($database.isCommonColumnSetupInvokingLogic($logic))
      #set ($filteredLogic = $database.removeCommonColumnSetupInvokingMark($logic))

        ${filteredLogic}
        if (_log.isDebugEnabled()) {
            _log.debug("    ${filteredColumnName} has been set up: invoking=${filteredLogic}");
        }
    #else

        final ${javaNative} ${uncapitalisedJavaName} = ${logic};
        entity.set${javaName}(${uncapitalisedJavaName});
        if (_log.isDebugEnabled()) {
            _log.debug("    ${filteredColumnName} has been set up: value=" + ${uncapitalisedJavaName});
        }
    #end
  #end
#end

        if (_log.isDebugEnabled()) {
            _log.debug("  after setup  : " + entity.getDBMeta().extractCommonColumnValueMapString(entity));
        }
#end
    }

    /**
     * Assert the entity of update.
     * 
     * @param entity Entity that the type is entity-interface. (NotNull)
     */
    protected void assertEntityOfUpdate(${glEntityInterfaceName} entity) {
    }

    /**
     * Filter the entity of delete.
     * 
     * @param targetEntity Target entity that the type is entity-interface. (NotNull)
     */
    protected void filterEntityOfDelete(${glEntityInterfaceName} targetEntity) {
#if ($database.isCommonColumnInterceptingOnBehaviorFilter())
        if (!(targetEntity instanceof ${glPackageBaseCommon}.${glEntityDefinedCommonColumnInterfaceName})) {
            return;
        }
        final ${glPackageBaseCommon}.${glEntityDefinedCommonColumnInterfaceName} entity = (${glPackageBaseCommon}.${glEntityDefinedCommonColumnInterfaceName})targetEntity;
        if (_log.isDebugEnabled()) {
            String msg = "[Behavior] ...Filtering entity of DELETE about the column columns of " + getTableDbName();
            msg = msg + ": entity=" + entity.getDBMeta().extractPrimaryKeyMapString(entity);
            _log.debug(msg);
            _log.debug("  before setup : " + entity.getDBMeta().extractCommonColumnValueMapString(entity));
        }
#foreach ($columnName in ${database.CommonColumnNameList})
  #set ($filteredColumnName = ${database.filterCommonColumn(${columnName})})
  #set ($entityCommonColumnMap = ${database.CommonColumnMap})
  #set ($columnType = ${entityCommonColumnMap.get(${columnName})})
  #set ($javaNative = ${database.convertJavaNativeByJdbcType(${columnType})})
  #set ($javaName = ${database.convertJavaNameByJdbcNameAsColumn(${filteredColumnName})})
  #set ($uncapitalisedJavaName = ${database.convertUncapitalisedJavaNameByJdbcNameAsColumn(${filteredColumnName})})
  #if (${database.containsValidColumnNameKeyCommonColumnSetupBeforeDeleteInterceptorLogicMap(${columnName})})
    #set ($logic = ${database.getCommonColumnSetupBeforeDeleteInterceptorLogicByColumnName(${columnName})})
    #if ($database.isCommonColumnSetupInvokingLogic($logic))
      #set ($filteredLogic = $database.removeCommonColumnSetupInvokingMark($logic))

        ${filteredLogic}
        if (_log.isDebugEnabled()) {
            _log.debug("    ${filteredColumnName} has been set up: invoking=${filteredLogic}");
        }
    #else

        final ${javaNative} ${uncapitalisedJavaName} = ${logic};
        entity.set${javaName}(${uncapitalisedJavaName});
        if (_log.isDebugEnabled()) {
            _log.debug("    ${filteredColumnName} has been set up: value=" + ${uncapitalisedJavaName});
        }
    #end
  #end
#end

        if (_log.isDebugEnabled()) {
            _log.debug("  after setup  : " + entity.getDBMeta().extractCommonColumnValueMapString(entity));
        }
#end
    }

    /**
     * Assert the entity of delete
     * 
     * @param entity Entity that the type is entity-interface. (NotNull)
     */
    protected void assertEntityOfDelete(${glEntityInterfaceName} entity) {
    }

    /**
     * ${database.ImplementComment}
     * 
     * @param entityList Entity-list that the type is entity-interface. (NotNull)
     * @return Inserted count.
     */
    public int callCreateList(java.util.List${database.filterGenericsString(${glEntityInterfaceName})} entityList) {
        assertListNotNullAndNotEmpty(entityList);
        for (final java.util.Iterator ite = entityList.iterator(); ite.hasNext(); ) {
            final ${glEntityInterfaceName} entity = (${glEntityInterfaceName})ite.next();
            filterEntityOfInsert(entity);
            assertEntityOfInsert(entity);
        }
        return getDaoWritable().createList(entityList);
    }

    /**
     * ${database.ImplementComment}
     * 
     * @param entityList Entity-list that the type is entity-interface. (NotNull)
     * @return Updated count.
     */
    public int callModifyList(java.util.List${database.filterGenericsString(${glEntityInterfaceName})} entityList) {
        assertListNotNullAndNotEmpty(entityList);
        for (final java.util.Iterator ite = entityList.iterator(); ite.hasNext(); ) {
            final ${glEntityInterfaceName} entity = (${glEntityInterfaceName})ite.next();
            filterEntityOfUpdate(entity);
            assertEntityOfUpdate(entity);
        }
        return getDaoWritable().modifyList(entityList);
    }

    /**
     * ${database.ImplementComment}
     * 
     * @param entityList Entity-list that the type is entity-interface. (NotNull)
     * @return Deleted count.
     */
    public int callRemoveList(java.util.List${database.filterGenericsString(${glEntityInterfaceName})} entityList) {
        assertListNotNullAndNotEmpty(entityList);
        for (final java.util.Iterator ite = entityList.iterator(); ite.hasNext(); ) {
            final ${glEntityInterfaceName} entity = (${glEntityInterfaceName})ite.next();
            filterEntityOfDelete(entity);
            assertEntityOfDelete(entity);
        }
        return getDaoWritable().removeList(entityList);
    }

    // =====================================================================================
    //                                                                   Basic Entity Update
    //                                                                   ===================
    /**
     * Create.
     * 
     * @param entity Entity. (NotNull)
     */
    public void create(${glEntityInterfaceName} entity) {
        doCreate(entity);
    }

    abstract protected void doCreate(${glEntityInterfaceName} entity);

    /**
     * Modify.
     * 
     * @param entity Entity. (NotNull)
     * @exception ${glPackageBaseCommonException}.${glRecordHasAlreadyBeenDeletedException}
     * @exception ${glPackageBaseCommonException}.${glRecordHasOverlappedException}
     */
    public void modify(${glEntityInterfaceName} entity) {
        doModify(entity);
    }

    abstract protected void doModify(${glEntityInterfaceName} entity);

    /**
     * Modify non strict.
     * 
     * @param entity Entity. (NotNull)
     * @exception ${glPackageBaseCommonException}.${glRecordHasAlreadyBeenDeletedException}
     * @exception ${glPackageBaseCommonException}.${glRecordHasOverlappedException}
     */
    public void modifyNonstrict(${glEntityInterfaceName} entity) {
        doModifyNonstrict(entity);
    }

    abstract protected void doModifyNonstrict(${glEntityInterfaceName} entity);

    /**
     * ${database.ImplementComment}
     * 
     * @param entity Entity having primary-key value. (NotNull)
     * @exception ${glPackageBaseCommonException}.${glRecordHasAlreadyBeenDeletedException}
     */
    public void modifyAfterSelect(${glEntityInterfaceName} entity) {
        doModifyAfterSelect(entity);
    }

    abstract protected void doModifyAfterSelect(${glEntityInterfaceName} entity);

    /**
     * ${database.ImplementComment}
     * 
     * @param entity Entity. This must contain primary-key value at least(Except use identity). (NotNull)
     */
    public void createOrModify(${glPackageBaseCommon}.${glEntityInterfaceName} entity) {
        assertEntityNotNull(entity);
        doCreateOrUpdate(entity);
    }

    abstract protected void doCreateOrUpdate(${glEntityInterfaceName} entity);

    /**
     * ${database.ImplementComment}
     * 
     * @param entity Entity. This must contain primary-key value at least(Except use identity). (NotNull)
     */
    public void createOrModifyNonstrict(${glPackageBaseCommon}.${glEntityInterfaceName} entity) {
        assertEntityNotNull(entity);
        doCreateOrUpdateNonstrict(entity);
    }

    abstract protected void doCreateOrUpdateNonstrict(${glEntityInterfaceName} entity);

    /**
     * Create or modify after select. <br />
     * {modify: modified only}
     * 
     * @param entity Entity. This must contain primary-key value at least(Except use identity). (NotNull)
     */
    public void createOrModifyAfterSelect(${glPackageBaseCommon}.${glEntityInterfaceName} entity) {
        assertEntityNotNull(entity);
        doCreateOrModifyAfterSelect(entity);
    }

    abstract protected void doCreateOrModifyAfterSelect(${glEntityInterfaceName} entity);
#if ($database.isMakeBehaviorForUpdate() && $database.isMakeRecentlyDeprecated())

    /**
     * ${database.ImplementComment}
     * 
     * @param entity Entity having primary-key value. (NotNull)
     * @exception ${glPackageBaseCommonException}.${glRecordHasAlreadyBeenDeletedException}
     * @deprecated This method is deprecated.
     */
    public void modifyAfterSelectForUpdate(${glEntityInterfaceName} entity) {
        assertEntityNotNullAndHasPrimaryKeyValue(entity);
        doModifyAfterSelectForUpdate(entity);
    }

    abstract protected void doModifyAfterSelectForUpdate(${glEntityInterfaceName} entity);

    /**
     * Create or modify after select-for-update.
     * {modify: modified only}
     * 
     * @param entity Entity. This must contain primary-key value at least(Except use identity). (NotNull)
     * @deprecated This method is deprecated.
     */
    public void createOrModifyAfterSelectForUpdate(${glPackageBaseCommon}.${glEntityInterfaceName} entity) {
        assertEntityNotNull(entity);
        doCreateOrModifyAfterSelectForUpdate(entity);
    }

    abstract protected void doCreateOrModifyAfterSelectForUpdate(${glEntityInterfaceName} entity);
#end

    /**
     * Merge entity.
     * Copy the column data of sourceEntity that the setter has been invoked to destinationEntity.
     * 
     * @param sourceEntity Source entity. (NotNull)
     * @param destinationEntity Destination entity. (NotNull)
     */
    abstract protected void mergeEntity(${glEntityInterfaceName} sourceEntity, ${glEntityInterfaceName} destinationEntity);

    /**
     * Remove.
     * 
     * @param entity Entity. (NotNull)
     * @exception ${glPackageBaseCommonException}.${glRecordHasAlreadyBeenDeletedException}
     * @exception ${glPackageBaseCommonException}.${glRecordHasOverlappedException}
     */
    public void remove(${glPackageBaseCommon}.${glEntityInterfaceName} entity) {
        assertEntityNotNull(entity);
        callRemove(entity);
    }

    abstract protected void doRemove(${glEntityInterfaceName} entity);

    /**
     * Remove after select.
     * 
     * @param entity Entity. This must contain primary-key value at least. (NotNull)
     * @exception ${glPackageBaseCommonException}.${glRecordHasAlreadyBeenDeletedException}
     */
    public void removeAfterSelect(${glEntityInterfaceName} entity) {
        assertEntityNotNullAndHasPrimaryKeyValue(entity);
        doRemoveAfterSelect(entity);
    }

    abstract protected void doRemoveAfterSelect(${glEntityInterfaceName} entity);

    // =====================================================================================
    //                                                                    Basic Batch Update
    //                                                                    ==================
    /**
     * Create list.
     * 
     * @param entityList Entity-list. (NotNull and NotEmpty)
     * @return Created count.
     */
    public int createList(java.util.List${database.filterGenericsString(${glEntityInterfaceName})} entityList) {
        assertListNotNullAndNotEmpty(entityList);
        return callCreateList(entityList);
    }

    /**
     * Modify list.
     * 
     * @param entityList Entity-list. (NotNull and NotEmpty)
     * @return Modified count.
     */
    public int modifyList(java.util.List${database.filterGenericsString(${glEntityInterfaceName})} entityList) {
        assertListNotNullAndNotEmpty(entityList);
        return callModifyList(entityList);
    }

    /**
     * Remove list.
     * 
     * @param entityList Entity-list. (NotNull and NotEmpty)
     * @return Removed count.
     */
    public int removeList(java.util.List${database.filterGenericsString(${glEntityInterfaceName})} entityList) {
        assertListNotNullAndNotEmpty(entityList);
        return callRemoveList(entityList);
    }

#set ($genericsPrimaryKeySequence = "String, ${database.sequenceReturnType}")
    /**
     * Inject sequence to primary key if it needs.
     * 
     * @param entity Entity. (NotNull)
     */
    protected void injectSequenceToPrimaryKeyIfNeeds(${glEntityInterfaceName} entity) {
        final ${glDBMetaInterfaceName} dbmeta = entity.getDBMeta();
        if (!dbmeta.hasSequence() || dbmeta.hasTwoOrMorePrimaryKeys() || entity.hasPrimaryKeyValue()) {
            return;
        }
        final ${database.sequenceReturnType} sequenceValue = readNextVal();
        final String columnDbName = dbmeta.getPrimaryUniqueInfo().getFirstColumn().getColumnDbName();
        final java.util.Map${database.filterGenericsString($genericsPrimaryKeySequence)} map = new java.util.HashMap${database.filterGenericsString($genericsPrimaryKeySequence)}();
        map.put(columnDbName, sequenceValue);
        dbmeta.acceptPrimaryKeyMap(entity, map);
    }

    // =====================================================================================
    //                                                                            Token File
    //                                                                            ==========
    /**
     * Reflect(insert or update) token-file to this table.
     * 
     * @param filename Name of the file. (NotNull and NotEmpty)
     * @param tokenFileReflectionOption token-file-reflection-option. (NotNull and Required{delimiter and encoding})
     * @return Token-file-reflection-result. (NotNull)
     * @throws java.io.FileNotFoundException
     * @throws java.io.IOException
     */
    public ${glTokenFileReflectionResultName} reflectTokenFile(String filename, ${glTokenFileReflectionOptionName} tokenFileReflectionOption) throws java.io.FileNotFoundException, java.io.IOException {
        assertStringNotNullAndNotTrimmedEmpty("filename", filename);
        assertFileTokenReflectionOption(tokenFileReflectionOption);

        final ${glTokenFileReflectionResultName} result = buildTokenFileReflectionResult();
        final ${glFileTokenizingCallbackName} fileTokenizingCallback = buildFileTokenReflectionFileTokenizingCallback(tokenFileReflectionOption, result);
        final ${glFileTokenizingOptionName} fileTokenizingOption = buildFileTokenReflectionFileTokenizingOption(tokenFileReflectionOption);
        final ${glFileTokenName} fileToken = new ${glFileTokenImplName}();
        fileToken.tokenize(filename, fileTokenizingCallback, fileTokenizingOption);
        return result;
    }

    /**
     * Reflect(insert or update) token-file to this table.
     * 
     * @param inputStream Input stream. (NotNull and NotClosed)
     * @param tokenFileReflectionOption token-file-reflection-option. (NotNull and Required{delimiter and encoding})
     * @return Token-file-reflection-result. (NotNull)
     * @throws java.io.FileNotFoundException
     * @throws java.io.IOException
     */
    public ${glTokenFileReflectionResultName} reflectTokenFile(java.io.InputStream inputStream, ${glTokenFileReflectionOptionName} tokenFileReflectionOption) throws java.io.FileNotFoundException, java.io.IOException {
        assertObjectNotNull("inputStream", inputStream);
        assertFileTokenReflectionOption(tokenFileReflectionOption);

        final ${glTokenFileReflectionResultName} result = buildTokenFileReflectionResult();
        final ${glFileTokenizingCallbackName} fileTokenizingCallback = buildFileTokenReflectionFileTokenizingCallback(tokenFileReflectionOption, result);
        final ${glFileTokenizingOptionName} fileTokenizingOption = buildFileTokenReflectionFileTokenizingOption(tokenFileReflectionOption);
        final ${glFileTokenName} fileToken = new ${glFileTokenImplName}();
        fileToken.tokenize(inputStream, fileTokenizingCallback, fileTokenizingOption);
        return result;
    }

    protected void assertFileTokenReflectionOption(${glTokenFileReflectionOptionName} tokenFileReflectionOption) {
        assertObjectNotNull("tokenFileReflectionOption", tokenFileReflectionOption);

        final String encoding = tokenFileReflectionOption.getEncoding();
        final String delimiter = tokenFileReflectionOption.getDelimiter();
        assertStringNotNullAndNotTrimmedEmpty("encoding", encoding);
        assertObjectNotNull("delimiter", delimiter);
    }

    protected ${glTokenFileReflectionResultName} buildTokenFileReflectionResult() {
        final ${glTokenFileReflectionResultName} result = new ${glTokenFileReflectionResultName}();
        final java.util.List${database.filterGenericsString(${glTokenFileReflectionFailureName})} failureList = new java.util.ArrayList${database.filterGenericsString(${glTokenFileReflectionFailureName})}();
        result.setFailureList(failureList);
        return result;
    }

    protected ${glFileTokenizingCallbackName} buildFileTokenReflectionFileTokenizingCallback(${glTokenFileReflectionOptionName} tokenFileReflectionOption, final ${glTokenFileReflectionResultName} result) throws java.io.FileNotFoundException, java.io.IOException {
        assertObjectNotNull("tokenFileReflectionOption", tokenFileReflectionOption);

        final String encoding = tokenFileReflectionOption.getEncoding();
        final String delimiter = tokenFileReflectionOption.getDelimiter();
        final boolean interruptIfError = tokenFileReflectionOption.isInterruptIfError();
        assertStringNotNullAndNotTrimmedEmpty("encoding", encoding);
        assertObjectNotNull("delimiter", delimiter);
        final java.util.List${database.filterGenericsString(${glTokenFileReflectionFailureName})} failureList = result.getFailureList();
        assertObjectNotNull("failureList", failureList);

        final ${glFileTokenizingCallbackName} fileTokenizingCallback = new ${glFileTokenizingCallbackName}() {
            public void handleRowResource(${glFileTokenizingRowResourceName} fileTokenizingRowResource) {
                final ${glFileTokenizingHeaderInfoName} fileTokenizingHeaderInfo = fileTokenizingRowResource.getFileTokenizingHeaderInfo();
                final java.util.List${database.filterGenericsString('String')} columnNameList = fileTokenizingHeaderInfo.getColumnNameList();
                final java.util.List${database.filterGenericsString('String')} valueList = fileTokenizingRowResource.getValueList();

                // Set up columnNameList of result object.
                if (result.getColumnNameList() == null) {
                    result.setColumnNameList(columnNameList);
                }

                ${glEntityInterfaceName} entity = null;
                try {
                    // Create entity by the list of value composed of String.
                    entity = createEntityByStringValueList(columnNameList, valueList);

                    // Create or modify as non-strict.
                    doCreateOrUpdateNonstrict(entity);

                    // Increment successCount of result object.
                    result.incrementSuccessCount();
                } catch (RuntimeException e) {
                    if (interruptIfError) {
                        throw e;
                    }
                    final ${glTokenFileReflectionFailureName} failure = new ${glTokenFileReflectionFailureName}();
                    failure.setColumnNameList(columnNameList);
                    failure.setValueList(valueList);
                    failure.setRowString(fileTokenizingRowResource.getRowString());
                    failure.setRowNumber(fileTokenizingRowResource.getRowNumber());
                    failure.setLineNumber(fileTokenizingRowResource.getLineNumber());
                    if (entity != null) {
                        failure.setEntity(entity);
                    }
                    failure.setException(e);
                    failureList.add(failure);
                }
            }
        };
        return fileTokenizingCallback;
    }

    protected ${glEntityInterfaceName} createEntityByStringValueList(java.util.List${database.filterGenericsString('String')} columnNameList, java.util.List${database.filterGenericsString('String')} valueList) {
        final ${glMapStringBuilderName} builder = new ${glMapStringBuilderImplName}();
        builder.setMsMapMark(MAP_STRING_MAP_MARK);
        builder.setMsStartBrace(MAP_STRING_START_BRACE);
        builder.setMsEndBrace(MAP_STRING_END_BRACE);
        builder.setMsDelimiter(MAP_STRING_DELIMITER);
        builder.setMsEqual(MAP_STRING_EQUAL);
        builder.setColumnNameList(columnNameList);
        final String mapString = builder.buildFromList(valueList);

        final ${glEntityInterfaceName} entity = getDBMeta().newEntity();
        getDBMeta().acceptColumnValueMapString(entity, mapString);
        return entity;
    }

    protected ${glFileTokenizingOptionName} buildFileTokenReflectionFileTokenizingOption(${glTokenFileReflectionOptionName} tokenFileReflectionOption) throws java.io.FileNotFoundException, java.io.IOException {
        assertObjectNotNull("tokenFileReflectionOption", tokenFileReflectionOption);

        final String encoding = tokenFileReflectionOption.getEncoding();
        final String delimiter = tokenFileReflectionOption.getDelimiter();
        assertStringNotNullAndNotTrimmedEmpty("encoding", encoding);
        assertObjectNotNull("delimiter", delimiter);

        final ${glFileTokenizingOptionName} fileTokenizingOption = new ${glFileTokenizingOptionName}();
        fileTokenizingOption.setEncoding(encoding);
        fileTokenizingOption.setDelimiter(delimiter);
        if (tokenFileReflectionOption.isHandleEmptyAsNull()) {
            fileTokenizingOption.handleEmptyAsNull();
        }
        return fileTokenizingOption;
    }

#if ($database.isMakeDeprecated())

    /**
     * Reflect(insert or update) from separated-file.
     * 
     * @param filename Name of the file. (NotNull and NotEmpty)
     * @param encoding Encoding of the file. (NotNull and NotEmpty)
     * @param delimiter Delimiter of the file. (NotNull and NotEmpty)
     * @param batchCount Batch-count for transaction. If this value is 0, all records are done in one transaction.
     * @param isErrorContinue If true, this method continue in spite of throwing the exception.   
     * @return The list of OneEntityExceptionResult. (NotNull)
     * @throws java.io.FileNotFoundException
     * @throws java.io.IOException
     * @deprecated Please use reflectTokenFile()
     */
    public java.util.List${database.filterGenericsString('OneEntityExceptionResult')} reflectFromSeparatedFile(
            String filename, String encoding,
            String delimiter, int batchCount, boolean isErrorContinue
            ) throws java.io.FileNotFoundException, java.io.IOException {
        assertStringNotNullAndNotTrimmedEmpty("filename", filename);
        assertStringNotNullAndNotTrimmedEmpty("encoding", encoding);
        assertObjectNotNull("delimiter", delimiter);
        final java.util.List${database.filterGenericsString('OneEntityExceptionResult')} exceptionList = new java.util.ArrayList${database.filterGenericsString('OneEntityExceptionResult')}();

        java.io.FileInputStream fis = null;
        java.io.InputStreamReader ir = null;
        java.io.BufferedReader br = null;
        try {
            fis = new java.io.FileInputStream(filename);
            ir = new java.io.InputStreamReader(fis, encoding);
            br = new java.io.BufferedReader(ir);

            final ${glMapStringBuilderName} builder = new ${glMapStringBuilderImplName}();
            builder.setMsMapMark(MAP_STRING_MAP_MARK);
            builder.setMsStartBrace(MAP_STRING_START_BRACE);
            builder.setMsEndBrace(MAP_STRING_END_BRACE);
            builder.setMsDelimiter(MAP_STRING_DELIMITER);
            builder.setMsEqual(MAP_STRING_EQUAL);
            final java.util.List${database.filterGenericsString(${glEntityInterfaceName})} entityList = new java.util.ArrayList${database.filterGenericsString(${glEntityInterfaceName})}();
            int count = 0;
            while (true) {
                ++count;

                final String lineString = br.readLine();
                if (lineString == null) {
                    if (entityList.size() > 0) {
                        final java.util.List${database.filterGenericsString('OneEntityExceptionResult')} tmpList = reflectAfterSelectNewTx(entityList, isErrorContinue);
                        exceptionList.addAll(tmpList);
                        entityList.clear();
                    }
                    break;
                }
                if (count == 1) {
                    builder.setColumnNames(lineString.split(delimiter));
                    continue;
                }

                final String mapString = builder.buildByDelimiter(lineString, delimiter);
                final ${glEntityInterfaceName} entity = getDBMeta().newEntity();
                entity.acceptColumnValueMapString(mapString);
                entityList.add(entity);

                if (entityList.size() == batchCount) {
                    final java.util.List${database.filterGenericsString('OneEntityExceptionResult')} tmpList = reflectAfterSelectNewTx(entityList, isErrorContinue);
                    exceptionList.addAll(tmpList);
                    entityList.clear();
                }
            }
        } catch (java.io.FileNotFoundException e) {
            throw e;
        } catch (java.io.IOException e) {
            throw e;
        } finally {
            try {
                if (fis != null) {
                    fis.close();
                }
                if (ir != null) {
                    ir.close();
                }
                if (br != null) {
                    br.close();
                }
            } catch (java.io.IOException ignored) {
            }
        }
        return exceptionList;
    }

    /**
     * Reflect(insert or update) from separated-file.
     * 
     * @param entityList The list of entity that is reflection target. (NotNull)
     * @param isErrorContinue If true, this method continue in spite of throwing the exception.
     * @return The list of InsertOrUpdateExceptionResult. (NotNull)
     * @deprecated Please use reflectTokenFile()
     */
    public java.util.List${database.filterGenericsString('OneEntityExceptionResult')} reflectAfterSelectNewTx(java.util.List${database.filterGenericsString(${glEntityInterfaceName})} entityList,
            boolean isErrorContinue) {
        final java.util.List${database.filterGenericsString('OneEntityExceptionResult')} exceptionList = new java.util.ArrayList${database.filterGenericsString('OneEntityExceptionResult')}();
        for (final java.util.Iterator ite = entityList.iterator(); ite.hasNext(); ) {
            final ${glEntityInterfaceName} entity = (${glEntityInterfaceName})ite.next();
            try {
                createOrModifyAfterSelect(entity);
            } catch (RuntimeException e) {
                if (isErrorContinue) {
                    final OneEntityExceptionResult result = new OneEntityExceptionResult();
                    result.setPrimaryKeyMapString(entity.extractPrimaryKeyMapString());
                    result.setEntity(entity);
                    result.setException(e);
                    exceptionList.add(result);
                    continue;
                }
                throw e;
            }
        }
        return exceptionList;
    }
#end

}
