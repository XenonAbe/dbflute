${database.allClassCopyright}package ${glPackageBaseCommonBhvCoreCommand};

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import javax.sql.DataSource;

import org.seasar.extension.jdbc.ResultSetHandler;
import org.seasar.extension.jdbc.StatementFactory;
import org.seasar.extension.jdbc.ValueType;
import org.seasar.extension.jdbc.types.ValueTypes;
import org.seasar.dao.BeanMetaData;
import org.seasar.dao.BeanMetaDataFactory;

import ${glPackageBaseCommon}.${glEntityInterfaceName};
import ${glPackageBaseCommonBhvCore}.${glBehaviorCommand};
import ${glPackageBaseCommonBhvCore}.${glBehaviorCommandComponentSetup};
import ${glPackageBaseCommonBhvCore}.${glSqlExecution};
import ${glPackageBaseCommonCBean}.${glConditionBeanInterfaceName};
import ${glPackageBaseCommonCBean}.${glConditionBeanContextName};
import ${glPackageBaseCommonCBeanOutsidesql}.${glOutsideSqlContextName};
import ${glPackageBaseCommonCBeanOutsidesql}.${glOutsideSqlOptionName};
import ${glPackageBaseCommonS2Dao}.${glSelectDynamicCommand};
import ${glPackageBaseCommonS2DaoInternalRsHandler}.${glInternalBeanListMetaDataResultSetHandler};
import ${glPackageBaseCommonS2DaoInternalVarious}.${glInternalRowCreator};
import ${glPackageBaseCommonS2DaoInternalVarious}.${glInternalRelationRowCreator};

/**
 * @author ${database.ClassAuthor}
 */
public abstract class ${glAbstractBehaviorCommand} implements ${glBehaviorCommand}, ${glBehaviorCommandComponentSetup} {

    // ===================================================================================
    //                                                                           Attribute
    //                                                                           =========
    // -----------------------------------------------------
    //                                     Basic Information
    //                                     -----------------
    protected Class<? extends ${glEntityInterfaceName}> _entityType;
    protected String _tableDbName;
    protected String _behaviorClassName;
    protected boolean _initializeOnly;

    // -----------------------------------------------------
    //                                   Injection Component
    //                                   -------------------
    protected DataSource _dataSource;
    protected StatementFactory _statementFactory;
    protected BeanMetaDataFactory _beanMetaDataFactory;
    protected String _sqlFileEncoding;

    // ===================================================================================
    //                                                                             Factory
    //                                                                             =======
    // -----------------------------------------------------
    //                                          BeanMetaData
    //                                          ------------
    protected BeanMetaData createBeanMetaData() {
        return _beanMetaDataFactory.createBeanMetaData(_entityType);
    }

    // -----------------------------------------------------
    //                                          SqlExecution
    //                                          ------------
    protected ${glSqlExecution} createSelectExecution(Class<?> cbType, ResultSetHandler handler) {
        final ${glSelectDynamicCommand} cmd = createSelectDynamicCommand(handler);
        cmd.setArgNames(new String[] { "dto" });
        cmd.setArgTypes(new Class<?>[] { cbType });
        return cmd;
    }

    protected ${glSqlExecution} createSelectExecution(String sql, String[] argNames, Class<?>[] argTypes, ResultSetHandler handler) {
        final ${glSelectDynamicCommand} cmd = createSelectDynamicCommand(handler);
        cmd.setArgNames(new String[] { "dto" });
        cmd.setArgTypes(argTypes);
        return cmd;
    }

    protected ${glSqlExecution} createOutsideSqlSelectExecution(${glOutsideSqlContextName} outsideSqlContext) {
        // - - - - - - - - - - - - - - - - - - - - - - -
        // The attribute of Specified-OutsideSqlContext.
        // - - - - - - - - - - - - - - - - - - - - - - -
        final String productName = ${glConditionBeanContextName}.getDatabaseProductName();
        final String suffix = (productName != null ? "_" + productName.toLowerCase() : "");
        final String sql = outsideSqlContext.readFilteredOutsideSql(_sqlFileEncoding, suffix);
        final Object pmb = outsideSqlContext.getParameterBean();

        // - - - - - - - - - - - - - - -
        // The attribute of SqlCommand.
        // - - - - - - - - - - - - - - -
        final String[] argNames = (pmb != null ? new String[] {"pmb"} : new String[]{});
        final Class<?>[] argTypes = (pmb != null ? new Class<?>[] {pmb.getClass()} : new Class<?>[]{});

        // - - - - - - - - - - - - - - - -
        // Create customized BeanMetaData.
        // - - - - - - - - - - - - - - - -
        final BeanMetaData bmd = createBeanMetaData();
        final ResultSetHandler handler = createOutsideSqlBeanListResultSetHandler(bmd);

        // - - - - - - - - - - -
        // Register Sql-Command.
        // - - - - - - - - - - -
        return createSelectExecution(sql, argNames, argTypes, handler);
    }

    // -----------------------------------------------------
    //                                   SelectDynamicCommnd
    //                                   -------------------
    protected ${glSelectDynamicCommand} createSelectDynamicCommand(ResultSetHandler handler) {
        return new ${glSelectDynamicCommand}(_dataSource, _statementFactory, handler);
    }

    // -----------------------------------------------------
    //                                      ResultSetHandler
    //                                      ----------------
    protected ResultSetHandler createObjectResultSetHandler(BeanMetaData bmd) {
        final ${glInternalRowCreator} rowCreator = createInternalRowCreator(bmd);
        final ${glInternalRelationRowCreator} relationRowCreator = createInternalRelationRowCreator(bmd);
        return new ${glInternalBeanListMetaDataResultSetHandler}(bmd, rowCreator, relationRowCreator);
    }

    protected ResultSetHandler createBeanListMetaDataResultSetHandler(BeanMetaData bmd) {
        final ${glInternalRowCreator} rowCreator = createInternalRowCreator(bmd);
        final ${glInternalRelationRowCreator} relationRowCreator = createInternalRelationRowCreator(bmd);
        return new ${glInternalBeanListMetaDataResultSetHandler}(bmd, rowCreator, relationRowCreator);
    }

    protected ResultSetHandler createOutsideSqlBeanListResultSetHandler(BeanMetaData bmd) {
        final ValueType valueType = ValueTypes.getValueType(_entityType);
        if (valueType == null || !valueType.equals(ValueTypes.OBJECT)) {
            return new InternalObjectListResultSetHandler(valueType);
        }
        final ${glInternalRowCreator} rowCreator = createInternalRowCreator(bmd);
        final ${glInternalRelationRowCreator} relationRowCreator = createInternalRelationRowCreator(bmd);
        return new ${glInternalBeanListMetaDataResultSetHandler}(bmd, rowCreator, relationRowCreator);
    }

    protected static class InternalObjectListResultSetHandler implements ResultSetHandler {
        private ValueType valueType;
        public InternalObjectListResultSetHandler(ValueType valueType) {
            this.valueType = valueType;
        }
        public Object handle(ResultSet rs) throws SQLException {
            final List<Object> ret = new ArrayList<Object>();
            while (rs.next()) {
                ret.add(valueType.getValue(rs, 1));
            }
            return ret;
        }
    }

    protected ${glInternalRowCreator} createInternalRowCreator(BeanMetaData bmd) {
        final Class<?> clazz = bmd != null ? bmd.getBeanClass() : null;
        return ${glInternalRowCreator}.createInternalRowCreator(clazz);
    }

    protected ${glInternalRelationRowCreator} createInternalRelationRowCreator(BeanMetaData bmd) {
        return new ${glInternalRelationRowCreator}(); // Not yet implemented about performance tuning!
    }
	
    // ===================================================================================
    //                                                                   Argument Handling
    //                                                                   =================
    public ${glConditionBeanInterfaceName} getConditionBean(Object[] args) {
        if (args != null && args.length > 0 && args[0] instanceof ${glConditionBeanInterfaceName}) {
            return (${glConditionBeanInterfaceName})args[0];
        }
        return null; 
    }

    public String getOutsideSqlPath(Object[] args) {
        if (args != null && args.length > 0 && args[0] instanceof String) {
            return (String)args[0];
        }
        return null; 
    }

    public Object getOutsideSqlParameterBean(Object[] args) {
        if (args != null && args.length > 1) {
            return args[1];
        }
        return null; 
    }

    public ${glOutsideSqlOptionName} getOutsideSqlOption(Object[] args) {
        if (args != null && args.length > 2 && args[2] instanceof ${glOutsideSqlOptionName}) {
            return (${glOutsideSqlOptionName})args[2];
        }
        return null; 
    }

    public Object getResultTypeSpecification(Object[] args) { // When the outsideSql is for select.
        if (args != null && args.length > 3) {
            return (${glOutsideSqlOptionName})args[2];
        }
        return null; 
    }

    protected void assertOutsideSqlSelectArgument(Object[] args) {
        if (args.length != 4) {
            String msg = "Internal Error! OutsideSql should have 4 arguements: args.length=" + args.length;
            throw new IllegalStateException(msg);
        }
    }

    protected void assertOutsideSqlExecuteArgument(Object[] args) {
        if (args.length != 3) {
            String msg = "Internal Error! OutsideSql should have 4 arguements: args.length=" + args.length;
            throw new IllegalStateException(msg);
        }
    }

    // ===================================================================================
    //                                                                            Accessor
    //                                                                            ========
    // -----------------------------------------------------
    //                                     Basic Information
    //                                     -----------------
    public Class<? extends ${glEntityInterfaceName}> getEntityType() {
        return _entityType;
    }

    public void setEntityType(Class<? extends ${glEntityInterfaceName}> entityType) {
        _entityType = entityType;
    }

    public String getTableDbName() {
        return _tableDbName;
    }

    public void setTableDbName(String tableDbName) {
        _tableDbName = tableDbName;
    }

    public String getBehaviorClassName() {
        return _behaviorClassName;
    }

    public void setBehaviorClassName(String behaviorClassName) {
        _behaviorClassName = behaviorClassName;
    }

    public void setInitializeOnly(boolean initializeOnly) {
        _initializeOnly = initializeOnly;
    }

    public boolean isInitializeOnly() {
        return _initializeOnly;
    }

    // -----------------------------------------------------
    //                                   Injection Component
    //                                   -------------------
    public void setDataSource(DataSource dataSource) {
        _dataSource = dataSource;
    }

    public void setStatementFactory(StatementFactory statementFactory) {
        _statementFactory = statementFactory;
    }

    public void setBeanMetaDataFactory(BeanMetaDataFactory beanMetaDataFactory) {
        _beanMetaDataFactory = beanMetaDataFactory;
    }

    public void setSqlFileEncoding(String sqlFileEncoding) {
        _sqlFileEncoding = sqlFileEncoding;
    }
}
