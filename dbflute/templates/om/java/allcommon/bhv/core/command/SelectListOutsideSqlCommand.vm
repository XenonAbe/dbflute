${database.allClassCopyright}package ${glPackageBaseCommonBhvCoreCommand};

import org.seasar.extension.jdbc.ResultSetHandler;
import org.seasar.dao.BeanMetaData;

import ${glPackageBaseCommonBhvCore}.${glSqlExecution};
import ${glPackageBaseCommonBhvCore}.${glSqlExecutionCreator};
import ${glPackageBaseCommonCBean}.${glConditionBeanInterfaceName};
import ${glPackageBaseCommonCBean}.${glListResultBeanName};

/**
 * @author ${database.ClassAuthor}
 */
public class ${glSelectListOutsideSqlCommand} extends ${glAbstractBehaviorCommand} {

    // ===================================================================================
    //                                                                           Attribute
    //                                                                           =========
    // ===================================================================================
    //                                                                   Basic Information
    //                                                                   =================
    public String getBehaviorMethodName() {
        return "selectList";
    }

    public Class<?> getBehaviorMethodReturnType() {
        return ${glListResultBeanName}.class;
    }

    // ===================================================================================
    //                                                                  Detail Information
    //                                                                  ==================
    public boolean isConditionBean() {
        return false;
    }

    public boolean isOutsideSql() {
        return true;
    }

    public boolean isSelect() {
        return true;
    }

    public boolean isSelectCount() {
        return false;
    }

    // ===================================================================================
    //                                                               SqlExecution Handling
    //                                                               =====================
    public String buildSqlExecutionKey(Object[] args) {
        assertStatus("buildSqlExecutionKey");
        return generateSpecifiedOutsideSqlUniqueKey(args);
    }

    protected String generateSpecifiedOutsideSqlUniqueKey(Object[] args) {
        final String path = (String)args[0];
        final Object pmb = args[1];
        final ${glOutsideSqlOptionName} option = (${glOutsideSqlOptionName})args[2];
        Object resultTypeSpecification = null;
        if (args.length > 3) {
            resultTypeSpecification = args[3];
        }
        return ${glOutsideSqlContextName}.generateSpecifiedOutsideSqlUniqueKey(invocation.getMethod().getName(), path, pmb, option, resultTypeSpecification);
    }

    public ${glSqlExecutionCreator} createSqlExecutionCreator(Object[] args) {
        assertStatus("createSqlExecutionCreator");
        final Class<?> cbType = _conditionBeanType;
        return new ${glSqlExecutionCreator}() {
            public ${glSqlExecution} createSqlExecution() {
                BeanMetaData bmd = createBeanMetaData();
                ResultSetHandler handler = createBeanListMetaDataResultSetHandler(bmd);
                return createSelectExecution(cbType, handler);
            }
        };
    }

    // ===================================================================================
    //                                                                              Assert
    //                                                                              ======
    protected void assertStatus(String methodName) {
        if (_conditionBeanType == null) {
            String msg = "The property 'conditionBeanType' should not be null";
            msg = msg + " when you call " + methodName + "().";
            throw new IllegalStateException(msg);
        }
    }

    // ===================================================================================
    //                                                                      Basic Override
    //                                                                      ==============
    @Override
    public String toString() {
        return _behaviorClassName + "." + getBehaviorMethodName() + "()";
    }
}
