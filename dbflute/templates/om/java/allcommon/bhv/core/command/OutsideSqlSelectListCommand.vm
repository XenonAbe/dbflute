${database.allClassCopyright}package ${glPackageBaseCommonBhvCoreCommand};

import org.seasar.extension.jdbc.ResultSetHandler;
import org.seasar.dao.BeanMetaData;

import ${glPackageBaseCommonBhvCore}.${glSqlExecution};
import ${glPackageBaseCommonBhvCore}.${glSqlExecutionCreator};
import ${glPackageBaseCommonCBean}.${glConditionBeanContextName};
import ${glPackageBaseCommonCBean}.${glFetchNarrowingBeanContextName};
import ${glPackageBaseCommonCBean}.${glFetchNarrowingBeanInterfaceName};
import ${glPackageBaseCommonCBean}.${glListResultBeanName};
import ${glPackageBaseCommonCBeanOutsidesql}.${glOutsideSqlContextName};
import ${glPackageBaseCommonCBeanOutsidesql}.${glOutsideSqlOptionName};

/**
 * The behavior command for OutsideSql.selectList().
 * @author ${database.ClassAuthor}
 */
public class ${glSelectListOutsideSqlCommand} extends ${glAbstractBehaviorCommand} {

    // ===================================================================================
    //                                                                           Attribute
    //                                                                           =========

    // ===================================================================================
    //                                                                   Basic Information
    //                                                                   =================
    public String getBehaviorMethodName() {
        return "selectList";
    }

    public Class<?> getBehaviorMethodReturnType() {
        return ${glListResultBeanName}.class;
    }

    // ===================================================================================
    //                                                                  Detail Information
    //                                                                  ==================
    public boolean isConditionBean() {
        return false; // When the command is for outsideSql, it always be false.
    }

    public boolean isOutsideSql() {
        return true;
    }

    public boolean isProcedure() {
        return false;
    }

    public boolean isSelect() {
        return true;
    }

    public boolean isSelectCount() {
        return false; // When the command is for outsideSql, it always be false.
    }

    // ===================================================================================
    //                                                                    Process Callback
    //                                                                    ================
    public void beforeGettingSqlExecution(Object[] args) {
        assertOutsideSqlSelectArgument(args);
        final String path = getOutsideSqlPath(args);
        final Object pmb = getOutsideSqlParameterBean(args);
        final ${glOutsideSqlOptionName} option = getOutsideSqlOption(args);
        final Object resultTypeSpecification = getResultTypeSpecification(args);
        final ${glOutsideSqlContextName} outsideSqlContext = new ${glOutsideSqlContextName}();
        outsideSqlContext.setDynamicBinding(option.isDynamicBinding());
        outsideSqlContext.setOffsetByCursorForcedly(option.isAutoPaging());
        outsideSqlContext.setLimitByCursorForcedly(option.isAutoPaging());
        outsideSqlContext.setOutsideSqlPath(path);
        outsideSqlContext.setParameterBean(pmb);
        outsideSqlContext.setResultTypeSpecification(resultTypeSpecification);
        outsideSqlContext.setMethodName(getBehaviorMethodName());
        outsideSqlContext.setStatementConfig(option.getStatementConfig());
        outsideSqlContext.setTableDbName(option.getTableDbName());
		outsideSqlContext.setupBehaviorQueryPathIfNeeds();
        ${glOutsideSqlContextName}.setOutsideSqlContextOnThread(outsideSqlContext);

        // Set up fetchNarrowingBean.
        setupOutsideSqlFetchNarrowingBean(pmb, option);
    }

    protected void setupOutsideSqlFetchNarrowingBean(Object pmb, ${glOutsideSqlOptionName} option) {
        if (pmb == null || !${glFetchNarrowingBeanContextName}.isTheTypeFetchNarrowingBean(pmb.getClass())) {
            return;
        }
        final ${glFetchNarrowingBeanInterfaceName} fetchNarrowingBean = (${glFetchNarrowingBeanInterfaceName})pmb;
        if (option.isManualPaging()) {
            fetchNarrowingBean.ignoreFetchNarrowing();
        }
        ${glFetchNarrowingBeanContextName}.setFetchNarrowingBeanOnThread(fetchNarrowingBean);
    }

    public void afterExecuting(Object[] args) {
    }

    // ===================================================================================
    //                                                               SqlExecution Handling
    //                                                               =====================
    public String buildSqlExecutionKey(Object[] args) {
        assertStatus("buildSqlExecutionKey");
        return generateSpecifiedOutsideSqlUniqueKey(args);
    }

    protected String generateSpecifiedOutsideSqlUniqueKey(Object[] args) {
        final String path = getOutsideSqlPath(args);
        final Object pmb = getOutsideSqlParameterBean(args);
        final ${glOutsideSqlOptionName} option = getOutsideSqlOption(args);
        final Object resultTypeSpecification = getResultTypeSpecification(args);
        return ${glOutsideSqlContextName}.generateSpecifiedOutsideSqlUniqueKey(getBehaviorMethodName(), path, pmb, option, resultTypeSpecification);
    }

    public ${glSqlExecutionCreator} createSqlExecutionCreator(Object[] args) {
        assertStatus("createSqlExecutionCreator");
        return new ${glSqlExecutionCreator}() {
            public ${glSqlExecution} createSqlExecution() {
                final ${glOutsideSqlContextName} outsideSqlContext = ${glOutsideSqlContextName}.getOutsideSqlContextOnThread();
                return createOutsideSqlSelectExecution(outsideSqlContext);
            }
        };
    }

    // ===================================================================================
    //                                                                              Assert
    //                                                                              ======
    protected void assertStatus(String methodName) {
    }

    // ===================================================================================
    //                                                                      Basic Override
    //                                                                      ==============
    @Override
    public String toString() {
        return _behaviorClassName + "." + getBehaviorMethodName() + "()";
    }
}
