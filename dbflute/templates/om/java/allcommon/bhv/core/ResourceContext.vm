${database.allClassCopyright}package ${glPackageBaseCommonBhvCore};

import ${glPackageBaseCommon}.${glDBDef};
import ${glPackageBaseCommonSqlClause}.${glSqlClauseCreator};

/**
 * The context of internal resource.
 * @author ${database.ClassAuthor}
 */
public class ${glResourceContext} {

    // ===================================================================================
    //                                                                        Thread Local
    //                                                                        ============
    /** The thread-local for this. */
    private static final ThreadLocal<${glResourceContext}> threadLocal = new ThreadLocal<${glResourceContext}>();

    /**
     * Get the context of resource by the key.
     * @return The context of resource. (Nullable)
     */
    public static ${glResourceContext} getResourceContextOnThread() {
        return threadLocal.get();
    }

    /**
     * Set the context of resource.
     * @param resourceCountext The context of resource. (NotNull)
     */
    public static void setResourceContextOnThread(${glResourceContext} resourceCountext) {
        threadLocal.set(resourceCountext);
    }

    /**
     * Is existing the context of resource on thread?
     * @return Determination.
     */
    public static boolean isExistResourceContextOnThread() {
        return (threadLocal.get() != null);
    }

    /**
     * Clear the context of resource on thread.
     */
    public static void clearResourceContextOnThread() {
        threadLocal.set(null);
    }

    // ===================================================================================
    //                                                                         Easy-to-Use
    //                                                                         ===========
    public static ${glDBDef} currentDBDef() {
        if (!isExistResourceContextOnThread()) {
            return ${glDBDef}.Unknown;
        }
        ${glDBDef} currentDBDef = getResourceContextOnThread().getCurrentDBDef();
        if (currentDBDef == null) {
            return ${glDBDef}.Unknown;
        }
        return currentDBDef;
    }

    public static boolean isCurrentDBDef(${glDBDef} targetDBDef) {
        return currentDBDef().equals(targetDBDef);
    }

    /**
     * Is the SQLException from unique constraint? {Use both SQLState and ErrorCode}
     * @param sqlState SQLState of the SQLException. (Nullable)
     * @param errorCode ErrorCode of the SQLException. (Nullable)
     * @return Is the SQLException from unique constraint?
     */
    public static boolean isUniqueConstraintException(String sqlState, Integer errorCode) {
        if (!isExistResourceContextOnThread()) {
            return false;
        }
        ${glSqlClauseCreator} sqlClauseCreator = getResourceContextOnThread().getSqlClauseCreator();
        if (sqlClauseCreator == null) {
            return false;
        }
        return sqlClauseCreator.createSqlClause("dummy").isUniqueConstraintException(sqlState, errorCode);
    }
    
    public static String outsideSqlPackage() {
        if (!isExistResourceContextOnThread()) {
            return null;
        }
        return getResourceContextOnThread().getOutsideSqlPackage();
    }

    // ===================================================================================
    //                                                                           Attribute
    //                                                                           =========
    protected ${glDBDef} _currentDBDef;
    protected ${glSqlClauseCreator} _sqlClauseCreator;
    protected String _outsideSqlPackage;
    protected String _logDateFormat;
    protected String _logTimestampFormat;

    // ===================================================================================
    //                                                                            Accessor
    //                                                                            ========
    public ${glDBDef} getCurrentDBDef() {
        return _currentDBDef;
    }

    public void setCurrentDBDef(${glDBDef} currentDBDef) {
        _currentDBDef = currentDBDef;
    }

    public ${glSqlClauseCreator} getSqlClauseCreator() {
        return _sqlClauseCreator;
    }

    public void setSqlClauseCreator(${glSqlClauseCreator} sqlClauseCreator) {
        _sqlClauseCreator = sqlClauseCreator;
    }

    public String getOutsideSqlPackage() {
        return _outsideSqlPackage;
    }

    public void setOutsideSqlPackage(String outsideSqlPackage) {
        _outsideSqlPackage = outsideSqlPackage;
    }

    public String getLogDateFormat() {
        return _logDateFormat;
    }

    public void setLogDateFormat(String logDateFormat) {
        _logDateFormat = logDateFormat;
    }

    public String getLogTimestampFormat() {
        return _logTimestampFormat;
    }

    public void setLogTimestampFormat(String logTimestampFormat) {
        _logTimestampFormat = logTimestampFormat;
    }
}
