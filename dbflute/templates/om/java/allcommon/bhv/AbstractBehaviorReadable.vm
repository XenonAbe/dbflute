#set ($myClassName = "${glBehaviorReadableAbstractName}")

package ${glPackageBaseCommonBhv};

import ${glPackageBaseCommon}.${glDaoSelectorInterfaceName};
import ${glPackageBaseCommon}.${glEntityInterfaceName};
#if ($database.isAvailableGenerics())
import ${glPackageBaseCommonBhvSetup}.${glConditionBeanSetupperName};
import ${glPackageBaseCommonBhvSetup}.${glValueLabelSetupperName};
import ${glPackageBaseCommonBhvSetup}.${glValueLabelBoxName};
#end
import ${glPackageBaseCommonCBean}.${glConditionBeanInterfaceName};
import ${glPackageBaseCommonCBean}.${glListResultBeanName};
import ${glPackageBaseCommonCBean}.${glPagingBeanInterfaceName};
import ${glPackageBaseCommonCBean}.${glPagingResultBeanName};

import ${glPackageBaseCommonBhvBatch}.${glTokenFileOutputOptionName};
import ${glPackageBaseCommonBhvBatch}.${glTokenFileOutputResultName};

import ${glPackageBaseCommonHelperTokenFile}.${glFileMakingOptionName};
import ${glPackageBaseCommonHelperTokenFile}.${glFileMakingHeaderInfoName};
import ${glPackageBaseCommonHelperTokenFile}.${glFileMakingSimpleFacadeName};
import ${glPackageBaseCommonHelperTokenFileImpl}.${glFileMakingSimpleFacadeImplName};

/**
 * The abstract class of behavior-readable.
 * 
 * @author ${database.ClassAuthor}
 */
public abstract class $myClassName implements ${glBehaviorReadableInterfaceName} {

    // ===================================================================================
    //                                                                           Attribute
    //                                                                           =========
    /** Dao-selector instance. */
    protected ${glDaoSelectorInterfaceName} _daoSelector;

    // ===================================================================================
    //                                                                         Constructor
    //                                                                         ===========
    /**
     * Constructor.
     */
    public ${myClassName}() {
    }

    // ===================================================================================
    //                                                                        Dao Accessor
    //                                                                        ============
    /**
     * ${database.ImplementComment}
     * 
     * @return Dao-selector.
     */
    public ${glDaoSelectorInterfaceName} getDaoSelector() {
        return _daoSelector;
    }

    /**
     * ${database.ImplementComment}
     * 
     * @param value Dao-selector.
     */
    public void setDaoSelector(${glDaoSelectorInterfaceName} value) {
        _daoSelector = value;
    }

    // ===================================================================================
    //                                                                     Delegate Method
    //                                                                     ===============
    /**
     * ${database.ImplementComment}
     * 
     * @return All count.
     */
    public int callGetCountAll() {
        final java.lang.reflect.Method mtd = getMethod(getDaoReadable().getClass(), "getCountAll", new Class[]{});
        final Object result = invoke(mtd, getDaoReadable(), new Object[]{});
        return ((Integer)result).intValue();
    }

    /**
     * ${database.ImplementComment}
     * 
     * @return All list. (NotNull)
     */
    public java.util.List${database.filterGenericsString(${glEntityInterfaceName})} callGetListAll() {
        final java.lang.reflect.Method mtd = getMethod(getDaoReadable().getClass(), "getListAll", new Class[]{});
        final Object result = invoke(mtd, getDaoReadable(), new Object[]{});
        return (java.util.List${database.filterGenericsString(${glEntityInterfaceName})})result;
    }

    /**
     * ${database.ImplementComment}
     * 
     * @param cb Condition-bean that the type is condition-bean-interface. (NotNull)
     * @return Read count. (NotNull)
     */
    public int callReadCount(${glConditionBeanInterfaceName} cb) {
        assertConditionBeanNotNull(cb);
        final Class[] types = new Class[]{cb.getClass()};
        final java.lang.reflect.Method mtd = getMethod(getDaoReadable().getClass(), "selectCount", types);
        final Object result = invoke(mtd, getDaoReadable(), new Object[]{cb});
        return ((Integer)result).intValue();
    }

    /**
     * ${database.ImplementComment}
     * 
     * @param cb Condition-bean that the type is condition-bean-interface. (NotNull)
     * @return Read entity. If the select result is zero, it returns null. (Nullable)
     */
    public ${glEntityInterfaceName} callReadEntity(${glConditionBeanInterfaceName} cb) {
        assertConditionBeanNotNull(cb);
        final Class[] types = new Class[]{cb.getClass()};
        final java.lang.reflect.Method mtd = getMethod(getDaoReadable().getClass(), "selectEntity", types);
        final Object result = invoke(mtd, getDaoReadable(), new Object[]{cb});
        return (${glEntityInterfaceName})result;
    }

    /**
     * ${database.ImplementComment}
     * 
     * @param cb Condition-bean that the type is condition-bean-interface. (NotNull)
     * @return Read list. If the select result is zero, it returns empty list. (NotNull)
     */
    public java.util.List${database.filterGenericsString(${glEntityInterfaceName})} callReadList(${glConditionBeanInterfaceName} cb) {
        assertConditionBeanNotNull(cb);
        final Class[] types = new Class[]{cb.getClass()};
        final java.lang.reflect.Method mtd = getMethod(getDaoReadable().getClass(), "selectList", types);
        final Object result = invoke(mtd, getDaoReadable(), new Object[]{cb});
        return (java.util.List${database.filterGenericsString(${glEntityInterfaceName})})result;
    }

    private java.lang.reflect.Method getMethod(Class clazz, String methodName, Class[] argTypes) {
        try {
            return clazz.getMethod(methodName, argTypes);
        } catch (NoSuchMethodException ex) {
            String msg = "class=" + clazz + " method=" + methodName + "-" + java.util.Arrays.asList(argTypes);
            throw new RuntimeException(msg, ex);
        }
    }

    private Object invoke(java.lang.reflect.Method method, Object target, Object[] args) {
        try {
            return method.invoke(target, args);
        } catch (java.lang.reflect.InvocationTargetException ex) {
            Throwable t = ex.getCause();
            if (t instanceof RuntimeException) {
                throw (RuntimeException) t;
            }
            if (t instanceof Error) {
                throw (Error) t;
            }
            String msg = "target=" + target + " method=" + method + "-" + java.util.Arrays.asList(args);
            throw new RuntimeException(msg, ex);
        } catch (IllegalAccessException ex) {
            String msg = "target=" + target + " method=" + method + "-" + java.util.Arrays.asList(args);
            throw new RuntimeException(msg, ex);
        }
    }

    // =====================================================================================
    //                                                                         Basic Get All
    //                                                                         =============
    /**
     * Get count all.
     * 
     * @return Count all.
     */
    public int getCountAll() {
        return callGetCountAll();
    }

    // =====================================================================================
    //                                                                      Basic Read Count
    //                                                                      ================
    /**
     * ${database.ImplementComment}
     * 
     * @param cb Condition-bean. This condition-bean should not be set up about fetch-scope. (NotNull)
     * @return Read count. (NotNull)
     */
    public int readCount(${glConditionBeanInterfaceName} cb) {
        assertConditionBeanNotNull(cb);
        return callReadCount(cb);
    }

    // =====================================================================================
    //                                                                     Basic Read Entity
    //                                                                     =================
    /**
     * ${database.ImplementComment}
     * 
     * @param cb Condition-bean. (NotNull)
     * @return Read entity. (Nullalble)
     * @exception ${glPackageBaseCommonException}.${glRecordHasOverlappedException}
     */
    public ${glEntityInterfaceName} readEntity(${glConditionBeanInterfaceName} cb) {
        assertConditionBeanNotNull(cb);
        final java.util.List${database.filterGenericsString(${glEntityInterfaceName})} ls = readList(cb);
        if (ls.isEmpty()) {
            return null;
        }
        assertRecordHasBeenSelectedAsOne(ls, cb);
        return (${glEntityInterfaceName})ls.get(0);
    }

    /**
     * ${database.ImplementComment}
     * 
     * @param cb Condition-bean. (NotNull)
     * @return Read entity. (NotNull)
     * @exception ${glPackageBaseCommonException}.${glRecordHasAlreadyBeenDeletedException}
     * @exception ${glPackageBaseCommonException}.${glRecordHasOverlappedException}
     */
    public ${glEntityInterfaceName} readEntityWithDeletedCheck(${glConditionBeanInterfaceName} cb) {
        assertConditionBeanNotNull(cb);
        final java.util.List${database.filterGenericsString(${glEntityInterfaceName})} ls = readList(cb);
        assertRecordHasNotBeenDeleted(ls, cb);
        assertRecordHasBeenSelectedAsOne(ls, cb);
        return (${glEntityInterfaceName})ls.get(0);
    }

    // =====================================================================================
    //                                                                       Basic Read List
    //                                                                       ===============
    /**
     * ${database.ImplementComment}
     * 
     * @param cb Condition-bean.
     * @return List-result-bean. If the select result is zero, it returns empty list. (NotNull)
     */
    public ${glListResultBeanName}${database.filterGenericsString(${glEntityInterfaceName})} readList(${glConditionBeanInterfaceName} cb) {
        assertConditionBeanNotNull(cb);
        return new ResultBeanBuilder${database.filterGenericsString(${glEntityInterfaceName})}(this).buildListResultBean(cb, callReadList(cb));
    }

    /**
     * ${database.ImplementComment}
     * 
     * @param cb Condition-bean. (NotNull)
     * @return Read page. (NotNull)
     */
    public ${glPagingResultBeanName}${database.filterGenericsString(${glEntityInterfaceName})} readPage(final ${glConditionBeanInterfaceName} cb) {
        assertConditionBeanNotNull(cb);
        return readPage(cb, new SelectPageSimpleInvoker${database.filterGenericsString(${glEntityInterfaceName})}(this));
    }

    /**
     * ${database.ImplementComment}
     * 
     * @param cb Condition-bean. (NotNull)
     * @param invoker Select-page-invoker (NotNull)
     * @return Read page. (NotNull)
     */
    public ${glPagingResultBeanName}${database.filterGenericsString(${glEntityInterfaceName})} readPage(final ${glConditionBeanInterfaceName} cb, SelectPageInvoker${database.filterGenericsString(${glEntityInterfaceName})} invoker) {
        assertConditionBeanNotNull(cb);
        final SelectPageCallback${database.filterGenericsString(${glEntityInterfaceName})} pageCallback = new SelectPageCallback${database.filterGenericsString(${glEntityInterfaceName})}() {
            public ${glPagingBeanInterfaceName} getPagingBean() { return cb; }
            public int selectCountIgnoreFetchScope() {
                return readCount(cb);
            }
            public java.util.List${database.filterGenericsString(${glEntityInterfaceName})} selectListWithFetchScope() {
                return readList(cb);
            }
        };
        return invoker.invokeSelectPage(pageCallback);
    }

    /**
     * Assert that record has not been deleted.
     * 
     * @param entity Selected entity.
     * @param searchKey4log Search-key for Logging.
     * @exception ${glPackageBaseCommonException}.${glRecordHasAlreadyBeenDeletedException}
     */
    protected void assertRecordHasNotBeenDeleted(${glPackageBaseCommon}.${glEntityInterfaceName} entity, Object searchKey4log) {
        if (entity == null) {
            String msg = "The record has already been deleted by other thread: searchKey=" + searchKey4log;
            throw new ${glPackageBaseCommonException}.${glRecordHasAlreadyBeenDeletedException}(msg);
        }
    }

    /**
     * Assert that record has not been deleted.
     * 
     * @param ls Selected list.
     * @param searchKey4log Search-key for Logging.
     * @exception ${glPackageBaseCommonException}.${glRecordHasAlreadyBeenDeletedException}
     */
    protected void assertRecordHasNotBeenDeleted(java.util.List ls, Object searchKey4log) {
        if (ls == null || ls.isEmpty()) {
            String msg = "The record has already been deleted by other thread: searchKey=" + searchKey4log;
            throw new ${glPackageBaseCommonException}.${glRecordHasAlreadyBeenDeletedException}(msg);
        }
    }

    /**
     * Assert that record has been selected as one.
     * 
     * @param ls Selected list.
     * @param searchKey4log Search-key for Logging.
     * @exception ${glPackageBaseCommonException}.${glRecordHasAlreadyBeenDeletedException}
     * @exception ${glPackageBaseCommonException}.${glRecordHasOverlappedException}
     */
    protected void assertRecordHasBeenSelectedAsOne(java.util.List ls, Object searchKey4log) {
        if (ls == null || ls.isEmpty()) {
            String msg = "The record has already been deleted by other thread: searchKey=" + searchKey4log;
            throw new ${glPackageBaseCommonException}.${glRecordHasAlreadyBeenDeletedException}(msg);
        }
        if (ls.size() != 1) {
            String msg = "This selected contents should be only one: searchKey=" + searchKey4log;
            msg = msg + " resultCount=" + ls.size();
            throw new ${glPackageBaseCommonException}.${glRecordHasOverlappedException}(msg);
        }
    }

    /**
     * Assert that selected count has not exceeded max count.
     * 
     * @param selectedCount Selected count.
     * @param maxCount Max count.
     * @param clauseObject Clause object for exception message.
     * @exception ${glPackageBaseCommonException}.${glSelectedCountExceedMaxCountExceptionName}
     */
    protected void assertSelectedCountHasNotExceededMaxCount(int selectedCount, int maxCount, Object clauseObject) {
        if (selectedCount > maxCount) {
            String msg = "Selected count[" + selectedCount + "] has exceeded max count[" + maxCount + "]: clauseObject=" + clauseObject;
            throw new ${glPackageBaseCommonException}.${glSelectedCountExceedMaxCountExceptionName}(msg, selectedCount, maxCount);
        }
    }

#if ($database.isAvailableGenerics())
    // ===================================================================================
    //                                                                      Various Select
    //                                                                      ==============
    /**
     * Select value-label list.
     * 
     * @param cb Condition-bean. (NotNull)
     * @param valueLabelSetupper Value-label-setupper. (NotNull)
     * @return Value-label list. (NotNull)
     */
    protected <E> java.util.List<java.util.Map<String, Object>> createValueLabelList(${glListResultBeanName}<E> ls, ${glValueLabelSetupperName}<E> valueLabelSetupper) {
        final java.util.List<java.util.Map<String, Object>> valueLabelList = new java.util.ArrayList<java.util.Map<String, Object>>();
        final ${glValueLabelBoxName} box = new ${glValueLabelBoxName}();
        for (E entity : ls) {
            final java.util.Map<String, Object> valueLabel = new java.util.HashMap<String, Object>();
            valueLabelSetupper.setup(box, entity);
            valueLabel.put("value", box.getValue());
            valueLabel.put("label", box.getLabel());
            valueLabelList.add(valueLabel);
        }
        return valueLabelList;
    }
#end

    // ===================================================================================
    //                                                                          Token File
    //                                                                          ==========
    /**
     * Output token-file from this table records.
     * 
     * @param cb Condition-bean. (NotNull)
     * @param filename Name of the file. (NotNull and NotEmpty)
     * @param tokenFileOutputOption token-file-output-option. (NotNull and Required{delimiter and encoding})
     * @return Token-file-output-result. (NotNull)
     * @throws java.io.FileNotFoundException
     * @throws java.io.IOException
     */
    public ${glTokenFileOutputResultName} outputTokenFile(${glConditionBeanInterfaceName} cb, String filename, ${glTokenFileOutputOptionName} tokenFileOutputOption) throws java.io.FileNotFoundException, java.io.IOException {
        assertConditionBeanNotNull(cb);
        assertStringNotNullAndNotTrimmedEmpty("filename", filename);
        assertObjectNotNull("tokenFileOutputOption", tokenFileOutputOption);

        final java.util.List${database.filterGenericsString(${glEntityInterfaceName})} ls = readList(cb);
        java.util.List${database.filterGenericsString('java.util.List<String>')} rowList = new java.util.ArrayList${database.filterGenericsString('java.util.List<String>')}();
        for (java.util.Iterator ite = ls.iterator(); ite.hasNext(); ) {
            final ${glEntityInterfaceName} entity = (${glEntityInterfaceName})ite.next();
            final java.util.List${database.filterGenericsString('String')} valueList = getDBMeta().convertToColumnStringValueList(entity);
            rowList.add(valueList);
        }
        final ${glFileMakingSimpleFacadeName} fileMakingSimpleFacade = new ${glFileMakingSimpleFacadeImplName}();
        final ${glFileMakingOptionName} fileMakingOption = tokenFileOutputOption.getFileMakingOption();
        final ${glFileMakingHeaderInfoName} fileMakingHeaderInfo = new ${glFileMakingHeaderInfoName}();
        fileMakingHeaderInfo.setColumnNameList(getDBMeta().getColumnDbNameList());
        fileMakingOption.setFileMakingHeaderInfo(fileMakingHeaderInfo);
        fileMakingSimpleFacade.makeFromRowList(filename, rowList, fileMakingOption);
        final ${glTokenFileOutputResultName} tokeFileOutputResult = new ${glTokenFileOutputResultName}();
        tokeFileOutputResult.setSelectedList(ls);
        return tokeFileOutputResult;
    }

    // ===================================================================================
    //                                                                              Helper
    //                                                                              ======
    /**
     * To lower case if the type is String.
     * 
     * @param obj Object. (Nullable)
     * @return Lower object. (Nullable)
     */
    protected Object toLowerCaseIfString(Object obj) {
        if (obj != null && obj instanceof String) {
            return ((String)obj).toLowerCase();
        }
        return obj;
    }

    // ----------------------------------------------------------------
    //                                                    Assert Object
    //                                                    -------------
    /**
     * Assert that the object is not null.
     * 
     * @param variableName Variable name. (NotNull)
     * @param value Value. (NotNull)
     * @exception IllegalArgumentException
     */
    protected void assertObjectNotNull(String variableName, Object value) {
        if (variableName == null) {
            String msg = "The value should not be null: variableName=" + variableName + " value=" + value;
            throw new IllegalArgumentException(msg);
        }
        if (value == null) {
            String msg = "The value should not be null: variableName=" + variableName;
            throw new IllegalArgumentException(msg);
        }
    }

    /**
     * Assert that the entity is not null.
     * 
     * @param entity Entity. (NotNull)
     */
    protected void assertEntityNotNull(${glEntityInterfaceName} entity) {
        assertObjectNotNull("entity", entity);
    }

    /**
     * Assert that the condition-bean is not null.
     * 
     * @param cb Condition-bean. (NotNull)
     */
    protected void assertConditionBeanNotNull(${glPackageBaseCommonCBean}.${glConditionBeanInterfaceName} cb) {
        assertObjectNotNull("cb", cb);
    }

    /**
     * Assert that the entity has primary-key value.
     * 
     * @param entity Entity. (NotNull)
     */
    protected void assertEntityNotNullAndHasPrimaryKeyValue(${glEntityInterfaceName} entity) {
        assertEntityNotNull(entity);
        if (!entity.hasPrimaryKeyValue()) {
            String msg = "The entity must should primary-key: entity=" + entity;
            throw new IllegalArgumentException(msg + entity);
        }
    }

    // ----------------------------------------------------------------
    //                                                    Assert String
    //                                                    -------------
    /**
     * Assert that the entity is not null and not trimmed empty.
     * 
     * @param variableName Variable name. (NotNull)
     * @param value Value. (NotNull)
     */
    protected void assertStringNotNullAndNotTrimmedEmpty(String variableName, String value) {
        assertObjectNotNull("variableName", variableName);
        assertObjectNotNull(variableName, value);
        if (value.trim().length() ==0) {
            String msg = "The value should not be empty: variableName=" + variableName + " value=" + value;
            throw new IllegalArgumentException(msg);
        }
    }

    // ----------------------------------------------------------------
    //                                                      Assert List
    //                                                      -----------
    /**
     * Assert that the list is empty.
     * 
     * @param ls List. (NotNull)
     */
    protected void assertListNotNullAndEmpty(java.util.List ls) {
        assertObjectNotNull("ls", ls);
        if (!ls.isEmpty()) {
            String msg = "The list should be empty: ls=" + ls.toString();
            throw new IllegalArgumentException(msg);
        }
    }

    /**
     * Assert that the list is not empty.
     * 
     * @param ls List. (NotNull)
     */
    protected void assertListNotNullAndNotEmpty(java.util.List ls) {
        assertObjectNotNull("ls", ls);
        if (ls.isEmpty()) {
            String msg = "The list should not be empty: ls=" + ls.toString();
            throw new IllegalArgumentException(msg);
        }
    }

    /**
     * Assert that the list having only one.
     * 
     * @param ls List. (NotNull)
     */
    protected void assertListNotNullAndHasOnlyOne(java.util.List ls) {
        assertObjectNotNull("ls", ls);
        if (ls.size() != 1) {
            String msg = "The list should contain only one object: ls=" + ls.toString();
            throw new IllegalArgumentException(msg);
        }
    }
}
