${database.allClassCopyright}package ${glPackageBaseCommonBhv};

import ${glPackageBaseCommon}.${glDaoWritableInterfaceName};
import ${glPackageBaseCommon}.${glEntityInterfaceName};
import ${glPackageBaseCommonBhvBatch}.${glTokenFileReflectionOptionName};
import ${glPackageBaseCommonBhvBatch}.${glTokenFileReflectionResultName};

/**
 * The interface of behavior-writable.
 * 
 * @author ${database.ClassAuthor}
 */
public interface ${glBehaviorWritableInterfaceName} extends ${glBehaviorReadableInterfaceName} {

    /**
     * Get dao-writable.
     * 
     * @return Dao-writable. (NotNull)
     */
    public ${glDaoWritableInterfaceName} getDaoWritable();

    /**
     * Create entity. (Delegate-Method)
     * 
     * @param entity Entity that the type is entity-interface. (NotNull)
     * @return Inserted count.
     */
    public int callCreate(${glEntityInterfaceName} entity);

    /**
     * Modify entity. (Delegate-Method)
     * {modified only}
     * 
     * @param entity Entity that the type is entity-interface. (NotNull)
     * @return Updated count.
     */
    public int callModify(${glEntityInterfaceName} entity);

    /**
     * Remove entity. (Delegate-Method)
     * 
     * @param entity Entity that the type is entity-interface. (NotNull)
     * @return Deleted count.
     */
    public int callRemove(${glEntityInterfaceName} entity);

    /**
     * Create several entity-list. (Delegate-Method)
     * 
     * @param entityList Entity-list that the type is entity-interface. (NotNull)
     * @return Inserted count.
     */
    public int callCreateList(java.util.List${database.filterGenericsString(${glEntityInterfaceName})} entityList);

    /**
     * Modify several entity-list. (Delegate-Method)
     * 
     * @param entityList Entity-list that the type is entity-interface. (NotNull)
     * @return Updated count.
     */
    public int callModifyList(java.util.List${database.filterGenericsString(${glEntityInterfaceName})} entityList);

    /**
     * Remove several entity-list. (Delegate-Method)
     * 
     * @param entityList Entity-list that the type is entity-interface. (NotNull)
     * @return Deleted count.
     */
    public int callRemoveList(java.util.List${database.filterGenericsString(${glEntityInterfaceName})} entityList);

    // =====================================================================================
    //                                                                   Basic Entity Update
    //                                                                   ===================
    /**
     * Create.
     * 
     * @param entity Entity. (NotNull)
     */
    public void create(${glPackageBaseCommon}.${glEntityInterfaceName} entity);

    /**
     * Modify.
     * 
     * @param entity Entity. (NotNull)
     */
    public void modify(${glPackageBaseCommon}.${glEntityInterfaceName} entity);

    /**
     * Modify non strict.
     * 
     * @param entity Entity. (NotNull)
     * @exception ${glPackageBaseCommonException}.${glRecordHasAlreadyBeenDeletedException}
     * @exception ${glPackageBaseCommonException}.${glRecordHasOverlappedException}
     */
    public void modifyNonstrict(${glEntityInterfaceName} entity);

    /**
     * Modify after select. <br />
     * {modify: modified only}
     * <pre>
     * The merit of this method is only Deleted-Check before updating!
     * If you don't want the merit, please use update().
     * And the demerit of this method is as follows:
     *   : If the entity does not have the optimistic lock value, for example version-no and timestamp,
     *   : it does not throw optimistic lock exception. It can updates.
     * </pre>
     * @param entity Entity.
     * @exception ${glPackageBaseCommonException}.${glRecordHasAlreadyBeenDeletedException}
     */
    public void modifyAfterSelect(${glPackageBaseCommon}.${glEntityInterfaceName} entity);

    /**
     * Create or modify. <br />
     * {modify: modified only} <br />
     * This method is faster than createOrModifyAfterSelect().
     * 
     * @param entity Entity. This must contain primary-key value at least(Except use identity). (NotNull)
     */
    public void createOrModify(${glPackageBaseCommon}.${glEntityInterfaceName} entity);

    /**
     * Create or modify non strict. <br />
     * {modify: modified only} <br />
     * This method is faster than createOrModifyAfterSelect().
     * 
     * @param entity Entity. This must contain primary-key value at least(Except use identity). (NotNull)
     */
    public void createOrModifyNonstrict(${glPackageBaseCommon}.${glEntityInterfaceName} entity);

    /**
     * Create or modify after select. <br />
     * {modify: modified only}
     * <pre>
     * The merit of this method is only Deleted-Check before updating!
     * If you don't want the merit, please use update().
     * And the demerit of this method is as follows:
     *   : If the entity does not have the optimistic lock value, for example version-no and timestamp,
     *   : it does not throw optimistic lock exception. It can updates.
     * </pre>
     * @param entity Entity. This must contain primary-key value at least(Except use identity). (NotNull)
     */
    public void createOrModifyAfterSelect(${glPackageBaseCommon}.${glEntityInterfaceName} entity);

#if ($database.isMakeBehaviorForUpdate() && $database.isMakeRecentlyDeprecated())
    /**
     * Modify after select-for-update.
     * 
     * @param entity Entity.
     * @exception ${glPackageBaseCommonException}.${glRecordHasAlreadyBeenDeletedException}
     * @deprecated This method is deprecated.
     */
    public void modifyAfterSelectForUpdate(${glPackageBaseCommon}.${glEntityInterfaceName} entity);

    /**
     * Create or modify after select-for-update.
     * 
     * @param entity Entity. This must contain primary-key value at least(Except use identity). (NotNull)
     * @deprecated This method is deprecated.
     */
    public void createOrModifyAfterSelectForUpdate(${glPackageBaseCommon}.${glEntityInterfaceName} entity);
#end

    /**
     * Remove.
     * 
     * @param entity Entity. (NotNull)
     */
    public void remove(${glPackageBaseCommon}.${glEntityInterfaceName} entity);

    // =====================================================================================
    //                                                                    Basic Batch Update
    //                                                                    ==================
    /**
     * Create list.
     * 
     * @param entityList Entity-list. (NotNull and NotEmpty)
     * @return Created count.
     */
    public int createList(java.util.List${database.filterGenericsString(${glEntityInterfaceName})} entityList);

    /**
     * Modify list.
     * 
     * @param entityList Entity-list. (NotNull and NotEmpty)
     * @return Modified count.
     */
    public int modifyList(java.util.List${database.filterGenericsString(${glEntityInterfaceName})} entityList);

    /**
     * Remove list.
     * 
     * @param entityList Entity-list. (NotNull and NotEmpty)
     * @return Removed count.
     */
    public int removeList(java.util.List${database.filterGenericsString(${glEntityInterfaceName})} entityList);

    // =====================================================================================
    //                                                                            Token File
    //                                                                            ==========
    /**
     * Reflect(insert or update) token-file to this table.
     * 
     * @param filename Name of the file. (NotNull and NotEmpty)
     * @param tokenFileReflectionOption token-file-reflection-option. (NotNull and Required{delimiter and encoding})
     * @return Token-file-reflection-result. (NotNull)
     * @throws java.io.FileNotFoundException
     * @throws java.io.IOException
     */
    public ${glTokenFileReflectionResultName} reflectTokenFile(String filename, ${glTokenFileReflectionOptionName} tokenFileReflectionOption) throws java.io.FileNotFoundException, java.io.IOException;

    /**
     * Reflect(insert or update) token-file to this table.
     * 
     * @param inputStream Input stream. (NotNull and NotClosed)
     * @param tokenFileReflectionOption token-file-reflection-option. (NotNull and Required{delimiter and encoding})
     * @return Token-file-reflection-result. (NotNull)
     * @throws java.io.FileNotFoundException
     * @throws java.io.IOException
     */
    public ${glTokenFileReflectionResultName} reflectTokenFile(java.io.InputStream inputStream, ${glTokenFileReflectionOptionName} tokenFileReflectionOption) throws java.io.FileNotFoundException, java.io.IOException;
#if ($database.isMakeDeprecated())

    /**
     * Reflect(insert or update) from separated-file.
     * 
     * @param filename Name of the file. (NotNull and NotEmpty)
     * @param encoding Encoding of the file. (NotNull and NotEmpty)
     * @param delimiter Delimiter of the file. (NotNull and NotEmpty)
     * @param batchCount Batch-count for transaction.
     * @param isErrorContinue If true, this method continue in spite of throwing the exception.   
     * @return The list of InsertOrUpdateExceptionResult. (NotNull)
     * @throws java.io.FileNotFoundException
     * @throws java.io.IOException
     * @deprecated Please use reflectTokenFile()
     */
    public java.util.List${database.filterGenericsString('OneEntityExceptionResult')} reflectFromSeparatedFile(
            String filename, String encoding,
            String delimiter, int batchCount, boolean isErrorContinue
            ) throws java.io.FileNotFoundException, java.io.IOException;

    /**
     * Exception result for one entity. 
     * @deprecated Please use BatchTransactionFailureResult
     */
    public static class OneEntityExceptionResult {
        protected String _primaryKeyMapString;
        protected ${glEntityInterfaceName} _entity;
        protected Exception _exception;
        
        public String getPrimaryKeyMapString() {
            return _primaryKeyMapString;
        }
        public void setPrimaryKeyMapString(String value) {
            _primaryKeyMapString = value;
        }
        public ${glEntityInterfaceName} getEntity() {
            return _entity;
        }
        public void setEntity(${glEntityInterfaceName} value) {
            _entity = value;
        }
        public Exception getException() {
            return _exception;
        }
        public void setException(Exception value) {
            _exception = value;
        }
    }
#end

}
