${database.allClassCopyright}package ${glPackageBaseCommonCBean};

import ${glPackageBaseCommonCValue}.${glConditionValueName};
import ${glPackageBaseCommonSqlClause}.${glSqlClauseName};

/**
 * The condition-query as interface.
 * 
 * @author ${database.ClassAuthor}
 */${database.outputSuppressWarningsAfterLineSeparator()}
public interface ${glConditionQueryInterfaceName} {

    // ===================================================================================
    //                                                                  Important Accessor
    //                                                                  ==================
    /**
     * Get table db-name.
     * 
     * @return Table db-name. (NotNull)
     */
    public String getTableDbName();

    /**
     * Get real alias name(that has nest level mark).
     * 
     * @return Real alias name. (NotNull)
     */
    public String getRealAliasName();

    /**
     * Get real column name(with real alias name).
     * 
     * @param columnName Column name without alias name. (NotNull)
     * @return Real column name. (NotNull)
     */
    public String getRealColumnName(String columnName);

    /**
     * Get child query.
     * 
     * @return Child query. (Nullable)
     */
    public ${glConditionQueryInterfaceName} getChildQuery();

    /**
     * Get sql clause.
     * 
     * @return Sql clause. (NotNull)
     */
    public ${glSqlClauseName} getSqlClause();

    /**
     * Get alias name.
     * 
     * @return Alias name. (NotNull)
     */
    public String getAliasName();

    /**
     * Get nest level.
     * 
     * @return Nest level.
     */
    public int getNestLevel();

    /**
     * Get next nest level.
     * 
     * @return Next nest level.
     */
    public int getNextNestLevel();

    /**
     * Is base query?
     * 
     * @param query Condition query. (NotNull)
     * @return Determination.
     */
    public boolean isBaseQuery(${glConditionQueryInterfaceName} query);

	/**
	 * Get the level of subQuery.
	 * 
	 * @return The level of subQuery.
	 */
	public int getSubQueryLevel();
	
    /**
     * Get the property name of foreign.
     * 
     * @return The property name of foreign. (NotNull)
     */
    public String getForeignPropertyName();

    // ===================================================================================
    //                                                                              Invoke
    //                                                                              ======
    /**
     * Invoke getting value.
     * 
     * @param columnFlexibleName The flexible name of the column. (NotNull and NotEmpty)
     * @return The conditionValue. (NotNull)
     */
    public ${glConditionValueName} invokeValue(String columnFlexibleName);

    /**
     * Invoke setting query.
     * 
     * @param columnFlexibleName The flexible name of the column. (NotNull and NotEmpty)
     * @param conditionKeyName The name of the conditionKey. (NotNull)
     * @param value The value of the condition. (NotNull)
     */
    public void invokeQuery(String columnFlexibleName, String conditionKeyName, Object value);

    /**
     * Invoke adding orderBy.
     * 
     * @param columnFlexibleName The flexible name of the column. (NotNull and NotEmpty)
     * @param isAsc Is it ascend?
     */
    public void invokeOrderBy(String columnFlexibleName, boolean isAsc);

    /**
     * Invoke getting foreign conditionQuery.
     * 
     * @param foreignPropertyName The property name of the foreign relation. (NotNull and NotEmpty)
     * @return The conditionQuery of the foreign relation as interface. (NotNull)
     */
    public ${glConditionQueryInterfaceName} invokeForeignCQ(String foreignPropertyName);

#if ($database.isMakeRecentlyDeprecated())
    // ===================================================================================
    //                                                                       Foregin Query
    //                                                                       =============
    /**
     * Get the conditionQuery of foreign contains referrer-as-one.
     * 
     * @param foreignPropertyName The property name of foreign. (NotNull and NotEmpty and Both OK -- InitCap or not)
     * @return The conditionQuery of foreign. (NotNull)
     * @deprecated
     */
    public ${glConditionQueryInterfaceName} getForeignConditionQuery(String foreignPropertyName);
#end

#if ($database.isMakeRecentlyDeprecated())
    /**
     * Invoke getter.
     * 
     * @param columnMultiName Column multi name. (NotNull and NotEmpty)
     * @return Condition-value. (NotNull)
     * @deprecated
     */
    public ${glConditionValueName} invokeGetter(String columnMultiName);

    /**
     * Invoke setter for equal.
     * 
     * @param columnMultiName Column multi name. (NotNull and NotEmpty)
     * @param value Value. (Nullable)
     * @deprecated
     */
    public void invokeSetterEqual(String columnMultiName, Object value);

    /**
     * Invoke setter for notEqual.
     * 
     * @param columnMultiName Column multi name. (NotNull and NotEmpty)
     * @param value Value. (Nullable)
     * @deprecated
     */
    public void invokeSetterNotEqual(String columnMultiName, Object value);

    /**
     * Invoke setter for greaterThan.
     * 
     * @param columnMultiName Column multi name. (NotNull and NotEmpty)
     * @param value Value. (Nullable)
     * @deprecated
     */
    public void invokeSetterGreaterThan(String columnMultiName, Object value);

    /**
     * Invoke setter for lessThan.
     * 
     * @param columnMultiName Column multi name. (NotNull and NotEmpty)
     * @param value Value. (Nullable)
     * @deprecated
     */
    public void invokeSetterLessThan(String columnMultiName, Object value);

    /**
     * Invoke setter for greaterThan.
     * 
     * @param columnMultiName Column multi name. (NotNull and NotEmpty)
     * @param value Value. (Nullable)
     * @deprecated
     */
    public void invokeSetterGreaterEqual(String columnMultiName, Object value);

    /**
     * Invoke setter for lessThan.
     * 
     * @param columnMultiName Column multi name. (NotNull and NotEmpty)
     * @param value Value. (Nullable)
     * @deprecated
     */
    public void invokeSetterLessEqual(String columnMultiName, Object value);

    /**
     * Invoke add order-by asc.
     * 
     * @param columnMultiName Column multi name. (NotNull and NotEmpty)
     * @deprecated
     */
    public void invokeAddOrderByAsc(String columnMultiName);

    /**
     * Invoke add order-by desc.
     * 
     * @param columnMultiName Column multi name. (NotNull and NotEmpty)
     * @deprecated
     */
    public void invokeAddOrderByDesc(String columnMultiName);
#end
}
