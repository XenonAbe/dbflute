${database.allClassCopyright}package ${glPackageBaseCommonSqlClause};

#set ($myClassName = "${glSqlClauseInterfaceName}Oracle")

import ${glPackageBaseCommonDBMeta}.${glDBMetaInterfaceName};
import ${glPackageBaseCommonDBMeta}.${glDBMetaInstanceHandlerName};
import ${glPackageBaseCommonDBMetaInfo}.${glColumnInfoName};

/**
 * SqlClause for Oracle.
 * 
 * @author ${database.ClassAuthor}
 */
public class ${myClassName} extends ${glSqlClauseAbstractName} {

    /** String of fetch-scope as select-hint. */
    protected String _fetchScopeSelectHint = "";

    /** String of fetch-scope as sql-suffix. */
    protected String _fetchScopeSqlSuffix = "";

    /** String of lock as sql-suffix. */
    protected String _lockSqlSuffix = "";

    /**
     * Constructor.
     * 
     * @param tableName Table name. (NotNull)
     **/
    public ${myClassName}(String tableName) {
        super(tableName);
    }

    /**
     * ${database.ImplementComment}
     */
    protected void doFetchFirst() {
        if (isFetchSizeSupported()) {
            _fetchScopeSelectHint = " * from (select";
            _fetchScopeSqlSuffix = ") where rownum <= " + getFetchSize();
        }
    }

    /**
     * ${database.ImplementComment}
     */
    protected void doFetchPage() {
        if (!isFetchStartIndexSupported() && !isFetchSizeSupported()) {
            return;
        }
        _fetchScopeSelectHint = " * from (select base.*, rownum as rn from (select";
        _fetchScopeSqlSuffix = "";
        if (isFetchStartIndexSupported()) {
            _fetchScopeSqlSuffix = ") base ) where rn > " + getPageStartIndex();
        }
        if (isFetchSizeSupported()) {
            if (isFetchStartIndexSupported()) {
                _fetchScopeSqlSuffix = _fetchScopeSqlSuffix + " and rn <= " + getPageEndIndex();
            } else {
                _fetchScopeSqlSuffix = ") base ) where rn <= " + getPageEndIndex();
            }
        }
    }

    /**
     * ${database.ImplementComment}
     */
    protected void doClearFetchPageClause() {
        _fetchScopeSelectHint = "";
        _fetchScopeSqlSuffix = "";
    }

    /**
     * ${database.ImplementComment}
     * 
     * @return this. (NotNull)
     */
    public ${glSqlClauseInterfaceName} lockForUpdate() {
        final ${glDBMetaInterfaceName} dbmeta = ${glDBMetaInstanceHandlerName}.findDBMeta(_tableName);
        if (dbmeta.hasPrimaryKey()) {
            final String primaryKeyColumnName = dbmeta.getPrimaryUniqueInfo().getFirstColumn().getColumnDbName();
            _lockSqlSuffix = " for update of " + _tableName + "." + primaryKeyColumnName;
        } else {
            final String randomColumnName = ((${glColumnInfoName})dbmeta.getColumnInfoList().get(0)).getColumnDbName();
            _lockSqlSuffix = " for update of " + _tableName + "." + randomColumnName;
        }
        return this;
    }

    /**
     * ${database.ImplementComment}
     * 
     * @return Select-hint. (NotNull)
     */
    protected String createSelectHint() {
        return _fetchScopeSelectHint;
    }

    /**
     * ${database.ImplementComment}
     * 
     * @return From-base-table-hint. {select * from table [from-base-table-hint] where ...} (NotNull)
     */
    protected String createFromBaseTableHint() {
        return "";
    }

    /**
     * ${database.ImplementComment}
     * 
     * @return From-hint. (NotNull)
     */
    protected String createFromHint() {
        return "";
    }

    /**
     * ${database.ImplementComment}
     * 
     * @return Sql-suffix. (NotNull)
     */
    protected String createSqlSuffix() {
        return _fetchScopeSqlSuffix + _lockSqlSuffix;
    }

    // ===================================================================================
    //                                                                       Name Resolver
    //                                                                       =============
    /**
     * The override.
     * 
     * @param aliasName Alias name. (NotNull)
     * @return Determination.
     */
    protected boolean isValidJoinAliasName(String aliasName) {
        return aliasName.length() <= 30;// The length of alias name should be less (equal) than 30 in Oracle.
    }
}
