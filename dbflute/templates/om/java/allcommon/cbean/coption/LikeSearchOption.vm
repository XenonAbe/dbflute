package ${glPackageBaseCommonCOption};

#set ($myClassName = "${glConditionOptionLikeSearchName}")

import ${glPackageBaseCommonHelperCharacter}.${glGeneralCharacterName};
import ${glPackageBaseCommonHelperCharacterImpl}.${glGeneralCharacterImplName};
import ${glPackageBaseCommonHelperCharacter}.${glJapaneseCharacterName};
import ${glPackageBaseCommonHelperCharacterImpl}.${glJapaneseCharacterImplName};


/**
 * The class of like-search-option.
 * 
 * @author ${database.ClassAuthor}
 */
public class ${myClassName} implements ${glConditionOptionInterfaceName} {

    protected static final String LIKE_PREFIX = "prefix";
    protected static final String LIKE_SUFFIX = "suffix";
    protected static final String LIKE_CONTAIN = "contain";

    protected String _like;
    protected String _escape;
    protected String _split;
    protected String _splitContainedDelimiter;

    protected boolean _toSingleByteSpace;
    protected boolean _toSingleByteAlphabetNumber;
    protected boolean _toSingleByteAlphabetNumberMark;

    protected boolean _toUpperCase;
    protected boolean _toLowerCase;

    protected LikeSearchOptionJapanese _likeSearchOptionJapanese;

    private ${glGeneralCharacterName} _generalCharacter;
    private ${glJapaneseCharacterName} _japaneseCharacter;

    // =====================================================================================
    //                                                                           Rear Option
    //                                                                           ===========
    public String getRearOption() {
        if (_escape == null || _escape.trim().length() == 0) {
            return "";
        }
        return " escape '" + _escape + "'";
    }

    // =====================================================================================
    //                                                                                  Like
    //                                                                                  ====
    public ${myClassName} likePrefix() {
        _like = LIKE_PREFIX;
        return this;
    }
    public ${myClassName} likeSuffix() {
        _like = LIKE_SUFFIX;
        return this;
    }
    public ${myClassName} likeContain() {
        _like = LIKE_CONTAIN;
        return this;
    }

    // =====================================================================================
    //                                                                                Escape
    //                                                                                ======
    public ${myClassName} escapeByPipeLine() {
        _escape = "|";
        return this;
    }

    public ${myClassName} escapeByAtMark() {
        _escape = "@";
        return this;
    }

    public ${myClassName} escapeBySlash() {
        _escape = "/";
        return this;
    }

    public ${myClassName} escapeByBackSlash() {
        _escape = "\\";
        return this;
    }

    // =====================================================================================
    //                                                                                 Split
    //                                                                                 =====
    public boolean isSplit() {
        return _split != null;
    }

    public ${myClassName} splitBySpace() {
        _split = " ";
        return this;
    }

    public ${myClassName} splitBySpaceContainsDoubleByte() {
        _split = " ";
        _splitContainedDelimiter = "\u3000";
        return this;
    }

    public String[] generateSplitValueArray(String value) {
        if (value == null || value.trim().length() == 0) {
            String msg = "The argument[value] should not be null of empty: " + value;
            throw new IllegalArgumentException(msg);
        }
        value = repalceContainedDelimiterToRealDelimiter(value);
        return value.split(_split + "+");
    }

    protected String repalceContainedDelimiterToRealDelimiter(String value) {
        if (value == null || value.trim().length() == 0) {
            return value;
        }
        if (_splitContainedDelimiter == null) {
            return value;
        }
        if (_split == null) {
            return value;
        }
        return replace(value, _splitContainedDelimiter, _split);
    }

    // =====================================================================================
    //                                                                        To Single Byte
    //                                                                        ==============
    public boolean isToSingleByteSpace() {
        return _toSingleByteSpace;
    }
    public ${myClassName} toSingleByteSpace() {
        _toSingleByteSpace = true;
        return this;
    }

    public ${myClassName} toSingleByteAlphabetNumber() {
        _toSingleByteAlphabetNumber = true;
        return this;
    }

    public ${myClassName} toSingleByteAlphabetNumberMark() {
        _toSingleByteAlphabetNumberMark = true;
        return this;
    }

    // =====================================================================================
    //                                                                        To Double Byte
    //                                                                        ==============

    // =====================================================================================
    //                                                                   To Upper/Lower Case
    //                                                                   ===================
    public ${myClassName} toUpperCase() {
        _toUpperCase = true;
        _toLowerCase = false;
        return this;
    }

    public ${myClassName} toLowerCase() {
        _toUpperCase = false;
        _toLowerCase = true;
        return this;
    }

    // =====================================================================================
    //                                                                                 Local
    //                                                                                 =====
    public LikeSearchOptionJapanese localJapanese() {
        if (_likeSearchOptionJapanese == null) {
            _likeSearchOptionJapanese = new LikeSearchOptionJapaneseImpl();
        }
        return _likeSearchOptionJapanese;
    }

    public static interface LikeSearchOptionJapanese {
        public boolean isToDoubleByteKatakana();
        public LikeSearchOptionJapanese toDoubleByteKatakana();
        public boolean isRemoveLastLongVowel();
        public LikeSearchOptionJapanese removeLastLongVowel();
    }

    public static class LikeSearchOptionJapaneseImpl implements LikeSearchOptionJapanese {
        protected boolean _toDoubleByteKatakana;
        protected boolean _removeLastLongVowel;

        // =====================================================================================
        //                                                                        To Double Byte
        //                                                                        ==============
        public boolean isToDoubleByteKatakana() {
            return _toDoubleByteKatakana;
        }
        public LikeSearchOptionJapanese toDoubleByteKatakana() {
            _toDoubleByteKatakana = true;
            return this;
        }

        // =====================================================================================
        //                                                                                Remove
        //                                                                                ======
        public boolean isRemoveLastLongVowel() {
            return _removeLastLongVowel;
        }
        public LikeSearchOptionJapanese removeLastLongVowel() {
            _removeLastLongVowel = true;
            return this;
        }
    }

    // =====================================================================================
    //                                                                            Real Value
    //                                                                            ==========
    public String generateRealValue(String value) {// TODO: @jflute - I want to refactor!!!
        if (value == null || value.trim().length() == 0) {
            String msg = "The argument[value] should not be null.";
            throw new IllegalArgumentException(msg);
        }

        // To Single Byte
        if (_toSingleByteSpace) {
            value = (value != null ? value.replaceAll("\u3000", " ") : value);
        }

        if (_toSingleByteAlphabetNumberMark) {
            value = getGeneralCharacter().toSingleByteAlphabetNumberMark(value);
        } else if (_toSingleByteAlphabetNumber) {
            value = getGeneralCharacter().toSingleByteAlphabetNumber(value);
        }

        // To Double Byte
        if (_likeSearchOptionJapanese != null && _likeSearchOptionJapanese.isToDoubleByteKatakana()) {
            value = getJapaneseCharacter().toDoubleByteKatakana(value);
        }

        // To Upper/Lower Case
        if (_toUpperCase) {
            value = (value != null ? value.toUpperCase() : value);
        }
        if (_toLowerCase) {
            value = (value != null ? value.toLowerCase() : value);
        }

        // Remove
        if (_likeSearchOptionJapanese != null && _likeSearchOptionJapanese.isRemoveLastLongVowel()) {
            if (value != null && value.endsWith("\u30fc")) {
                value = value.substring(0, value.length() - "\u30fc".length());
            }
        }

        if (_escape != null && _escape.trim().length() != 0) {
            value = replace(replace(value, "%", _escape + "%"), "_", _escape + "_");
        }
        if (_like == null || _like.trim().length() == 0) {
            return value;
        } else if (_like.equals(LIKE_PREFIX)) {
            return value + "${database.wildCard}";
        } else if (_like.equals(LIKE_SUFFIX)) {
            return "${database.wildCard}" + value;
        } else if (_like.equals(LIKE_CONTAIN)) {
            return "${database.wildCard}" + value + "${database.wildCard}";
        } else {
            String msg = "The like was wrong string: " + _like;
            throw new IllegalStateException(msg);
        }
    }

    // =====================================================================================
    //                                                                                Helper
    //                                                                                ======
    protected ${glGeneralCharacterName} getGeneralCharacter() {
        if (_generalCharacter == null) {
            _generalCharacter = new ${glGeneralCharacterImplName}();
        }
        return _generalCharacter;
    }

    protected ${glJapaneseCharacterName} getJapaneseCharacter() {
        if (_japaneseCharacter == null) {
            _japaneseCharacter = new ${glJapaneseCharacterImplName}();
        }
        return _japaneseCharacter;
    }

    protected final String replace(String text, String fromText,
            String toText) {

        if (text == null || fromText == null || toText == null) {
            return null;
        }
        StringBuffer buf = new StringBuffer(100);
        int pos = 0;
        int pos2 = 0;
        while (true) {
            pos = text.indexOf(fromText, pos2);
            if (pos == 0) {
                buf.append(toText);
                pos2 = fromText.length();
            } else if (pos > 0) {
                buf.append(text.substring(pos2, pos));
                buf.append(toText);
                pos2 = pos + fromText.length();
            } else {
                buf.append(text.substring(pos2));
                break;
            }
        }
        return buf.toString();
    }
}
