${database.allClassCopyright}package ${glPackageBaseCommonCBeanOutsidesqlExecutor};

import java.util.List;

import ${glPackageBaseCommonCBeanOutsidesql}.${glOutsideSqlDaoName};
import ${glPackageBaseCommonCBeanOutsidesql}.${glOutsideSqlOptionName};

/**
 * The executor of outside-sql. <br />
 * <pre>
 * {Basic}
 *   o selectEntity()
 *   o selectEntityWithDeletedCheck()
 *   o selectList()
 * 
 * {Option -- Paging}
 *   o autoPaging().selectList()
 *   o manualPaging().selectList()
 * 
 * {Option -- Cursor}
 *   o cursorHandling().selectCursor()
 * 
 * {Option -- Embedded}
 *   o dynamicBinding().selectList()
 * 
 * {Option -- Paging and Cursor}
 *   o autoPaging().cursorHandling().selectCursor()
 *   o manualPaging().cursorHandling().selectCursor()
 * 
 * {Option -- Paging and Embedded}
 *   o autoPaging().dynamicBinding().selectList()
 *   o manualPaging().dynamicBinding().selectList()
 * 
 * </pre>
 * 
 * @author ${database.ClassAuthor}
 */
public class ${glOutsideSqlBasicExecutorName} {

    // ===================================================================================
    //                                                                           Attribute
    //                                                                           =========
    protected final ${glOutsideSqlDaoName} _outsideSqlDao;

    protected boolean _dynamicBinding;

    // ===================================================================================
    //                                                                         Constructor
    //                                                                         ===========
    public ${glOutsideSqlBasicExecutorName}(${glOutsideSqlDaoName} outsideSqlDao) {
        this._outsideSqlDao = outsideSqlDao;
    }

    // ===================================================================================
    //                                                                              Select
    //                                                                              ======
    /**
     * Select list.
     * 
     * @param <ENTITY_TYPE> The type of entity for element.
     * @param path The path of SQL file. (NotNull)
     * @param pmb The parameter-bean. Allowed types are Bean object and Map object. (Nullable)
     * @param entityType The element type of entity. (NotNull)
     * @return The list of selected entity. (NotNull)
     * @exception ${glPackageBaseCommonException}.${glOutsideSqlNotFoundException} When the sql is not found.
     * @exception ${glPackageBaseCommonException}.${glEntityAlreadyDeletedException} When the entity has already been deleted(not found).
     * @exception ${glPackageBaseCommonException}.${glEntityDuplicatedException} When the entity is duplicated.
     */
    public <ENTITY_TYPE> List<ENTITY_TYPE> selectList(String path, Object pmb, Class<ENTITY_TYPE> entityType) {
        return _outsideSqlDao.selectList(path, pmb, createOutsideSqlOption(), entityType);
    }

    // ===================================================================================
    //                                                                             Execute
    //                                                                             =======
    // {Insert/Update/Delete/Etc...}
    /**
     * Execute.
     * 
     * @param path The path of SQL file. (NotNull)
     * @param pmb The parameter-bean. Allowed types are Bean object and Map object. (Nullable)
     * @return The count of execution.
     * @exception ${glPackageBaseCommonException}.${glOutsideSqlNotFoundException} When the sql is not found.
     */
    public int execute(String path, Object pmb) {
        return _outsideSqlDao.execute(path, pmb, createOutsideSqlOption());
    }

// Implements at the future!
//    public int batchExecute(String path, Object pmb) {
//        throw new UnsupportedOperationException("Sorry! The method of batchExecute() has not been implemented yet.");
//        // return _outsideSqlDao.batchExecute(path, pmb, createOutsideSqlOption());
//    }

    // ===================================================================================
    //                                                                              Option
    //                                                                              ======
    public ${glOutsideSqlCursorExecutorName}<Object> cursorHandling() {
        return new ${glOutsideSqlCursorExecutorName}<Object>(_outsideSqlDao, createOutsideSqlOption());
    }

    public ${glOutsideSqlEntityExecutorName}<Object> entityHandling() {
        return new ${glOutsideSqlEntityExecutorName}<Object>(_outsideSqlDao, createOutsideSqlOption());
    }

    /**
     * Option of autoPaging. <br />
     * If you invoke this, you don't need to write paging condition on your SQL. <br />
     * <pre>
     * # ex) Your SQL {MySQL}
     * #
     * # select member.MEMBER_ID, member...
     * #   from Member member
     * #  where ...
     * #  order by ...
     * # -- limit 40, 20        *Here is unnecessary!
     * #
     * </pre>
     * 
     * @return The executor of paging. (NotNull)
     */
    public ${glOutsideSqlPagingExecutorName} autoPaging() {
        final ${glOutsideSqlOptionName} option = createOutsideSqlOption();
        option.autoPaging();
        return new ${glOutsideSqlPagingExecutorName}(_outsideSqlDao, option);
    }

    /**
     * Option of manualPaging. <br />
     * If you invoke this, you need to write paging condition on your SQL. <br />
     * <pre>
     * # ex) Your SQL {MySQL}
     * #
     * # select member.MEMBER_ID, member...
     * #   from Member member
     * #  where ...
     * #  order by ...
     * #  limit 40, 20        *Here is necessary!
     * #
     * </pre>
     * 
     * @return The executor of paging. (NotNull)
     */
    public ${glOutsideSqlPagingExecutorName} manualPaging() {
        final ${glOutsideSqlOptionName} option = createOutsideSqlOption();
        option.manualPaging();
        return new ${glOutsideSqlPagingExecutorName}(_outsideSqlDao, option);
    }

    public ${glOutsideSqlBasicExecutorName} dynamicBinding() {
        _dynamicBinding = true;
        return this;
    }

    // -----------------------------------------------------
    //                                                Helper
    //                                                ------
    protected ${glOutsideSqlOptionName} createOutsideSqlOption() {
        final ${glOutsideSqlOptionName} option = new ${glOutsideSqlOptionName}();
        if (_dynamicBinding) {
            option.dynamicBinding();
        }
        return option;
    }
}
