${database.allClassCopyright}package ${glPackageBaseCommonCBean};

import ${glPackageBaseCommonSqlClause}.*;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

/**
 * Condition-Bean context. (referring to s2pager)
 * 
 * @author ${database.ClassAuthor}
 */
public class ${glConditionBeanContextName} {

    /** Log-instance. */
    private static final Log _log = LogFactory.getLog(${glConditionBeanContextName}.class);

    // ===================================================================================
    //                                                                        Thread Local
    //                                                                        ============
    /** The thread-local for this. */
    private static final ThreadLocal${database.filterGenericsString(${glConditionBeanInterfaceName})} _threadLocal = new ThreadLocal${database.filterGenericsString(${glConditionBeanInterfaceName})}();

    /**
     * Get condition-bean on thread.
     * 
     * @return Condition-bean context. (Nullable)
     */
    public static ${glConditionBeanInterfaceName} getConditionBeanOnThread() {
        return (${glConditionBeanInterfaceName})_threadLocal.get();
    }

    /**
     * Set condition-bean on thread.
     * 
     * @param cb Condition-bean. (NotNull)
     */
    public static void setConditionBeanOnThread(${glConditionBeanInterfaceName} cb) {
        if (cb == null) {
            String msg = "The argument[cb] must not be null.";
            throw new IllegalArgumentException(msg);
        }
        _threadLocal.set(cb);
    }

    /**
     * Is existing condition-bean on thread?
     * 
     * @return Determination.
     */
    public static boolean isExistConditionBeanOnThread() {
        return (_threadLocal.get() != null);
    }

    /**
     * Clear condition-bean on thread.
     */
    public static void clearConditionBeanOnThread() {
        _threadLocal.set(null);
    }

    // ===================================================================================
    //                                                     Initialize against LinkageError
    //                                                     ===============================
    public static void initialize() {
        // Stop the LinkageError!
        _log.debug("/------------------------------------------------ Stop the LinkageError!");
        {
            final Class clazz = ${glPackageBaseCommonCBean}.${glSimplePagingBeanName}.class;
            _log.debug("...Loading class of " + clazz.getName() + ": " + clazz.getClassLoader());
        }
        {
            final Class clazz = ${glPackageBaseCommonCOption}.${glConditionOptionFromToName}.class;
            _log.debug("...Loading class of " + clazz.getName() + ": " + clazz.getClassLoader());
        }
        {
            final Class clazz = ${glPackageBaseCommonCOption}.${glConditionOptionLikeSearchName}.class;
            _log.debug("...Loading class of " + clazz.getName() + ": " + clazz.getClassLoader());
        }
        {
            final Class clazz = ${glPackageBaseCommonCOption}.${glConditionOptionInScopeName}.class;
            _log.debug("...Loading class of " + clazz.getName() + ": " + clazz.getClassLoader());
        }
#if ($database.isAvailableGenerics())
        {
            final Class clazz = ${glPackageBaseCommonCBeanGrouping}.${glGroupingOptionName}.class;
            _log.debug("...Loading class of " + clazz.getName() + ": " + clazz.getClassLoader());
        }
        {
            final Class clazz = ${glPackageBaseCommonCBeanGrouping}.${glGroupingRowEndDeterminerName}.class;
            _log.debug("...Loading class of " + clazz.getName() + ": " + clazz.getClassLoader());
        }
        {
            final Class clazz = ${glPackageBaseCommonCBeanGrouping}.${glGroupingRowResourceName}.class;
            _log.debug("...Loading class of " + clazz.getName() + ": " + clazz.getClassLoader());
        }
        {
            final Class clazz = ${glPackageBaseCommonCBeanGrouping}.${glGroupingRowSetupperName}.class;
            _log.debug("...Loading class of " + clazz.getName() + ": " + clazz.getClassLoader());
        }
#end
        {
            final Class clazz = ${glPackageBaseCommonCBeanPagenavi}.${glPageNumberLinkName}.class;
            _log.debug("...Loading class of " + clazz.getName() + ": " + clazz.getClassLoader());
        }
#if ($database.isAvailableGenerics())
        {
            final Class clazz = ${glPackageBaseCommonCBeanPagenavi}.${glPageNumberLinkSetupperName}.class;
            _log.debug("...Loading class of " + clazz.getName() + ": " + clazz.getClassLoader());
        }
#end
        _log.debug("----------/");
    }

    // ===================================================================================
    //                                                                      Type Judgement
    //                                                                      ==============
    /**
     * Is the argument condition-bean?
     * 
     * @param dtoInstance Dto instance.
     * @return Determination.
     */
    public static boolean isTheArgumentConditionBean(final Object dtoInstance) {
        if (dtoInstance instanceof ${glConditionBeanInterfaceName}) {
            return true;
        } else {
            return false;
        }
    }

    /**
     * Is the type condition-bean?
     * 
     * @param dtoClass DtoClass.
     * @return Determination.
     */
    public static boolean isTheTypeConditionBean(final Class dtoClass) {
        if (${glConditionBeanInterfaceName}.class.isAssignableFrom(dtoClass)) {
            return true;
        } else {
            return false;
        }
    }

#set ($columnAliasGeneric = "Class, java.util.Map<String, String>")
    // ===================================================================================
    //                                                                        Column Alias
    //                                                                        ============
    public static final java.util.Map${database.filterGenericsString('Class, java.util.Map<String, String>')} _selectClauseColumnAliasContainerMap = new java.util.HashMap${database.filterGenericsString('Class, java.util.Map<String, String>')}();

    public static void addColumnAliasInfo(Class conditionBeanClass, String columnFullName, String columnAliasName) {
        if (_selectClauseColumnAliasContainerMap.containsKey(conditionBeanClass)) {
            final java.util.Map${database.filterGenericsString('String, String')} selectClauseColumnAliasMap = (java.util.Map${database.filterGenericsString('String, String')})_selectClauseColumnAliasContainerMap.get(conditionBeanClass);
            selectClauseColumnAliasMap.put(columnFullName, columnAliasName);
        } else {
            final java.util.Map${database.filterGenericsString('String, String')} selectClauseColumnAliasMap = new java.util.HashMap${database.filterGenericsString('String, String')}();
            _selectClauseColumnAliasContainerMap.put(conditionBeanClass, selectClauseColumnAliasMap);
            selectClauseColumnAliasMap.put(columnFullName, columnAliasName);
        }
    }

    public static java.util.Map${database.filterGenericsString('String, String')} getSelectClauseColumnAliasMap(Class conditionBeanClass) {
        return (java.util.Map${database.filterGenericsString('String, String')})_selectClauseColumnAliasContainerMap.get(conditionBeanClass);
    }

    // ===================================================================================
    //                                                                        Product Name
    //                                                                        ============
    public static final String DB_NAME_DERBY = "derby";
    public static final String DB_NAME_H2 = "h2";
    public static final String DB_NAME_ORACLE = "oracle";
    public static final String DB_NAME_MYSQL = "mysql";
    public static final String DB_NAME_POSTGRESQL = "postgresql";
    public static final String DB_NAME_FIREBIRD = "firebird";
    public static final String DB_NAME_MSSQL = "mssql";
    public static final String DB_NAME_SYBASE = "sybase";
    public static final String DB_NAME_DB2 = "db2";

    protected static final java.util.Map${database.filterGenericsString('String, String')} _driverHintDatabaseProductNameMap;
    protected static final java.util.List${database.filterGenericsString('String')} _targetDatabaseProductNameList = new java.util.ArrayList${database.filterGenericsString('String')}();
    static {
        final java.util.Map${database.filterGenericsString('String, String')} tmpMap = new java.util.LinkedHashMap${database.filterGenericsString('String, String')}();
        tmpMap.put("org.apache.derby", DB_NAME_DERBY);
        tmpMap.put("org.h2", DB_NAME_H2);
        tmpMap.put("oracle", DB_NAME_ORACLE);
        tmpMap.put("mysql", DB_NAME_MYSQL);
        tmpMap.put("postgresql", DB_NAME_POSTGRESQL);
        tmpMap.put("firebird", DB_NAME_FIREBIRD);
        tmpMap.put("sqlserver", DB_NAME_MSSQL);
        tmpMap.put("sybase", DB_NAME_SYBASE);
        tmpMap.put("db2", DB_NAME_DB2);
        _driverHintDatabaseProductNameMap = java.util.Collections.unmodifiableMap(tmpMap);
    }

    public static boolean setupDatabaseProductNameByDriverClassName(String driverClassName) {
        final java.util.Set${database.filterGenericsString('String')} keySet = _driverHintDatabaseProductNameMap.keySet();
        for (final java.util.Iterator ite = keySet.iterator(); ite.hasNext(); ) {
            final String driverHint = (String)ite.next();
            if (driverClassName.indexOf(driverHint) >= 0) {
                final String databaseProductName = (String)_driverHintDatabaseProductNameMap.get(driverHint);
                setDatabaseProductName(databaseProductName);
                return true;
            }
        }
        return false;
    }

    /** The database product name. */
    private static String _databaseProductName;

    /**
     * Get database product name.
     * 
     * @return Database product name.
     */
    public static String getDatabaseProductName() {
        return _databaseProductName;
    }

    /**
     * Set database product name.
     * 
     * @param name Database product name. (NotNull)
     */
    public static void setDatabaseProductName(String name) {
        if (_databaseProductName != null) {
            String msg = "Already set up: current=" + _databaseProductName + " your=" + name;
            throw new IllegalStateException(msg);
        }
        _databaseProductName = name;
    }

    // ===================================================================================
    //                                                                   SqlClause Creator
    //                                                                   =================
    public static ${glSqlClauseName} createSqlClause(${glConditionBeanInterfaceName} cb) {
        final String tableSqlName = cb.getTableSqlName();
        return createSqlClause(tableSqlName);
    }

    public static ${glSqlClauseName} createSqlClause(String tableDbName) {
        final String databaseProductName = getDatabaseProductName();
        if (databaseProductName == null) {
            return new ${glSqlClauseName}${database.DaoGenDbName}(tableDbName);
        }
        final String name = databaseProductName.toLowerCase();
        if (name.equalsIgnoreCase(DB_NAME_DERBY)) {
            return new ${glSqlClauseName}Derby(tableDbName);
        } else if (name.equalsIgnoreCase(DB_NAME_H2)) {
            return new ${glSqlClauseName}H2(tableDbName);
        } else if (name.equalsIgnoreCase(DB_NAME_ORACLE)) {
            return new ${glSqlClauseName}Oracle(tableDbName);
        } else if (name.equalsIgnoreCase(DB_NAME_FIREBIRD)) {
            return new ${glSqlClauseName}Firebird(tableDbName);
        } else if (name.equalsIgnoreCase(DB_NAME_MYSQL)) {
            return new ${glSqlClauseName}MySql(tableDbName);
        } else if (name.equalsIgnoreCase(DB_NAME_POSTGRESQL)) {
            return new ${glSqlClauseName}PostgreSql(tableDbName);
        } else if (name.equalsIgnoreCase(DB_NAME_MSSQL)) {
            return new ${glSqlClauseName}SqlServer(tableDbName);
        } else if (name.equalsIgnoreCase(DB_NAME_DB2)) {
            return new ${glSqlClauseName}Db2(tableDbName);
        } else {
            return new ${glSqlClauseName}${database.DaoGenDbName}(tableDbName);
        }
    }
}
