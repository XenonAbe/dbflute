${database.allClassCopyright}package ${glPackageBaseCommonDBMeta};

#set ($myClassName = "${glDBMetaInstanceHandlerName}")
#set ($instanceMapGenericDefinition = "String, ${glDBMetaInterfaceName}")

import java.util.Collections;
import java.util.Map;
import java.util.LinkedHashMap;

import ${glPackageBaseCommonUtil}.${glSimpleAssertUtil};

/**
 * DBMeta instance handler.
 * 
 * @author ${database.ClassAuthor}
 */${database.outputSuppressWarningsAfterLineSeparator()}
public class ${myClassName} {

    /** The key-to-lower map of db-name and property-name for table. */
    protected static final Map<String, String> _tableDbNamePropertyNameKeyToLowerMap;
    static {
        Map<String, String> tmpMap = new LinkedHashMap<String, String>();

#foreach ($table in $database.tables)
        tmpMap.put("${table.name}".toLowerCase(), "${table.javaBeansRulePropertyName}");
#end

        _tableDbNamePropertyNameKeyToLowerMap = Collections.unmodifiableMap(tmpMap);
    }

    /** The key-to-lower map of property-name and db-name for table. */
    protected static final Map<String, String> _tablePropertyNameDbNameKeyToLowerMap;
    static {
        Map<String, String> tmpMap = new LinkedHashMap<String, String>();

#foreach ($table in $database.tables)
        tmpMap.put("${table.javaBeansRulePropertyName}".toLowerCase(), "${table.name}");
#end

        _tablePropertyNameDbNameKeyToLowerMap = Collections.unmodifiableMap(tmpMap);
    }

    /** Table db-name instance map. */
    protected static final Map${database.filterGenericsString(${instanceMapGenericDefinition})} _tableDbNameInstanceMap;
    static {
        Map${database.filterGenericsString(${instanceMapGenericDefinition})} tmpMap = new LinkedHashMap${database.filterGenericsString(${instanceMapGenericDefinition})}();

#foreach ($table in $database.tables)
        tmpMap.put("${table.Name}", getDBMeta("${table.DBMetaFullClassName}"));
#end

        _tableDbNameInstanceMap = Collections.unmodifiableMap(tmpMap);
    }

    protected static ${glDBMetaInterfaceName} getDBMeta(String className) {
        try {
            Class clazz = Class.forName(className);
            java.lang.reflect.Method methoz = clazz.getMethod("getInstance", (Class[])null);
            Object result = methoz.invoke(null, (Object[])null);
            return (${glDBMetaInterfaceName})result;
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    /**
     * Find dbmeta by table flexible-name.
     * <pre>
     * If the table name is 'ORDER_DETAIL', you can find the dbmeta by ...(as follows)
     *     'ORDER_DETAIL', 'ORDer_DeTAiL', 'order_detail'
     *     , 'OrderDetail', 'orderdetail', 'oRderDetaIl'
     * </pre>
     * @param tableFlexibleName Table flexible-name. (NotNull)
     * @return Instance. (NotNull)
     */
    public static ${glDBMetaInterfaceName} findDBMeta(String tableFlexibleName) {
        assertStringNotNullAndNotTrimmedEmpty("tableFlexibleName", tableFlexibleName);
        if (_tableDbNameInstanceMap.containsKey(tableFlexibleName)) {
            return byTableDbName(tableFlexibleName);
        }
        String toLowerKey = tableFlexibleName.toLowerCase();
        if (_tableDbNamePropertyNameKeyToLowerMap.containsKey(toLowerKey)) {
            String propertyName = (String)_tableDbNamePropertyNameKeyToLowerMap.get(toLowerKey);
            String dbName = (String)_tablePropertyNameDbNameKeyToLowerMap.get(propertyName.toLowerCase());
            return byTableDbName(dbName);
        }
        if (_tablePropertyNameDbNameKeyToLowerMap.containsKey(toLowerKey)) {
            String dbName = (String)_tablePropertyNameDbNameKeyToLowerMap.get(toLowerKey);
            return byTableDbName(dbName);
        }
        String msg = "The instance map returned null by the key: key=" + tableFlexibleName + " instanceMap=" + _tableDbNameInstanceMap;
        throw new IllegalStateException(msg);
    }

    /**
     * Get instance by table db-name.
     * 
     * @param tableDbName Table db-name. (NotNull)
     * @return Instance. (NotNull)
     */
    protected static ${glDBMetaInterfaceName} byTableDbName(String tableDbName) {
        assertStringNotNullAndNotTrimmedEmpty("tableDbName", tableDbName);
        ${glDBMetaInterfaceName} instance = (${glDBMetaInterfaceName})_tableDbNameInstanceMap.get(tableDbName);
        if (instance == null) {
            String msg = "The instance map returned null by the key: key=" + tableDbName + " instanceMap=" + _tableDbNameInstanceMap;
            throw new IllegalStateException(msg);
        }
        return instance;
    }

    // ----------------------------------------------------------------
    //                                                    Assert Object
    //                                                    -------------
    protected static void assertObjectNotNull(String variableName, Object value) {
	    ${glSimpleAssertUtil}.assertObjectNotNull(variableName, value);
    }

    // ----------------------------------------------------------------
    //                                                    Assert String
    //                                                    -------------
    protected static void assertStringNotNullAndNotTrimmedEmpty(String variableName, String value) {
	    ${glSimpleAssertUtil}.assertStringNotNullAndNotTrimmedEmpty(variableName, value);
    }
}
