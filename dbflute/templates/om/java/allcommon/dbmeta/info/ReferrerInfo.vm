${database.allClassCopyright}package ${glPackageBaseCommonDBMetaInfo};
#set ($myClassName = "${glReferrerInfo}")

import java.util.Arrays;
import java.util.Set;
import java.util.Map;
import java.util.LinkedHashMap;
import java.util.Iterator;

import ${glPackageBaseCommonDBMeta}.${glDBMeta};

/**
 * The information of referrer relation.
 * @author ${database.ClassAuthor}
 */
public class ${glReferrerInfo} implements ${glRelationInfo} {

#set ($genericsColumnInfoMap = "${glColumnInfo}, ${glColumnInfo}")
    // ===================================================================================
    //                                                                           Attribute
    //                                                                           =========
    protected final String referrerPropertyName;
    protected final ${glDBMeta} localDBMeta;
    protected final ${glDBMeta} referrerDBMeta;
    protected final Map<${genericsColumnInfoMap}> localReferrerColumnInfoMap;
    protected final Map<${genericsColumnInfoMap}> referrerLocalColumnInfoMap;
    protected final boolean oneToOne;

    // ===================================================================================
    //                                                                         Constructor
    //                                                                         ===========
    public ${glReferrerInfo}(String referrerPropertyName, ${glDBMeta} localDBMeta, ${glDBMeta} referrerDBMeta
                      , Map<${genericsColumnInfoMap}> localReferrerColumnInfoMap
                      , boolean oneToOne) {
        this.referrerPropertyName = referrerPropertyName;
        this.localDBMeta = localDBMeta;
        this.referrerDBMeta = referrerDBMeta;
        this.localReferrerColumnInfoMap = localReferrerColumnInfoMap;
        final Set<${glColumnInfo}> keySet = localReferrerColumnInfoMap.keySet();
        referrerLocalColumnInfoMap = new LinkedHashMap<${genericsColumnInfoMap}>();
        for (final Iterator<${glColumnInfo}> ite = keySet.iterator(); ite.hasNext(); ) {
            final ${glColumnInfo} key = ite.next();
            final ${glColumnInfo} value = localReferrerColumnInfoMap.get(key);
            referrerLocalColumnInfoMap.put(value, key);
        }
        this.oneToOne = oneToOne;
    }
    
    // ===================================================================================
    //                                                                              Finder
    //                                                                              ======
    public ${glColumnInfo} findLocalByReferrer(String referrerColumnDbName) {
        final ${glColumnInfo} keyColumnInfo = referrerDBMeta.findColumnInfo(referrerColumnDbName);
        final ${glColumnInfo} resultColumnInfo = (${glColumnInfo})referrerLocalColumnInfoMap.get(keyColumnInfo);
        if (resultColumnInfo == null) {
            String msg = "Not found by referrerColumnDbName in referrerLocalColumnInfoMap:";
            msg = msg + " referrerColumnDbName=" + referrerColumnDbName + " referrerLocalColumnInfoMap=" + referrerLocalColumnInfoMap;
            throw new IllegalArgumentException(msg);
        }
        return resultColumnInfo;
    }

    public ${glColumnInfo} findReferrerByLocal(String localColumnDbName) {
        final ${glColumnInfo} keyColumnInfo = localDBMeta.findColumnInfo(localColumnDbName);
        final ${glColumnInfo} resultColumnInfo = (${glColumnInfo})localReferrerColumnInfoMap.get(keyColumnInfo);
        if (resultColumnInfo == null) {
            String msg = "Not found by localColumnDbName in localReferrerColumnInfoMap:";
            msg = msg + " localColumnDbName=" + localColumnDbName + " localReferrerColumnInfoMap=" + localReferrerColumnInfoMap;
            throw new IllegalArgumentException(msg);
        }
        return resultColumnInfo;
    }

    // ===================================================================================
    //                                                                             Builder
    //                                                                             =======
    public String buildInitCapPropertyName() {
        return initCap(this.referrerPropertyName);
    }

    // ===================================================================================
    //                                                                              Finder
    //                                                                              ======
    public java.lang.reflect.Method findSetter() {
        return findMethod(localDBMeta.getEntityType(), "set" + buildInitCapPropertyName(), new Class[] { java.util.List.class });
    }

    public java.lang.reflect.Method findGetter() {
        return findMethod(localDBMeta.getEntityType(), "get" + buildInitCapPropertyName(), new Class[] {});
    }

    // ===================================================================================
    //                                                                           Implement
    //                                                                           =========
    public String getRelationPropertyName() {
        return getReferrerPropertyName();
    }

    public ${glDBMeta} getTargetDBMeta() {
        return getReferrerDBMeta();
    }

    public Map<${genericsColumnInfoMap}> getLocalTargetColumnInfoMap() {
        return getLocalReferrerColumnInfoMap();
    }

    public boolean isReferrer() {
        return true;
    }

    // ===================================================================================
    //                                                                            Accessor
    //                                                                            ========
    public String getReferrerPropertyName() {
        return referrerPropertyName;
    }

    public ${glDBMeta} getLocalDBMeta() {
        return localDBMeta;
    }

    public ${glDBMeta} getReferrerDBMeta() {
        return referrerDBMeta;
    }

    public Map<${genericsColumnInfoMap}> getLocalReferrerColumnInfoMap() {
        return localReferrerColumnInfoMap;
    }

    public Map<${genericsColumnInfoMap}> getReferrerLocalColumnInfoMap() {
        return referrerLocalColumnInfoMap;
    }

    public boolean isOneToOne() {
        return oneToOne;
    }

    // ===================================================================================
    //                                                                     Internal Helper
    //                                                                     ===============
    protected String initCap(final String name) {
        return name.substring(0, 1).toUpperCase() + name.substring(1);
    }

    protected java.lang.reflect.Method findMethod(Class<?> clazz, String methodName, Class<?>[] argTypes) {
        try {
            return clazz.getMethod(methodName, argTypes);
        } catch (NoSuchMethodException ex) {
            String msg = "class=" + clazz + " method=" + methodName + "-" + Arrays.asList(argTypes);
            throw new RuntimeException(msg, ex);
        }
    }
}
