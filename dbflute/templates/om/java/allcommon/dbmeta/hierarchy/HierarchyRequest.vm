package dbflute.ldb.allcommon.dbmeta.hierarchy;

import java.util.ArrayList;
import java.util.List;

import dbflute.ldb.allcommon.LdEntity;
import dbflute.ldb.allcommon.dbmeta.LdDBMeta;
import dbflute.ldb.allcommon.dbmeta.hierarchy.basic.LdHierarchySourceEntityColumn;
import dbflute.ldb.allcommon.dbmeta.hierarchy.basic.LdHierarchySourceEntityListIterator;
import dbflute.ldb.allcommon.dbmeta.info.LdColumnInfo;
import dbflute.ldb.allcommon.dbmeta.info.LdRelationInfo;

/**
 * 
 * @author jflute
 * @param <LOCAL_ENTITY> The type of local entity.
 */
public class LdHierarchyRequest<LOCAL_ENTITY extends LdEntity> {

    // ===================================================================================
    //                                                                           Attribute
    //                                                                           =========
    /** The dbmeta of desination. */
    protected LdDBMeta destinationDBMeta;

    /** The iterator of hierarychy source. */
    protected LdHierarchySourceIterator sourceIterator;

    /** The list of request element. */
    protected List<LdHierarchyRequestElement> requestElementList = new ArrayList<LdHierarchyRequestElement>();

    // ===================================================================================
    //                                                                         Constructor
    //                                                                         ===========
    /**
     * Constructor.
     * 
     * @param localEntityType The type of local entity. (NotNull)
     */
    public LdHierarchyRequest(Class<LOCAL_ENTITY> localEntityType) {
        LOCAL_ENTITY localEntity;
        try {
            localEntity = localEntityType.newInstance();
        } catch (InstantiationException e) {
            String msg = "localEntityType.newInstance() threw the InstantiationException:";
            msg = msg + " localEntityType=" + localEntityType;
            throw new IllegalStateException(msg, e);
        } catch (IllegalAccessException e) {
            String msg = "localEntityType.newInstance() threw the IllegalAccessException:";
            msg = msg + " localEntityType=" + localEntityType;
            throw new IllegalStateException(msg, e);
        }
        destinationDBMeta = localEntity.getDBMeta();
    }

    // ===================================================================================
    //                                                                         Easy-to-Use
    //                                                                         ===========
    /**
     * @param relationPropertyKey  Relation Property key. (NotNull)
     * @return The list of request element. (NotNull)
     */
    public List<LdHierarchyRequestElement> findPrimaryKeyElement(String relationPropertyKey) {
        final List<LdHierarchyRequestElement> resultList = new ArrayList<LdHierarchyRequestElement>();
        for (LdHierarchyRequestElement element : requestElementList) {
            if (!relationPropertyKey.equals(element.getRelationPropertyKey())) {
                continue;
            }
            final LdColumnInfo destinationColumnInfo = element.getDestinationColumnInfo();
            if (!destinationColumnInfo.isPrimary()) {
                continue;
            }
            resultList.add(element);
        }
        if (resultList.isEmpty()) {
            String msg = "Not found primary key element by relationPropertyKey in requestElementList: ";
            msg = msg + " relationPropertyKey=" + relationPropertyKey + " requestElementList=" + requestElementList;
            throw new IllegalStateException(msg);
        }
        return resultList;
    }

    public <SOURCE> void registerSourceBeanList(java.util.List<SOURCE> sourceList) {
        sourceIterator = createDefaultSourceTableIterator(sourceList);
    }

    /**
     * @param sourceColumn The column of source. (NotNull)
     * @param destinationColumnInfo The column info of destination. (NotNull)
     */
    public void mapping(LdHierarchySourceColumn sourceColumn, LdColumnInfo destinationColumnInfo) {
        final LdHierarchyRequestElement element = new LdHierarchyRequestElement();
        requestElementList.add(element);

        element.mapping(sourceColumn, destinationColumnInfo);
        element.setDestinationDBMeta(destinationColumnInfo.getDBMeta());
    }

    /**
     * @param sourceColumnInfo The column info of source. (NotNull)
     * @param destinationColumnInfo The column info of destination. (NotNull)
     */
    public void mapping(LdColumnInfo sourceColumnInfo, LdColumnInfo destinationColumnInfo) {
        final LdHierarchyRequestElement element = new LdHierarchyRequestElement();
        requestElementList.add(element);

        final LdHierarchySourceColumn sourceColumn = createDefaultSourceColumn(sourceColumnInfo);
        element.mapping(sourceColumn, destinationColumnInfo);
        element.setDestinationDBMeta(destinationColumnInfo.getDBMeta());
    }

    /**
     * @param relationInfo Relation info. (NotNull)
     */
    public void relation(LdRelationInfo relationInfo) {

        // TODO: jflute -- 整合性チェック

        final int lastIndex = requestElementList.size() - 1;
        final LdHierarchyRequestElement element = (LdHierarchyRequestElement) requestElementList.get(lastIndex);
        element.relation(relationInfo);
    }

    protected <SOURCE> LdHierarchySourceIterator createDefaultSourceTableIterator(java.util.List<SOURCE> sourceList) {
        return new LdHierarchySourceEntityListIterator<SOURCE>(sourceList);
    }

    protected LdHierarchySourceColumn createDefaultSourceColumn(LdColumnInfo sourceColumnInfo) {
        return new LdHierarchySourceEntityColumn(sourceColumnInfo);
    }

    // ===================================================================================
    //                                                                            Accessor
    //                                                                            ========
    public LdDBMeta getDestinationDBMeta() {
        return destinationDBMeta;
    }

    public void setDestinationDBMeta(LdDBMeta destinationDBMeta) {
        this.destinationDBMeta = destinationDBMeta;
    }

    public List<LdHierarchyRequestElement> getRequestElementList() {
        return requestElementList;
    }

    public void addRequestElementList(LdHierarchyRequestElement element) {
        this.requestElementList.add(element);
    }

    public LdHierarchySourceIterator getSourceIterator() {
        return sourceIterator;
    }

    public void setSourceIterator(LdHierarchySourceIterator sourceIterator) {
        this.sourceIterator = sourceIterator;
    }
}
