${database.allClassCopyright}package ${glPackageBaseCommonDBMeta};

#set ($myClassName = "${glDBMetaInterfaceName}")

import ${glPackageBaseCommon}.${glEntityInterfaceName};
import ${glPackageBaseCommonHelper}.${glMapListStringName};
import ${glPackageBaseCommonHelper}.${glMapStringBuilderName};

/**
 * The interface of dbmeta.
 * 
 * @author ${database.ClassAuthor}
 */
public interface ${myClassName} {

    // ===================================================================================
    //                                                                          Definition
    //                                                                          ==========
    /** Map-string map-mark. */
    public static final String MAP_STRING_MAP_MARK = "map:";

    /** Map-string list-mark. */
    public static final String MAP_STRING_LIST_MARK = "list:";

    /** Map-string start-brace. */
    public static final String MAP_STRING_START_BRACE = "${database.extractAcceptStartBrace}";

    /** Map-string end-brace. */
    public static final String MAP_STRING_END_BRACE = "${database.extractAcceptEndBrace}";

    /** Map-string delimiter. */
    public static final String MAP_STRING_DELIMITER = "${database.extractAcceptDelimiter}";

    /** Map-string equal. */
    public static final String MAP_STRING_EQUAL = "${database.extractAcceptEqual}";

    // ===================================================================================
    //                                                                          Table Name
    //                                                                          ==========
    /**
     * Get table db-name.
     * 
     * @return Table db-name. (NotNull)
     */
    public String getTableDbName();

    /**
     * Get table cap-prop-name.
     * 
     * @return Table cap-prop-name. (NotNull)
     */
    public String getTableCapPropName();

    /**
     * Get table uncap-prop-name.
     * 
     * @return Table uncap-prop-name. (NotNull)
     */
    public String getTableUncapPropName();

    // ===================================================================================
    //                                                                         Column Name
    //                                                                         ===========
    /**
     * Get the list of column db-name.
     * 
     * @return The list of column db-name. (NotNull and NotEmpty)
     */
    public java.util.List${database.filterGenericsString('String')} getColumnDbNameList();

    /**
     * Get the list of column cap-prop-name.
     * 
     * @return The list of column cap-prop-name. (NotNull and NotEmpty)
     */
    public java.util.List${database.filterGenericsString('String')} getColumnCapPropNameList();

    /**
     * Get the list of column uncap-prop-name.
     * 
     * @return The list of column uncap-prop-name. (NotNull and NotEmpty)
     */
    public java.util.List${database.filterGenericsString('String')} getColumnUncapPropNameList();

    /**
     * Get column-db-name comma-string.
     * 
     * @return Column-db-name comma-string. (NotNull and NotEmpty)
     */
    public String getColumnDbNameCommaString();

    // -----------------------------------------------------
    //                                           Primary Key
    //                                           -----------
    /**
     * Get primary key column db-name only first one.
     * 
     * @return First primary key column db-name. (Nullable: If null, this table has no primary key.)
     */
    public String getPrimaryKeyColumnDbNameOnlyFirstOne();

    // ===================================================================================
    //                                                                       Name Handling
    //                                                                       =============
    /**
     * Is existing db-name? {Target objects are TABLE and COLUMN}
     * 
     * @param dbName Db-name. (NotNull and NotEmpty)
     * @return Determination.
     */
    public boolean isExistDbName(String dbName);

    /**
     * Is existing cap-prop-name? {Target objects are TABLE and COLUMN}
     * 
     * @param capPropName Cap-prop-name. (NotNull and NotEmpty)
     * @return Determination.
     */
    public boolean isExistCapPropName(String capPropName);

    /**
     * Is existing uncap-prop-name? {Target objects are TABLE and COLUMN}
     * 
     * @param uncapPropName Uncap-prop-name. (NotNull and NotEmpty)
     * @return Determination.
     */
    public boolean isExistUncapPropName(String uncapPropName);

    /**
     * Is existing multi-name? {Target objects are TABLE and COLUMN}
     * 
     * @param multiName Multi-name. (NotNull and NotEmpty)
     * @return Determination.
     */
    public boolean isExistMultiName(String multiName);

    /**
     * Get db-name by property-name. {Target objects are TABLE and COLUMN}
     * 
     * @param capPropName Cap-prop-name. (NotNull and NotEmpty)
     * @return Db-name. (NotNull and NotEmpty)
     */
    public String getDbNameByCapPropName(String capPropName);

    /**
     * Get db-name by property-name. {Target objects are TABLE and COLUMN}
     * 
     * @param propertyName Uncap-prop-name. (NotNull and NotEmpty)
     * @return Db-name. (NotNull and NotEmpty)
     */
    public String getDbNameByUncapPropName(String propertyName);

    /**
     * Get cap-prop-name by db-name. {Target objects are TABLE and COLUMN}
     * 
     * @param dbName Db-name. (NotNull and NotEmpty)
     * @return Cap-prop-name. (NotNull and NotEmpty)
     */
    public String getCapPropNameByDbName(String dbName);

    /**
     * Get cap-prop-name by property-name. {Target objects are TABLE and COLUMN}
     * 
     * @param propertyName Uncap-prop-name. (NotNull and NotEmpty)
     * @return Cap-prop-name. (NotNull and NotEmpty)
     */
    public String getCapPropNameByUncapPropName(String propertyName);

    /**
     * Get property-name by db-name. {Target objects are TABLE and COLUMN}
     * 
     * @param dbName Db-name. (NotNull and NotEmpty)
     * @return Uncap-prop-name. (NotNull and NotEmpty)
     */
    public String getUncapPropNameByDbName(String dbName);

    /**
     * Get property-name by cap-prop-name. {Target objects are TABLE and COLUMN}
     * 
     * @param capPropName Cap-prop-name. (NotNull and NotEmpty)
     * @return Uncap-prop-name. (NotNull and NotEmpty)
     */
    public String getUncapPropNameByCapPropName(String capPropName);

    /**
     * Get db-name by multi-name. {Target objects are TABLE and COLUMN}
     * 
     * @param multiName Multi-name. (NotNull and NotEmpty)
     * @return Db-name. (NotNull and NotEmpty)
     */
    public String getDbNameByMultiName(String multiName);

    /**
     * Get cap-prop-name by multi-name. {Target objects are TABLE and COLUMN}
     * 
     * @param multiName Multi-name. (NotNull and NotEmpty)
     * @return Cap-prop-name. (NotNull and NotEmpty)
     */
    public String getCapPropNameByMultiName(String multiName);

    /**
     * Get property-name by multi-name. {Target objects are TABLE and COLUMN}
     * 
     * @param multiName Multi-name. (NotNull and NotEmpty)
     * @return Uncap-prop-name. (NotNull and NotEmpty)
     */
    public String getUncapPropNameByMultiName(String multiName);

    // ===================================================================================
    //                                                                            Name Map
    //                                                                            ========
    /**
     * Get db-name cap-prop-name map. {Target objects are TABLE and COLUMN}
     * 
     * @return {db-name : cap-prop-name} map. (NotNull)
     */
    public java.util.Map${database.filterGenericsString('String, String')} getDbNameCapPropNameMap();

    /**
     * Get db-name uncap-prop-name map. {Target objects are TABLE and COLUMN}
     * 
     * @return {db-name : uncap-prop-name} map. (NotNull)
     */
    public java.util.Map${database.filterGenericsString('String, String')} getDbNameUncapPropNameMap();

    /**
     * Get cap-prop-name db-name map. {Target objects are TABLE and COLUMN}
     * 
     * @return {cap-prop-name : db-name} map. (NotNull)
     */
    public java.util.Map${database.filterGenericsString('String, String')} getCapPropNameDbNameMap();

    /**
     * Get cap-prop-name uncap-cap-name map. {Target objects are TABLE and COLUMN}
     * 
     * @return {cap-prop-name : uncap-prop-name} map. (NotNull)
     */
    public java.util.Map${database.filterGenericsString('String, String')} getCapPropNameUncapPropNameMap();

    /**
     * Get uncap-prop-name db-name map. {Target objects are TABLE and COLUMN}
     * 
     * @return {uncap-prop-name : db-name} map. (NotNull)
     */
    public java.util.Map${database.filterGenericsString('String, String')} getUncapPropNameDbNameMap();

    /**
     * Get uncap-prop-name cap-prop-name map. {Target objects are TABLE and COLUMN}
     * 
     * @return {uncap-prop-name : cap-prop-name} map. (NotNull)
     */
    public java.util.Map${database.filterGenericsString('String, String')} getUncapPropNameCapPropNameMap();

    // ===================================================================================
    //                                                                           Type Name
    //                                                                           =========
    /**
     * Get the type-name of entity.
     * 
     * @return The type-name of entity. (NotNull)
     */ 
    public String getEntityTypeName();

    /**
     * Get the type-name of condition-bean.
     * 
     * @return The type-name of condition-bean. (Nullable: If the condition-bean does not exist)
     */ 
    public String getConditionBeanTypeName();

    /**
     * Get the type-name of dao.
     * 
     * @return The type-name of dao. (Nullable: If the dao does not exist)
     */ 
    public String getDaoTypeName();

    /**
     * Get the type-name of behavior.
     * 
     * @return The type-name of behavior. (Nullable: If the behavior does not exist)
     */ 
    public String getBehaviorTypeName();

    // ===================================================================================
    //                                                                         Object Type
    //                                                                         ===========
    /**
     * Get the type of entity.
     * 
     * @return The type of entity. (NotNull)
     */ 
    public Class getEntityType();

    // ===================================================================================
    //                                                                     Object Instance
    //                                                                     ===============
    /**
     * New the instance of entity.
     * 
     * @return The instance of entity. (NotNull)
     */ 
    public ${glEntityInterfaceName} newEntity();

    // ===================================================================================
    //                                                                      Foreign DBMeta
    //                                                                      ==============
    /**
     * Get foreign dbmeta.
     * 
     * @param foreignPropertyName Foreign-property-name(Both OK - InitCap or not). (NotNull)
     * @return Foreign DBMeta. (NotNull)
     */ 
    public ${myClassName} getForeignDBMeta(String foreignPropertyName);

    // ===================================================================================
    //                                                                       Determination
    //                                                                       =============
    /**
     * Has primary-key?
     * 
     * @return Determination.
     */
    public boolean hasPrimaryKey();

    /**
     * Has two or more primary-keys?
     * 
     * @return Determination.
     */
    public boolean hasTwoOrMorePrimaryKeys();

    /**
     * Has common column?
     * 
     * @return Determination.
     */
    public boolean hasCommonColumn();

    // ===================================================================================
    //                                                                     Entity Handling
    //                                                                     ===============
    // -----------------------------------------------------
    //                                                Accept
    //                                                ------
    /**
     * Accept primary-key map.
     * 
     * The column that column-value map-string doesn't have the value of is reflected as null.
     * The column that column-value map-string doesn't have the key of is NOT updated nothing.
     * 
     * @param entity Target entity. (NotNull)
     * @param primaryKeyMap Primary-key map. (NotNull and NotEmpty)
     */
    public void acceptPrimaryKeyMap(${glEntityInterfaceName} entity, java.util.Map${database.filterGenericsString('String, ? extends Object')} primaryKeyMap);

    /**
     * Accept primary-key map-string.
     * 
     * The column that column-value map-string doesn't have the value of is reflected as null.
     * The column that column-value map-string doesn't have the key of is NOT updated nothing.
     * 
     * @param entity Target entity. (NotNull)
     * @param primaryKeyMapString Primary-key map-string. (NotNull)
     */
    public void acceptPrimaryKeyMapString(${glEntityInterfaceName} entity, String primaryKeyMapString);

    /**
     * Accept column-value map.
     * 
     * The column that column-value map-string doesn't have the value of is reflected as null.
     * The column that column-value map-string doesn't have the key of is NOT updated nothing.
     * 
     * @param entity Target entity. (NotNull)
     * @param columnValueMap Column-value map. (NotNull and NotEmpty)
     */
    public void acceptColumnValueMap(${glEntityInterfaceName} entity, java.util.Map${database.filterGenericsString('String, ? extends Object')} columnValueMap);

    /**
     * Accept column-value map-string.
     * 
     * The column that column-value map-string doesn't have the value of is reflected as null.
     * The column that column-value map-string doesn't have the key of is NOT updated nothing.
     * 
     * @param entity Target entity. (NotNull)
     * @param columnValueMapString Column-value map-string. (NotNull)
     */
    public void acceptColumnValueMapString(${glEntityInterfaceName} entity, String columnValueMapString);

    // -----------------------------------------------------
    //                                               Extract
    //                                               -------
    /**
     * Extract primary-key map-string. Delimiter is at-mark and semicolon.
     * <p>
     * <pre>
     * ex) Uses that this method have.
     *   final String primaryKeyMapString = LdBookDbm.extractPrimaryKeyMapString(entity);
     *   final LdBook entity = dao.selectEntity(new LdBookCB().acceptPrimaryKeyMapString(primaryKeyMapString));
     *   ... // as primary key for condition.
     * </pre>
     * 
     * @param entity Target entity. (NotNull)
     * @return Primary-key map-string. (NotNull)
     */
    public String extractPrimaryKeyMapString(${glEntityInterfaceName} entity);

    /**
     * Extract primary-key map-string.
     * 
     * @param entity Target entity. (NotNull)
     * @param startBrace Start-brace. (NotNull)
     * @param endBrace End-brace. (NotNull)
     * @param delimiter Delimiter. (NotNull)
     * @param equal Equal. (NotNull)
     * @return Primary-key map-string. (NotNull)
     */
    public String extractPrimaryKeyMapString(${glEntityInterfaceName} entity, String startBrace, String endBrace, String delimiter, String equal);

    /**
     * Extract column-value map-string. Delimiter is at-mark and semicolon.
     * 
     * @param entity Target entity. (NotNull)
     * @return Column-value map-string. (NotNull)
     */
    public String extractColumnValueMapString(${glEntityInterfaceName} entity);

    /**
     * Extract column-value map-string.
     * 
     * @param entity Target entity. (NotNull)
     * @param startBrace Start-brace. (NotNull)
     * @param endBrace End-brace. (NotNull)
     * @param delimiter Delimiter. (NotNull)
     * @param equal Equal. (NotNull)
     * @return Column-value map-string. (NotNull)
     */
    public String extractColumnValueMapString(${glEntityInterfaceName} entity, String startBrace, String endBrace, String delimiter, String equal);

    /**
     * Extract common-column-value map-string.
     * 
     * @param entity Target entity. (NotNull)
     * @return Common-column-value map-string. (NotNull)
     */
    public String extractCommonColumnValueMapString(${glEntityInterfaceName} entity);

    /**
     * Extract common-column-value map-string.
     * 
     * @param entity Target entity. (NotNull)
     * @param startBrace Start-brace. (NotNull)
     * @param endBrace End-brace. (NotNull)
     * @param delimiter Delimiter. (NotNull)
     * @param equal Equal. (NotNull)
     * @return Common-column-value map-string. (NotNull)
     */
    public String extractCommonColumnValueMapString(${glEntityInterfaceName} entity, String startBrace, String endBrace, String delimiter, String equal);

    // -----------------------------------------------------
    //                                               Convert
    //                                               -------
    /**
     * Convert entity to column value as list.
     * 
     * @param entity Target entity. (NotNull)
     * @return The list of column value. (NotNull)
     */
    public java.util.List${database.filterGenericsString('Object')} convertToColumnValueList(${glEntityInterfaceName} entity);

    /**
     * Convert entity to column value as map.
     * 
     * @param entity Target entity. (NotNull)
     * @return The map of column value. (NotNull)
     */
    public java.util.Map${database.filterGenericsString('String, Object')} convertToColumnValueMap(${glEntityInterfaceName} entity);

    /**
     * Convert entity to column string-value as list.
     * 
     * @param entity Target entity. (NotNull)
     * @return The list of column string-value. (NotNull)
     */
    public java.util.List${database.filterGenericsString('String')} convertToColumnStringValueList(${glEntityInterfaceName} entity);

    /**
     * Convert entity to column string-value as map.
     * 
     * @param entity Target entity. (NotNull)
     * @return The map of column string-value. (NotNull)
     */
    public java.util.Map${database.filterGenericsString('String, String')} convertToColumnStringValueMap(${glEntityInterfaceName} entity);

    // ===================================================================================
    //                                                                        JDBC Support
    //                                                                        ============
    /**
     * Insert entity using specified connection.
     * 
     * @param conn Connection. (NotNull)
     * @param entity Entity. (NotNull)
     * @return Prepared insert clause. (NotNull and NotEmpty)
     */
    public int insertEntity(java.sql.Connection conn, ${glEntityInterfaceName} entity);

    /**
     * Insert entity using specified connection.
     * 
     * @param conn Connection. (NotNull)
     * @param entity Entity. (NotNull)
     * @param preparedInsertClauseOption Prepared insert clause option. (NotNull)
     * @return Prepared insert clause. (NotNull and NotEmpty)
     */
    public int insertEntity(java.sql.Connection conn, ${glEntityInterfaceName} entity, PreparedInsertClauseOption preparedInsertClauseOption);

    /**
     * Get prepared insert clause.
     * 
     * @return Prepared insert clause. (NotNull and NotEmpty)
     */
    public String getPreparedInsertClause();

    /**
     * Get prepared insert clause.
     * 
     * @param preparedInsertClauseOption Prepared insert clause option. (NotNull)
     * @return Prepared insert clause. (NotNull and NotEmpty)
     */
    public String getPreparedInsertClause(PreparedInsertClauseOption preparedInsertClauseOption);

    /**
     * The option of prepared insert clause.
     */
    public static class PreparedInsertClauseOption {

        /** Table prefix. */
        protected String _tablePrefix;

        /**
         * Get table prefix.
         * 
         * @return Table prefix. (Nullable)
         */
        public String getTablePrefix() {
            return this._tablePrefix;
        }

        /**
         * Set table prefix.
         * 
         * @param tablePrefix Table prefix. (Nullable)
         */
        public void setTablePrefix(String tablePrefix) {
            this._tablePrefix = tablePrefix;
        }
    }

    // ===================================================================================
    //                                                                          Map String
    //                                                                          ==========
    /**
     * Create map list string that is prepared.
     * 
     * @return Map list string that is prepared. (NotNull)
     */
    public ${glMapListStringName} createMapListString();

    /**
     * Create map string builder that is prepared.
     * 
     * @return Map string builder that is prepared. (NotNull)
     */
    public ${glMapStringBuilderName} createMapStringBuilder();
}
