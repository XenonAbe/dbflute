package ${glPackageBaseCommonDBMeta};

#set ($myClassName = "${glDBMetaInterfaceName}")

import ${glPackageBaseCommon}.${glEntityInterfaceName};

/**
 * The interface of dbmeta.
 * 
 * @author ${database.ClassAuthor}
 */
public interface ${myClassName} {

    // =====================================================================================
    //                                                                            Definition
    //                                                                            ==========
    /** Map-string map-mark. */
    public static final String MAP_STRING_MAP_MARK = "map:";

    /** Map-string list-mark. */
    public static final String MAP_STRING_LIST_MARK = "list:";

    /** Map-string start-brace. */
    public static final String MAP_STRING_START_BRACE = "${database.extractAcceptStartBrace}";

    /** Map-string end-brace. */
    public static final String MAP_STRING_END_BRACE = "${database.extractAcceptEndBrace}";

    /** Map-string delimiter. */
    public static final String MAP_STRING_DELIMITER = "${database.extractAcceptDelimiter}";

    /** Map-string equal. */
    public static final String MAP_STRING_EQUAL = "${database.extractAcceptEqual}";

    // =====================================================================================
    //                                                                            Table Name
    //                                                                            ==========
    /**
     * Get table db-name.
     * 
     * @return Table db-name. (NotNull)
     */
    public String getTableDbName();

    /**
     * Get table cap-prop-name.
     * 
     * @return Table cap-prop-name. (NotNull)
     */
    public String getTableCapPropName();

    /**
     * Get table uncap-prop-name.
     * 
     * @return Table uncap-prop-name. (NotNull)
     */
    public String getTableUncapPropName();

    // =====================================================================================
    //                                                                           Column Name
    //                                                                           ===========
    public java.util.List${database.filterGenericsString('String')} getColumnDbNameList();

    public java.util.List${database.filterGenericsString('String')} getColumnCapPropNameList();

    public java.util.List${database.filterGenericsString('String')} getColumnUncapPropNameList();

    /**
     * Get column-db-name comma-string.
     * 
     * @return Column-db-name comma-string. (NotNull)
     */
    public String getColumnDbNameCommaString();

    // =====================================================================================
    //                                                                         Name Handling
    //                                                                         =============
    /**
     * Is existing db-name?
     * 
     * @param dbName Db-name. (NotNull)
     * @return Determination.
     */
    public boolean isExistDbName(String dbName);

    /**
     * Is existing cap-prop-name?
     * 
     * @param capPropName Cap-prop-name. (NotNull)
     * @return Determination.
     */
    public boolean isExistCapPropName(String capPropName);

    /**
     * Is existing uncap-prop-name?
     * 
     * @param uncapPropName Uncap-prop-name. (NotNull)
     * @return Determination.
     */
    public boolean isExistUncapPropName(String uncapPropName);

    /**
     * Is existing multi-name?
     * 
     * @param multiName Multi-name. (NotNull)
     * @return Determination.
     */
    public boolean isExistMultiName(String multiName);

    /**
     * Get db-name by property-name.
     * 
     * @param capPropName Cap-prop-name.
     * @return Db-name.
     */
    public String getDbNameByCapPropName(String capPropName);

    /**
     * Get db-name by property-name.
     * 
     * @param propertyName Uncap-prop-name.
     * @return {db-name : cap-prop-name} map.
     */
    public String getDbNameByUncapPropName(String propertyName);

    /**
     * Get cap-prop-name by db-name.
     * 
     * @param dbName Db-name.
     * @return Cap-prop-name.
     */
    public String getCapPropNameByDbName(String dbName);

    /**
     * Get cap-prop-name by property-name.
     * 
     * @param propertyName Uncap-prop-name.
     * @return Cap-prop-name.
     */
    public String getCapPropNameByUncapPropName(String propertyName);

    /**
     * Get property-name by db-name.
     * 
     * @param dbName Db-name.
     * @return Uncap-prop-name.
     */
    public String getUncapPropNameByDbName(String dbName);

    /**
     * Get property-name by cap-prop-name.
     * 
     * @param capPropName Cap-prop-name.
     * @return Uncap-prop-name.
     */
    public String getUncapPropNameByCapPropName(String capPropName);

    /**
     * Get db-name by multi-name.
     * 
     * @param multiName Multi-name.
     * @return Db-name.
     */
    public String getDbNameByMultiName(String multiName);

    /**
     * Get cap-prop-name by multi-name.
     * 
     * @param multiName Multi-name.
     * @return Cap-prop-name.
     */
    public String getCapPropNameByMultiName(String multiName);

    /**
     * Get property-name by multi-name.
     * 
     * @param multiName Multi-name.
     * @return Uncap-prop-name.
     */
    public String getUncapPropNameByMultiName(String multiName);

    // =====================================================================================
    //                                                                    DB-Name-Map Getter
    //                                                                    ==================
    /**
     * ${database.ImplementComment}
     * 
     * @return {db-name : cap-prop-name} map.
     */
    public java.util.Map${database.filterGenericsString('String, String')} getDbNameCapPropNameMap();

    /**
     * ${database.ImplementComment}
     * 
     * @return {db-name : uncap-prop-name} map.
     */
    public java.util.Map${database.filterGenericsString('String, String')} getDbNameUncapPropNameMap();

    /**
     * ${database.ImplementComment}
     * 
     * @return {cap-prop-name : db-name} map.
     */
    public java.util.Map${database.filterGenericsString('String, String')} getCapPropNameDbNameMap();

    /**
     * ${database.ImplementComment}
     * 
     * @return {cap-prop-name : uncap-prop-name} map.
     */
    public java.util.Map${database.filterGenericsString('String, String')} getCapPropNameUncapPropNameMap();

    /**
     * ${database.ImplementComment}
     * 
     * @return {uncap-prop-name : db-name} map.
     */
    public java.util.Map${database.filterGenericsString('String, String')} getUncapPropNameDbNameMap();

    /**
     * ${database.ImplementComment}
     * 
     * @return {uncap-prop-name : cap-prop-name} map.
     */
    public java.util.Map${database.filterGenericsString('String, String')} getUncapPropNameCapPropNameMap();

    // =====================================================================================
    //                                                                      Type Name Getter
    //                                                                      ================
    /**
     * Get the type-name of entity.
     * 
     * @return The type-name of entity. (NotNull)
     */ 
    public String getEntityTypeName();

    /**
     * Get the type-name of condition-bean.
     * 
     * @return The type-name of condition-bean. (Nullable: If the condition-bean does not exist)
     */ 
    public String getConditionBeanTypeName();

    /**
     * Get the type-name of dao.
     * 
     * @return The type-name of dao. (Nullable: If the dao does not exist)
     */ 
    public String getDaoTypeName();

    /**
     * Get the type-name of behavior.
     * 
     * @return The type-name of behavior. (Nullable: If the behavior does not exist)
     */ 
    public String getBehaviorTypeName();

    // =====================================================================================
    //                                                                           Type Getter
    //                                                                           ===========
    /**
     * Get the type of entity.
     * 
     * @return The type of entity. (NotNull)
     */ 
    public Class getEntityType();

    // =====================================================================================
    //                                                                       Instance Getter
    //                                                                       ===============
    /**
     * New the instance of entity.
     * 
     * @return The instance of entity. (NotNull)
     */ 
    public ${glEntityInterfaceName} newEntity();

    // =====================================================================================
    //                                                                        Foreign DBMeta
    //                                                                        ==============
    /**
     * Get foreign dbmeta.
     * 
     * @param foreignPropertyName Foreign-property-name(Both OK - InitCap or not). (NotNull)
     * @return Foreign DBMeta. (NotNull)
     */ 
    public ${myClassName} getForeignDBMeta(String foreignPropertyName);

    // =====================================================================================
    //                                                                         Determination
    //                                                                         =============
    /**
     * Has two or more primary-keys?
     * 
     * @return Determination.
     */
    public boolean hasTwoOrMorePrimaryKeys();

    /**
     * Has common column?
     * 
     * @return Determination.
     */
    public boolean hasCommonColumn();

    // =====================================================================================
    //                                                                                Accept
    //                                                                                ======
    /**
     * Accept primary-key map.
     * 
     * The column that column-value map-string doesn't have the key of or the value of is initialized.
     * The instance variable is registered as null, and the isSetterInvoked flag is registered as false.
     * 
     * @param entity Target entity. (NotNull)
     * @param primaryKeyMap Primary-key map. (NotNull and NotEmpty)
     */
    public void acceptPrimaryKeyMap(${glEntityInterfaceName} entity, java.util.Map${database.filterGenericsString('String, ? extends Object')} primaryKeyMap);

    /**
     * Accept primary-key map-string.
     * 
     * The column that column-value map-string doesn't have the key of or the value of is initialized.
     * The instance variable is registered as null, and the isSetterInvoked flag is registered as false.
     * 
     * @param entity Target entity. (NotNull)
     * @param primaryKeyMapString Primary-key map-string. (NotNull)
     */
    public void acceptPrimaryKeyMapString(${glEntityInterfaceName} entity, String primaryKeyMapString);

    /**
     * Accept column-value map.
     * 
     * The column that column-value map-string doesn't have the key of or the value of is initialized.
     * The instance variable is registered as null, and the isSetterInvoked flag is registered as false.
     * 
     * @param entity Target entity. (NotNull)
     * @param columnValueMap Column-value map. (NotNull and NotEmpty)
     */
    public void acceptColumnValueMap(${glEntityInterfaceName} entity, java.util.Map${database.filterGenericsString('String, ? extends Object')} columnValueMap);

    /**
     * Accept column-value map-string.
     * 
     * The column that column-value map-string doesn't have the key of or the value of is initialized.
     * The instance variable is registered as null, and the isSetterInvoked flag is registered as false.
     * 
     * @param entity Target entity. (NotNull)
     * @param columnValueMapString Column-value map-string. (NotNull)
     */
    public void acceptColumnValueMapString(${glEntityInterfaceName} entity, String columnValueMapString);

    // =====================================================================================
    //                                                                               Extract
    //                                                                               =======
    /**
     * Extract primary-key map-string. Delimiter is at-mark and semicolon.
     * <p>
     * <pre>
     * ex) Uses that this method have.
     *   final String primaryKeyMapString = entity.extractPrimaryKeyMapString();
     *   final LdBook entity = dao.selectEntity(new LdBookCB().acceptPrimaryKeyMapString(primaryKeyMapString));
     *   ... // as primary key for condition.
     * </pre>
     * 
     * @param entity Target entity. (NotNull)
     * @return Primary-key map-string. (NotNull)
     */
    public String extractPrimaryKeyMapString(${glEntityInterfaceName} entity);

    /**
     * Extract primary-key map-string.
     * 
     * @param entity Target entity. (NotNull)
     * @param startBrace Start-brace. (NotNull)
     * @param endBrace End-brace. (NotNull)
     * @param delimiter Delimiter. (NotNull)
     * @param equal Equal. (NotNull)
     * @return Primary-key map-string. (NotNull)
     */
    public String extractPrimaryKeyMapString(${glEntityInterfaceName} entity, String startBrace, String endBrace, String delimiter, String equal);

    /**
     * Extract column-value map-string. Delimiter is at-mark and semicolon.
     * 
     * @param entity Target entity. (NotNull)
     * @return Column-value map-string. (NotNull)
     */
    public String extractColumnValueMapString(${glEntityInterfaceName} entity);

    /**
     * Extract column-value map-string.
     * 
     * @param entity Target entity. (NotNull)
     * @param startBrace Start-brace. (NotNull)
     * @param endBrace End-brace. (NotNull)
     * @param delimiter Delimiter. (NotNull)
     * @param equal Equal. (NotNull)
     * @return Column-value map-string. (NotNull)
     */
    public String extractColumnValueMapString(${glEntityInterfaceName} entity, String startBrace, String endBrace, String delimiter, String equal);

    /**
     * Extract common-column-value map-string.
     * 
     * @param entity Target entity. (NotNull)
     * @return Common-column-value map-string. (NotNull)
     */
    public String extractCommonColumnValueMapString(${glEntityInterfaceName} entity);

    /**
     * Extract common-column-value map-string.
     * 
     * @param entity Target entity. (NotNull)
     * @return Common-column-value map-string. (NotNull)
     */
    public String extractCommonColumnValueMapString(${glEntityInterfaceName} entity, String startBrace, String endBrace, String delimiter, String equal);

    // =====================================================================================
    //                                                                       Entity Handling
    //                                                                       ===============
    public java.util.List${database.filterGenericsString('String')} extractColumnStringValueList(${glEntityInterfaceName} entity);
}
