${database.allClassCopyright}package ${glPackageBaseCommon};

import ${glPackageBaseCommonDBMeta}.${glDBMetaInstanceHandlerName};
import ${glPackageBaseCommonDBMeta}.${glDBMetaInterfaceName};

/**
 * The implementation of dao-selector.
 * <pre>
 * Long long ago this object have cache of dao and bhv.
 * But the cache cause wrong performance when this is initialized.
 * So now this object don't have cache.
 * </pre>
 * @author ${database.ClassAuthor}
 */${database.outputSuppressWarningsAfterLineSeparator()}
public class ${glCacheDaoSelectorName} extends ${glCacheAbstractSelector} implements ${glDaoSelectorInterfaceName} {

    // ===================================================================================
    //                                                                            Selector
    //                                                                            ========
    /**
     * Select dao.
     * 
     * ${database.filterGenericsParamOutput('<DAO_TYPE>', 'The type of behavior.')}
     * @param daoType Dao type. (NotNull)
     * @return Dao. (NotNull)
     */
    public <DAO_TYPE extends ${glDaoReadableInterfaceName}> DAO_TYPE select(Class<DAO_TYPE> daoType) {
        return (DAO_TYPE)getComponent(daoType);
    }

    /**
     * Select dao-readable by name.
     * 
     * @param tableFlexibleName Table flexible name. (NotNull)
     * @return Dao-readable. (NotNull)
     */
    public ${glDaoReadableInterfaceName} byName(String tableFlexibleName) {
        assertStringNotNullAndNotTrimmedEmpty("tableFlexibleName", tableFlexibleName);
        final ${glDBMetaInterfaceName} dbmeta = ${glDBMetaInstanceHandlerName}.findDBMeta(tableFlexibleName);
        return select(getDaoType(dbmeta));
    }

    protected Class<${glDaoReadableInterfaceName}> getDaoType(${glDBMetaInterfaceName} dbmeta) {
        final String daoTypeName = dbmeta.getDaoTypeName();
        if (daoTypeName == null) {
            String msg = "The dbmeta.getDaoTypeName() should not return null: dbmeta=" + dbmeta;
            throw new IllegalStateException(msg);
        }
        final Class<${glDaoReadableInterfaceName}> daoType;
        try {
            daoType = (Class<${glDaoReadableInterfaceName}>)Class.forName(daoTypeName);
        } catch (ClassNotFoundException e) {
            throw new RuntimeException("The class does not exist: " + daoTypeName, e);
        }
        return daoType;
    }
}
