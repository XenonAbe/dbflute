package ${glPackageBaseCommon};
#if ($database.isAvailableBehaviorGeneration())

import ${glPackageBaseCommonBhv}.${glBehaviorReadableInterfaceName};
import ${glPackageBaseCommonBhv}.${glBehaviorWritableInterfaceName};
#end

import ${glPackageBaseCommonDBMeta}.${glDBMetaInstanceHandlerName};
import ${glPackageBaseCommonDBMeta}.${glDBMetaInterfaceName};

import org.seasar.framework.container.S2Container;

/**
 * The implementation of dao-selector.
 * <pre>
 * Long long ago this object have cache of dao and bhv.
 * But the cache cause wrong performance when this is initialized.
 * So now this object don't have cache.
 * </pre>
 * @author ${database.ClassAuthor}
 */
public class ${glCacheDaoSelectorName} implements ${glDaoSelectorInterfaceName} {

    protected S2Container _container;

    public void setContainer(S2Container container) {
        this._container = container;
    }

    /**
     * Get dao-readable by dao type.
     * 
     * @param daoType Dao type. (NotNull)
     * @return Dao-readable. (NotNull)
     */
    public ${glDaoReadableInterfaceName} getRDao(Class daoType) {
        assertObjectNotNull("daoType", daoType);
        return (${glDaoReadableInterfaceName})_container.getComponent(daoType);
    }

    /**
     * Get dao-readable by entity.
     * 
     * @param entity Entity. (NotNull)
     * @return Dao-readable. (NotNull)
     */
    public ${glDaoReadableInterfaceName} getRDao(${glEntityInterfaceName} entity) {
        assertObjectNotNull("entity", entity);
        return getRDao(getDaoType(entity.getDBMeta()));
    }

    /**
     * Get dao-readable by table multi-name.
     * 
     * @param tableMultiName Table multi-name. (NotNull)
     * @return Dao-readable. (NotNull)
     */
    public ${glDaoReadableInterfaceName} getRDao(String tableMultiName) {
        assertStringNotNullAndNotTrimmedEmpty("tableMultiName", tableMultiName);
        final ${glDBMetaInterfaceName} dbmeta = ${glDBMetaInstanceHandlerName}.getInstanceByTableMultiName(tableMultiName);
        return getRDao(getDaoType(dbmeta));
    }

    /**
     * Get dao-writable by dao type.
     * 
     * @param daoType Dao type. (NotNull)
     * @return Dao-writable. (NotNull)
     */
    public ${glDaoWritableInterfaceName} getWDao(Class daoType) {
        assertObjectNotNull("daoType", daoType);
        return (${glDaoWritableInterfaceName})getRDao(daoType);
    }

    /**
     * Get dao-writable by entity.
     * 
     * @param entity Entity. (NotNull)
     * @return Dao-writable. (NotNull)
     */
    public ${glDaoWritableInterfaceName} getWDao(${glEntityInterfaceName} entity) {
        assertObjectNotNull("entity", entity);
        return (${glDaoWritableInterfaceName})getRDao(entity);
    }

    /**
     * Get dao-writable by table multi-name.
     * 
     * @param tableMultiName Table multi-name. (NotNull)
     * @return Dao-writable. (NotNull)
     */
    public ${glDaoWritableInterfaceName} getWDao(String tableMultiName) {
        assertStringNotNullAndNotTrimmedEmpty("tableMultiName", tableMultiName);
        return (${glDaoWritableInterfaceName})getRDao(tableMultiName);
    }
#if ($database.isAvailableBehaviorGeneration())

    /**
     * Get bhv-readable by bhv type.
     * 
     * @param bhvType Bhv type. (NotNull)
     * @return Bhv-readable. (NotNull)
     */
    public ${glBehaviorReadableInterfaceName} getRBhv(Class bhvType) {
        assertObjectNotNull("bhvType", bhvType);
        return (${glBehaviorReadableInterfaceName})_container.getComponent(bhvType);
    }

    /**
     * Get bhv-readable by entity.
     * 
     * @param entity Entity. (NotNull)
     * @return Bhv-readable. (NotNull)
     */
    public ${glBehaviorReadableInterfaceName} getRBhv(${glEntityInterfaceName} entity) {
        assertObjectNotNull("entity", entity);
        return getRBhv(getBhvType(entity.getDBMeta()));
    }

    /**
     * Get bhv-readable by table multi-name.
     * 
     * @param tableMultiName Table multi-name. (NotNull)
     * @return Bhv-readable. (NotNull)
     */
    public ${glBehaviorReadableInterfaceName} getRBhv(String tableMultiName) {
        assertStringNotNullAndNotTrimmedEmpty("tableMultiName", tableMultiName);
        final ${glDBMetaInterfaceName} dbmeta = ${glDBMetaInstanceHandlerName}.getInstanceByTableMultiName(tableMultiName);
        return getRBhv(getBhvType(dbmeta));
    }

    /**
     * Get bhv-writable by bhv type.
     * 
     * @param bhvType Bhv type. (NotNull)
     * @return Bhv-writable. (NotNull)
     */
    public ${glBehaviorWritableInterfaceName} getWBhv(Class bhvType) {
        assertObjectNotNull("bhvType", bhvType);
        return (${glBehaviorWritableInterfaceName})getRBhv(bhvType);
    }

    /**
     * Get bhv-writable by entity.
     * 
     * @param entity Entity. (NotNull)
     * @return Bhv-writable. (NotNull)
     */
    public ${glBehaviorWritableInterfaceName} getWBhv(${glEntityInterfaceName} entity) {
        assertObjectNotNull("entity", entity);
        return (${glBehaviorWritableInterfaceName})getRBhv(entity);
    }

    /**
     * Get bhv-writable by table multi-name.
     * 
     * @param tableMultiName Table multi-name. (NotNull)
     * @return Bhv-writable. (NotNull)
     */
    public ${glBehaviorWritableInterfaceName} getWBhv(String tableMultiName) {
        assertStringNotNullAndNotTrimmedEmpty("tableMultiName", tableMultiName);
        return (${glBehaviorWritableInterfaceName})getRBhv(tableMultiName);
    }

    /**
     * Get bhv-type by dbmeta.
     * 
     * @param dbmeta Dbmeta. (NotNull)
     * @return Bhv-type. (NotNull)
     */
    protected Class getBhvType(${glDBMetaInterfaceName} dbmeta) {
        final String bhvTypeName = dbmeta.getBehaviorTypeName();
        if (bhvTypeName == null) {
            String msg = "The dbmeta.getBehaviorTypeName() should not return null: dbmeta=" + dbmeta;
            throw new IllegalStateException(msg);
        }
        final Class bhvType;
        try {
            bhvType = Class.forName(bhvTypeName);
        } catch (ClassNotFoundException e) {
            throw new RuntimeException("The class does not exist: " + bhvTypeName, e);
        }
        return bhvType;
    }
#end

    protected Class getDaoType(${glDBMetaInterfaceName} dbmeta) {
        final String daoTypeName = dbmeta.getDaoTypeName();
        if (daoTypeName == null) {
            String msg = "The dbmeta.getDaoTypeName() should not return null: dbmeta=" + dbmeta;
            throw new IllegalStateException(msg);
        }
        final Class daoType;
        try {
            daoType = Class.forName(daoTypeName);
        } catch (ClassNotFoundException e) {
            throw new RuntimeException("The class does not exist: " + daoTypeName, e);
        }
        return daoType;
    }

    // =====================================================================================
    //                                                                               Destroy
    //                                                                               =======
    public void destroy() {
        _container = null;
    }

    // ----------------------------------------------------------------
    //                                                    Assert Object
    //                                                    -------------
    /**
     * Assert that the object is not null.
     * 
     * @param variableName Variable name. (NotNull)
     * @param value Value. (NotNull)
     * @exception IllegalArgumentException
     */
    protected void assertObjectNotNull(String variableName, Object value) {
        if (variableName == null) {
            String msg = "The value should not be null: variableName=" + variableName + " value=" + value;
            throw new IllegalArgumentException(msg);
        }
        if (value == null) {
            String msg = "The value should not be null: variableName=" + variableName;
            throw new IllegalArgumentException(msg);
        }
    }

    // ----------------------------------------------------------------
    //                                                    Assert String
    //                                                    -------------
    /**
     * Assert that the entity is not null and not trimmed empty.
     * 
     * @param variableName Variable name. (NotNull)
     * @param value Value. (NotNull)
     */
    protected void assertStringNotNullAndNotTrimmedEmpty(String variableName, String value) {
        assertObjectNotNull("variableName", variableName);
        assertObjectNotNull("value", value);
        if (value.trim().length() ==0) {
            String msg = "The value should not be empty: variableName=" + variableName + " value=" + value;
            throw new IllegalArgumentException(msg);
        }
    }
}
