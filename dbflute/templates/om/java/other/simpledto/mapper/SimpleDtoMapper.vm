${database.allClassCopyright}package ${myDtoMapperPackageName};
#set ($myClassName = "${myDtoMapperClassName}")

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import ${glPackageExtendedEntity}.${table.extendedEntityClassName};
import ${myExtendedEntityPackageName}.${myExtendedObjectClassName};

/**
 * The DTO mapper of ${table.basicInfoDispString}.
 * <pre>
 * [primary-key]
 *     ${table.primaryKeyNameCommaString}
 * 
 * [column-property]
 *     ${table.columnNameCommaString}
 * 
 * [foreign-property]
 *     ${table.foreignPropertyNameCommaString}
 * 
 * [referrer-property]
 *     ${table.referrerPropertyNameCommaString}
 * 
 * [sequence]
 *     ${table.definedSequenceName}
 * 
 * [identity]
 *     ${table.identityColumnName}
 * 
 * [update-date]
 *     ${table.updateDateColumnName}
 * 
 * [version-no]
 *     ${table.versionNoColumnName}
 * </pre>
 * @author ${database.ClassAuthor}
 */${database.outputSuppressWarningsAfterLineSeparator()}
public class ${myClassName} {

    // ===================================================================================
    //                                                                          Definition
    //                                                                          ==========
    /** Serial version UID. (Default) */
    private static final long serialVersionUID = 1L;

    // ===================================================================================
    //                                                                           Attribute
    //                                                                           =========
	protected Map<String, Object> _relationDtoMap;
	
    // ===================================================================================
    //                                                                         Constructor
    //                                                                         ===========
	public ${myClassName}() {
	    _relationDtoMap = new HashMap<String, Object>();
	}
	
	public ${myClassName}(Map<String, Object> relationDtoMap) {
		_relationDtoMap = relationDtoMap;
	}
	
    // ===================================================================================
    //                                                                             Mapping
    //                                                                             =======
	public List<${myExtendedObjectClassName}> map(List<${table.extendedEntityClassName}> entityList) {
		final List<${myExtendedObjectClassName}> dtoList = new ArrayList<${myExtendedObjectClassName}>();
	    for (${table.extendedEntityClassName} entity : entityList) {
		    dtoList.add(map(entity));
		}
		return dtoList;
	}
	
	public ${myExtendedObjectClassName} map(${table.extendedEntityClassName} entity) {
	    final String localKey = "${table.name}@" + entity.getDBMeta().extractPrimaryKeyMapString(entity);
	    final Object localDto = _relationDtoMap.get(localKey);
	    if (localDto != null) {
	        return (${myExtendedObjectClassName})localDto;
	    }
	    final ${myExtendedObjectClassName} dto = new ${myExtendedObjectClassName}();
#foreach ($col in $table.columns)
	    dto.set${col.javaName}(entity.get${col.javaName}());
#end
        _relationDtoMap.put(localKey, dto);
#foreach ($foreignKey in $table.foreignKeys)
#set ($foreignEntityClassName = "${database.simpleDtoExtendedDtoPrefix}${foreignKey.foreignTable.javaName}${database.simpleDtoExtendedDtoSuffix}")
        if (entity.get${foreignKey.foreignJavaBeansRulePropertyNameInitCap}() != null) {
			final ${glPackageExtendedEntity}.${foreignKey.foreignTableExtendedEntityClassName} relationEntity = entity.get${foreignKey.foreignJavaBeansRulePropertyNameInitCap}();
			final String relationKey = "${foreignKey.foreignTable.name}@" + relationEntity.getDBMeta().extractPrimaryKeyMapString(relationEntity);
			final Object cachedDto = _relationDtoMap.get(relationKey);
			if (cachedDto != null) {
			    dto.set${foreignKey.foreignJavaBeansRulePropertyNameInitCap}((${myExtendedEntityPackageName}.${foreignEntityClassName})cachedDto);
			} else {
		        final ${foreignEntityClassName}Mapper mapper = new ${foreignEntityClassName}Mapper(_relationDtoMap);
			    dto.set${foreignKey.foreignJavaBeansRulePropertyNameInitCap}(mapper.map(relationEntity));
				_relationDtoMap.put(relationKey, dto.get${foreignKey.foreignJavaBeansRulePropertyNameInitCap}());
			}
		};
#end
#foreach ($referrer in $table.referrers)
#set ($referrerTable = $referrer.table)
#set ($referrerEntityClassName = "${database.simpleDtoExtendedDtoPrefix}${referrer.table.javaName}${database.simpleDtoExtendedDtoSuffix}")
#set ($referrerVariableName = "${glChildrenVariablePrefix}${referrer.referrerPropertyNameInitCap}")
#set ($foreignEntityClassName = "${database.simpleDtoExtendedDtoPrefix}${referrer.table.javaName}${database.simpleDtoExtendedDtoSuffix}")
#if (${referrer.isOneToOne()})
        if (entity.get${referrer.refererJavaBeansRulePropertyNameAsOneInitCap}() != null) {
			final ${glPackageExtendedEntity}.${referrer.referrerTableExtendedEntityClassName} relationEntity = entity.get${referrer.refererJavaBeansRulePropertyNameAsOneInitCap}();
			final String relationKey = "${foreignKey.foreignTable.name}@" + relationEntity.getDBMeta().extractPrimaryKeyMapString(relationEntity);
			final Object cachedDto = _relationDtoMap.get(relationKey);
			if (cachedDto != null) {
			    dto.set${referrer.refererJavaBeansRulePropertyNameAsOneInitCap}((${myExtendedEntityPackageName}.${foreignEntityClassName})cachedDto);
			} else {
		        final ${foreignEntityClassName}Mapper mapper = new ${foreignEntityClassName}Mapper(_relationDtoMap);
			    dto.set${referrer.refererJavaBeansRulePropertyNameAsOneInitCap}(mapper.map(relationEntity));
				_relationDtoMap.put(relationKey, dto.get${referrer.refererJavaBeansRulePropertyNameAsOneInitCap}());
			}
		};
#else
        if (!entity.get${referrer.referrerJavaBeansRulePropertyNameInitCap}().isEmpty()) {
		    final ${referrerEntityClassName}Mapper mapper = new ${referrerEntityClassName}Mapper(_relationDtoMap);
		    dto.set${referrer.referrerJavaBeansRulePropertyNameInitCap}(mapper.map(entity.get${referrer.referrerJavaBeansRulePropertyNameInitCap}()));
		};
#end
#end
        return dto;
	}
}
