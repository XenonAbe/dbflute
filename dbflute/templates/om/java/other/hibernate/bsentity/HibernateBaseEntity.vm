${database.allClassCopyright}package ${myBaseEntityPackageName};
#set ($myClassName = "${myBaseObjectClassName}")

import java.io.Serializable;
import java.util.*;
import javax.persistence.*;

#if (${table.hasAllCommonColumn()})
import ${glPackageBaseCommon}.${glEntityDefinedCommonColumn};
#end
#if ($table.hasClassification())
import ${glPackageBaseCommon}.${glCDef};
#end
#foreach ($foreignKey in $table.foreignKeys)
#set ($foreignEntityClassName = "${foreignKey.foreignTable.javaName}")
import ${myExtendedEntityPackageName}.${foreignEntityClassName};
#end
#foreach ($referrer in $table.referrers)
#set ($referrerEntityClassName = "${referrer.table.javaName}")
import ${myExtendedEntityPackageName}.${referrerEntityClassName};
#end
#set ($myEntityInterfaceName = "")
#if (${table.hasAllCommonColumn()})
  #set ($myEntityInterfaceName = "${glEntityDefinedCommonColumn}, Serializable")
#else
  #set ($myEntityInterfaceName = "Serializable")
#end

/**
 * The entity of ${table.basicInfoDispString}. <br />
#if ($table.isCommentForJavaDocValid())
 * ${table.commentForJavaDoc}
#end
 * <pre>
 * [primary-key]
 *     ${table.primaryKeyNameCommaString}
 * 
 * [column]
 *     ${table.columnNameCommaString}
 * 
 * [sequence]
 *     ${table.definedSequenceName}
 * 
 * [identity]
 *     ${table.identityColumnName}
 * 
 * [version-no]
 *     ${table.versionNoColumnName}
 * 
 * [foreign-table]
 *     ${table.foreignTableNameCommaString}
 * 
 * [referrer-table]
 *     ${table.referrerTableNameCommaString}
 * 
 * [foreign-property]
 *     ${table.foreignPropertyNameCommaString}
 * 
 * [referrer-property]
 *     ${table.referrerPropertyNameCommaString}
 * </pre>
 * @author ${database.ClassAuthor}
 */
@MappedSuperclass
public abstract class ${myClassName} implements ${myEntityInterfaceName} {

    // ===================================================================================
    //                                                                          Definition
    //                                                                          ==========
    /** Serial version UID. (Default) */
    private static final long serialVersionUID = 1L;

    // ===================================================================================
    //                                                                           Attribute
    //                                                                           =========
#foreach ($col in $table.columns)
    /** Property for ${col.javaBeansRulePropertyName} column. {${col.columnDefinitionLineDisp}} */
#if ($col.isPrimaryKey())
    @Id
#end
#if ($col.isIdentity())
    @GeneratedValue(strategy = javax.persistence.GenerationType.IDENTITY)
#end
#if ($col.isJdbcTypeDate())
    @Temporal(javax.persistence.TemporalType.DATE)
#end
#if ($col.isJdbcTypeTime())
    @Temporal(javax.persistence.TemporalType.TIME)
#end
#if ($col.isJdbcTypeTimestamp())
    @Temporal(javax.persistence.TemporalType.TIMESTAMP)
#end
#if ($col.isJdbcTypeBlob() && $col.isJdbcTypeClob())
    @Lob
#end
#if ($table.isUseVersionNo() && $col.isVersionNo())
    @Version
#end
    protected ${col.javaNative} _${col.uncapitalisedJavaName};
    
#end
    // ===================================================================================
    //                                                          Classification Classifying
    //                                                          ==========================
#foreach ($col in $table.columns)
#if (${col.hasClassification()})
#set ($existTop = false)
#if ($database.classificationTopDefinitionMap.containsKey($col.classificationName))
  #set ($classificationTopMap = $database.classificationTopDefinitionMap.get($col.classificationName))
  #set ($existTop = true)
#end
    /**
     * Classify the value of ${col.uncapitalisedJavaName} as the classification of ${col.classificationName}. <br />
#if ($existTop && $classificationTopMap.containsKey('topComment'))
     * $classificationTopMap.get('topComment')
#end
     * @param cls The value of ${col.uncapitalisedJavaName} as the classification of ${col.classificationName}. (Nullable)
     */
    public void classify${col.javaName}(${glCDef}.${col.classificationName} cls) {
#if ($col.isJavaNativeStringObject())
        set${col.javaName}(cls != null ? cls.code() : null);
#elseif ($col.isJavaNativeValueOfAbleNObject())
        set${col.javaName}(cls != null ? ${col.javaNative}.valueOf(cls.code()) : null);
#else
        set${col.javaName}(cls != null ? new ${col.javaNative}(cls.code()) : null);
#end
    }

#foreach ($classificationMap in $col.classificationMapList)
    /**
     * Classify the value of ${col.uncapitalisedJavaName} as ${classificationMap.get('name')}. <br />
     * $database.buildClassificationApplicationComment($classificationMap)
     */
    public void classify${col.javaName}${classificationMap.get('name')}() {
        classify${col.javaName}(${glCDef}.${col.classificationName}.${classificationMap.get('name')});
    }

#end
#end
#end
    // ===================================================================================
    //                                                        Classification Determination
    //                                                        ============================
#foreach ($col in $table.columns)
#if (${col.hasClassification()})
#set ($existTop = false)
#if ($database.classificationTopDefinitionMap.containsKey($col.classificationName))
  #set ($classificationTopMap = $database.classificationTopDefinitionMap.get($col.classificationName))
  #set ($existTop = true)
#end
    /**
     * Get the value of ${col.uncapitalisedJavaName} as the classification of ${col.classificationName}. <br />
#if ($existTop && $classificationTopMap.containsKey('topComment'))
     * $classificationTopMap.get('topComment')
#end
     * @return The value of ${col.uncapitalisedJavaName} as the classification of ${col.classificationName}. (Nullable)
     */
    public ${glCDef}.${col.classificationName} get${col.javaName}As${col.classificationName}() {
        return ${glCDef}.${col.classificationName}.codeOf(_${col.uncapitalisedJavaName});
    }

#foreach ($classificationMap in $col.classificationMapList)
    /**
     * Is the value of the column '${col.uncapitalisedJavaName}' '${classificationMap.get('name')}'? <br />
     * $database.buildClassificationApplicationComment($classificationMap)
     * <pre>
     * The difference of capital letters and small letters is NOT distinguished.
     * If the value is null, this method returns false!
     * </pre>
     * @return Determination.
     */
    public boolean is${col.JavaName}${classificationMap.get('name')}() {
        ${glCDef}.${col.classificationName} cls = get${col.javaName}As${col.classificationName}();
        return cls != null ? cls.equals(${glCDef}.${col.classificationName}.${classificationMap.get('name')}) : false;
    }

#end
#end
#end
    // ===================================================================================
    //                                                           Classification Name/Alias
    //                                                           =========================
#set ($isUseHelpGettingFromClassificationMap = false)
#foreach ($col in $table.Columns)
#if (${col.hasClassification()})
#if (${col.hasClassificationName()})
    /**
     * Get the value of the column '${col.uncapitalisedJavaName}' as classification name.
     * @return The value of the column '${col.uncapitalisedJavaName}' as classification name. (Nullable)
     */
    public String get${col.JavaName}Name() {
        ${glCDef}.${col.classificationName} cls = get${col.javaName}As${col.classificationName}();
        return cls != null ? cls.name() : null;
    }

#end
#if (${col.hasClassificationAlias()})
    /**
     * Get the value of the column '${col.uncapitalisedJavaName}' as classification alias.
     * @return The value of the column '${col.uncapitalisedJavaName}' as classification alias. (Nullable)
     */
    public String get${col.JavaName}Alias() {
        ${glCDef}.${col.classificationName} cls = get${col.javaName}As${col.classificationName}();
        return cls != null ? cls.alias() : null;
    }

#end
#end
#end
    // ===================================================================================
    //                                                                       Foreign Table
    //                                                                       =============
#foreach ($foreignKey in $table.ForeignKeys)
#set ($foreignEntityClassName = "${foreignKeys.foreignTable.javaName}")
    /** ${foreignTable.aliasExpression}${foreignTable.name} as '${foreignKey.foreignJavaBeansRulePropertyName}'. */
    @ManyToOne(fetch=FetchType.${database.hibernateManyToOneFetch})
#if ($foreignKey.isSimpleKeyFK())
    @JoinColumn(name="${foreignKeys.localColumnNameAsOne}")
#end
    protected ${foreignEntityClassName} ${foreignKeys.foreignPropertyName};

    /**
     * ${foreignTable.aliasExpression}${foreignTable.name} as '${foreignKey.foreignJavaBeansRulePropertyName}'.
     * @return The entity of foreign property '${foreignKey.foreignJavaBeansRulePropertyName}'. (Nullable: If the foreign key does not have 'NotNull' constraint, please check null.)
     */
    public ${foreignEntityClassName} get${foreignKey.foreignJavaBeansRulePropertyNameInitCap}() {
        return ${foreignVariableName};
    }

    /**
     * ${foreignTable.aliasExpression}${foreignTable.name} as '${foreignKey.foreignJavaBeansRulePropertyName}'.
     * @param ${foreignKey.foreignPropertyName} The entity of foreign property '${foreignKey.foreignJavaBeansRulePropertyName}'. (Nullable)
     */
    public void set${foreignKey.foreignJavaBeansRulePropertyNameInitCap}(${foreignEntityClassName} ${foreignKey.foreignPropertyName}) {
        ${foreignVariableName} = ${foreignKey.foreignPropertyName};
    }
#end

#set ($foreignKeyIndex = $foreignKeyIndex + 1)
#end
#foreach ($referrer in $table.referrers)
#set ($referrerTable = $referrer.table)
#set ($referrerEntityClassName = "${referrer.refererTableExtendedEntityClassName}")
#set ($referrerVariableName = "${glChildrenVariablePrefix}${referrer.referrerJavaBeansRulePropertyNameAsOne}")
#if (${referrer.isOneToOne()})
    /** ${referrerTable.aliasExpression}${referrerTable.name} as '${referrer.referrerJavaBeansRulePropertyNameAsOne}'. */
    @OneToOne(mappedBy = "${referrer.foreignPropertyName}", fetch=FetchType.${database.hibernateOneToOneFetch})
    protected ${referrerEntityClassName} ${referrerVariableName};

    /**
     * ${referrerTable.aliasExpression}${referrerTable.name} as '${referrer.referrerJavaBeansRulePropertyNameAsOne}'. <br />
     * @return the entity of foreign property(referrer-as-one) '${referrer.referrerJavaBeansRulePropertyNameAsOne}'. (Nullable: If the foreign key does not have 'NotNull' constraint, please check null.)
     */
    public ${referrerEntityClassName} get${referrer.referrerJavaBeansRulePropertyNameAsOneInitCap}() {
        return ${referrerVariableName};
    }

    /**
     * ${referrerTable.aliasExpression}${referrerTable.name} as '${referrer.referrerJavaBeansRulePropertyNameAsOne}'.
     * @param ${referrer.referrerJavaBeansRulePropertyNameAsOne} The entity of foreign property(referrer-as-one) '${referrer.referrerJavaBeansRulePropertyNameAsOne}'. (Nullable)
     */
    public void set${referrer.referrerJavaBeansRulePropertyNameAsOneInitCap}(${referrerEntityClassName} ${referrer.referrerJavaBeansRulePropertyNameAsOne}) {
        ${referrerVariableName} = ${referrer.referrerJavaBeansRulePropertyNameAsOne};
    }
#if ($database.isMakeEntityTraceRelation())

    public ${referrerEntityClassName} trace${referrer.referrerJavaBeansRulePropertyNameAsOneInitCap}() {
        return ${referrerVariableName} != null ? ${referrerVariableName} : new ${referrerEntityClassName}();
    }
#end

#set ($foreignKeyIndex = $foreignKeyIndex + 1)
#end
#end

    // ===================================================================================
    //                                                                      Referrer Table
    //                                                                      ==============
#foreach ($referrer in $table.referrers)
#set ($referrerTable = $referrer.table)
#set ($referrerEntityClassName = "${referrer.table.javaName}")
#if (!${referrer.isOneToOne()})
    /** ${referrerTable.aliasExpression}${referrerTable.name} as '${referrer.referrerJavaBeansRulePropertyName}'. */
    @OneToMany(mappedBy = "${referrer.foreignPropertyName}", fetch=FetchType.${database.hibernateOneToManyFetch})
    protected List<${referrerEntityClassName}> $referrerVariableName;

    /**
     * ${referrerTable.aliasExpression}${referrerTable.name} as '${referrer.referrerJavaBeansRulePropertyName}'. <br />
     * @return The entity list of referrer property '${referrer.referrerJavaBeansRulePropertyName}'. (NotNull: If it's not loaded yet, initializes the list instance of referrer as empty and returns it.)
     */
    public List<${referrerEntityClassName}> get${referrer.referrerJavaBeansRulePropertyNameInitCap}() {
        if (${referrerVariableName} == null) { ${referrerVariableName} = new ArrayList<${referrerEntityClassName}>(); }
        return ${referrerVariableName};
    }

    /**
     * ${referrerTable.aliasExpression}${referrerTable.name} as '${referrer.referrerJavaBeansRulePropertyName}'.
     * @param ${referrer.referrerPropertyName} The entity list of referrer property '${referrer.referrerJavaBeansRulePropertyName}'. (Nullable)
     */
    public void set${referrer.referrerJavaBeansRulePropertyNameInitCap}(List<${referrerEntityClassName}> ${referrer.referrerPropertyName}) {
        ${referrerVariableName} = ${referrer.referrerPropertyName};
    }

#end
#end
    // ===================================================================================
    //                                                                      Basic Override
    //                                                                      ==============
#if ($table.hasPrimaryKey())
    /**
     * If the primary-key of the other is same as this one, returns true.
     * @param other Other entity.
     * @return Comparing result.
     */
    public boolean equals(Object other) {
        if (other == null || !(other instanceof $myClassName)) { return false; }
        $myClassName otherEntity = ($myClassName)other;
#foreach ($col in $table.primaryKey)
        if (!helpComparingValue(get${col.JavaName}(), otherEntity.get${col.JavaName}())) { return false; }
#end
        return true;
    }

    protected boolean helpComparingValue(Object value1, Object value2) {
        if (value1 == null && value2 == null) { return true; }
        return value1 != null && value2 != null && value1.equals(value2);
    }

    /**
     * Calculates hash-code from primary-key.
     * @return Hash-code from primary-key.
     */
    public int hashCode() {
        int result = 17;
#foreach ($col in $table.primaryKey)
        if (get${col.JavaName}() != null) { result = (31*result) + get${col.JavaName}().hashCode(); }
#end
        return result;
    }
#else
    /**
     * If the all-column value of the other is same as this one, returns true.
     * @param other Other entity. (Nullable)
     * @return Comparing result. If other is null, returns false.
     */
    public boolean equals(Object other) {
        if (other == null || !(other instanceof $myClassName)) { return false; }
        final $myClassName otherEntity = ($myClassName)other;
#foreach ($col in $table.columns)
        if (!helpComparingValue(get${col.JavaName}(), otherEntity.get${col.JavaName}())) { return false; }
#end
        return true;
    }

    protected boolean helpComparingValue(Object value1, Object value2) {
        if (value1 == null && value2 == null) { return true; }
        return value1 != null && value2 != null && value1.equals(value2);
    }

    /**
     * Calculates hash-code from all columns.
     * @return Hash-code from all columns.
     */
    public int hashCode() {
        int result = 17;
#foreach ($col in $table.columns)
        if (get${col.javaName}() != null) { result = (31*result) + get${col.javaName}().hashCode(); }
#end
        return result;
    }
#end

    /**
     * @return The view string of all columns. (NotNull)
     */
    public String toString() {
        String delimiter = ",";
        StringBuilder sb = new StringBuilder();
#foreach ($col in $table.columns)
        sb.append(delimiter).append(get${col.javaName}());
#end
        if (sb.length() > 0) { sb.delete(0, delimiter.length()); }
        sb.insert(0, "{").append("}");
        return sb.toString();
    }
    
#set ($propertyLoopIndex = 0)
#foreach ($col in $table.columns)
#if ($propertyLoopIndex == 0)
    // ===================================================================================
    //                                                                            Accessor
    //                                                                            ========
#else

#end
#if ($database.isMakeEntityS2DaoAnnotation())
    /** The column annotation for S2Dao. {${col.columnDefinitionLineDisp}} */
    public static final String ${col.javaBeansRulePropertyName}_COLUMN = "${col.name}";

#end
#if ($col.isJavaNativeStringClob())
    /** The value type annotation for S2Dao. {${col.columnDefinitionLineDisp}} */
    public static String ${col.javaBeansRulePropertyName}_VALUE_TYPE = "stringClobType";

#end
#if ($col.isJavaNativeBytesOid())
    /** The value type annotation for S2Dao. {${col.columnDefinitionLineDisp}} */
    public static String ${col.javaBeansRulePropertyName}_VALUE_TYPE = "bytesOidType";

#end
    /**
     * ${col.aliasExpression}${col.name}: {${col.columnDefinitionLineDisp}} <br />
#if ($col.isCommentForJavaDocValid())
     * ${col.commentForJavaDoc}
#end
     * @return The value of the column '${col.name}'. (Nullable)
     */
    public ${col.JavaNative} get${col.javaName}() {
        return _${col.uncapitalisedJavaName};
    }

    /**
     * ${col.aliasExpression}${col.name}: {${col.columnDefinitionLineDisp}} <br />
#if ($col.isCommentForJavaDocValid())
     * ${col.commentForJavaDoc}
#end
     * @param ${col.UncapitalisedJavaName} The value of the column '${col.name}'. (Nullable)
     */
    public void set${col.javaName}(${col.javaNative} ${col.uncapitalisedJavaName}) {
        _modifiedProperties.addPropertyName("${col.javaBeansRulePropertyName}");
        this._${col.UncapitalisedJavaName} = ${col.UncapitalisedJavaName};
    }
#set ($propertyLoopIndex = $propertyLoopIndex + 1)
#end
#if ($table.hasAllCommonColumn())
#foreach ($columnName in ${database.commonColumnNameConvertionList})
#set ($filteredColumnName = ${database.filterCommonColumn(${columnName})})
#set ($commonColumnMap = ${database.commonColumnMap})
#set ($columnType = ${commonColumnMap.get(${columnName})})
#set ($javaNative = ${database.convertJavaNativeByJdbcType(${columnType})})
#set ($javaName = ${database.convertJavaNameByJdbcNameAsColumn(${filteredColumnName})})
#set ($uncapitalisedJavaName = ${database.convertUncapitalisedJavaNameByJdbcNameAsColumn(${filteredColumnName})})
#set ($targetJavaName = ${table.findTargetColumnJavaNameByCommonColumnName(${columnName})})

    /**
     * Get the value of the column '${uncapitalisedJavaName}'. <br />
     * @return The value of the column '${uncapitalisedJavaName}'. (Nullable)
     */
    public ${javaNative} get${javaName}() {
        return get${targetJavaName}();
    }

    /**
     * Set the value of the column '${uncapitalisedJavaName}'. <br />
     * @param ${uncapitalisedJavaName} The value of the column '${uncapitalisedJavaName}'. (Nullable)
     */
    public void set${javaName}(${javaNative} ${uncapitalisedJavaName}) {
        set${targetJavaName}(${uncapitalisedJavaName});
    }
#end
#end
}
