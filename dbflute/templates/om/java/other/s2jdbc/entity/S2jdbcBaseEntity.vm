${database.allClassCopyright}package ${myBaseEntityPackageName};
#set ($myClassName = "${myBaseObjectClassName}")

#foreach ($foreignKeys in $table.ForeignKeys)
#set ($foreignEntityClassName = "${foreignKeys.foreignTable.javaName}")
import ${myExtendedEntityPackageName}.${foreignEntityClassName};
#end
#foreach ($referrer in $table.referrers)
#set ($referrerEntityClassName = "${referrer.table.javaName}")
import ${myExtendedEntityPackageName}.${referrerEntityClassName};
#end

/**
 * The entity of ${table.basicInfoDispString}. <br />
#if ($table.isCommentForJavaDocValid())
 * ${table.commentForJavaDoc}
#end
 * <pre>
 * [primary-key]
 *     ${table.primaryKeyNameCommaString}
 * 
 * [column]
 *     ${table.columnNameCommaString}
 * 
 * [sequence]
 *     ${table.definedSequenceName}
 * 
 * [identity]
 *     ${table.identityColumnName}
 * 
 * [version-no]
 *     ${table.versionNoColumnName}
 * 
 * [foreign-table]
 *     ${table.foreignTableNameCommaString}
 * 
 * [referrer-table]
 *     ${table.referrerTableNameCommaString}
 * 
 * [foreign-property]
 *     ${table.foreignPropertyNameCommaString}
 * 
 * [referrer-property]
 *     ${table.referrerPropertyNameCommaString}
 * </pre>
 * @author ${database.ClassAuthor}
 */
@javax.persistence.MappedSuperclass
public abstract class ${myClassName} implements java.io.Serializable {

    // ===================================================================================
    //                                                                          Definition
    //                                                                          ==========
    /** Serial version UID. (Default) */
    private static final long serialVersionUID = 1L;

    // ===================================================================================
    //                                                                           Attribute
    //                                                                           =========
#foreach ($col in $table.columns)
    /** Property for ${col.javaBeansRulePropertyName} column. {${col.columnDefinitionLineDisp}} */
#if ($col.isPrimaryKey())
    @javax.persistence.Id
#end
#if ($col.isIdentity())
    @javax.persistence.GeneratedValue(strategy = javax.persistence.GenerationType.IDENTITY)
#end
#if ($col.isJdbcTypeDate())
    @javax.persistence.Temporal(javax.persistence.TemporalType.DATE)
#end
#if ($col.isJdbcTypeTime())
    @javax.persistence.Temporal(javax.persistence.TemporalType.TIME)
#end
#if ($col.isJdbcTypeTimestamp())
    @javax.persistence.Temporal(javax.persistence.TemporalType.TIMESTAMP)
#end
#if ($col.isJdbcTypeBlob() && $col.isJdbcTypeClob())
    @javax.persistence.Lob
#end
#if ($table.isUseVersionNo() && $col.isVersionNo())
    @javax.persistence.Version
#end
    public ${col.javaNative} ${col.uncapitalisedJavaName};
    
#end
    // ===================================================================================
    //                                                                       Foreign Table
    //                                                                       =============
#foreach ($foreignKeys in $table.ForeignKeys)
#set ($foreignEntityClassName = "${foreignKeys.foreignTable.javaName}")
    /** Foreign property for ${foreignKeys.foreignTable.name} table. */
    @javax.persistence.ManyToOne
#if ($foreignKeys.isSimpleKeyFK())
    @javax.persistence.JoinColumn(name="${foreignKeys.localColumnNameAsOne}")
#end
    public ${foreignEntityClassName} ${foreignKeys.foreignPropertyName};

#end
    // ===================================================================================
    //                                                                      Referrer Table
    //                                                                      ==============
#foreach ($referrer in $table.referrers)
#set ($referrerTable = $referrer.table)
#set ($referrerEntityClassName = "${referrer.table.javaName}")
#if (${referrer.isOneToOne()})
    /** Referrer property for ${referrerTable.name} table. */
    @javax.persistence.OneToOne(mappedBy = "${referrer.foreignPropertyName}")
    public ${referrerEntityClassName} ${referrer.referrerPropertyNameAsOneS2Jdbc};

#else
    /** Referrer property for ${referrerTable.name} table. */
    @javax.persistence.OneToMany(mappedBy = "${referrer.foreignPropertyName}")
    public java.util.List<${referrerEntityClassName}> ${referrer.referrerPropertyName};

#end
#end
    // ===================================================================================
    //                                                                      Basic Override
    //                                                                      ==============
#if ($table.hasPrimaryKey())
    /**
     * If the primary-key of the other is same as this one, returns true.
     * @param other Other entity.
     * @return Comparing result.
     */
    public boolean equals(Object other) {
        if (other == null || !(other instanceof $myClassName)) { return false; }
        $myClassName otherEntity = ($myClassName)other;
#foreach ($col in $table.primaryKey)
        if (!helpComparingValue(get${col.JavaName}(), otherEntity.get${col.JavaName}())) { return false; }
#end
        return true;
    }

    protected boolean helpComparingValue(Object value1, Object value2) {
        if (value1 == null && value2 == null) { return true; }
        return value1 != null && value2 != null && value1.equals(value2);
    }

    /**
     * Calculates hash-code from primary-key.
     * @return Hash-code from primary-key.
     */
    public int hashCode() {
        int result = 17;
#foreach ($col in $table.primaryKey)
        if (get${col.JavaName}() != null) { result = (31*result) + get${col.JavaName}().hashCode(); }
#end
        return result;
    }
#else
    /**
     * If the all-column value of the other is same as this one, returns true.
     * @param other Other entity. (Nullable)
     * @return Comparing result. If other is null, returns false.
     */
    public boolean equals(Object other) {
        if (other == null || !(other instanceof $myClassName)) { return false; }
        final $myClassName otherEntity = ($myClassName)other;
#foreach ($col in $table.columns)
        if (!helpComparingValue(get${col.JavaName}(), otherEntity.get${col.JavaName}())) { return false; }
#end
        return true;
    }

    protected boolean helpComparingValue(Object value1, Object value2) {
        if (value1 == null && value2 == null) { return true; }
        return value1 != null && value2 != null && value1.equals(value2);
    }

    /**
     * Calculates hash-code from all columns.
     * @return Hash-code from all columns.
     */
    public int hashCode() {
        int result = 17;
#foreach ($col in $table.columns)
        if (get${col.javaName}() != null) { result = (31*result) + get${col.javaName}().hashCode(); }
#end
        return result;
    }
#end

    /**
     * @return The view string of all columns. (NotNull)
     */
    public String toString() {
        String delimiter = ",";
        StringBuilder sb = new StringBuilder();
#foreach ($col in $table.columns)
        sb.append(delimiter).append(get${col.javaName}());
#end
        if (sb.length() > 0) { sb.delete(0, delimiter.length()); }
        sb.insert(0, "{").append("}");
        return sb.toString();
    }
}
