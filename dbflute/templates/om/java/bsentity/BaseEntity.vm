package ${myBaseEntityPackageName};
#set ($myClassName = "${myBaseObjectClassName}")

#if (${table.hasAllCommonColumn()})

import ${glPackageBaseCommon}.${glEntityDefinedCommonColumnInterfaceName};
#else

import ${glPackageBaseCommon}.${glEntityInterfaceName};
#end
import ${glPackageBaseCommonDBMeta}.${glDBMetaInterfaceName};
import ${myDBMetaPackageName}.${myDBMetaClassName};

#set ($myEntityInterfaceName = "")
#if (${table.hasAllCommonColumn()})
  #set ($myEntityInterfaceName = ${glEntityDefinedCommonColumnInterfaceName})
#else
  #set ($myEntityInterfaceName = ${glEntityInterfaceName})
#end

/**
 * The entity of ${table.Name}.
 * 
 * <pre>
 * [primary-key]
 *     ${table.PrimaryKeyNameCommaString}
 * 
 * [column-property]
 *     ${table.ColumnNameCommaString}
 * 
 * [foreign-property]
 *     ${table.ForeignPropertyNameCommaString}
 * 
 * [refferer-property]
 *     ${table.ReferrerPropertyNameCommaString}
 * 
 * [sequence]
 *     ${table.DefinedSequenceName}
 * 
 * [identity]
 *     ${table.IdentityPropertyName}
 * 
 * [update-date]
 *     ${table.UpdateDateJavaName}
 * 
 * [version-no]
 *     ${table.VersionNoJavaName}
 * 
 * </pre>
 * 
 * @author ${database.ClassAuthor}
 */
public abstract class $myClassName implements ${myEntityInterfaceName}, java.io.Serializable {

    /** Serial version UID. (Default) */
    private static final long serialVersionUID = 1L;

    /** TABLE-Annotation for S2Dao */
    public static final String TABLE = "${table.AnnotationTableName}";

#if ($table.isUseUpdateDate())
    
    /** TIMESTAMP-Annotation */
    public static final String TIMESTAMP_PROPERTY = "$table.UpdateDateUncapitalisedJavaName";
#end
#if ($table.isUseVersionNo())
    
    /** VERSION_NO-Annotation */
    public static final String VERSION_NO_PROPERTY = "$table.VersionNoUncapitalisedJavaName";
#end
#if ($table.isUseIdentity())
    
    /** ID-Annotation */
    public static final String ${table.IdentityPropertyName}_ID = "identity";
#end

    // =====================================================================================
    //                                                                             Attribute
    //                                                                             =========
    /** Entity modified properties. (for S2Dao) */
    protected EntityModifiedProperties _modifiedProperties = newEntityModifiedProperties();

#foreach ($col in $table.Columns)
    
    /** The value of ${col.UncapitalisedJavaName}. */
    protected ${col.JavaNative} _${col.UncapitalisedJavaName};

    /** Has the setter of ${col.UncapitalisedJavaName} been invoked? */
    protected boolean _isSetterInvoked${col.JavaName};
#end

    // =====================================================================================
    //                                                                           Constructor
    //                                                                           ===========
    /**
     * Constructor.
     */
    public ${myClassName}() {
    }

    // =====================================================================================
    //                                                                                DBMeta
    //                                                                                ======
    /**
     * ${database.ImplementComment}
     * 
     * @return DBMeta. (NotNull)
     */
    public ${glDBMetaInterfaceName} getDBMeta() {
        return ${myDBMetaClassName}.getInstance();
    }

    // =====================================================================================
    //                                                                            Table Name
    //                                                                            ==========
    /**
     * ${database.ImplementComment}
     * 
     * @return Table db-name. (NotNull)
     */
    public String getTableDbName() {
        return getDBMeta().getTableDbName();
    }

    /**
     * ${database.ImplementComment}
     * 
     * @return Table cap-prop-name. (NotNull)
     */
    public String getTableCapPropName() {
        return getDBMeta().getTableCapPropName();
    }

    /**
     * ${database.ImplementComment}
     * 
     * @return Table uncap-prop-name. (NotNull)
     */
    public String getTableUncapPropName() {
        return getDBMeta().getTableUncapPropName();
    }

    // =====================================================================================
    //                                                                              Accessor
    //                                                                              ========
#foreach ($col in $table.Columns)

    /**
     * Get the value of ${col.UncapitalisedJavaName}.
     * 
     * @return The value of ${col.UncapitalisedJavaName}. (Nullable)
     */
    public ${col.JavaNative} get${col.JavaName}() {
        return _${col.UncapitalisedJavaName};
    }

    /**
     * Set the value of ${col.UncapitalisedJavaName}.
     * 
     * @param ${col.UncapitalisedJavaName} The value of ${col.UncapitalisedJavaName}. (Nullable)
     */
    public void set${col.JavaName}(${col.JavaNative} ${col.UncapitalisedJavaName}) {
        _isSetterInvoked${col.JavaName} = true;
        _modifiedProperties.addPropertyName("${col.JavaBeansRulePropertyName}");
        _${col.UncapitalisedJavaName} = ${col.UncapitalisedJavaName};
    }
#end

    // =====================================================================================
    //                                                                Invoking Determination
    //                                                                ======================
#foreach ($col in $table.Columns)

    /**
     * Has the setter of ${col.UncapitalisedJavaName} been invoked?
     * 
     * @return Determination.
     * @deprecated Please use modified-properties.
     */
    public boolean isSetterInvoked${col.JavaName}() {
        return _isSetterInvoked${col.JavaName};
    }
#end

    // =====================================================================================
    //                                                                       Classify Method
    //                                                                       ===============
#foreach ($col in $table.Columns)
  #if (${col.hasClassification()})
    #foreach ($classificationMap in $col.ClassificationMapList)
      #if (${col.hasClassificationName()})

    /**
     * Classify the value of ${col.UncapitalisedJavaName} as ${classificationMap.get('name')}.
     */
    public void classify${col.JavaName}${classificationMap.get('name')}() {
        String code = ${glPackageBaseCommon}.${glClassificationDefinition}.CODE_${col.ClassificationName}_${classificationMap.get('name')};
        set${col.JavaName}(new ${col.JavaNative}(code));
    }
      #else

    /**
     * Classify the value of ${col.UncapitalisedJavaName} as ${classificationMap.get('name')}.
     */
    public void classify${col.JavaName}_${classificationMap.get('name')}() {
        String code = ${glPackageBaseCommon}.${glClassificationDefinition}.CODE_${col.ClassificationName}_${classificationMap.get('name')};
        set${col.JavaName}(new ${col.JavaNative}(code));
    }
      #end
    #end
  #end
#end

    // =====================================================================================
    //                                                          Classification Determination
    //                                                          ============================
#foreach ($col in $table.Columns)
  #if (${col.hasClassification()})
    #foreach ($classificationMap in $col.ClassificationMapList)
      #if (${col.hasClassificationName()})

    /**
     * Is the value of ${col.UncapitalisedJavaName} '${classificationMap.get('name')}'?
     * The difference of capital letters and small letters is NOT distinguished.
     * If the value is null, this method returns false!
     * 
     * @return Determanation.
     */
    public boolean is${col.JavaName}${classificationMap.get('name')}() {
        if (_${col.UncapitalisedJavaName} == null) {
            return false;
        }
        String code = ${glPackageBaseCommon}.${glClassificationDefinition}.CODE_${col.ClassificationName}_${classificationMap.get('name')};
        return code.equalsIgnoreCase(_${col.UncapitalisedJavaName}.toString());
    }

    /**
     * Is the value of ${col.UncapitalisedJavaName} '${classificationMap.get('name')}'?
     * The difference of capital letters and small letters is NOT distinguished.
     * If the value is null, this method throws exception!
     * 
     * @return Determanation.
     */
    public boolean is${col.JavaName}${classificationMap.get('name')}IfNullException() {
        if (_${col.UncapitalisedJavaName} == null) {
            String msg = "If the value of ${col.UncapitalisedJavaName} is null, this method throws exception!";
            throw new IllegalStateException(msg + " ${col.UncapitalisedJavaName}=" + _${col.UncapitalisedJavaName});
        }
        return is${col.JavaName}${classificationMap.get('name')}();
    }
      #else

    /**
     * Is the value of ${col.UncapitalisedJavaName} '${classificationMap.get('name')}'?
     * The difference of capital letters and small letters is NOT distinguished.
     * If the value is null, this method returns false!
     * 
     * @return Determanation.
     */
    public boolean is${col.JavaName}_${classificationMap.get('name')}() {
        if (_${col.UncapitalisedJavaName} == null) {
            return false;
        }
        String code = ${glPackageBaseCommon}.${glClassificationDefinition}.CODE_${col.ClassificationName}_${classificationMap.get('name')};
        return code.equalsIgnoreCase(_${col.UncapitalisedJavaName}.toString());
    }

    /**
     * Is the value of ${col.UncapitalisedJavaName} '${classificationMap.get('name')}'?
     * The difference of capital letters and small letters is NOT distinguished.
     * If the value is null, this method throws exception!
     * 
     * @return Determanation.
     */
    public boolean is${col.JavaName}_${classificationMap.get('name')}_IfNullException() {
        if (_${col.UncapitalisedJavaName} == null) {
            String msg = "If the value of ${col.UncapitalisedJavaName} is null, this method throws exception!";
            throw new IllegalStateException(msg + " ${col.UncapitalisedJavaName}=" + _${col.UncapitalisedJavaName});
        }
        return is${col.JavaName}_${classificationMap.get('name')}();
    }
      #end
    #end
  #end
#end

    // =====================================================================================
    //                                                                 Classification Getter
    //                                                                 =====================
#foreach ($col in $table.Columns)
  #if (${col.hasClassification()})
    #if (${col.hasClassificationName()})

    /**
     * Get the value of ${col.UncapitalisedJavaName} as classification-name.
     * 
     * @return The value of ${col.UncapitalisedJavaName} as classification-name. (Nullable)
     */
    public String get${col.JavaName}Name() {
        if (_${col.UncapitalisedJavaName} == null) {
            return null;
        }
        final java.util.Map${database.filterGenericsString('String, String')} map = ${glPackageBaseCommon}.${glClassificationDefinition}.CODE_NAME_MAP_${col.ClassificationName};
        return (String)map.get(_${col.UncapitalisedJavaName}.toString());
    }
    #end
    #if (${col.hasClassificationAlias()})

    /**
     * Get the value of ${col.UncapitalisedJavaName} as classification-alias.
     * 
     * @return The value of ${col.UncapitalisedJavaName} as classification-alias. (Nullable)
     */
    public String get${col.JavaName}Alias() {
        if (_${col.UncapitalisedJavaName} == null) {
            return null;
        }
        final java.util.Map${database.filterGenericsString('String, String')} map = ${glPackageBaseCommon}.${glClassificationDefinition}.CODE_ALIAS_MAP_${col.ClassificationName};
        return (String)map.get(_${col.UncapitalisedJavaName}.toString());
    }
    #end
  #end
#end

    // =====================================================================================
    //                                                                         Foreign Table
    //                                                                         =============
#set ($foreignKeysIndex = 0)
#foreach ($foreignKeys in $table.ForeignKeys)
  #set ($foreignVariableName = "${glParentVariablePrefix}${foreignKeys.ForeignPropertyNameInitCap}")
  #set ($foreignDaoClassName = "${glProjectPrefix}${foreignKeys.foreignTable.JavaName}Dao")
  #set ($foreignEntityClassName = "${glProjectPrefix}${foreignKeys.foreignTable.JavaName}")
  #set ($parentCBClassName = "${glProjectPrefix}${foreignKeys.foreignTable.JavaName}${glConditionBeanInitialName}")

    // /* * * * * * * * * * * * * * * * * * * * * * *
    //   ForeignTable    = [${foreignKeys.ForeignTable.Name}]
    //   ForeignProperty = [${foreignKeys.ForeignPropertyName}]
    // * * * * * * * * */

    /** RELNO of foreign table for s2dao. */
    public static final int ${foreignKeys.ForeignJavaBeansRulePropertyName}_RELNO = ${foreignKeysIndex};

    /** RELKEYS of foreign table for s2dao. */
    public static final String ${foreignKeys.ForeignJavaBeansRulePropertyName}_RELKEYS = "$foreignKeys.RelationKeysCommaString";

    /** The entity of foreign table. */
    protected ${glPackageExtendedEntity}.${foreignEntityClassName} ${foreignVariableName};

    /**
     * Get the entity of foreign table without lazyload.
     * 
     * @return The entity of foreign table.
     */
    public ${glPackageExtendedEntity}.${foreignEntityClassName} get${foreignKeys.foreignPropertyNameInitCap}() {
        return ${foreignVariableName};
    }

    /**
     * Set the entity of foreign table.
     * 
     * @param v The entity of foreign table.
     */
    public void set${foreignKeys.foreignPropertyNameInitCap}(${glPackageExtendedEntity}.${foreignEntityClassName} v) {
        ${foreignVariableName} = v;
    }
  #set ($foreignKeysIndex = $foreignKeysIndex + 1)
#end

    // =====================================================================================
    //                                                                        Refferer Table
    //                                                                        ==============
#foreach ($refferer in $table.Referrers)
  #set ($reffererTable = $refferer.Table)
  #set ($reffererEntityClassName = "${glProjectPrefix}${reffererTable.JavaName}")
  #set ($reffererDaoClassName = "${reffererEntityClassName}Dao")
  #set ($reffererCBClassName = "${reffererEntityClassName}${glConditionBeanInitialName}")
  #set ($reffererVariableName = "${glChildrenVariablePrefix}${refferer.ReffererPropertyNameInitCap}")
  #set ($reffererEntityLongClassName = "${glPackageExtendedEntity}.${reffererEntityClassName}")

  #if (${refferer.isOneToOne()})

    // /* * * * * * * * * * * * * * * * * * * * * * * {as one}
    //   ReffererTable    = [${refferer.Table.Name}]
    //   ReffererProperty = [${refferer.ReffererPropertyName}]
    // * * * * * * * * */

    /** RELNO of foreign table for s2dao. */
    public static final int ${refferer.ReffererJavaBeansRulePropertyNameAsOne}_RELNO = ${foreignKeysIndex};

    /** RELKEYS of foreign table for s2dao. */
    public static final String ${refferer.ReffererJavaBeansRulePropertyNameAsOne}_RELKEYS = "$refferer.RelationKeysCommaStringForOneToOneRefferer";
    #set ($foreignKeysIndex = $foreignKeysIndex + 1)
  #else

    // /* * * * * * * * * * * * * * * * * * * * * * *
    //   ReffererTable    = [${refferer.Table.Name}]
    //   ReffererProperty = [${refferer.ReffererPropertyName}]
    // * * * * * * * * */
  #end

    /** The list of refferer table. */
    protected java.util.List${database.filterGenericsString(${reffererEntityLongClassName})} $reffererVariableName;

    /**
     * Get the list of refferer table without lazyload.
     * If it's not loaded yet, returns null.
     * 
     * @return The list of refferer table. (Nullable)
     */
    public java.util.List${database.filterGenericsString(${reffererEntityLongClassName})} get${refferer.ReffererPropertyNameInitCap}() {
        return ${reffererVariableName};
    }

    /**
     * Set the list of refferer table.
     * 
     * @param value The list of refferer table. (Nullable)
     */
    public void set${refferer.ReffererPropertyNameInitCap}(java.util.List${database.filterGenericsString(${reffererEntityLongClassName})} value) {
        ${reffererVariableName} = value;
    }
  #if (${refferer.isOneToOne()})

    /**
     * Get the entity of refferer table as one without lazyload.
     * If it's not loaded yet, returns null.
     * If the size of the refferer table list is zero, throws the exception.
     * 
     * @return The entity of refferer table. (Nullable)
     */
    public ${reffererEntityLongClassName} get${refferer.ReffererPropertyNameInitCapAsOne}() {
        final java.util.List${database.filterGenericsString(${reffererEntityLongClassName})} ls = get${refferer.ReffererPropertyNameInitCap}();
        if (ls == null || ls.isEmpty()) {
            return null;
        }
        if (ls.size() > 1) {
            String msg = "The size of the list must be one because this relation is 'one-to-one'";
            msg = msg + ": list=" + ls + ": toString()=" + toString();
            throw new IllegalStateException(msg);
        }
        return (${reffererEntityLongClassName})ls.get(0);
    }

    /**
     * Set the entity of refferer table as one.
     * 
     * @param entity The entity of refferer table. (Nullable)
     */
    public void set${refferer.ReffererPropertyNameInitCapAsOne}(${reffererEntityLongClassName} entity) {
        if (entity == null) {
            ${reffererVariableName} = null;
            return;
        }
        final java.util.List${database.filterGenericsString(${reffererEntityLongClassName})} ls = new java.util.ArrayList${database.filterGenericsString(${reffererEntityLongClassName})}();
        ls.add(entity);
        ${reffererVariableName} = ls;
    }
  #end
#end

    // =====================================================================================
    //                                                                                Accept
    //                                                                                ======
    /**
     * ${database.ImplementComment}
     * 
     * @param primaryKeyMap Primary key map. (NotNull and NotEmpty)
     */
    public void acceptPrimaryKeyMap(java.util.Map${database.filterGenericsString('String, ? extends Object')} primaryKeyMap) {
        if (primaryKeyMap == null) {
            String msg = "The argument[primaryKeyMap] should not be null.";
            throw new IllegalArgumentException(msg);
        }
        if (primaryKeyMap.isEmpty()) {
            String msg = "The argument[primaryKeyMap] should not be empty.";
            throw new IllegalArgumentException(msg);
        }
#if ($table.hasPrimaryKey())
  #foreach ($col in $table.PrimaryKey)

        if (!primaryKeyMap.containsKey("${col.Name}")) {
            String msg = "The primaryKeyMap must have the value of ${col.Name}";
            throw new IllegalStateException(msg + ": primaryKeyMap --> " + primaryKeyMap);
        }
        {
            final Object obj = primaryKeyMap.get("${col.Name}");
            if (obj == null) {
                _${col.UncapitalisedJavaName} = null; _isSetterInvoked${col.JavaName} = false; _modifiedProperties.remove("${col.JavaBeansRulePropertyName}");
            } else {
    #if ($col.isJavaNativeStringObject())

                checkTypeString(obj, "${col.UncapitalisedJavaName}", "${col.JavaNative}");
                set${col.JavaName}((String)obj);
            }
        }
    #else
      #if ($col.isJavaNativeDateObject())

                if (obj instanceof ${col.JavaNative}) {
                    set${col.JavaName}((${col.JavaNative})obj);
                } else {
                    set${col.JavaName}(new ${col.JavaNative}(parseDateString(obj, "${col.UncapitalisedJavaName}", "${col.JavaNative}")));
                }
            }
        }
      #else
        #if (${col.isJavaNativeBinaryObject()})

                if (obj instanceof ${col.JavaNative}) {
                    set${col.JavaName}((${col.JavaNative})obj);
                } else {
                    set${col.JavaName}(null);// Binary as String is out of target.
                }
            }
        }
        #else

                if (obj instanceof ${col.JavaNative}) {
                    set${col.JavaName}((${col.JavaNative})obj);
                } else {
                    try {
                        set${col.JavaName}(new ${col.JavaNative}((String)obj));
                    } catch (RuntimeException e) {
                        String msg = "set${col.JavaName}(new ${col.JavaNative}((String)obj))";
                        throw new RuntimeException(msg + " threw the exception: value=[" + obj + "]", e);
                    }
                }
            }
        }
        #end
      #end
    #end
  #end
#else

        String msg = "This table has no primary-keys: " + getTableDbName();
        throw new IllegalStateException(msg);
#end

    }

    /**
     * ${database.ImplementComment}
     * 
     * @param primaryKeyMapString Primary-key map-string. (NotNull and NotEmpty)
     */
    public void acceptPrimaryKeyMapString(String primaryKeyMapString) {
        MapStringUtil.acceptPrimaryKeyMapString(primaryKeyMapString, this);
    }

    /**
     * ${database.ImplementComment}
     * 
     * @param columnValueMap Column-value map. (NotNull and NotEmpty)
     */
    public void acceptColumnValueMap(java.util.Map${database.filterGenericsString('String, ? extends Object')} columnValueMap) {
        if (columnValueMap == null) {
            String msg = "The argument[columnValueMap] should not be null.";
            throw new IllegalArgumentException(msg);
        }
        if (columnValueMap.isEmpty()) {
            String msg = "The argument[columnValueMap] should not be empty.";
            throw new IllegalArgumentException(msg);
        }
  #foreach ($col in $table.Columns)

        {
            final Object obj = columnValueMap.get("${col.Name}");
            if (obj == null) {
                _${col.UncapitalisedJavaName} = null; _isSetterInvoked${col.JavaName} = false; _modifiedProperties.remove("${col.JavaBeansRulePropertyName}");
            } else {
    #if ($col.isJavaNativeStringObject())

                checkTypeString(obj, "${col.UncapitalisedJavaName}", "${col.JavaNative}");
                set${col.JavaName}((String)obj);
            }
        }
    #else
      #if ($col.isJavaNativeDateObject())

                if (obj instanceof ${col.JavaNative}) {
                    set${col.JavaName}((${col.JavaNative})obj);
                } else {
                    set${col.JavaName}(new ${col.JavaNative}(parseDateString(obj, "${col.UncapitalisedJavaName}", "${col.JavaNative}")));
                }
            }
        }
      #else
        #if (${col.isJavaNativeBinaryObject()})

                if (obj instanceof ${col.JavaNative}) {
                    set${col.JavaName}((${col.JavaNative})obj);
                } else {
                    set${col.JavaName}(null);// Binary as String is out of target.
                }
            }
        }
        #else

                if (obj instanceof ${col.JavaNative}) {
                    set${col.JavaName}((${col.JavaNative})obj);
                } else {
                    try {
                        set${col.JavaName}(new ${col.JavaNative}((String)obj));
                    } catch (RuntimeException e) {
                        String msg = "set${col.JavaName}(new ${col.JavaNative}((String)obj))";
                        throw new RuntimeException(msg + " threw the exception: value=[" + obj + "]", e);
                    }
                }
            }
        }
        #end
      #end
    #end
  #end

    }

    /**
     * ${database.ImplementComment}
     * 
     * @param columnValueMapString Column-value map-string. (NotNull and NotEmpty)
     */
    public void acceptColumnValueMapString(String columnValueMapString) {
        MapStringUtil.acceptColumnValueMapString(columnValueMapString, this);
    }

    protected void checkTypeString(Object value, String propertyName, String typeName) {
        MapStringUtil.checkTypeString(value, propertyName, typeName);
    }

    protected long parseDateString(Object value, String propertyName, String typeName) {
        return MapStringUtil.parseDateString(value, propertyName, typeName);
    }

    // =====================================================================================
    //                                                                               Extract
    //                                                                               =======
    /**
     * ${database.ImplementComment}
     * 
     * @return Primary-key map-string. (NotNull)
     */
    public String extractPrimaryKeyMapString() {
        return MapStringUtil.extractPrimaryKeyMapString(this);
    }

    /**
     * Extract primary-key map-string.
     * 
     * @param startBrace Start-brace. (NotNull)
     * @param endBrace End-brace. (NotNull)
     * @param delimiter Delimiter. (NotNull)
     * @param equal Equal. (NotNull)
     * @return Primary-key map-string. (NotNull)
     */
    public String extractPrimaryKeyMapString(String startBrace, String endBrace, String delimiter, String equal) {
#if ($table.hasPrimaryKey())

        final String mapMarkAndStartBrace = MAP_STRING_MAP_MARK + startBrace;
        final StringBuffer sb = new StringBuffer();

  #foreach ($col in $table.PrimaryKey)
    #if ($col.isJavaNativeDateObject())

        sb.append(delimiter).append("${col.Name}").append(equal);
        sb.append((_${col.UncapitalisedJavaName} != null ? formatDate(_${col.UncapitalisedJavaName}) : ""));
    #else

        sb.append(delimiter).append("${col.Name}").append(equal);
        sb.append((_${col.UncapitalisedJavaName} != null ? _${col.UncapitalisedJavaName}.toString() : ""));
    #end
  #end

        sb.delete(0, delimiter.length()).insert(0, mapMarkAndStartBrace).append(endBrace);
        return sb.toString();
#else

        return extractColumnValueMapString(startBrace, endBrace, delimiter, equal);
#end

    }

    /**
     * ${database.ImplementComment}
     * 
     * @return Column-value map-string. (NotNull)
     */
    public String extractColumnValueMapString() {
        return MapStringUtil.extractColumnValueMapString(this);
    }

    /**
     * Extract column-value map-string.
     * 
     * @param startBrace Start-brace. (NotNull)
     * @param endBrace End-brace. (NotNull)
     * @param delimiter Delimiter. (NotNull)
     * @param equal Equal. (NotNull)
     * @return Column-value map-string. (NotNull)
     */
    public String extractColumnValueMapString(String startBrace, String endBrace, String delimiter, String equal) {
        final String mapMarkAndStartBrace = MAP_STRING_MAP_MARK + startBrace;
        final StringBuffer sb = new StringBuffer();

#foreach ($col in $table.Columns)
    #if ($col.isJavaNativeDateObject())

        sb.append(delimiter).append("${col.Name}").append(equal);
        sb.append((_${col.UncapitalisedJavaName} != null ? formatDate(_${col.UncapitalisedJavaName}) : ""));
    #else

        sb.append(delimiter).append("${col.Name}").append(equal);
        sb.append((_${col.UncapitalisedJavaName} != null ? _${col.UncapitalisedJavaName}.toString() : ""));
    #end
#end

        sb.delete(0, delimiter.length()).insert(0, mapMarkAndStartBrace).append(endBrace);
        return sb.toString();
    }
#if (${table.hasAllCommonColumn()})

    /**
     * ${database.ImplementComment}
     * 
     * @return Column-value map-string. (NotNull)
     */
    public String extractCommonColumnValueMapString() {
        final String startBrace = MAP_STRING_START_BRACE;
        final String endBrace = MAP_STRING_END_BRACE;
        final String delimiter = MAP_STRING_DELIMITER;
        final String equal = MAP_STRING_EQUAL;
        return extractCommonColumnValueMapString(startBrace, endBrace, delimiter, equal);
    }

    /**
     * Extract common-column-value map-string.
     * 
     * @param startBrace Start-brace. (NotNull)
     * @param endBrace End-brace. (NotNull)
     * @param delimiter Delimiter. (NotNull)
     * @param equal Equal. (NotNull)
     * @return Common-column-value map-string. (NotNull)
     */
    public String extractCommonColumnValueMapString(String startBrace, String endBrace, String delimiter, String equal) {
        final String mapMarkAndStartBrace = MAP_STRING_MAP_MARK + startBrace;
        final StringBuffer sb = new StringBuffer();
  #foreach ($columnName in ${database.CommonColumnNameList})
    #set ($uncapitalisedJavaName = ${database.convertUncapitalisedJavaNameByJdbcNameAsColumn(${columnName})})
    #set ($col = $table.getColumn($columnName))
    #if ($col.isJavaNativeDateObject())

        sb.append(delimiter).append("${columnName}").append(equal);
        sb.append((_${col.UncapitalisedJavaName} != null ? formatDate(_${uncapitalisedJavaName}) : ""));
    #else

        sb.append(delimiter).append("${columnName}").append(equal);
        sb.append((_${col.UncapitalisedJavaName} != null ? _${uncapitalisedJavaName}.toString() : ""));
    #end
  #end

        sb.delete(0, delimiter.length()).insert(0, mapMarkAndStartBrace).append(endBrace);
        return sb.toString();
    }
#end

## TODO: Is it unnecessary???
## #foreach ($foreignKeys in $table.ForeignKeys)
##   #set ($foreignVariableName = "${glParentVariablePrefix}${foreignKeys.ForeignPropertyNameInitCap}")
## 
##         {
##             sb.append(delimiter);
##             if (${foreignVariableName} != null) {
##                 sb.append("${foreignKeys.ForeignPropertyName}").append(equal);
##                 sb.append(${foreignVariableName}.extractColumnValueMapString(startBrace, endBrace, delimiter, equal));
##             } else {
##                 sb.append("${foreignKeys.ForeignPropertyName}").append(equal).append("null");
##             }
##         }
## #end
## #foreach ($refferer in $table.Referrers)
##   #set ($reffererTable = $refferer.Table)
##   #set ($reffererEntityClassName = "${glProjectPrefix}${reffererTable.JavaName}")
##   #set ($reffererVariableName = "${glChildrenVariablePrefix}${refferer.ReffererPropertyNameInitCap}")
## 
##         {
##             final String listMarkAndStartBrace = MAP_STRING_LIST_MARK + startBrace;
##             sb.append(delimiter).append("${refferer.ReffererPropertyName}").append(equal);
##             if (${reffererVariableName} != null) {
##                 final StringBuffer reffererTmpSb = new StringBuffer();
##                 for (final java.util.Iterator ite = ${reffererVariableName}.iterator(); ite.hasNext(); ) {
##                     final ${glPackageExtendedEntity}.${reffererEntityClassName} refferer;
##                     refferer = (${glPackageExtendedEntity}.${reffererEntityClassName})ite.next();
##                     reffererTmpSb.append(delimiter);
##                     reffererTmpSb.append(refferer.extractColumnValueMapString(startBrace, endBrace, delimiter, equal));
##                 }
##                 reffererTmpSb.delete(0, delimiter.length()).insert(0, listMarkAndStartBrace).append(endBrace);
##                 sb.append(reffererTmpSb);
##             } else {
##                 sb.append("null");
##             }
##         }
## #end

    protected String formatDate(java.util.Date value) {
        return MapStringUtil.formatDate(value);
    }

    // =====================================================================================
    //                                                                         Determination
    //                                                                         =============
    /**
     * ${database.ImplementComment}
     * 
     * @return Determination.
     */
    public boolean hasPrimaryKeyValue() {
  #foreach ($col in $table.PrimaryKey)

        if (_${col.UncapitalisedJavaName} == null) {
            return false;
        }
  #end

        return true;
    }

    // =====================================================================================
    //                                                                   Modified Properties
    //                                                                   ===================
    public java.util.Set${database.filterGenericsString('String')} getModifiedPropertyNames() {
        return _modifiedProperties.getPropertyNames();
    }

    protected EntityModifiedProperties newEntityModifiedProperties() {
        return new EntityModifiedProperties();
    }

    // =====================================================================================
    //                                                                        Basic Override
    //                                                                        ==============
#if ($table.hasPrimaryKey())

    /**
     * ${database.OverrideComment}
     * If the primary-key of the other is same as this one, returns true.
     * 
     * @param other Other entity.
     * @return Comparing result.
     */
    public boolean equals(Object other) {
        if (other == null) {
            return false;
        }
        if (!(other instanceof $myClassName)) {
            return false;
        }
        final $myClassName otherEntity = ($myClassName)other;
  #foreach ($col in $table.PrimaryKey)

        if (get${col.JavaName}() == null || !get${col.JavaName}().equals(otherEntity.get${col.JavaName}())) {
            return false;
        }
  #end

        return true;
    }

    /**
     * ${database.OverrideComment}
     * Calculates hash-code from primary-key.
     * 
     * @return Hash-code from primary-keys.
     */
    public int hashCode() {
        int result = 0;
  #foreach ($col in $table.PrimaryKey)

        if (this.get${col.JavaName}() != null) {
            result = result + get${col.JavaName}().hashCode();
        }
  #end

        return result;
    }
#else

    /**
     * ${database.OverrideComment}
     * If the all-column value of the other is same as this one, returns true.
     * 
     * @param other Other entity. (Nullable)
     * @return Comparing result. If other is null, returns false.
     */
    public boolean equals(Object other) {
        if (other == null) {
            return false;
        }
        if (!(other instanceof $myClassName)) {
            return false;
        }
        final $myClassName otherEntity = ($myClassName)other;
  #foreach ($col in $table.Columns)

        if (get${col.JavaName}() == null || !get${col.JavaName}().equals(otherEntity.get${col.JavaName}())) {
            return false;
        }
  #end

        return true;
    }

    /**
     * ${database.OverrideComment}
     * Calculates hash-code from all-columns.
     * 
     * @return Hash-code from all-columns.
     */
    public int hashCode() {
        int result = 0;
  #foreach ($col in $table.Columns)

        if (this.get${col.JavaName}() != null) {
            result = result + this.get${col.JavaName}().hashCode();
        }
  #end

        return result;
    }
#end

    /**
     * ${database.OverrideComment}
     * 
     * @return Column-value map-string. (NotNull)
     */
    public String toString() {
        final String delimiter = ",";
        final StringBuffer sb = new StringBuffer();
#foreach ($col in $table.Columns)

        sb.append(delimiter).append(get${col.JavaName}());
#end

        sb.delete(0, delimiter.length());
        sb.insert(0, "{").append("}");
        return sb.toString();
    }
}
