package ${myBaseEntityPackageName};
#set ($myClassName = "${myBaseObjectClassName}")

#if (${table.hasAllCommonColumn()})

import ${glPackageBaseCommon}.${glEntityDefinedCommonColumnInterfaceName};
#else

import ${glPackageBaseCommon}.${glEntityInterfaceName};
#end
import ${glPackageBaseCommonDBMeta}.${glDBMetaInterfaceName};
#if (!$isSql2Entity)
import ${glPackageBaseCommonDBMeta}.${glDBMetaInstanceHandlerName};
#end
#set ($myEntityInterfaceName = "")
#if (${table.hasAllCommonColumn()})
  #set ($myEntityInterfaceName = ${glEntityDefinedCommonColumnInterfaceName})
#else
  #set ($myEntityInterfaceName = ${glEntityInterfaceName})
#end

/**
 * The entity of ${table.Name}.
 * 
 * <pre>
 * [primary-key]
 *     ${table.PrimaryKeyNameCommaString}
 * 
 * [column-property]
 *     ${table.ColumnNameCommaString}
 * 
 * [foreign-property]
 *     ${table.ForeignPropertyNameCommaString}
 * 
 * [refferer-property]
 *     ${table.ReferrerPropertyNameCommaString}
 * 
 * [sequence]
 *     ${table.DefinedSequenceName}
 * 
 * [identity]
 *     ${table.IdentityPropertyName}
 * 
 * [update-date]
 *     ${table.UpdateDateJavaName}
 * 
 * [version-no]
 *     ${table.VersionNoJavaName}
 * 
 * </pre>
 * 
 * @author ${database.ClassAuthor}
 */
public abstract class $myClassName implements ${myEntityInterfaceName}, java.io.Serializable {

    /** Serial version UID. (Default) */
    private static final long serialVersionUID = 1L;

    /** TABLE-Annotation for S2Dao */
    public static final String TABLE = "${table.AnnotationTableName}";

#if ($table.isUseUpdateDate())
    
    /** TIMESTAMP-Annotation */
    public static final String TIMESTAMP_PROPERTY = "$table.UpdateDateUncapitalisedJavaName";
#end
#if ($table.isUseVersionNo())
    
    /** VERSION_NO-Annotation */
    public static final String VERSION_NO_PROPERTY = "$table.VersionNoUncapitalisedJavaName";
#end
#if ($table.isUseIdentity())
    
    /** ID-Annotation */
    public static final String ${table.IdentityPropertyName}_ID = "identity";
#end

    // ===================================================================================
    //                                                                           Attribute
    //                                                                           =========
    /** Entity modified properties. (for S2Dao) */
    protected EntityModifiedProperties _modifiedProperties = newEntityModifiedProperties();

#foreach ($col in $table.Columns)
  #if ($database.isMakeDeprecated())

    /** The value of ${col.UncapitalisedJavaName}. ColumnDefinition -- ${col.columnDefinitionLineDisp}*/
    protected ${col.JavaNative} _${col.UncapitalisedJavaName};

    /** Has the setter of ${col.UncapitalisedJavaName} been invoked? */
    protected boolean _isSetterInvoked${col.JavaName};
  #else

    /** The value of ${col.UncapitalisedJavaName}. ColumnDefinition -- ${col.columnDefinitionLineDisp}*/
    protected ${col.JavaNative} _${col.UncapitalisedJavaName};
  #end
#end

    // ===================================================================================
    //                                                                         Constructor
    //                                                                         ===========
    /**
     * Constructor.
     */
    public ${myClassName}() {
    }

#if ($isSql2Entity)
    // ===================================================================================
    //                                                                              DBMeta
    //                                                                              ======
    /**
     * ${database.ImplementComment}
     * 
     * @return DBMeta. (NotNull)
     */
    public ${glDBMetaInterfaceName} getDBMeta() {
        return ${myDBMetaPackageName}.${myDBMetaClassName}.getInstance();
    }
#else

    // ===================================================================================
    //                                                                              DBMeta
    //                                                                              ======
    /**
     * ${database.ImplementComment}
     * 
     * @return DBMeta. (NotNull)
     */
    public ${glDBMetaInterfaceName} getDBMeta() {
        return ${glDBMetaInstanceHandlerName}.getInstanceByTableDbName(getTableDbName());
    }
#end

    // ===================================================================================
    //                                                                          Table Name
    //                                                                          ==========
    /**
     * ${database.ImplementComment}
     * 
     * @return Table db-name. (NotNull)
     */
    public String getTableDbName() {
        return "${table.name}";
    }

    /**
     * ${database.ImplementComment}
     * 
     * @return Table cap-prop-name. (NotNull)
     */
    public String getTableCapPropName() {
        return "${table.javaName}";
    }

    /**
     * ${database.ImplementComment}
     * 
     * @return Table uncap-prop-name. (NotNull)
     */
    public String getTableUncapPropName() {
        return "${table.uncapitalisedJavaName}";
    }

    // ===================================================================================
    //                                                                            Accessor
    //                                                                            ========
#foreach ($col in $table.Columns)

    /** Column-Annotation for S2Dao. ColumnDefinition -- ${col.columnDefinitionLineDisp}*/
    public static final String ${col.JavaBeansRulePropertyName}_COLUMN = "${col.Name}";

    /**
     * Get the value of ${col.UncapitalisedJavaName}. <br />
     * {${col.columnDefinitionLineDisp}}
     * 
     * @return The value of ${col.UncapitalisedJavaName}. (Nullable)
     */
    public ${col.JavaNative} get${col.JavaName}() {
        return _${col.UncapitalisedJavaName};
    }

    /**
     * Set the value of ${col.UncapitalisedJavaName}. <br />
     * {${col.columnDefinitionLineDisp}}
     * 
     * @param ${col.UncapitalisedJavaName} The value of ${col.UncapitalisedJavaName}. (Nullable)
     */
    public void set${col.JavaName}(${col.JavaNative} ${col.UncapitalisedJavaName}) {
        _modifiedProperties.addPropertyName("${col.JavaBeansRulePropertyName}");
        _${col.UncapitalisedJavaName} = ${col.UncapitalisedJavaName};
    }
#end

#if ($table.hasAllCommonColumn())
  #foreach ($columnName in ${database.commonColumnNameConvertionList})
    #set ($filteredColumnName = ${database.filterCommonColumn(${columnName})})
    #set ($commonColumnMap = ${database.commonColumnMap})
    #set ($columnType = ${commonColumnMap.get(${columnName})})
    #set ($javaNative = ${database.convertJavaNativeByJdbcType(${columnType})})
    #set ($javaName = ${database.convertJavaNameByJdbcNameAsColumn(${filteredColumnName})})
    #set ($uncapitalisedJavaName = ${database.convertUncapitalisedJavaNameByJdbcNameAsColumn(${filteredColumnName})})
    #set ($targetJavaName = ${table.findTargetColumnJavaNameByCommonColumnName(${columnName})})

    /**
     * Get the value of ${uncapitalisedJavaName}. <br />
     * 
     * @return The value of ${uncapitalisedJavaName}. (Nullable)
     */
    public ${javaNative} get${javaName}() {
        return get${targetJavaName}();
    }

    /**
     * Set the value of ${uncapitalisedJavaName}. <br />
     * 
     * @param ${uncapitalisedJavaName} The value of ${uncapitalisedJavaName}. (Nullable)
     */
    public void set${javaName}(${javaNative} ${uncapitalisedJavaName}) {
        set${targetJavaName}(${uncapitalisedJavaName});
    }
  #end
#end

    // ===================================================================================
    //                                                                     Classify Method
    //                                                                     ===============
#foreach ($col in $table.Columns)
  #if (${col.hasClassification()})
    #foreach ($classificationMap in $col.ClassificationMapList)

    /**
     * Classify the value of ${col.UncapitalisedJavaName} as ${classificationMap.get('name')}. <br />
     * ${database.getMapValue($classificationMap, 'comment')} <br />
     */
    public void classify${col.JavaName}${classificationMap.get('name')}() {
        String code = ${glPackageBaseCommon}.${glClassificationDefinition}.CODE_${col.ClassificationName}_${classificationMap.get('name')};
        set${col.JavaName}(new ${col.JavaNative}(code));
    }
    #end
  #end
#end

    // ===================================================================================
    //                                                        Classification Determination
    //                                                        ============================
#foreach ($col in $table.columns)
  #if (${col.hasClassification()})
    #foreach ($classificationMap in $col.classificationMapList)

    /**
     * Is the value of ${col.UncapitalisedJavaName} '${classificationMap.get('name')}'? <br />
     * ${database.getMapValue($classificationMap, 'comment')} <br />
     * <pre>
     * The difference of capital letters and small letters is NOT distinguished.
     * If the value is null, this method returns false!
     * </pre>
     * 
     * @return Determanation.
     */
    public boolean is${col.JavaName}${classificationMap.get('name')}() {
        return helpEqualingIgnoreCaseClassification(_${col.UncapitalisedJavaName}, ${glPackageBaseCommon}.${glClassificationDefinition}.CODE_${col.ClassificationName}_${classificationMap.get('name')});
    }
    #end
  #end
#end

#if (${table.hasClassification()})
    private boolean helpEqualingIgnoreCaseClassification(Object value, String code) {
        if (value == null) { return false; }
        return code.equalsIgnoreCase(value.toString());
    }
#end

    // ===================================================================================
    //                                                               Classification Getter
    //                                                               =====================
#foreach ($col in $table.Columns)
  #if (${col.hasClassification()})
    #if (${col.hasClassificationName()})

    /**
     * Get the value of ${col.UncapitalisedJavaName} as classification-name.
     * 
     * @return The value of ${col.UncapitalisedJavaName} as classification-name. (Nullable)
     */
    public String get${col.JavaName}Name() {
        return helpGettingFromClassificationMap(_${col.UncapitalisedJavaName}, ${glPackageBaseCommon}.${glClassificationDefinition}.CODE_NAME_MAP_${col.ClassificationName});
    }
    #end
    #if (${col.hasClassificationAlias()})

    /**
     * Get the value of ${col.UncapitalisedJavaName} as classification-alias.
     * 
     * @return The value of ${col.UncapitalisedJavaName} as classification-alias. (Nullable)
     */
    public String get${col.JavaName}Alias() {
        return helpGettingFromClassificationMap(_${col.UncapitalisedJavaName}, ${glPackageBaseCommon}.${glClassificationDefinition}.CODE_ALIAS_MAP_${col.ClassificationName});
    }
    #end
  #end
#end

#if (${table.hasClassification()})
    private String helpGettingFromClassificationMap(Object key, java.util.Map${database.filterGenericsString('String, String')} map) {
        if (key == null) { return null; }
        return (String)map.get(key.toString()); 
    }
#end

    // ===================================================================================
    //                                                                       Foreign Table
    //                                                                       =============
#set ($foreignKeysIndex = 0)
#foreach ($foreignKeys in $table.ForeignKeys)
  #set ($foreignVariableName = "${glParentVariablePrefix}${foreignKeys.ForeignPropertyNameInitCap}")
  #set ($foreignDaoClassName = "${glProjectPrefix}${foreignKeys.foreignTable.JavaName}Dao")
  #set ($foreignEntityClassName = "${glProjectPrefix}${foreignKeys.foreignTable.JavaName}")
  #set ($parentCBClassName = "${glProjectPrefix}${foreignKeys.foreignTable.JavaName}${glConditionBeanInitialName}")

    // /* * * * * * * * * * * * * * * * * * * * * * *
    //   ForeignTable    = [${foreignKeys.foreignTable.name}]
    //   ForeignProperty = [${foreignKeys.foreignPropertyName}]
    // * * * * * * * * */

    /** RELNO of foreign table for s2dao. */
    public static final int ${foreignKeys.ForeignJavaBeansRulePropertyName}_RELNO = ${foreignKeysIndex};

    /** RELKEYS of foreign table for s2dao. */
    public static final String ${foreignKeys.ForeignJavaBeansRulePropertyName}_RELKEYS = "$foreignKeys.RelationKeysCommaString";

    /** The entity of foreign table. */
    protected ${glPackageExtendedEntity}.${foreignEntityClassName} ${foreignVariableName};

    /**
     * Get the entity of foreign table without lazyload.
     * 
     * @return The entity of foreign table.
     */
    public ${glPackageExtendedEntity}.${foreignEntityClassName} get${foreignKeys.foreignPropertyNameInitCap}() {
        return ${foreignVariableName};
    }

    /**
     * Set the entity of foreign table.
     * 
     * @param v The entity of foreign table.
     */
    public void set${foreignKeys.foreignPropertyNameInitCap}(${glPackageExtendedEntity}.${foreignEntityClassName} entity) {
        this.${foreignVariableName} = entity;
    }

    /**
     * Has relation object of ${foreignKeys.foreignPropertyName}.
     * 
     * @return Determination.
     */
    public boolean hasRelation${foreignKeys.foreignPropertyNameInitCap}() {
        return ${foreignVariableName} != null && ${foreignVariableName}.hasPrimaryKeyValue();
    }

  #set ($foreignKeysIndex = $foreignKeysIndex + 1)
#end

    // ===================================================================================
    //                                                                      Refferer Table
    //                                                                      ==============
#foreach ($refferer in $table.Referrers)
  #set ($reffererTable = $refferer.Table)
  #set ($reffererEntityClassName = "${glProjectPrefix}${reffererTable.JavaName}")
  #set ($reffererDaoClassName = "${reffererEntityClassName}Dao")
  #set ($reffererCBClassName = "${reffererEntityClassName}${glConditionBeanInitialName}")
  #set ($reffererVariableName = "${glChildrenVariablePrefix}${refferer.ReffererPropertyNameInitCap}")
  #set ($reffererEntityLongClassName = "${glPackageExtendedEntity}.${reffererEntityClassName}")

  #if (${refferer.isOneToOne()})

    // /* * * * * * * * * * * * * * * * * * * * * * * {as one}
    //   ReffererTable    = [${refferer.Table.Name}]
    //   ReffererProperty = [${refferer.ReffererPropertyName}]
    // * * * * * * * * */

    /** RELNO of foreign table for s2dao. */
    public static final int ${refferer.ReffererJavaBeansRulePropertyNameAsOne}_RELNO = ${foreignKeysIndex};

    /** RELKEYS of foreign table for s2dao. */
    public static final String ${refferer.ReffererJavaBeansRulePropertyNameAsOne}_RELKEYS = "$refferer.RelationKeysCommaStringForOneToOneRefferer";
    #set ($foreignKeysIndex = $foreignKeysIndex + 1)
  #else

    // /* * * * * * * * * * * * * * * * * * * * * * *
    //   ReffererTable    = [${refferer.Table.Name}]
    //   ReffererProperty = [${refferer.ReffererPropertyName}]
    // * * * * * * * * */
  #end

    /** The list of refferer table. */
    protected java.util.List${database.filterGenericsString(${reffererEntityLongClassName})} $reffererVariableName;

    /**
     * Get the list of refferer table without lazyload.
     * If it's not loaded yet, returns null.
     * 
     * @return The list of refferer table. (Nullable)
     */
    public java.util.List${database.filterGenericsString(${reffererEntityLongClassName})} get${refferer.ReffererPropertyNameInitCap}() {
        return ${reffererVariableName};
    }

    /**
     * Set the list of refferer table.
     * 
     * @param value The list of refferer table. (Nullable)
     */
    public void set${refferer.ReffererPropertyNameInitCap}(java.util.List${database.filterGenericsString(${reffererEntityLongClassName})} entity) {
        this.${reffererVariableName} = entity;
    }
  #if (${refferer.isOneToOne()})

    /**
     * Get the entity of refferer table as one without lazyload.
     * If it's not loaded yet, returns null.
     * If the size of the refferer table list is zero, throws the exception.
     * 
     * @return The entity of refferer table. (Nullable)
     */
    public ${reffererEntityLongClassName} get${refferer.reffererPropertyNameInitCapAsOne}() {
        final java.util.List${database.filterGenericsString(${reffererEntityLongClassName})} ls = get${refferer.ReffererPropertyNameInitCap}();
        if (ls == null || ls.isEmpty()) {
            return null;
        }
        if (ls.size() > 1) {
            String msg = "The size of the list must be one because this relation is 'one-to-one'";
            msg = msg + ": list=" + ls + ": toString()=" + toString();
            throw new IllegalStateException(msg);
        }
        return (${reffererEntityLongClassName})ls.get(0);
    }

    /**
     * Set the entity of refferer table as one.
     * 
     * @param entity The entity of refferer table. (Nullable)
     */
    public void set${refferer.reffererPropertyNameInitCapAsOne}(${reffererEntityLongClassName} entity) {
        if (entity == null) {
            ${reffererVariableName} = null;
            return;
        }
        final java.util.List${database.filterGenericsString(${reffererEntityLongClassName})} ls = new java.util.ArrayList${database.filterGenericsString(${reffererEntityLongClassName})}();
        ls.add(entity);
        ${reffererVariableName} = ls;
    }

    /**
     * Has relation of ${refferer.reffererPropertyNameAsOne}.
     * 
     * @return Determination.
     */
    public boolean hasRelation${refferer.reffererPropertyNameInitCapAsOne}() {
        return get${refferer.reffererPropertyNameInitCapAsOne}() != null && get${refferer.reffererPropertyNameInitCapAsOne}().hasPrimaryKeyValue();
    }
  #end
#end
#if ($database.isMakeRecentlyDeprecated())

    // ===================================================================================
    //                                                                              Accept
    //                                                                              ======
    /**
     * ${database.ImplementComment}
     * 
     * @param primaryKeyMap Primary key map. (NotNull and NotEmpty)
     * @deprecated Please use ${myDBMetaClassName}.getInstance().acceptPrimaryKeyMap(entity, primaryKeyMap);
     */
    public void acceptPrimaryKeyMap(java.util.Map${database.filterGenericsString('String, ? extends Object')} primaryKeyMap) {
        getDBMeta().acceptPrimaryKeyMap(this, primaryKeyMap);
    }

    /**
     * ${database.ImplementComment}
     * 
     * @param primaryKeyMapString Primary-key map-string. (NotNull and NotEmpty)
     * @deprecated Please use ${myDBMetaClassName}.getInstance().acceptPrimaryKeyMapString(entity, primaryKeyMapString);
     */
    public void acceptPrimaryKeyMapString(String primaryKeyMapString) {
        getDBMeta().acceptPrimaryKeyMapString(this, primaryKeyMapString);
    }

    /**
     * ${database.ImplementComment}
     * 
     * @param columnValueMap Column-value map. (NotNull and NotEmpty)
     * @deprecated Please use ${myDBMetaClassName}.getInstance().acceptColumnValueMap(entity, columnValueMap);
     */
    public void acceptColumnValueMap(java.util.Map${database.filterGenericsString('String, ? extends Object')} columnValueMap) {
        getDBMeta().acceptColumnValueMap(this, columnValueMap);
    }

    /**
     * ${database.ImplementComment}
     * 
     * @param columnValueMapString Column-value map-string. (NotNull and NotEmpty)
     * @deprecated Please use ${myDBMetaClassName}.getInstance().acceptColumnValueMap(entity, columnValueMapString);
     */
    public void acceptColumnValueMapString(String columnValueMapString) {
        getDBMeta().acceptColumnValueMapString(this, columnValueMapString);
    }

    // ===================================================================================
    //                                                                             Extract
    //                                                                             =======
    /**
     * ${database.ImplementComment}
     * 
     * @return Primary-key map-string. (NotNull)
     * @deprecated Please use ${myDBMetaClassName}.getInstance().extractPrimaryKeyMapString(entity);
     */
    public String extractPrimaryKeyMapString() {
        return getDBMeta().extractPrimaryKeyMapString(this);
    }

    /**
     * Extract primary-key map-string.
     * 
     * @param startBrace Start-brace. (NotNull)
     * @param endBrace End-brace. (NotNull)
     * @param delimiter Delimiter. (NotNull)
     * @param equal Equal. (NotNull)
     * @return Primary-key map-string. (NotNull)
     * @deprecated Please use ${myDBMetaClassName}.getInstance().extractPrimaryKeyMapString(entity, startBrace, endBrace, delimiter, equal);
     */
    public String extractPrimaryKeyMapString(String startBrace, String endBrace, String delimiter, String equal) {
        return getDBMeta().extractPrimaryKeyMapString(this, startBrace, endBrace, delimiter, equal);
    }

    /**
     * ${database.ImplementComment}
     * 
     * @return Column-value map-string. (NotNull)
     * @deprecated Please use ${myDBMetaClassName}.getInstance().extractColumnValueMapString(entity);
     */
    public String extractColumnValueMapString() {
        return getDBMeta().extractColumnValueMapString(this);
    }

    /**
     * Extract column-value map-string.
     * 
     * @param startBrace Start-brace. (NotNull)
     * @param endBrace End-brace. (NotNull)
     * @param delimiter Delimiter. (NotNull)
     * @param equal Equal. (NotNull)
     * @return Column-value map-string. (NotNull)
     * @deprecated Please use ${myDBMetaClassName}.getInstance().extractColumnValueMapString(entity, startBrace, endBrace, delimiter, equal);
     */
    public String extractColumnValueMapString(String startBrace, String endBrace, String delimiter, String equal) {
        return getDBMeta().extractColumnValueMapString(this, startBrace, endBrace, delimiter, equal);
    }

#if (${table.hasAllCommonColumn()})

    /**
     * ${database.ImplementComment}
     * 
     * @return Column-value map-string. (NotNull)
     * @deprecated Please use ${myDBMetaClassName}.getInstance().extractCommonColumnValueMapString(entity);
     */
    public String extractCommonColumnValueMapString() {
        return getDBMeta().extractCommonColumnValueMapString(this);
    }

    /**
     * Extract common-column-value map-string.
     * 
     * @param startBrace Start-brace. (NotNull)
     * @param endBrace End-brace. (NotNull)
     * @param delimiter Delimiter. (NotNull)
     * @param equal Equal. (NotNull)
     * @return Common-column-value map-string. (NotNull)
     * @deprecated Please use ${myDBMetaClassName}.getInstance().extractCommonColumnValueMapString(entity, startBrace, endBrace, delimiter, equal);
     */
    public String extractCommonColumnValueMapString(String startBrace, String endBrace, String delimiter, String equal) {
        return getDBMeta().extractCommonColumnValueMapString(this, startBrace, endBrace, delimiter, equal);
    }
#end
#end

    // ===================================================================================
    //                                                                       Determination
    //                                                                       =============
    /**
     * ${database.ImplementComment}
     * 
     * @return Determination.
     */
    public boolean hasPrimaryKeyValue() {

#foreach ($col in $table.PrimaryKey)
        if (_${col.UncapitalisedJavaName} == null) {
            return false;
        }
#end

        return true;
    }

    // ===================================================================================
    //                                                                 Modified Properties
    //                                                                 ===================
    /**
     * Get modified property names. (S2Dao uses this for updateModifiedProperties())
     * 
     * @return Modified property names. (NotNull)
     */
    public java.util.Set${database.filterGenericsString('String')} getModifiedPropertyNames() {
        return _modifiedProperties.getPropertyNames();
    }

    /**
     * New entity modified properties. You can override this at the sub-class if you need it.
     * 
     * @return Entity modified properties. (NotNull)
     */
    protected EntityModifiedProperties newEntityModifiedProperties() {
        return new EntityModifiedProperties();
    }

    /**
     * Clear modified property names.
     */
    public void clearModifiedPropertyNames() {
        _modifiedProperties.clear();
    }

    // ===================================================================================
    //                                                                      Basic Override
    //                                                                      ==============
#if ($table.hasPrimaryKey())

    /**
     * ${database.OverrideComment}
     * If the primary-key of the other is same as this one, returns true.
     * 
     * @param other Other entity.
     * @return Comparing result.
     */
    public boolean equals(Object other) {
        if (other == null) {
            return false;
        }
        if (!(other instanceof $myClassName)) {
            return false;
        }
        final $myClassName otherEntity = ($myClassName)other;

#foreach ($col in $table.PrimaryKey)
        if (get${col.JavaName}() == null || !get${col.JavaName}().equals(otherEntity.get${col.JavaName}())) {
            return false;
        }
#end

        return true;
    }

    /**
     * ${database.OverrideComment}
     * Calculates hash-code from primary-key.
     * 
     * @return Hash-code from primary-keys.
     */
    public int hashCode() {
        int result = 0;

#foreach ($col in $table.PrimaryKey)
        if (this.get${col.JavaName}() != null) {
            result = result + get${col.JavaName}().hashCode();
        }
#end

        return result;
    }
#else

    /**
     * ${database.OverrideComment}
     * If the all-column value of the other is same as this one, returns true.
     * 
     * @param other Other entity. (Nullable)
     * @return Comparing result. If other is null, returns false.
     */
    public boolean equals(Object other) {
        if (other == null) {
            return false;
        }
        if (!(other instanceof $myClassName)) {
            return false;
        }
        final $myClassName otherEntity = ($myClassName)other;

#foreach ($col in $table.Columns)
        if (get${col.JavaName}() == null || !get${col.JavaName}().equals(otherEntity.get${col.JavaName}())) {
            return false;
        }
#end

        return true;
    }

    /**
     * ${database.OverrideComment}
     * Calculates hash-code from all-columns.
     * 
     * @return Hash-code from all-columns.
     */
    public int hashCode() {
        int result = 0;

#foreach ($col in $table.Columns)
        if (this.get${col.JavaName}() != null) {
            result = result + this.get${col.JavaName}().hashCode();
        }
#end

        return result;
    }
#end

    /**
     * ${database.OverrideComment}
     * 
     * @return Column-value map-string. (NotNull)
     */
    public String toString() {
        final String delimiter = ",";
        final StringBuffer sb = new StringBuffer();

#foreach ($col in $table.Columns)
        sb.append(delimiter).append(get${col.JavaName}());
#end

        sb.delete(0, delimiter.length());
        sb.insert(0, "{").append("}");
        return sb.toString();
    }
}
