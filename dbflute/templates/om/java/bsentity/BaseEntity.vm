${database.allClassCopyright}package ${myBaseEntityPackageName};
#set ($myClassName = "${myBaseObjectClassName}")

import java.util.*;
	
#if (${table.hasAllCommonColumn()})
import ${glPackageBaseCommon}.${glEntityDefinedCommonColumnInterfaceName};
#else
import ${glPackageBaseCommon}.${glEntityInterfaceName};
#end
import ${glPackageBaseCommonDBMeta}.${glDBMetaInterfaceName};
#if (!$isSql2Entity)
import ${glPackageBaseCommonDBMeta}.${glDBMetaInstanceHandlerName};
#end
#set ($myEntityInterfaceName = "")
#if (${table.hasAllCommonColumn()})
  #set ($myEntityInterfaceName = ${glEntityDefinedCommonColumnInterfaceName})
#else
  #set ($myEntityInterfaceName = ${glEntityInterfaceName})
#end
import ${myExtendedEntityPackageName}.*;

/**
 * The entity of ${table.basicInfoDispString}.
 * <pre>
 * [primary-key]
 *     ${table.primaryKeyNameCommaString}
 * 
 * [column]
 *     ${table.columnNameCommaString}
 * 
 * [sequence]
 *     ${table.definedSequenceName}
 * 
 * [identity]
 *     ${table.identityColumnName}
 * 
 * [version-no]
 *     ${table.versionNoColumnName}
 * 
 * [foreign-table]
 *     ${table.foreignTableNameCommaString}
 * 
 * [referrer-table]
 *     ${table.referrerTableNameCommaString}
 * 
 * [foreign-property]
 *     ${table.foreignPropertyNameCommaString}
 * 
 * [referrer-property]
 *     ${table.referrerPropertyNameCommaString}
 * </pre>
 * @author ${database.ClassAuthor}
 */${database.outputSuppressWarningsAfterLineSeparator()}
public abstract class $myClassName implements ${myEntityInterfaceName}, java.io.Serializable {

    // ===================================================================================
    //                                                                          Definition
    //                                                                          ==========
    /** Serial version UID. (Default) */
    private static final long serialVersionUID = 1L;

    /** TABLE-Annotation for S2Dao. The value is ${table.annotationTableName}. */
    public static final String TABLE = "${table.annotationTableName}";

#if ($table.isUseUpdateDate())
    
    /** TIMESTAMP-Annotation */
    public static final String TIMESTAMP_PROPERTY = "$table.updateDatePropertyName";
#end
#if ($table.isUseVersionNo())
    
    /** VERSION_NO-Annotation */
    public static final String VERSION_NO_PROPERTY = "$table.versionNoPropertyName";
#end
#if ($table.isUseIdentity())

    /** ID-Annotation */
    public static final String ${table.identityPropertyName}_ID = "identity";
#else
#if ($table.isUseSequence() && $table.isAvailableSequenceAssignedIdAnnotation())

    /** ID-Annotation */
    public static final String ${table.assignedPropertyName}_ID = "assigned";
#end
#end

    // ===================================================================================
    //                                                                           Attribute
    //                                                                           =========
    // -----------------------------------------------------
    //                                                Column
    //                                                ------
#foreach ($col in $table.columns)
    /** The attribute of the column '${col.name}'. {${col.columnDefinitionLineDisp}} */
    protected ${col.javaNative} _${col.uncapitalisedJavaName};

#end
    // -----------------------------------------------------
    //                                              Internal
    //                                              --------
    /** The attribute of entity modified properties. (for S2Dao) */
    protected EntityModifiedProperties _modifiedProperties = newEntityModifiedProperties();
#if (${table.hasAllCommonColumn()})

    /** Is common column auto set up effective? */
    protected boolean _canCommonColumnAutoSetup = true;
#end
	
    // ===================================================================================
    //                                                                         Constructor
    //                                                                         ===========
    public ${myClassName}() {
    }

    // ===================================================================================
    //                                                                          Table Name
    //                                                                          ==========
    public String getTableDbName() {
        return "${table.name}";
    }

    public String getTablePropertyName() {// as JavaBeansRule
        return "${table.javaBeansRulePropertyName}";
    }

#if ($isSql2Entity)
    // ===================================================================================
    //                                                                              DBMeta
    //                                                                              ======
    public ${glDBMetaInterfaceName} getDBMeta() {
        return ${myDBMetaPackageName}.${myDBMetaClassName}.getInstance();
    }
#else
    // ===================================================================================
    //                                                                              DBMeta
    //                                                                              ======
    public ${glDBMetaInterfaceName} getDBMeta() {
        return ${glDBMetaInstanceHandlerName}.findDBMeta(getTableDbName());
    }
#end

    // ===================================================================================
    //                                                          Classification Classifying
    //                                                          ==========================
#foreach ($col in $table.columns)
  #if (${col.hasClassification()})
    #foreach ($classificationMap in $col.classificationMapList)

    /**
     * Classify the value of ${col.uncapitalisedJavaName} as ${classificationMap.get('name')}. <br />
     * ${database.getMapValue($classificationMap, 'comment')}
     */
    public void classify${col.JavaName}${classificationMap.get('name')}() {
        String code = ${glPackageBaseCommon}.${glClassificationDefinition}.${database.classificationCodeVariableNamePrefix}${col.classificationName}_${classificationMap.get('name')};
        set${col.JavaName}(new ${col.JavaNative}(code));
    }
    #end
  #end
#end

    // ===================================================================================
    //                                                        Classification Determination
    //                                                        ============================
#foreach ($col in $table.columns)
  #if (${col.hasClassification()})
    #foreach ($classificationMap in $col.classificationMapList)

    /**
     * Is the value of the column '${col.UncapitalisedJavaName}' '${classificationMap.get('name')}'? <br />
     * ${database.getMapValue($classificationMap, 'comment')}
     * <pre>
     * The difference of capital letters and small letters is NOT distinguished.
     * If the value is null, this method returns false!
     * </pre>
     * @return Determination.
     */
    public boolean is${col.JavaName}${classificationMap.get('name')}() {
        return helpEqualingIgnoreCaseClassification(_${col.UncapitalisedJavaName}, ${glPackageBaseCommon}.${glClassificationDefinition}.${database.classificationCodeVariableNamePrefix}${col.ClassificationName}_${classificationMap.get('name')});
    }
    #end
  #end
#end

#if (${table.hasClassification()})
    private boolean helpEqualingIgnoreCaseClassification(Object value, String code) {
        if (value == null) { return false; }
        return code.equalsIgnoreCase(value.toString());
    }
#end

    // ===================================================================================
    //                                                           Classification Name/Alias
    //                                                           =========================
#set ($isUseHelpGettingFromClassificationMap = false)
#foreach ($col in $table.Columns)
  #if (${col.hasClassification()})
    #if (${col.hasClassificationName()})
      #set ($isUseHelpGettingFromClassificationMap = true)

    /**
     * Get the value of the column '${col.uncapitalisedJavaName}' as classification-name.
     * @return The value of the column '${col.uncapitalisedJavaName}' as classification-name. (Nullable)
     */
    public String get${col.JavaName}Name() {
        return helpGettingFromClassificationMap(_${col.UncapitalisedJavaName}, ${glPackageBaseCommon}.${glClassificationDefinition}.CODE_NAME_MAP_${col.ClassificationName});
    }
    #end
    #if (${col.hasClassificationAlias()})
      #set ($isUseHelpGettingFromClassificationMap = true)

    /**
     * Get the value of the column '${col.UncapitalisedJavaName}' as classification-alias.
     * @return The value of the column '${col.UncapitalisedJavaName}' as classification-alias. (Nullable)
     */
    public String get${col.JavaName}Alias() {
        return helpGettingFromClassificationMap(_${col.UncapitalisedJavaName}, ${glPackageBaseCommon}.${glClassificationDefinition}.CODE_ALIAS_MAP_${col.ClassificationName});
    }
    #end
  #end
#end

#if (${isUseHelpGettingFromClassificationMap})
    private String helpGettingFromClassificationMap(Object key, java.util.Map<String, String> map) {
        if (key == null) { return null; }
        return map.get(key.toString()); 
    }
#end

    // ===================================================================================
    //                                                                    Foreign Property
    //                                                                    ================
#set ($foreignKeysIndex = 0)
#foreach ($foreignKey in $table.foreignKeys)
#set ($foreignVariableName = "${glParentVariablePrefix}${foreignKey.foreignPropertyNameInitCap}")
#set ($foreignEntityClassName = "${foreignKey.foreignTableExtendedEntityClassName}")
#set ($parentCBClassName = "${foreignKey.foreignTableExtendedConditionBeanClassName}")
    // /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    //   Foreign Property = [${foreignKey.foreignJavaBeansRulePropertyName}]
    // * * * * * * * * */
    public static final int ${foreignKey.foreignJavaBeansRulePropertyName}_RELNO = ${table.resolveForeignIndex($foreignKey)};
    public static final String ${foreignKey.foreignJavaBeansRulePropertyName}_RELKEYS = "$foreignKey.relationKeysCommaString";

    /** The entity of foreign property '${foreignKey.foreignJavaBeansRulePropertyName}'. */
    protected ${foreignEntityClassName} ${foreignVariableName};

    /**
     * Get the entity of foreign property '${foreignKey.foreignJavaBeansRulePropertyName}'. {without lazy-load}
     * @return The entity of foreign property '${foreignKey.foreignJavaBeansRulePropertyName}'. (Nullable: If the foreign key does not have 'NotNull' constraint, please check null.)
     */
    public ${foreignEntityClassName} get${foreignKey.foreignJavaBeansRulePropertyNameInitCap}() {
        return ${foreignVariableName};
    }

    /**
     * Set the entity of foreign property '${foreignKey.foreignJavaBeansRulePropertyName}'.
     * @param ${foreignKey.foreignPropertyName} The entity of foreign property '${foreignKey.foreignJavaBeansRulePropertyName}'. (Nullable)
     */
    public void set${foreignKey.foreignJavaBeansRulePropertyNameInitCap}(${foreignEntityClassName} ${foreignKey.foreignPropertyName}) {
        ${foreignVariableName} = ${foreignKey.foreignPropertyName};
    }

#set ($foreignKeysIndex = $foreignKeysIndex + 1)
#end
#foreach ($referrer in $table.referrers)
#set ($referrerEntityClassName = "${referrer.refererTableExtendedEntityClassName}")
#set ($referrerCBClassName = "${referrer.refererTableExtendedConditionBeanClassName}")
#set ($referrerVariableName = "${glChildrenVariablePrefix}${referrer.referrerPropertyNameInitCap}")
#if (${referrer.isOneToOne()})
    // /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    //   Foreign Property = [${referrer.refererJavaBeansRulePropertyNameAsOne}]
    // * * * * * * * * */
    public static final int ${referrer.refererJavaBeansRulePropertyNameAsOne}_RELNO = ${table.resolveRefererIndexAsOne($referrer)};
    public static final String ${referrer.refererJavaBeansRulePropertyNameAsOne}_RELKEYS = "$referrer.relationKeysCommaStringForOneToOneRefferer";
	
    /** the entity of foreign property(referrer-as-one) '${referrer.refererJavaBeansRulePropertyNameAsOne}'. */
    protected ${referrerEntityClassName} ${referrerVariableName};

	/**
     * Get the entity of foreign property(referrer-as-one) '${referrer.refererJavaBeansRulePropertyNameAsOne}'. {without lazy-load} <br />
     * @return the entity of foreign property(referrer-as-one) '${referrer.refererJavaBeansRulePropertyNameAsOne}'. (Nullable: If the foreign key does not have 'NotNull' constraint, please check null.)
     */
    public ${referrerEntityClassName} get${referrer.refererJavaBeansRulePropertyNameAsOneInitCap}() {
	    return ${referrerVariableName};
    }

    /**
     * Set the entity of foreign property(referrer-as-one) '${referrer.refererJavaBeansRulePropertyNameAsOne}'.
     * @param ${referrer.referrerJavaBeansRulePropertyNameAsOne} The entity of foreign property(referrer-as-one) '${referrer.refererJavaBeansRulePropertyNameAsOne}'. (Nullable)
     */
    public void set${referrer.referrerJavaBeansRulePropertyNameAsOneInitCap}(${referrerEntityClassName} ${referrer.referrerJavaBeansRulePropertyNameAsOne}) {
	    ${referrerVariableName} = ${referrer.referrerJavaBeansRulePropertyNameAsOne};
    }

#set ($foreignKeysIndex = $foreignKeysIndex + 1)
#end
#end
    // ===================================================================================
    //                                                                   Referrer Property
    //                                                                   =================
#foreach ($referrer in $table.referrers)
#set ($referrerEntityClassName = "${referrer.refererTableExtendedEntityClassName}")
#set ($referrerCBClassName = "${referrer.refererTableExtendedConditionBeanClassName}")
#set ($referrerVariableName = "${glChildrenVariablePrefix}${referrer.referrerPropertyNameInitCap}")
#if (!${referrer.isOneToOne()})
    // /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    //   Referrer Property = [${referrer.refererJavaBeansRulePropertyName}]
    // * * * * * * * * */

    /** The list of referrer property '${referrer.refererJavaBeansRulePropertyName}'. */
    protected List<${referrerEntityClassName}> $referrerVariableName;

    /**
     * Get the list of referrer property '${referrer.refererJavaBeansRulePropertyName}'. {without lazy-load} <br />
     * @return The list of referrer property '${referrer.refererJavaBeansRulePropertyName}'. (NotNull: If it's not loaded yet, initializes the list instance of referrer as empty and returns it.)
     */
    public List<${referrerEntityClassName}> get${referrer.refererJavaBeansRulePropertyNameInitCap}() {
#if (!$database.isOneToManyReturnNullIfNonSelect())
        if (${referrerVariableName} == null) { ${referrerVariableName} = new ArrayList<${referrerEntityClassName}>(); }
#end
        return ${referrerVariableName};
    }

    /**
     * Set the list of referrer property '${referrer.refererJavaBeansRulePropertyName}'.
     * @param ${referrer.referrerPropertyName} The list of referrer property '${referrer.refererJavaBeansRulePropertyName}'. (Nullable)
     */
    public void set${referrer.refererJavaBeansRulePropertyNameInitCap}(List<${referrerEntityClassName}> ${referrer.referrerPropertyName}) {
        ${referrerVariableName} = ${referrer.referrerPropertyName};
    }

#end
#end

    // ===================================================================================
    //                                                                       Determination
    //                                                                       =============
    public boolean hasPrimaryKeyValue() {
#foreach ($col in $table.primaryKey)
        if (_${col.uncapitalisedJavaName} == null) { return false; }
#end
        return true;
    }

    // ===================================================================================
    //                                                                 Modified Properties
    //                                                                 ===================
    public Set<String> getModifiedPropertyNames() {
        return _modifiedProperties.getPropertyNames();
    }

    protected EntityModifiedProperties newEntityModifiedProperties() {
        return new EntityModifiedProperties();
    }

    public void clearModifiedPropertyNames() {
        _modifiedProperties.clear();
    }

    public boolean hasModification() {
        return !_modifiedProperties.isEmpty();
    }
#if (${table.hasAllCommonColumn()})
	
    // ===================================================================================
    //                                                           Common Column Auto Filter
    //                                                           =========================
    /**
	 * Disables auto set-up of common columns.
	 */
    public void disableCommonColumnAutoSetup() {
	    _canCommonColumnAutoSetup = false;
	}
	
    /**
	 * Can the entity set up common column by auto?
	 * @return Determination.
	 */
	public boolean canCommonColumnAutoSetup() {// for Framework
	    return _canCommonColumnAutoSetup;
	}
#end

    // ===================================================================================
    //                                                                      Basic Override
    //                                                                      ==============
#if ($table.hasPrimaryKey())
    /**
     * If the primary-key of the other is same as this one, returns true.
     * @param other Other entity.
     * @return Comparing result.
     */
    public boolean equals(Object other) {
        if (other == null || !(other instanceof $myClassName)) { return false; }
        final $myClassName otherEntity = ($myClassName)other;
#foreach ($col in $table.primaryKey)
#if ($database.isCompatibleNullEqualFalse())
        if (get${col.JavaName}() == null || !get${col.JavaName}().equals(otherEntity.get${col.JavaName}())) {
            return false;
        }
#else
        if (!helpComparingValue(get${col.JavaName}(), otherEntity.get${col.JavaName}())) { return false; }
#end
#end
        return true;
    }

    protected boolean helpComparingValue(Object value1, Object value2) {
        if (value1 == null && value2 == null) { return true; }
        return value1 != null && value2 != null && value1.equals(value2);
    }

    /**
     * Calculates hash-code from primary-key.
     * @return Hash-code from primary-keys.
     */
    public int hashCode() {
        int result = 0;
#foreach ($col in $table.primaryKey)
        if (this.get${col.JavaName}() != null) { result = result + get${col.JavaName}().hashCode(); }
#end
        return result;
    }
#else
    /**
     * If the all-column value of the other is same as this one, returns true.
     * @param other Other entity. (Nullable)
     * @return Comparing result. If other is null, returns false.
     */
    public boolean equals(Object other) {
        if (other == null || !(other instanceof $myClassName)) { return false; }
        final $myClassName otherEntity = ($myClassName)other;
#foreach ($col in $table.columns)
#if ($database.isCompatibleNullEqualFalse())
        if (get${col.JavaName}() == null || !get${col.JavaName}().equals(otherEntity.get${col.JavaName}())) {
            return false;
        }
#else
        if (!helpComparingValue(get${col.JavaName}(), otherEntity.get${col.JavaName}())) { return false; }
#end
#end
        return true;
    }

    protected boolean helpComparingValue(Object value1, Object value2) {
        if (value1 == null && value2 == null) { return true; }
        return value1 != null && value2 != null && value1.equals(value2);
    }

    /**
     * Calculates hash-code from all columns.
     * @return Hash-code from all-columns.
     */
    public int hashCode() {
        int result = 0;
#foreach ($col in $table.columns)
        if (this.get${col.javaName}() != null) { result = result + this.get${col.javaName}().hashCode(); }
#end
        return result;
    }
#end

    /**
     * @return The view string of columns. (NotNull)
     */
    public String toString() {
        final String delimiter = ",";
        final StringBuilder sb = new StringBuilder();

#foreach ($col in $table.columns)
        sb.append(delimiter).append(get${col.javaName}());
#end

        sb.delete(0, delimiter.length());
        sb.insert(0, "{").append("}");
        return sb.toString();
    }

    // ===================================================================================
    //                                                                            Accessor
    //                                                                            ========
#foreach ($col in $table.columns)

    /** The column annotation for S2Dao. {${col.columnDefinitionLineDisp}} */
    public static final String ${col.javaBeansRulePropertyName}_COLUMN = "${col.name}";
#if ($col.isJavaNativeOracleStringClob())

    /** The value type annotation for S2Dao. {${col.columnDefinitionLineDisp}} */
    public static String ${col.javaBeansRulePropertyName}_VALUE_TYPE = "dbfluteStringClobType";
#end

    /**
     * Get the value of the column '${col.name}'. <br />
     * {${col.columnDefinitionLineDisp}}
     * @return The value of the column '${col.name}'. (Nullable)
     */
    public ${col.JavaNative} get${col.javaName}() {
        return _${col.uncapitalisedJavaName};
    }

    /**
     * Set the value of the column '${col.name}'. <br />
     * {${col.columnDefinitionLineDisp}}
     * @param ${col.UncapitalisedJavaName} The value of the column '${col.name}'. (Nullable)
     */
    public void set${col.javaName}(${col.javaNative} ${col.uncapitalisedJavaName}) {
#if ($table.isAvailableEntityModifiedPropertiesAddLogicIfNeeds())
        _modifiedProperties.addPropertyNameIfNeeds("${col.javaBeansRulePropertyName}", this._${col.UncapitalisedJavaName}, ${col.UncapitalisedJavaName});
#else
        _modifiedProperties.addPropertyName("${col.javaBeansRulePropertyName}");
#end
        this._${col.UncapitalisedJavaName} = ${col.UncapitalisedJavaName};
    }
#end

#if ($table.hasAllCommonColumn())
  #foreach ($columnName in ${database.commonColumnNameConvertionList})
    #set ($filteredColumnName = ${database.filterCommonColumn(${columnName})})
    #set ($commonColumnMap = ${database.commonColumnMap})
    #set ($columnType = ${commonColumnMap.get(${columnName})})
    #set ($javaNative = ${database.convertJavaNativeByJdbcType(${columnType})})
    #set ($javaName = ${database.convertJavaNameByJdbcNameAsColumn(${filteredColumnName})})
    #set ($uncapitalisedJavaName = ${database.convertUncapitalisedJavaNameByJdbcNameAsColumn(${filteredColumnName})})
    #set ($targetJavaName = ${table.findTargetColumnJavaNameByCommonColumnName(${columnName})})

    /**
     * Get the value of the column '${uncapitalisedJavaName}'. <br />
     * @return The value of the column '${uncapitalisedJavaName}'. (Nullable)
     */
    public ${javaNative} get${javaName}() {
        return get${targetJavaName}();
    }

    /**
     * Set the value of the column '${uncapitalisedJavaName}'. <br />
     * @param ${uncapitalisedJavaName} The value of the column '${uncapitalisedJavaName}'. (Nullable)
     */
    public void set${javaName}(${javaNative} ${uncapitalisedJavaName}) {
        set${targetJavaName}(${uncapitalisedJavaName});
    }
  #end
#end

}
