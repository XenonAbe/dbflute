${database.allClassCopyright}package ${myBaseEntityPackageName};
#set ($myClassName = "${myBaseObjectClassName}")

import java.util.Set;

#if (${table.hasAllCommonColumn()})
import ${glPackageBaseCommon}.${glEntityDefinedCommonColumnInterfaceName};
#else
import ${glPackageBaseCommon}.${glEntityInterfaceName};
#end
import ${glPackageBaseCommonDBMeta}.${glDBMetaInterfaceName};
#if (!$isSql2Entity)
import ${glPackageBaseCommonDBMeta}.${glDBMetaInstanceHandlerName};
#end
#set ($myEntityInterfaceName = "")
#if (${table.hasAllCommonColumn()})
  #set ($myEntityInterfaceName = ${glEntityDefinedCommonColumnInterfaceName})
#else
  #set ($myEntityInterfaceName = ${glEntityInterfaceName})
#end

/**
 * The entity of ${table.basicInfoDispString}.
 * <pre>
 * [primary-key]
 *     ${table.primaryKeyNameCommaString}
 * 
 * [column-property]
 *     ${table.columnNameCommaString}
 * 
 * [foreign-property]
 *     ${table.foreignPropertyNameCommaString}
 * 
 * [referrer-property]
 *     ${table.referrerPropertyNameCommaString}
 * 
 * [sequence]
 *     ${table.definedSequenceName}
 * 
 * [identity]
 *     ${table.identityColumnName}
 * 
 * [update-date]
 *     ${table.updateDateColumnName}
 * 
 * [version-no]
 *     ${table.versionNoColumnName}
 * </pre>
 * @author ${database.ClassAuthor}
 */${database.outputSuppressWarningsAfterLineSeparator()}
public abstract class $myClassName implements ${myEntityInterfaceName}, java.io.Serializable {

    // ===================================================================================
    //                                                                          Definition
    //                                                                          ==========
    /** Serial version UID. (Default) */
    private static final long serialVersionUID = 1L;

    /** TABLE-Annotation for S2Dao. The value is ${table.annotationTableName}. */
    public static final String TABLE = "${table.annotationTableName}";

#if ($table.isUseUpdateDate())
    
    /** TIMESTAMP-Annotation */
    public static final String TIMESTAMP_PROPERTY = "$table.updateDatePropertyName";
#end
#if ($table.isUseVersionNo())
    
    /** VERSION_NO-Annotation */
    public static final String VERSION_NO_PROPERTY = "$table.versionNoPropertyName";
#end
#if ($table.isUseIdentity())

    /** ID-Annotation */
    public static final String ${table.identityPropertyName}_ID = "identity";
#else
#if ($table.isUseSequence() && $table.isAvailableSequenceAssignedIdAnnotation())

    /** ID-Annotation */
    public static final String ${table.assignedPropertyName}_ID = "assigned";
#end
#end

    // ===================================================================================
    //                                                                           Attribute
    //                                                                           =========
    /** Entity modified properties. (for S2Dao) */
    protected EntityModifiedProperties _modifiedProperties = newEntityModifiedProperties();
#foreach ($col in $table.columns)

    /** The value of ${col.javaBeansRulePropertyName}. {${col.columnDefinitionLineDisp}} */
    protected ${col.javaNative} _${col.uncapitalisedJavaName};
#end

    // ===================================================================================
    //                                                                         Constructor
    //                                                                         ===========
    public ${myClassName}() {
    }

    // ===================================================================================
    //                                                                          Table Name
    //                                                                          ==========
    public String getTableDbName() {
        return "${table.name}";
    }

    public String getTablePropertyName() {// as JavaBeansRule
        return "${table.javaBeansRulePropertyName}";
    }

#if ($isSql2Entity)
    // ===================================================================================
    //                                                                              DBMeta
    //                                                                              ======
    public ${glDBMetaInterfaceName} getDBMeta() {
        return ${myDBMetaPackageName}.${myDBMetaClassName}.getInstance();
    }
#else
    // ===================================================================================
    //                                                                              DBMeta
    //                                                                              ======
    public ${glDBMetaInterfaceName} getDBMeta() {
        return ${glDBMetaInstanceHandlerName}.findDBMeta(getTableDbName());
    }
#end

    // ===================================================================================
    //                                                          Classification Classifying
    //                                                          ==========================
#foreach ($col in $table.Columns)
  #if (${col.hasClassification()})
    #foreach ($classificationMap in $col.classificationMapList)

    /**
     * Classify the value of ${col.UncapitalisedJavaName} as ${classificationMap.get('name')}. <br />
     * ${database.getMapValue($classificationMap, 'comment')}
     */
    public void classify${col.JavaName}${classificationMap.get('name')}() {
        String code = ${glPackageBaseCommon}.${glClassificationDefinition}.${database.classificationCodeVariableNamePrefix}${col.classificationName}_${classificationMap.get('name')};
        set${col.JavaName}(new ${col.JavaNative}(code));
    }
    #end
  #end
#end

    // ===================================================================================
    //                                                        Classification Determination
    //                                                        ============================
#foreach ($col in $table.columns)
  #if (${col.hasClassification()})
    #foreach ($classificationMap in $col.classificationMapList)

    /**
     * Is the value of ${col.UncapitalisedJavaName} '${classificationMap.get('name')}'? <br />
     * ${database.getMapValue($classificationMap, 'comment')} <br />
     * <pre>
     * The difference of capital letters and small letters is NOT distinguished.
     * If the value is null, this method returns false!
     * </pre>
     * @return Determanation.
     */
    public boolean is${col.JavaName}${classificationMap.get('name')}() {
        return helpEqualingIgnoreCaseClassification(_${col.UncapitalisedJavaName}, ${glPackageBaseCommon}.${glClassificationDefinition}.${database.classificationCodeVariableNamePrefix}${col.ClassificationName}_${classificationMap.get('name')});
    }
    #end
  #end
#end

#if (${table.hasClassification()})
    private boolean helpEqualingIgnoreCaseClassification(Object value, String code) {
        if (value == null) { return false; }
        return code.equalsIgnoreCase(value.toString());
    }
#end

    // ===================================================================================
    //                                                           Classification Name/Alias
    //                                                           =========================
#set ($isUseHelpGettingFromClassificationMap = false)
#foreach ($col in $table.Columns)
  #if (${col.hasClassification()})
    #if (${col.hasClassificationName()})
      #set ($isUseHelpGettingFromClassificationMap = true)

    /**
     * Get the value of ${col.UncapitalisedJavaName} as classification-name.
     * @return The value of ${col.UncapitalisedJavaName} as classification-name. (Nullable)
     */
    public String get${col.JavaName}Name() {
        return helpGettingFromClassificationMap(_${col.UncapitalisedJavaName}, ${glPackageBaseCommon}.${glClassificationDefinition}.CODE_NAME_MAP_${col.ClassificationName});
    }
    #end
    #if (${col.hasClassificationAlias()})
      #set ($isUseHelpGettingFromClassificationMap = true)

    /**
     * Get the value of ${col.UncapitalisedJavaName} as classification-alias.
     * @return The value of ${col.UncapitalisedJavaName} as classification-alias. (Nullable)
     */
    public String get${col.JavaName}Alias() {
        return helpGettingFromClassificationMap(_${col.UncapitalisedJavaName}, ${glPackageBaseCommon}.${glClassificationDefinition}.CODE_ALIAS_MAP_${col.ClassificationName});
    }
    #end
  #end
#end

#if (${isUseHelpGettingFromClassificationMap})
    private String helpGettingFromClassificationMap(Object key, java.util.Map<String, String> map) {
        if (key == null) { return null; }
        return map.get(key.toString()); 
    }
#end

    // ===================================================================================
    //                                                                       Foreign Table
    //                                                                       =============
#set ($foreignKeysIndex = 0)
#foreach ($foreignKeys in $table.ForeignKeys)
  #set ($foreignVariableName = "${glParentVariablePrefix}${foreignKeys.foreignPropertyNameInitCap}")
  #set ($foreignEntityClassName = "${foreignKeys.foreignTableExtendedEntityClassName}")
  #set ($parentCBClassName = "${foreignKeys.foreignTableExtendedConditionBeanClassName}")

    // /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    //   ForeignTable    = [${foreignKeys.foreignTable.basicInfoDispString}]
    //   ForeignProperty = [${foreignKeys.foreignJavaBeansRulePropertyName}]
    // * * * * * * * * */

    /** RELNO of foreign table for s2dao. */
    public static final int ${foreignKeys.foreignJavaBeansRulePropertyName}_RELNO = ${table.resolveForeignIndex($foreignKeys)};

    /** RELKEYS of foreign table for s2dao. */
    public static final String ${foreignKeys.foreignJavaBeansRulePropertyName}_RELKEYS = "$foreignKeys.RelationKeysCommaString";

    /** The entity of foreign table. */
    protected ${myExtendedEntityPackageName}.${foreignEntityClassName} ${foreignVariableName};

    /**
     * Get the entity of foreign table of ${foreignKeys.foreignJavaBeansRulePropertyName}. {without lazyload}
     * @return The entity of foreign table. (Nullable: If the foreign key does not have NotNull-constraint, please check null.)
     */
    public ${myExtendedEntityPackageName}.${foreignEntityClassName} get${foreignKeys.foreignJavaBeansRulePropertyNameInitCap}() {
        return ${foreignVariableName};
    }

    /**
     * Set the entity of foreign table of ${foreignKeys.foreignJavaBeansRulePropertyName}.
     * @param ${foreignKeys.foreignPropertyName} The entity of foreign table. (Nullable)
     */
    public void set${foreignKeys.foreignJavaBeansRulePropertyNameInitCap}(${myExtendedEntityPackageName}.${foreignEntityClassName} ${foreignKeys.foreignPropertyName}) {
        this.${foreignVariableName} = ${foreignKeys.foreignPropertyName};
    }

    /**
     * Has foreign instance of ${foreignKeys.foreignJavaBeansRulePropertyName}.
     * @return Determination.
     */
    public boolean hasForeignInstance${foreignKeys.foreignPropertyNameInitCap}() {
        return ${foreignVariableName} != null;
    }

    /**
     * Same as look${foreignKeys.foreignJavaBeansRulePropertyNameInitCap}(). This method will be deprecated at the future.
     * @return The entity of foreign table. (NotNull: If the object is null, it returns new empty entity as read-only.)
	 * @deprecated look${foreignKeys.foreignJavaBeansRulePropertyNameInitCap}().
     */
    public ${myExtendedEntityPackageName}.${foreignEntityClassName} trace${foreignKeys.foreignJavaBeansRulePropertyNameInitCap}() {
        return look${foreignKeys.foreignJavaBeansRulePropertyNameInitCap}();
    }

    /**
     * Look the foreign entity (for read) of ${foreignKeys.foreignJavaBeansRulePropertyName}.
     * @return The entity of foreign table. (NotNull: If the object is null, it returns new empty entity as read-only.)
     */
    public ${myExtendedEntityPackageName}.${foreignEntityClassName} look${foreignKeys.foreignJavaBeansRulePropertyNameInitCap}() {
        return ${foreignVariableName} != null ? ${foreignVariableName} : new ${myExtendedEntityPackageName}.${foreignEntityClassName}();
    }
  #set ($foreignKeysIndex = $foreignKeysIndex + 1)
#end

    // ===================================================================================
    //                                                                      Referrer Table
    //                                                                      ==============
#foreach ($referrer in $table.referrers)
  #set ($referrerTable = $referrer.table)
  #set ($referrerEntityClassName = "${referrer.refererTableExtendedEntityClassName}")
  #set ($referrerCBClassName = "${referrer.refererTableExtendedConditionBeanClassName}")
  #set ($referrerVariableName = "${glChildrenVariablePrefix}${referrer.referrerPropertyNameInitCap}")
  #set ($referrerEntityLongClassName = "${myExtendedEntityPackageName}.${referrerEntityClassName}")

  #if (${referrer.isOneToOne()})

    // /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * {as one}
    //   ReferrerTable    = [${referrer.table.basicInfoDispString}]
    //   ReferrerProperty = [${referrer.refererJavaBeansRulePropertyNameAsOne}]
    // * * * * * * * * */

    /** RELNO of foreign table for s2dao. */
    public static final int ${referrer.refererJavaBeansRulePropertyNameAsOne}_RELNO = ${table.resolveRefererIndexAsOne($referrer)};

    /** RELKEYS of foreign table for s2dao. */
    public static final String ${referrer.refererJavaBeansRulePropertyNameAsOne}_RELKEYS = "$referrer.relationKeysCommaStringForOneToOneRefferer";
    #set ($foreignKeysIndex = $foreignKeysIndex + 1)
  #else

    // /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    //   ReferrerTable    = [${referrer.table.basicInfoDispString}]
    //   ReferrerProperty = [${referrer.referrerJavaBeansRulePropertyName}]
    // * * * * * * * * */
  #end

    /** The list of referrer table. */
    protected java.util.List<${referrerEntityLongClassName}> $referrerVariableName;

    /**
     * Get the list of referrer table. {without lazyload} <br />
     * @return The list of referrer table. (NotNull: If it's not loaded yet, initializes the list instance of referrer as empty and returns it.)
     */
    public java.util.List<${referrerEntityLongClassName}> get${referrer.refererJavaBeansRulePropertyNameInitCap}() {
#if (!$database.isOneToManyReturnNullIfNonSelect())
        if (${referrerVariableName} == null) { ${referrerVariableName} = new java.util.ArrayList<${referrerEntityLongClassName}>(); }
#end
        return ${referrerVariableName};
    }

    /**
     * Set the list of referrer table.
     * @param ${referrer.referrerPropertyName} The list of referrer table. (Nullable)
     */
    public void set${referrer.refererJavaBeansRulePropertyNameInitCap}(java.util.List<${referrerEntityLongClassName}> ${referrer.referrerPropertyName}) {
        this.${referrerVariableName} = ${referrer.referrerPropertyName};
    }

    /**
     * Has referrer elements of ${referrer.refererJavaBeansRulePropertyNameInitCap}.
     * @return Determination.
     */
    public boolean hasRefererElements${referrer.refererJavaBeansRulePropertyNameInitCap}() {
        return ${referrerVariableName} != null && !${referrerVariableName}.isEmpty();
    }

#if (${referrer.isOneToOne()})
    /**
     * Get the entity of referrer-as-one table of ${referrer.referrerPropertyNameAsOne}. {without lazyload} <br />
     * @return The entity of referrer-as-one table. (Nullable: If it's not loaded yet, returns null.)
     * @exception IllegalStateException When the size of the referrer table list is duplicate.
     */
    public ${referrerEntityLongClassName} get${referrer.refererJavaBeansRulePropertyNameAsOneInitCap}() {
        final java.util.List<${referrerEntityLongClassName}> ls = get${referrer.ReffererPropertyNameInitCap}();
        if (ls == null || ls.isEmpty()) { return null; }
        if (ls.size() > 1) {
            String msg = "The size of the list must be one because this relation is 'one-to-one'";
            msg = msg + ": list=" + ls + ": toString()=" + toString();
            throw new IllegalStateException(msg);
        }
        return (${referrerEntityLongClassName})ls.get(0);
    }

    /**
     * Set the entity of referrer-as-one table of ${referrer.referrerPropertyNameAsOne}.
     * @param entity The entity of referrer-as-one table. (Nullable)
     */
    public void set${referrer.refererJavaBeansRulePropertyNameAsOneInitCap}(${referrerEntityLongClassName} entity) {
        if (entity == null) { ${referrerVariableName} = null; return; }
        final java.util.List<${referrerEntityLongClassName}> ls = new java.util.ArrayList<${referrerEntityLongClassName}>();
        ls.add(entity);
        ${referrerVariableName} = ls;
    }

    /**
     * Same as look${referrer.refererJavaBeansRulePropertyNameAsOneInitCap}(). This method will be deprecated at the future.
     * @return The entity of referrer-as-one table. (NotNull: If the object is null, it returns new empty entity as read-only.)
	 * @deprecated Please use look${referrer.refererJavaBeansRulePropertyNameAsOneInitCap}().
     */
    public ${referrerEntityLongClassName} trace${referrer.refererJavaBeansRulePropertyNameAsOneInitCap}() {
        return look${referrer.refererJavaBeansRulePropertyNameAsOneInitCap}();
    }

    /**
     * Look the referrer-as-one entity (for read) of ${referrer.refererJavaBeansRulePropertyNameAsOne}.
     * @return The entity of referrer-as-one table. (NotNull: If the object is null, it returns new empty entity as read-only.)
     */
    public ${referrerEntityLongClassName} look${referrer.refererJavaBeansRulePropertyNameAsOneInitCap}() {
        return get${referrer.refererJavaBeansRulePropertyNameAsOneInitCap}() != null ? get${referrer.refererJavaBeansRulePropertyNameAsOneInitCap}() : new ${referrerEntityLongClassName}();
    }

    /**
     * Has foreign instance of ${referrer.referrerPropertyNameAsOne}.
     * @return Determination.
     */
    public boolean hasForeignInstance${referrer.refererJavaBeansRulePropertyNameAsOneInitCap}() {
        return get${referrer.referrerPropertyNameInitCapAsOne}() != null;
    }

#end
#end

    // ===================================================================================
    //                                                                       Determination
    //                                                                       =============
    public boolean hasPrimaryKeyValue() {
#foreach ($col in $table.primaryKey)
        if (_${col.uncapitalisedJavaName} == null) { return false; }
#end
        return true;
    }

    public boolean hasVersionNoValue() {
#if ($table.isUseVersionNo())
        return !(get${table.versionNoJavaName}() + "").equals("null");// For primitive type
#else
        return false;
#end
    }

    public boolean hasUpdateDateValue() {
#if ($table.isUseUpdateDate())
        return get${table.updateDateJavaName}() != null;
#else
        return false;
#end
    }

    // ===================================================================================
    //                                                                 Modified Properties
    //                                                                 ===================
    public Set<String> getModifiedPropertyNames() {
        return _modifiedProperties.getPropertyNames();
    }

    protected EntityModifiedProperties newEntityModifiedProperties() {
        return new EntityModifiedProperties();
    }

    public void clearModifiedPropertyNames() {
        _modifiedProperties.clear();
    }

    public boolean hasModification() {
        return !_modifiedProperties.isEmpty();
    }

    // ===================================================================================
    //                                                                      Basic Override
    //                                                                      ==============
#if ($table.hasPrimaryKey())

    /**
     * ${database.OverrideComment}
     * If the primary-key of the other is same as this one, returns true.
     * @param other Other entity.
     * @return Comparing result.
     */
    public boolean equals(Object other) {
        if (other == null || !(other instanceof $myClassName)) { return false; }
        final $myClassName otherEntity = ($myClassName)other;
#foreach ($col in $table.primaryKey)
#if ($database.isCompatibleNullEqualFalse())
        if (get${col.JavaName}() == null || !get${col.JavaName}().equals(otherEntity.get${col.JavaName}())) {
            return false;
        }
#else
        if (!helpComparingValue(get${col.JavaName}(), otherEntity.get${col.JavaName}())) { return false; }
#end
#end
        return true;
    }

    protected boolean helpComparingValue(Object value1, Object value2) {
        if (value1 == null && value2 == null) { return true; }
        return value1 != null && value2 != null && value1.equals(value2);
    }

    /**
     * ${database.OverrideComment}
     * Calculates hash-code from primary-key.
     * @return Hash-code from primary-keys.
     */
    public int hashCode() {
        int result = 0;
#foreach ($col in $table.primaryKey)
        if (this.get${col.JavaName}() != null) { result = result + get${col.JavaName}().hashCode(); }
#end
        return result;
    }
#else

    /**
     * ${database.OverrideComment}
     * If the all-column value of the other is same as this one, returns true.
     * @param other Other entity. (Nullable)
     * @return Comparing result. If other is null, returns false.
     */
    public boolean equals(Object other) {
        if (other == null || !(other instanceof $myClassName)) { return false; }
        final $myClassName otherEntity = ($myClassName)other;
#foreach ($col in $table.columns)
#if ($database.isCompatibleNullEqualFalse())
        if (get${col.JavaName}() == null || !get${col.JavaName}().equals(otherEntity.get${col.JavaName}())) {
            return false;
        }
#else
        if (!helpComparingValue(get${col.JavaName}(), otherEntity.get${col.JavaName}())) { return false; }
#end
#end
        return true;
    }

    protected boolean helpComparingValue(Object value1, Object value2) {
        if (value1 == null && value2 == null) { return true; }
        return value1 != null && value2 != null && value1.equals(value2);
    }

    /**
     * ${database.OverrideComment}
     * Calculates hash-code from all-columns.
     * @return Hash-code from all-columns.
     */
    public int hashCode() {
        int result = 0;
#foreach ($col in $table.columns)
        if (this.get${col.JavaName}() != null) { result = result + this.get${col.JavaName}().hashCode(); }
#end
        return result;
    }
#end

    /**
     * ${database.OverrideComment}
     * @return Column-value map-string. (NotNull)
     */
    public String toString() {
        final String delimiter = ",";
        final StringBuffer sb = new StringBuffer();

#foreach ($col in $table.Columns)
        sb.append(delimiter).append(get${col.JavaName}());
#end

        sb.delete(0, delimiter.length());
        sb.insert(0, "{").append("}");
        return sb.toString();
    }

    // ===================================================================================
    //                                                                            Accessor
    //                                                                            ========
#foreach ($col in $table.columns)

    /** Column Annotation for S2Dao. {${col.columnDefinitionLineDisp}} */
    public static final String ${col.javaBeansRulePropertyName}_COLUMN = "${col.Name}";
#if ($col.isJavaNativeOracleStringClob())

    /** ValueType Annotation for S2Dao. {${col.columnDefinitionLineDisp}} */
    public static String ${col.javaBeansRulePropertyName}_VALUE_TYPE = "dbfluteStringClobType";
#end

    /**
     * Get the value of ${col.UncapitalisedJavaName}. <br />
     * {${col.columnDefinitionLineDisp}}
     * @return The value of ${col.UncapitalisedJavaName}. (Nullable)
     */
    public ${col.JavaNative} get${col.JavaName}() {
        return _${col.uncapitalisedJavaName};
    }

    /**
     * Set the value of ${col.UncapitalisedJavaName}. <br />
     * {${col.columnDefinitionLineDisp}}
     * @param ${col.UncapitalisedJavaName} The value of ${col.UncapitalisedJavaName}. (Nullable)
     */
    public void set${col.JavaName}(${col.JavaNative} ${col.UncapitalisedJavaName}) {
#if ($table.isAvailableEntityModifiedPropertiesAddLogicIfNeeds())
        _modifiedProperties.addPropertyNameIfNeeds("${col.javaBeansRulePropertyName}", this._${col.UncapitalisedJavaName}, ${col.UncapitalisedJavaName});
#else
        _modifiedProperties.addPropertyName("${col.javaBeansRulePropertyName}");
#end
        this._${col.UncapitalisedJavaName} = ${col.UncapitalisedJavaName};
    }
#end

#if ($table.hasAllCommonColumn())
  #foreach ($columnName in ${database.commonColumnNameConvertionList})
    #set ($filteredColumnName = ${database.filterCommonColumn(${columnName})})
    #set ($commonColumnMap = ${database.commonColumnMap})
    #set ($columnType = ${commonColumnMap.get(${columnName})})
    #set ($javaNative = ${database.convertJavaNativeByJdbcType(${columnType})})
    #set ($javaName = ${database.convertJavaNameByJdbcNameAsColumn(${filteredColumnName})})
    #set ($uncapitalisedJavaName = ${database.convertUncapitalisedJavaNameByJdbcNameAsColumn(${filteredColumnName})})
    #set ($targetJavaName = ${table.findTargetColumnJavaNameByCommonColumnName(${columnName})})

    /**
     * Get the value of ${uncapitalisedJavaName}. <br />
     * @return The value of ${uncapitalisedJavaName}. (Nullable)
     */
    public ${javaNative} get${javaName}() {
        return get${targetJavaName}();
    }

    /**
     * Set the value of ${uncapitalisedJavaName}. <br />
     * @param ${uncapitalisedJavaName} The value of ${uncapitalisedJavaName}. (Nullable)
     */
    public void set${javaName}(${javaNative} ${uncapitalisedJavaName}) {
        set${targetJavaName}(${uncapitalisedJavaName});
    }
  #end
#end

}
