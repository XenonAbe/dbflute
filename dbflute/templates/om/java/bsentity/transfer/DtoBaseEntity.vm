${database.allClassCopyright}package ${myBaseEntityPackageName};
#set ($myClassName = "${myBaseObjectClassName}")

/**
 * The entity of ${table.basicInfoDispString}.
 * <pre>
 * [primary-key]
 *     ${table.primaryKeyNameCommaString}
 * 
 * [column-property]
 *     ${table.columnNameCommaString}
 * 
 * [foreign-property]
 *     ${table.foreignPropertyNameCommaString}
 * 
 * [referrer-property]
 *     ${table.referrerPropertyNameCommaString}
 * 
 * [sequence]
 *     ${table.definedSequenceName}
 * 
 * [identity]
 *     ${table.identityColumnName}
 * 
 * [update-date]
 *     ${table.updateDateColumnName}
 * 
 * [version-no]
 *     ${table.versionNoColumnName}
 * 
 * </pre>
 * @author ${database.ClassAuthor}
 */${database.outputSuppressWarningsAfterLineSeparator()}
public abstract class $myClassName implements java.io.Serializable {

    // ===================================================================================
    //                                                                          Definition
    //                                                                          ==========
    /** Serial version UID. (Default) */
    private static final long serialVersionUID = 1L;

    // ===================================================================================
    //                                                                           Attribute
    //                                                                           =========
#foreach ($col in $table.columns)

    /** The value of ${col.javaBeansRulePropertyName}. {${col.columnDefinitionLineDisp}} */
    protected ${col.javaNative} _${col.uncapitalisedJavaName};
#end

    // ===================================================================================
    //                                                                         Constructor
    //                                                                         ===========
    public ${myClassName}() {
    }

    // ===================================================================================
    //                                                                       Foreign Table
    //                                                                       =============
#set ($foreignKeysIndex = 0)
#foreach ($foreignKeys in $table.ForeignKeys)
  #set ($foreignVariableName = "${glParentVariablePrefix}${foreignKeys.foreignPropertyNameInitCap}")
  #set ($foreignEntityClassName = "${foreignKeys.foreignTableExtendedEntityClassName}")
  #set ($parentCBClassName = "${foreignKeys.foreignTableExtendedConditionBeanClassName}")

    // /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    //   ForeignTable    = [${foreignKeys.foreignTable.basicInfoDispString}]
    //   ForeignProperty = [${foreignKeys.foreignJavaBeansRulePropertyName}]
    // * * * * * * * * */

    /** The entity of foreign table. */
    protected ${myExtendedEntityPackageName}.${foreignEntityClassName} ${foreignVariableName};

    /**
     * Get the entity of foreign table of ${foreignKeys.foreignJavaBeansRulePropertyName}. {without lazyload}
     * @return The entity of foreign table. (Nullable: If the foreign key does not have NotNull-constraint, please check null.)
     */
    public ${myExtendedEntityPackageName}.${foreignEntityClassName} get${foreignKeys.foreignJavaBeansRulePropertyNameInitCap}() {
        return ${foreignVariableName};
    }

    /**
     * Set the entity of foreign table of ${foreignKeys.foreignJavaBeansRulePropertyName}.
     * @param ${foreignKeys.foreignPropertyName} The entity of foreign table. (Nullable)
     */
    public void set${foreignKeys.foreignJavaBeansRulePropertyNameInitCap}(${myExtendedEntityPackageName}.${foreignEntityClassName} ${foreignKeys.foreignPropertyName}) {
        this.${foreignVariableName} = ${foreignKeys.foreignPropertyName};
    }

  #set ($foreignKeysIndex = $foreignKeysIndex + 1)
#end

    // ===================================================================================
    //                                                                      Referrer Table
    //                                                                      ==============
#foreach ($referrer in $table.referrers)
  #set ($referrerTable = $referrer.Table)
  #set ($referrerEntityClassName = "${referrer.refererTableExtendedEntityClassName}")
  #set ($referrerCBClassName = "${referrer.refererTableExtendedConditionBeanClassName}")
  #set ($referrerVariableName = "${glChildrenVariablePrefix}${referrer.referrerPropertyNameInitCap}")
  #set ($referrerEntityLongClassName = "${myExtendedEntityPackageName}.${referrerEntityClassName}")

  #if (${referrer.isOneToOne()})

    // /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * {as one}
    //   ReferrerTable    = [${referrer.table.basicInfoDispString}]
    //   ReferrerProperty = [${referrer.refererJavaBeansRulePropertyNameAsOne}]
    // * * * * * * * * */

  #else

    // /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    //   ReferrerTable    = [${referrer.table.basicInfoDispString}]
    //   ReferrerProperty = [${referrer.referrerJavaBeansRulePropertyName}]
    // * * * * * * * * */
  #end

    /** The list of referrer table. */
    protected java.util.List<${referrerEntityLongClassName}> $referrerVariableName;

    /**
     * Get the list of referrer table. {without lazyload} <br />
     * @return The list of referrer table. (NotNull: If it's not loaded yet, initializes the list instance of referrer as empty and returns it.)
     */
    public java.util.List<${referrerEntityLongClassName}> get${referrer.refererJavaBeansRulePropertyNameInitCap}() {
#if (!$database.isOneToManyReturnNullIfNonSelect())
        if (${referrerVariableName} == null) { ${referrerVariableName} = new java.util.ArrayList<${referrerEntityLongClassName}>(); }
#end
        return ${referrerVariableName};
    }

    /**
     * Set the list of referrer table.
     * @param ${referrer.referrerPropertyName} The list of referrer table. (Nullable)
     */
    public void set${referrer.refererJavaBeansRulePropertyNameInitCap}(java.util.List<${referrerEntityLongClassName}> ${referrer.referrerPropertyName}) {
        this.${referrerVariableName} = ${referrer.referrerPropertyName};
    }

#if (${referrer.isOneToOne()})
    /**
     * Get the entity of referrer-as-one table of ${referrer.referrerPropertyNameAsOne}. {without lazyload} <br />
     * @return The entity of referrer-as-one table. (Nullable: If it's not loaded yet, returns null.)
     * @exception IllegalStateException When the size of the referrer table list is duplicate.
     */
    public ${referrerEntityLongClassName} get${referrer.refererJavaBeansRulePropertyNameAsOneInitCap}() {
        final java.util.List<${referrerEntityLongClassName}> ls = get${referrer.ReffererPropertyNameInitCap}();
        if (ls == null || ls.isEmpty()) { return null; }
        if (ls.size() > 1) {
            String msg = "The size of the list must be one because this relation is 'one-to-one'";
            msg = msg + ": list=" + ls + ": toString()=" + toString();
            throw new IllegalStateException(msg);
        }
        return (${referrerEntityLongClassName})ls.get(0);
    }

    /**
     * Set the entity of referrer-as-one table of ${referrer.referrerPropertyNameAsOne}.
     * @param entity The entity of referrer-as-one table. (Nullable)
     */
    public void set${referrer.refererJavaBeansRulePropertyNameAsOneInitCap}(${referrerEntityLongClassName} entity) {
        if (entity == null) { ${referrerVariableName} = null; return; }
        final java.util.List<${referrerEntityLongClassName}> ls = new java.util.ArrayList<${referrerEntityLongClassName}>();
        ls.add(entity);
        ${referrerVariableName} = ls;
    }

#end
#end

    // ===================================================================================
    //                                                                      Basic Override
    //                                                                      ==============
#if ($table.hasPrimaryKey())

    /**
     * ${database.OverrideComment}
     * If the primary-key of the other is same as this one, returns true.
     * @param other Other entity.
     * @return Comparing result.
     */
    public boolean equals(Object other) {
        if (other == null || !(other instanceof $myClassName)) { return false; }
        final $myClassName otherEntity = ($myClassName)other;
#foreach ($col in $table.primaryKey)
#if ($database.isCompatibleNullEqualFalse())
        if (get${col.JavaName}() == null || !get${col.JavaName}().equals(otherEntity.get${col.JavaName}())) {
            return false;
        }
#else
        if (!helpComparingValue(get${col.JavaName}(), otherEntity.get${col.JavaName}())) { return false; }
#end
#end
        return true;
    }

    protected boolean helpComparingValue(Object value1, Object value2) {
        if (value1 == null && value2 == null) { return true; }
        return value1 != null && value2 != null && value1.equals(value2);
    }

    /**
     * ${database.OverrideComment}
     * Calculates hash-code from primary-key.
     * @return Hash-code from primary-keys.
     */
    public int hashCode() {
        int result = 0;
#foreach ($col in $table.primaryKey)
        if (this.get${col.JavaName}() != null) { result = result + get${col.JavaName}().hashCode(); }
#end
        return result;
    }
#else

    /**
     * ${database.OverrideComment}
     * If the all-column value of the other is same as this one, returns true.
     * @param other Other entity. (Nullable)
     * @return Comparing result. If other is null, returns false.
     */
    public boolean equals(Object other) {
        if (other == null || !(other instanceof $myClassName)) { return false; }
        final $myClassName otherEntity = ($myClassName)other;
#foreach ($col in $table.columns)
#if ($database.isCompatibleNullEqualFalse())
        if (get${col.JavaName}() == null || !get${col.JavaName}().equals(otherEntity.get${col.JavaName}())) {
            return false;
        }
#else
        if (!helpComparingValue(get${col.JavaName}(), otherEntity.get${col.JavaName}())) { return false; }
#end
#end
        return true;
    }

    protected boolean helpComparingValue(Object value1, Object value2) {
        if (value1 == null && value2 == null) { return true; }
        return value1 != null && value2 != null && value1.equals(value2);
    }

    /**
     * ${database.OverrideComment}
     * Calculates hash-code from all-columns.
     * @return Hash-code from all-columns.
     */
    public int hashCode() {
        int result = 0;
#foreach ($col in $table.columns)
        if (this.get${col.JavaName}() != null) { result = result + this.get${col.JavaName}().hashCode(); }
#end
        return result;
    }
#end

    /**
     * ${database.OverrideComment}
     * @return Column-value map-string. (NotNull)
     */
    public String toString() {
        final String delimiter = ",";
        final StringBuffer sb = new StringBuffer();

#foreach ($col in $table.Columns)
        sb.append(delimiter).append(get${col.JavaName}());
#end

        sb.delete(0, delimiter.length());
        sb.insert(0, "{").append("}");
        return sb.toString();
    }

    // ===================================================================================
    //                                                                            Accessor
    //                                                                            ========
#foreach ($col in $table.columns)

    /**
     * Get the value of ${col.UncapitalisedJavaName}. <br />
     * {${col.columnDefinitionLineDisp}}
     * @return The value of ${col.UncapitalisedJavaName}. (Nullable)
     */
    public ${col.JavaNative} get${col.JavaName}() {
        return _${col.uncapitalisedJavaName};
    }

    /**
     * Set the value of ${col.UncapitalisedJavaName}. <br />
     * {${col.columnDefinitionLineDisp}}
     * @param ${col.UncapitalisedJavaName} The value of ${col.UncapitalisedJavaName}. (Nullable)
     */
    public void set${col.JavaName}(${col.JavaNative} ${col.UncapitalisedJavaName}) {
        this._${col.UncapitalisedJavaName} = ${col.UncapitalisedJavaName};
    }
#end

}
