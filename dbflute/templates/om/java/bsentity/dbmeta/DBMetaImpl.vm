${database.allClassCopyright}package ${myDBMetaPackageName};

#set ($myClassName = "${myDBMetaClassName}")
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Collections;

import ${glPackageBaseCommon}.${glEntityInterfaceName};
import ${glPackageBaseCommonDBMeta}.${glDBMetaAbstractName};
import ${myExtendedEntityPackageName}.${myExtendedObjectClassName};
import ${glPackageBaseCommonDBMetaInfo}.${glColumnInfoName};
import ${glPackageBaseCommonDBMetaInfo}.${glRelationInfoName};
import ${glPackageBaseCommonDBMetaInfo}.${glUniqueInfoName};

/**
 * The dbmeta of ${table.Name}. (Singleton)
 * 
 * <pre>
 * [primary-key]
 *     ${table.PrimaryKeyNameCommaString}
 * 
 * [column-property]
 *     ${table.ColumnNameCommaString}
 * 
 * [foreign-property]
 *     ${table.ForeignPropertyNameCommaString}
 * 
 * [referrer-property]
 *     ${table.ReferrerPropertyNameCommaString}
 * 
 * [sequence]
 *     ${table.DefinedSequenceName}
 * 
 * [identity]
 *     ${table.IdentityPropertyName}
 * 
 * [update-date]
 *     ${table.UpdateDateJavaName}
 * 
 * [version-no]
 *     ${table.VersionNoJavaName}
 * 
 * </pre>
 * 
 * @author ${database.ClassAuthor}
 */${database.outputSuppressWarningsAfterLineSeparator()}
public class ${myClassName} extends ${glDBMetaAbstractName} {

    // ===================================================================================
    //                                                                          Definition
    //                                                                          ==========
    protected static final Class<${myExtendedObjectClassName}> ENTITY_TYPE = ${myExtendedObjectClassName}.class;
    private static final ${myClassName} _instance = new ${myClassName}();

    // ===================================================================================
    //                                                                         Constructor
    //                                                                         ===========
    private ${myClassName}() {
    }

    // ===================================================================================
    //                                                                           Singleton
    //                                                                           =========
    public static ${myClassName} getInstance() {
        return _instance;
    }

    // ===================================================================================
    //                                                                     Name Definition
    //                                                                     ===============
    // -----------------------------------------------------
    //                                                 Table
    //                                                 -----
    /** Table DB name. */
    public static final String TABLE_DB_NAME = "$table.name";

    /** Table property name(JavaBeansRule). */
    public static final String TABLE_PROPERTY_NAME = "$table.javaBeansRulePropertyName";

    // -----------------------------------------------------
    //                                        Column DB Name
    //                                        --------------
#foreach ($col in $table.columns)
    /** DB name of ${col.name}. ${col.columnDefinitionLineDisp} */
    public static final String DB_NAME_${col.name} = "$col.name";

#end
    // -----------------------------------------------------
    //                                  Column Property Name
    //                                  (JavaBeansRule)
    //                                  --------------------
#foreach ($col in $table.columns)
    /** Property name(JavaBeansRule) of ${col.javaBeansRulePropertyName}. ${col.columnDefinitionLineDisp} */
    public static final String PROPERTY_NAME_${col.javaBeansRulePropertyName} = "$col.javaBeansRulePropertyName";

#end
    // -----------------------------------------------------
    //                                          Foreign Name
    //                                          ------------
#foreach ($foreignKeys in $table.foreignKeys)
    /** The foreign property name(JavaBeansRule) of ${foreignKeys.foreignJavaBeansRulePropertyName}. */
    public static final String FOREIGN_PROPERTY_NAME_${foreignKeys.foreignJavaBeansRulePropertyName} = "$foreignKeys.foreignJavaBeansRulePropertyName";

#end
    // -----------------------------------------------------
    //                                         Referrer Name
    //                                         -------------
#foreach ($referrer in $table.referrers)
    /** The referrer property name(JavaBeansRule) of ${referrer.referrerJavaBeansRulePropertyName}. */
    public static final String REFERRER_PROPERTY_NAME_${referrer.referrerJavaBeansRulePropertyName} = "$referrer.referrerJavaBeansRulePropertyName";

#end
    // -----------------------------------------------------
    //                                              Name Map
    //                                              --------
    /** The map of {DB name : property name} key-to-lower. */
    private static Map<String, String> _dbNamePropertyNameKeyToLowerMap;
    protected static Map<String, String> createDbNamePropertyNameKeyToLowerMap() {
        if (_dbNamePropertyNameKeyToLowerMap != null) {
            return _dbNamePropertyNameKeyToLowerMap;
        }
        final Map<String, String> map = new LinkedHashMap<String, String>();
        map.put(TABLE_DB_NAME.toLowerCase(), TABLE_PROPERTY_NAME);

#foreach ($col in $table.columns)
        map.put(DB_NAME_${col.name}.toLowerCase(), PROPERTY_NAME_${col.javaBeansRulePropertyName});
#end

        _dbNamePropertyNameKeyToLowerMap = Collections.unmodifiableMap(map);
        return _dbNamePropertyNameKeyToLowerMap;
    }

    /** The map of {property name : DB name} key-to-lower. */
    private static Map<String, String> _propertyNameDbNameKeyToLowerMap;
    protected static Map<String, String> createPropertyNameDbNameKeyToLowerMap() {
        if (_propertyNameDbNameKeyToLowerMap != null) {
            return _propertyNameDbNameKeyToLowerMap;
        }
        final Map<String, String> map = new LinkedHashMap<String, String>();
        map.put(TABLE_PROPERTY_NAME.toLowerCase(), TABLE_DB_NAME);

#foreach ($col in $table.columns)
        map.put(PROPERTY_NAME_${col.javaBeansRulePropertyName}.toLowerCase(), DB_NAME_${col.name});
#end

        _propertyNameDbNameKeyToLowerMap = Collections.unmodifiableMap(map);
        return _propertyNameDbNameKeyToLowerMap;
    }

    // ===================================================================================
    //                                                                          Table Name
    //                                                                          ==========
    /**
     * ${database.ImplementComment}
     * @return Table DB name. (NotNull)
     */
    public String getTableDbName() {
        return TABLE_DB_NAME;
    }

    /**
     * ${database.ImplementComment}
     * @return Table property name(JavaBeansRule). (NotNull)
     */
    public String getTablePropertyName() {
        return TABLE_PROPERTY_NAME;
    }

    // ===================================================================================
    //                                                                            Name Map
    //                                                                            ========
    /**
     * ${database.ImplementComment}
     * @return The key-to-lower map of DB name(lower) and property name. (NotNull)
     */
    public Map<String, String> getDbNamePropertyNameKeyToLowerMap() {
        return createDbNamePropertyNameKeyToLowerMap();
    }

    /**
     * ${database.ImplementComment}
     * @return The key-to-lower map of property name(lower) and DB name. (NotNull)
     */
    public Map<String, String> getPropertyNameDbNameKeyToLowerMap() {
        return createPropertyNameDbNameKeyToLowerMap();
    }

    // ===================================================================================
    //                                                                           Type Name
    //                                                                           =========
    /**
     * ${database.ImplementComment}
     * @return The type name of entity. (NotNull)
     */ 
    public String getEntityTypeName() {
        return "${myExtendedEntityPackageName}.${myExtendedObjectClassName}";
    }
#if ($isExistConditionBean)

    /**
     * ${database.ImplementComment}
     * @return The type name of conditionBean. (NotNull)
     */ 
    public String getConditionBeanTypeName() {
        return "${glPackageBaseCB}.${myConditionBeanClassName}";
    }
#else

    /**
     * ${database.ImplementComment}
     * @return The type name of conditionBean. (Nullable: If the conditionBean does not exist)
     */ 
    public String getConditionBeanTypeName() {
        return null;
    }
#end
#if ($isExistDao)

    /**
     * ${database.ImplementComment}
     * @return The type name of DAO. (NotNull)
     */ 
    public String getDaoTypeName() {
        return "${myExtendedDaoPackageName}.${myExtendedDaoClassName}";
    }
#else

    /**
     * ${database.ImplementComment}
     * @return The type name of DAO. (Nullable: If the DAO does not exist)
     */ 
    public String getDaoTypeName() {
        return null;
    }
#end
#if ($isExistBehavior)

    /**
     * ${database.ImplementComment}
     * @return The type name of behavior. (NotNull)
     */ 
    public String getBehaviorTypeName() {
        return "${myExtendedBhvPackageName}.${myExtendedBhvClassName}";
    }
#else

    /**
     * ${database.ImplementComment}
     * @return The type name of behavior. (Nullable: If the behavior does not exist)
     */ 
    public String getBehaviorTypeName() {
        return null;
    }
#end

    // ===================================================================================
    //                                                                         Object Type
    //                                                                         ===========
    /**
     * ${database.ImplementComment}
     * @return The type of entity. (NotNull)
     */ 
    public Class<${myExtendedObjectClassName}> getEntityType() {
        return ENTITY_TYPE;
    }

    // ===================================================================================
    //                                                                     Object Instance
    //                                                                     ===============
    /**
     * ${database.ImplementComment}
     * @return The type of entity. (NotNull)
     */ 
    public ${glEntityInterfaceName} newEntity() {
        return newMyEntity();
    }

    /**
     * New the instance of my entity.
     * @return The instance of my entity. (NotNull)
     */ 
    public ${myExtendedObjectClassName} newMyEntity() {
        return new ${myExtendedObjectClassName}();
    }


    // ===================================================================================
    //                                                                         Column Info
    //                                                                         ===========
    /**
     * ${database.ImplementComment}
     * @return The list of DB name of columns. (NotNull and NotEmpty)
     */
    public List<${glColumnInfoName}> getColumnInfoList() {
        final List<${glColumnInfoName}> columnInfoList = new ArrayList<${glColumnInfoName}>();
#foreach ($col in $table.columns)
        columnInfoList.add(column${col.javaBeansRulePropertyNameInitCap}());
#end
        return columnInfoList;
    }

#foreach ($col in $table.columns)
    /** @return The column information of ${col.uncapitalisedJavaName}. (NotNull) */
    public ${glColumnInfoName} column${col.javaBeansRulePropertyNameInitCap}() {
        return new ${glColumnInfoName}(this, "${col.name}", "${col.javaBeansRulePropertyName}", ${col.javaNative}.class, ${col.isPrimaryKey()}, ${col.columnSizeSettingExpression}, ${col.columnDecimalDigitsSettingExpression});
    }
#end

    // ===================================================================================
    //                                                                         Unique Info
    //                                                                         ===========
    // -----------------------------------------------------
    //                                       Primary Element
    //                                       ---------------
    public ${glUniqueInfoName} getPrimaryUniqueInfo() {
#if ($table.hasPrimaryKey())
        final ${glUniqueInfoName} uniqueInfo = new ${glUniqueInfoName}();
        uniqueInfo.setDBMeta(this);
#foreach ($col in $table.primaryKey)
        uniqueInfo.addUniqueColumnList(new ${glColumnInfoName}(this, "${col.name}", "${col.uncapitalisedJavaName}", ${col.javaNative}.class, true, ${col.columnSizeSettingExpression}));
#end
        uniqueInfo.setPrimary(true);
        return uniqueInfo;
#else
        throw new UnsupportedOperationException("The table doen not have primary key: " + getTableDbName());
#end
    }

    public boolean hasPrimaryKey() {
        return ${table.hasPrimaryKey()};
    }

    public boolean hasTwoOrMorePrimaryKeys() {
        return ${table.hasTwoOrMorePrimaryKeys()};
    }

    // ===================================================================================
    //                                                                       Relation Info
    //                                                                       =============
    // -----------------------------------------------------
    //                                       Foreign Element
    //                                       ---------------
#foreach ($foreignKeys in $table.foreignKeys)
#set ($genericsColumnInfoMap = "${glColumnInfoName}, ${glColumnInfoName}")
    public ${glPackageBaseCommonDBMetaInfo}.${glForeignInfoName} foreign${foreignKeys.foreignJavaBeansRulePropertyNameInitCap}() {
        final ${glPackageBaseCommonDBMetaInfo}.${glForeignInfoName} foreignInfo = new ${glPackageBaseCommonDBMetaInfo}.${glForeignInfoName}();
        foreignInfo.setForeignPropertyName("${foreignKeys.foreignJavaBeansRulePropertyName}");
        foreignInfo.setLocalDBMeta(${table.DBMetaClassName}.getInstance());
        foreignInfo.setForeignDBMeta(${foreignKeys.foreignTableDBMetaClassName}.getInstance());
        final Map<${genericsColumnInfoMap}> map = new LinkedHashMap<${genericsColumnInfoMap}>();
#foreach ($column in $foreignKeys.localColumnList)
        map.put(column${column.javaBeansRulePropertyNameInitCap}(), ${foreignKeys.foreignTableDBMetaClassName}.getInstance().column${foreignKeys.getForeignColumnByLocalColumn(${column}).javaBeansRulePropertyNameInitCap}());
#end
        foreignInfo.setLocalForeignColumnInfoMap(map);
        foreignInfo.setRelationNo(${table.resolveForeignIndex($foreignKeys)});
        foreignInfo.setOneToOne(${foreignKeys.isOneToOne()});
        return foreignInfo;
    }
#end

#foreach ($referer in $table.referrers)
#set ($genericsColumnInfoMap = "${glColumnInfoName}, ${glColumnInfoName}")
#if (${referer.isOneToOne()})
    public ${glPackageBaseCommonDBMetaInfo}.${glForeignInfoName} foreign${referer.refererJavaBeansRulePropertyNameAsOneInitCap}() {
        final ${glPackageBaseCommonDBMetaInfo}.${glForeignInfoName} foreignInfo = new ${glPackageBaseCommonDBMetaInfo}.${glForeignInfoName}();
        foreignInfo.setForeignPropertyName("${referer.refererJavaBeansRulePropertyNameAsOne}");
        foreignInfo.setLocalDBMeta(${referer.foreignTableDBMetaClassName}.getInstance());
        foreignInfo.setForeignDBMeta(${referer.refererTableDBMetaClassName}.getInstance());
        final Map<${genericsColumnInfoMap}> map = new LinkedHashMap<${genericsColumnInfoMap}>();
#foreach ($column in $referer.foreignColumnList)
        map.put(column${column.javaBeansRulePropertyNameInitCap}(), ${referer.refererTableDBMetaClassName}.getInstance().column${referer.getLocalColumnByForeignColumn(${column}).javaBeansRulePropertyNameInitCap}());
#end
        foreignInfo.setLocalForeignColumnInfoMap(map);
        foreignInfo.setRelationNo(${table.resolveRefererIndexAsOne($referer)});
        foreignInfo.setOneToOne(${referer.isOneToOne()});
        return foreignInfo;
    }
#end
#end

    // -----------------------------------------------------
    //                                      Referrer Element
    //                                      ----------------
#foreach ($referer in $table.referrers)
#set ($genericsColumnInfoMap = "${glColumnInfoName}, ${glColumnInfoName}")
#set ($refererTable = $referer.table)

    public ${glPackageBaseCommonDBMetaInfo}.${glReferrerInfoName} referrer${referer.refererJavaBeansRulePropertyNameInitCap}() {
        final ${glPackageBaseCommonDBMetaInfo}.${glReferrerInfoName} referrerInfo = new ${glPackageBaseCommonDBMetaInfo}.${glReferrerInfoName}();
        referrerInfo.setReferrerPropertyName("${referer.refererJavaBeansRulePropertyName}");
        referrerInfo.setLocalDBMeta(${referer.foreignTableDBMetaClassName}.getInstance());
        referrerInfo.setReferrerDBMeta(${referer.refererTableDBMetaClassName}.getInstance());
        final Map<${genericsColumnInfoMap}> map = new LinkedHashMap<${genericsColumnInfoMap}>();
#foreach ($column in $referer.foreignColumnList)
        map.put(column${column.javaBeansRulePropertyNameInitCap}(), ${referer.refererTableDBMetaClassName}.getInstance().column${referer.getLocalColumnByForeignColumn(${column}).javaBeansRulePropertyNameInitCap}());
#end
        referrerInfo.setLocalReferrerColumnInfoMap(map);
        referrerInfo.setOneToOne(${referer.isOneToOne()});
        return referrerInfo;
    }
#end

    // -----------------------------------------------------
    //                                        Relation Trace
    //                                        --------------
    public ${table.relationTraceClassName}RelationTrace createRelationTrace(RelationTraceFixHandler relationTraceFixHandler) {
        return new ${table.relationTraceClassName}RelationTrace(relationTraceFixHandler);
    }

    public ${table.relationTraceClassName}RelationTrace createRelationTrace(List<${glRelationInfoName}> relationList, List<AbstractRelationTrace> relationTraceList) {
        return new ${table.relationTraceClassName}RelationTrace(relationList, relationTraceList);
    }

    public static class ${table.relationTraceClassName}RelationTrace extends AbstractRelationTrace {

        /**
         * Constructor for first step.
         * @param relationTraceFixHandler The handler of fixed relation trace. (Nullable)
         */
        public ${table.relationTraceClassName}RelationTrace(RelationTraceFixHandler relationTraceFixHandler) {
            super(relationTraceFixHandler);
        }

        /**
         * Constructor for relation step.
         * @param relationList The list of relation. (NotNull)
         * @param relationTraceList The list of relation trace. (NotNull)
         */
        public ${table.relationTraceClassName}RelationTrace(List<${glRelationInfoName}> relationList, List<AbstractRelationTrace> relationTraceList) {
            super(relationList, relationTraceList);
        }
#foreach ($foreignKeys in $table.foreignKeys)

        public ${foreignKeys.foreignTableDBMetaClassName}.${foreignKeys.foreignTable.relationTraceClassName}RelationTrace foreign${foreignKeys.foreignJavaBeansRulePropertyNameInitCap}() {
            _relationList.add(${myDBMetaClassName}.getInstance().foreign${foreignKeys.foreignJavaBeansRulePropertyNameInitCap}());
            return ${foreignKeys.foreignTableDBMetaClassName}.getInstance().createRelationTrace(_relationList, _relationTraceList);
        }
#end
#foreach ($referer in $table.referrers)
  #if (${referer.isOneToOne()})

        public ${referer.refererTableDBMetaClassName}.${referer.table.relationTraceClassName}RelationTrace foreign${referer.refererJavaBeansRulePropertyNameAsOneInitCap}() {
            _relationList.add(${myDBMetaClassName}.getInstance().foreign${referer.refererJavaBeansRulePropertyNameAsOneInitCap}());
            return ${referer.refererTableDBMetaClassName}.getInstance().createRelationTrace(_relationList, _relationTraceList);
        }
  #end
#end
#foreach ($referer in $table.referrers)

        public ${referer.refererTableDBMetaClassName}.${referer.table.relationTraceClassName}RelationTrace referrer${referer.refererJavaBeansRulePropertyNameInitCap}() {
            _relationList.add(${myDBMetaClassName}.getInstance().referrer${referer.refererJavaBeansRulePropertyNameInitCap}());
            return ${referer.refererTableDBMetaClassName}.getInstance().createRelationTrace(_relationList, _relationTraceList);
        }
#end

#foreach ($col in $table.columns)
        public RelationTrace column${col.javaBeansRulePropertyNameInitCap}() { return fixTrace(_relationList, ${myDBMetaClassName}.getInstance().column${col.javaBeansRulePropertyNameInitCap}()); }
#end
    }

    // ===================================================================================
    //                                                                       Sequence Info
    //                                                                       =============
    public boolean hasSequence() {
        return ${table.isUseSequence()};
    }

    // ===================================================================================
    //                                                                Optimistic Lock Info
    //                                                                ====================
    public boolean hasVersionNo() {
        return ${table.isUseVersionNo()};
    }

    public boolean hasUpdateDate() {
        return ${table.isUseUpdateDate()};
    }

    // ===================================================================================
    //                                                                  Common Column Info
    //                                                                  ==================
    public boolean hasCommonColumn() {
        return ${table.hasAllCommonColumn()};
    }

    // ===================================================================================
    //                                                                     Entity Handling
    //                                                                     ===============
    // -----------------------------------------------------
    //                                                Accept
    //                                                ------
    public void acceptPrimaryKeyMap(${glEntityInterfaceName} entity, Map<String, ? extends Object> primaryKeyMap) {
#if ($table.hasPrimaryKey())
        final ${myExtendedObjectClassName} myEntity = (${myExtendedObjectClassName})entity;
        MapAssertUtil.assertPrimaryKeyMapNotNullAndNotEmpty(primaryKeyMap);
        final MapStringValueAnalyzer analyzer = new MapStringValueAnalyzer(primaryKeyMap, entity.getModifiedPropertyNames());

#foreach ($col in $table.primaryKey)
        MapAssertUtil.assertColumnExistingInPrimaryKeyMap(primaryKeyMap, "${col.Name}");
#if ($col.isJavaNativeStringObject())
        if (analyzer.init("${col.Name}", "${col.UncapitalisedJavaName}", "${col.JavaBeansRulePropertyName}")) { myEntity.set${col.javaName}(analyzer.analyzeString(${col.JavaNative}.class)); }
#end
#if ($col.isJavaNativeNumberObject())
        if (analyzer.init("${col.Name}", "${col.UncapitalisedJavaName}", "${col.JavaBeansRulePropertyName}")) { myEntity.set${col.javaName}(analyzer.analyzeNumber(${col.JavaNative}.class)); }
#end
#if ($col.isJavaNativeDateObject())
        if (analyzer.init("${col.Name}", "${col.UncapitalisedJavaName}", "${col.JavaBeansRulePropertyName}")) { myEntity.set${col.javaName}(analyzer.analyzeDate(${col.JavaNative}.class)); }
#end
#if (!$col.isJavaNativeStringObject() && !$col.isJavaNativeNumberObject() && !$col.isJavaNativeDateObject())
        if (analyzer.init("${col.Name}", "${col.UncapitalisedJavaName}", "${col.JavaBeansRulePropertyName}")) { myEntity.set${col.javaName}(analyzer.analyzeOther(${col.JavaNative}.class)); }
#end
#end

#else

        String msg = "This table has no primary-keys: " + getTableDbName();
        throw new IllegalStateException(msg);
#end
    }

    public void acceptPrimaryKeyMapString(${glEntityInterfaceName} entity, String primaryKeyMapString) {
        MapStringUtil.acceptPrimaryKeyMapString(primaryKeyMapString, entity);
    }

    public void acceptColumnValueMap(${glEntityInterfaceName} entity, Map<String, ? extends Object> columnValueMap) {
        final ${myExtendedObjectClassName} myEntity = (${myExtendedObjectClassName})entity;
        MapAssertUtil.assertColumnValueMapNotNullAndNotEmpty(columnValueMap);
        final MapStringValueAnalyzer analyzer = new MapStringValueAnalyzer(columnValueMap, entity.getModifiedPropertyNames());

#foreach ($col in $table.columns)
#if ($col.isJavaNativeStringObject())
        if (analyzer.init("${col.Name}", "${col.UncapitalisedJavaName}", "${col.JavaBeansRulePropertyName}")) { myEntity.set${col.javaName}(analyzer.analyzeString(${col.JavaNative}.class)); }
#end
#if ($col.isJavaNativeNumberObject())
        if (analyzer.init("${col.Name}", "${col.UncapitalisedJavaName}", "${col.JavaBeansRulePropertyName}")) { myEntity.set${col.javaName}(analyzer.analyzeNumber(${col.JavaNative}.class)); }
#end
#if ($col.isJavaNativeDateObject())
        if (analyzer.init("${col.Name}", "${col.UncapitalisedJavaName}", "${col.JavaBeansRulePropertyName}")) { myEntity.set${col.javaName}(analyzer.analyzeDate(${col.JavaNative}.class)); }
#end
#if (!$col.isJavaNativeStringObject() && !$col.isJavaNativeNumberObject() && !$col.isJavaNativeDateObject())
        if (analyzer.init("${col.Name}", "${col.UncapitalisedJavaName}", "${col.JavaBeansRulePropertyName}")) { myEntity.set${col.javaName}(analyzer.analyzeOther(${col.JavaNative}.class)); }
#end
#end

    }

    public void acceptColumnValueMapString(${glEntityInterfaceName} entity, String columnValueMapString) {
        MapStringUtil.acceptColumnValueMapString(columnValueMapString, entity);
    }

    // -----------------------------------------------------
    //                                               Extract
    //                                               -------
    public String extractPrimaryKeyMapString(${glEntityInterfaceName} entity) {
        return MapStringUtil.extractPrimaryKeyMapString(entity);
    }

    public String extractPrimaryKeyMapString(${glEntityInterfaceName} entity, String startBrace, String endBrace, String delimiter, String equal) {
#if ($table.hasPrimaryKey())
        final ${myExtendedObjectClassName} myEntity = (${myExtendedObjectClassName})entity;
        final String mapMarkAndStartBrace = MAP_STRING_MAP_MARK + startBrace;
        final StringBuffer sb = new StringBuffer();
#foreach ($col in $table.PrimaryKey)
        helpAppendingColumnValueString(sb, delimiter, equal, "${col.Name}", myEntity.get${col.JavaName}());
#end

        sb.delete(0, delimiter.length()).insert(0, mapMarkAndStartBrace).append(endBrace);
        return sb.toString();
#else
        return extractColumnValueMapString(entity, startBrace, endBrace, delimiter, equal);
#end
    }

    public String extractColumnValueMapString(${glEntityInterfaceName} entity) {
        return MapStringUtil.extractColumnValueMapString(entity);
    }

    public String extractColumnValueMapString(${glEntityInterfaceName} entity, String startBrace, String endBrace, String delimiter, String equal) {
        final ${myExtendedObjectClassName} myEntity = (${myExtendedObjectClassName})entity;
        final String mapMarkAndStartBrace = MAP_STRING_MAP_MARK + startBrace;
        final StringBuffer sb = new StringBuffer();
#foreach ($col in $table.columns)
        helpAppendingColumnValueString(sb, delimiter, equal, "${col.Name}", myEntity.get${col.JavaName}());
#end

        sb.delete(0, delimiter.length()).insert(0, mapMarkAndStartBrace).append(endBrace);
        return sb.toString();
    }

    private void helpAppendingColumnValueString(StringBuffer sb, String delimiter, String equal, String colName, Object value) {
        sb.append(delimiter).append(colName).append(equal);
        sb.append(helpGettingColumnStringValue(value));
    }

#if (${table.hasAllCommonColumn()})
    public String extractCommonColumnValueMapString(${glEntityInterfaceName} entity) {
        final String startBrace = MAP_STRING_START_BRACE;
        final String endBrace = MAP_STRING_END_BRACE;
        final String delimiter = MAP_STRING_DELIMITER;
        final String equal = MAP_STRING_EQUAL;
        return extractCommonColumnValueMapString(entity, startBrace, endBrace, delimiter, equal);
    }

    public String extractCommonColumnValueMapString(${glEntityInterfaceName} entity, String startBrace, String endBrace, String delimiter, String equal) {
        final ${myExtendedObjectClassName} myEntity = (${myExtendedObjectClassName})entity;
        final String mapMarkAndStartBrace = MAP_STRING_MAP_MARK + startBrace;
        final StringBuffer sb = new StringBuffer();
  #foreach ($columnName in ${database.commonColumnNameList})
    #set ($filteredColumnName = ${database.filterCommonColumn(${columnName})})
    #set ($commonColumnMap = ${database.commonColumnMap})
    #set ($columnType = ${commonColumnMap.get(${columnName})})
    #set ($javaNative = ${database.convertJavaNativeByJdbcType(${columnType})})
    #set ($javaName = ${database.convertJavaNameByJdbcNameAsColumn(${filteredColumnName})})
    #set ($targetColumnName = ${table.findTargetColumnNameByCommonColumnName(${columnName})})
    #set ($col = $table.getColumnByFlexibleName($columnName))
    #if ($col.isJavaNativeDateObject())

        sb.append(delimiter).append("${targetColumnName}").append(equal);
        sb.append((myEntity.get${javaName}() != null ? helpFormatingDate(myEntity.get${javaName}()) : ""));
    #else

        sb.append(delimiter).append("${targetColumnName}").append(equal);
        sb.append((myEntity.get${javaName}() != null ? myEntity.get${javaName}().toString() : ""));
    #end
  #end

        sb.delete(0, delimiter.length()).insert(0, mapMarkAndStartBrace).append(endBrace);
        return sb.toString();
    }
#else

    public String extractCommonColumnValueMapString(${glEntityInterfaceName} entity) {
        return "map:{}";
    }

    public String extractCommonColumnValueMapString(${glEntityInterfaceName} entity, String startBrace, String endBrace, String delimiter, String equal) {
        return "map:" + startBrace + endBrace;
    }

#end

    // -----------------------------------------------------
    //                                               Convert
    //                                               -------
    public List<Object> convertToColumnValueList(${glEntityInterfaceName} entity) {
        return new ArrayList<Object>(convertToColumnValueMap(entity).values());
    }

    public Map<String, Object> convertToColumnValueMap(${glEntityInterfaceName} entity) {
        final ${myExtendedObjectClassName} myEntity = downcast(entity);
        final Map<String, Object> valueMap = new LinkedHashMap<String, Object>();
#foreach ($col in $table.columns)
        valueMap.put("${col.name}", myEntity.get${col.javaName}());
#end
        return valueMap;
    }

    public List<String> convertToColumnStringValueList(${glEntityInterfaceName} entity) {
        return new ArrayList<String>(convertToColumnStringValueMap(entity).values());
    }

    public Map<String, String> convertToColumnStringValueMap(${glEntityInterfaceName} entity) {
        final ${myExtendedObjectClassName} myEntity = downcast(entity);
        final Map<String, String> valueMap = new LinkedHashMap<String, String>();
#foreach ($col in $table.columns)
        valueMap.put("${col.name}", helpGettingColumnStringValue(myEntity.get${col.JavaName}()));
#end
        return valueMap;
    }

    // ===================================================================================
    //                                                                        JDBC Support
    //                                                                        ============
    public String getPreparedInsertClause() {
        return getPreparedInsertClause(new PreparedInsertClauseOption());
    }

    public String getPreparedInsertClause(PreparedInsertClauseOption preparedInsertClauseOption) {
        if (preparedInsertClauseOption.getTablePrefix() != null) {
            final String tablePrefix = preparedInsertClauseOption.getTablePrefix();
            return "insert into " + tablePrefix + "${table.name}(${table.ColumnNameCommaString}) values(${table.insertClauseValuesAsQuetionMark})";
        }
        return "insert into ${table.name}(${table.ColumnNameCommaString}) values(${table.insertClauseValuesAsQuetionMark})";
    }

	// ===================================================================================
    //                                                               Entity Property Setup
    //                                                               =====================
	// It's very INTERNAL!
	protected Map<String, EntityPropertySetupper<${myExtendedObjectClassName}>> _entityPropertySetupperMap = new HashMap<String, EntityPropertySetupper<${myExtendedObjectClassName}>>();
	{
#foreach ($column in $table.columns)
	    registerEntityPropertySetupper("$column.name", "$column.javaBeansRulePropertyName", new EntityProperty${column.javaName}Setupper(), _entityPropertySetupperMap);
#end
	}
	
	public boolean hasEntityPropertySetupper(String propertyName) {
	    return _entityPropertySetupperMap.containsKey(propertyName);
	}

	public void setupEntityProperty(String propertyName, Object entity, Object value) {
        final EntityPropertySetupper<${myExtendedObjectClassName}> callback = _entityPropertySetupperMap.get(propertyName);
		if (callback == null) {
		    String msg = "The propertyName was Not Found in the map of setupper of entity property:";
			msg = msg + " propertyName=" + propertyName + " _entityPropertySetupperMap.keySet()=" + _entityPropertySetupperMap.keySet();
		    throw new IllegalStateException(msg);
		}
        callback.setup((${myExtendedObjectClassName})entity, value);
	}
	
#foreach ($column in $table.columns)
    public class EntityProperty${column.javaName}Setupper implements EntityPropertySetupper<${myExtendedObjectClassName}> {
        public void setup(${myExtendedObjectClassName} entity, Object value) { entity.set${column.javaName}((${column.javaNative})value); }
    }
#end

    // ===================================================================================
    //                                                                              Helper
    //                                                                              ======
    protected ${myExtendedObjectClassName} downcast(${glEntityInterfaceName} entity) {
        assertObjectNotNull("entity", entity);
        try {
            return (${myExtendedObjectClassName})entity;
        } catch (ClassCastException e) {
            String msg = "The entity should be ${myExtendedObjectClassName} but it was: " + entity.getClass();
            throw new RuntimeException(msg, e);
        }
    }

    protected void checkDowncast(${glEntityInterfaceName} entity) {
        downcast(entity);
    }
}
