${database.allClassCopyright}package ${glPackageNss};

#set ($myClassName = "${myNestSelectSetupperTerminalClassName}")
import ${glPackageCQ}.${myConditionQueryClassName};

/**
 * The nest-select-setupper-terminal of ${table.name}.
 * 
 * @author ${database.ClassAuthor}
 */${database.outputSuppressWarningsAfterLineSeparator()}
public class ${myClassName} {

    // ===================================================================================
    //                                                                           Attribute
    //                                                                           =========
    protected ${myNestSelectSetupperClassName} _nss;

    // ===================================================================================
    //                                                                         Constructor
    //                                                                         ===========
    public ${myNestSelectSetupperTerminalClassName}(${myConditionQueryClassName} query) {
        _nss = new ${myNestSelectSetupperClassName}(query);
    }

    // ===================================================================================
    //                                                                            Accessor
    //                                                                            ========
    public boolean hasConditionQuery() {
        return _nss.hasConditionQuery();
    }

    // ===================================================================================
    //                                                           With Nested Foreign Table
    //                                                           =========================
#foreach ($foreignKeys in $table.foreignKeys)
  #set ($tmpPropertyName = "${foreignKeys.foreignPropertyName}")
  #set ($tmpPropertyNameInitCap = "${foreignKeys.foreignPropertyNameInitCap}")

    public void with${tmpPropertyNameInitCap}() {
	    _nss.with${tmpPropertyNameInitCap}();
    }
#end

    // ===================================================================================
    //                                                          With Nested Referrer Table
    //                                                          ==========================
#foreach ($referrer in $table.referrers)
  #if (${referrer.isOneToOne()})
    #set ($tmpPropertyName = "${referrer.reffererPropertyNameAsOne}")
    #set ($tmpPropertyNameInitCap = "${referrer.reffererPropertyNameInitCapAsOne}")

    public void with${tmpPropertyNameInitCap}() {
	    _nss.with${tmpPropertyNameInitCap}();
    }
  #end
#end
    
}
