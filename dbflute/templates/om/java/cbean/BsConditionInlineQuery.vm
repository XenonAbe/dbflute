${database.allClassCopyright}package ${glPackageCIQ};

#set ($myClassName = "${myConditionInlineQueryClassName}")
#set ($myCQClassName = "")
#if ($database.isJavaDirOnlyOne())
  #set ($myCQClassName = "${myBaseConditionQueryClassName}")
#else
  #set ($myCQClassName = "${myConditionQueryClassName}")
#end
import ${glPackageBaseCQ}.*;
import ${glPackageCQ}.*;

import ${glPackageBaseCommonCBean}.*;
import ${glPackageBaseCommonCKey}.*;
import ${glPackageBaseCommonCOption}.${glConditionOptionInterfaceName};
import ${glPackageBaseCommonCValue}.${glConditionValueName};
import ${glPackageBaseCommonSqlClause}.${glSqlClauseName};

/**
 * The condition-inline-query of ${table.name}.
 * 
 * @author ${database.ClassAuthor}
 */
public class ${myClassName} extends ${myAbstractBaseConditionQueryClassName} {

    // ===================================================================================
    //                                                                           Attribute
    //                                                                           =========
    /** Corresponding condition query. */
    protected ${myCQClassName} _myCQ;

    // ===================================================================================
    //                                                                         Constructor
    //                                                                         ===========
    /**
     * Constructor.
     * 
     * @param childQuery Child query as abstract class. (Nullable: If null, this is base instance.)
     * @param sqlClause SQL clause instance. (NotNull)
     * @param aliasName My alias name. (NotNull)
     * @param nestLevel Nest level.
     */
    public ${myClassName}(${glConditionQueryInterfaceName} childQuery, ${glSqlClauseName} sqlClause, String aliasName, int nestLevel, ${myCQClassName} myCQ) {
        super(childQuery, sqlClause, aliasName, nestLevel);
        _myCQ = myCQ;
    }

    // ===================================================================================
    //                                                             Override about Register
    //                                                             =======================
    protected void reflectRelationOnUnionQuery(${glConditionQueryInterfaceName} baseQueryAsSuper, ${glConditionQueryInterfaceName} unionQueryAsSuper) {
        throw new UnsupportedOperationException("InlineQuery must not need UNION method: " + baseQueryAsSuper + " : " + unionQueryAsSuper);
    }

    protected void setupConditionValueAndRegisterWhereClause(${glConditionKeyName} key, Object value, ${glConditionValueName} cvalue
                                                             , String colName, String capPropName, String uncapPropName) {
        registerInlineQuery(key, value, cvalue, colName, capPropName, uncapPropName);
    }

    protected void setupConditionValueAndRegisterWhereClause(${glConditionKeyName} key, Object value, ${glConditionValueName} cvalue
                                                             , String colName, String capPropName, String uncapPropName, ${glConditionOptionInterfaceName} option) {
        registerInlineQuery(key, value, cvalue, colName, capPropName, uncapPropName, option);
    }

    protected void registerWhereClause(String whereClause) {
        registerInlineWhereClause(whereClause);
    }

    protected String getInScopeSubQueryRealColumnName(String columnName) {
        return columnName;// No append alias name!
    }

    protected void registerExistsSubQuery(${glConditionQueryInterfaceName} subQuery
                                 , String columnName, String relatedColumnName, String propertyName) {
        throw new UnsupportedOperationException("Sorry! ExistsSubQuery at inline view is unsupported. So please use InScopeSubQyery.");
    }

    // ===================================================================================
    //                                                                Override about Query
    //                                                                ====================
    // /* * * * * * * * * * * * * * * * * * * * * * *
    //   MyTable = [$table.Name]
    // * * * * * * * * */

  #foreach ($col in $table.Columns)
    #set ($tmpJavaName = "${col.JavaName}")
    #set ($tmpUncapitalisedJavaName = "${col.UncapitalisedJavaName}")

    // /- - - - - - - - - - - - - - - - - - - - - - -
    //   Column = [$col.Name]
    // - - - - - - - - -/
    protected ${glConditionValueName} getCValue${tmpJavaName}() {
        return _myCQ.get${tmpJavaName}();
    }

    #if (${col.isJavaNativeStringObject()})
      #if (${col.isSingleKeyForeignKey()})
        #set ($relatedCQClassName = "${col.foreignKey.foreignTableExtendedConditionQueryClassName}")
        #set ($subQueryPropertyNameInitCap = "${tmpJavaName}_InScopeSubQuery_${col.foreignKey.foreignPropertyNameInitCap}")
        #set ($subQueryPropertyName = "${tmpUncapitalisedJavaName}_InScopeSubQuery_${col.foreignKey.foreignPropertyNameInitCap}")

    public void keep${subQueryPropertyNameInitCap}(${relatedCQClassName} subQuery) {
        _myCQ.keep${subQueryPropertyNameInitCap}(subQuery);
    }
      #end
      #if (${col.hasSingleKeyReferrer()})
        #foreach ($refferer in $col.SingleKeyReferrers)
          #set ($relatedCQClassName = "${refferer.refererTableExtendedConditionQueryClassName}")
          #set ($subQueryPropertyNameInitCap = "${tmpJavaName}_InScopeSubQuery_${refferer.ReffererPropertyNameInitCap}")
          #set ($subQueryPropertyName = "${tmpUncapitalisedJavaName}_InScopeSubQuery_${refferer.ReffererPropertyNameInitCap}")

    public void keep${subQueryPropertyNameInitCap}(${relatedCQClassName} subQuery) {
        _myCQ.keep${subQueryPropertyNameInitCap}(subQuery);
    }
        #end
      #end
      #if (${col.hasSingleKeyReferrer()})
        #foreach ($refferer in $col.SingleKeyReferrers)
          #if (!$refferer.isSelfReference())
            #set ($relatedCQClassName = "${refferer.refererTableExtendedConditionQueryClassName}")
            #set ($subQueryPropertyNameInitCap = "${tmpJavaName}_ExistsSubQuery_${refferer.ReffererPropertyNameInitCap}")
            #set ($subQueryPropertyName = "${tmpUncapitalisedJavaName}_ExistsSubQuery_${refferer.ReffererPropertyNameInitCap}")

    public void keep${subQueryPropertyNameInitCap}(${relatedCQClassName} subQuery) {
        throw new UnsupportedOperationException("ExistsSubQuery at inline() is unsupported! Sorry!");
        // _myCQ.keep${subQueryPropertyNameInitCap}(subQuery);
    }
          #end
        #end
      #end
    #end
    #if (${col.isJavaNativeNumberObject()})
      #if (${col.isSingleKeyForeignKey()})
        #set ($relatedCQClassName = "${col.foreignKey.foreignTableExtendedConditionQueryClassName}")
        #set ($subQueryPropertyNameInitCap = "${tmpJavaName}_InScopeSubQuery_${col.foreignKey.foreignPropertyNameInitCap}")
        #set ($subQueryPropertyName = "${tmpUncapitalisedJavaName}_InScopeSubQuery_${col.foreignKey.foreignPropertyNameInitCap}")

    public void keep${subQueryPropertyNameInitCap}(${relatedCQClassName} subQuery) {
        _myCQ.keep${subQueryPropertyNameInitCap}(subQuery);
    }
      #end
      #if (${col.hasSingleKeyReferrer()})
        #foreach ($refferer in $col.SingleKeyReferrers)
          #set ($relatedCQClassName = "${refferer.refererTableExtendedConditionQueryClassName}")
          #set ($subQueryPropertyNameInitCap = "${tmpJavaName}_InScopeSubQuery_${refferer.ReffererPropertyNameInitCap}")
          #set ($subQueryPropertyName = "${tmpUncapitalisedJavaName}_InScopeSubQuery_${refferer.ReffererPropertyNameInitCap}")

    public void keep${subQueryPropertyNameInitCap}(${relatedCQClassName} subQuery) {
        _myCQ.keep${subQueryPropertyNameInitCap}(subQuery);
    }
        #end
      #end
      #if (${col.hasSingleKeyReferrer()})
        #foreach ($refferer in $col.SingleKeyReferrers)
          #if (!$refferer.isSelfReference())
            #set ($relatedCQClassName = "${refferer.refererTableExtendedConditionQueryClassName}")
            #set ($subQueryPropertyNameInitCap = "${tmpJavaName}_ExistsSubQuery_${refferer.ReffererPropertyNameInitCap}")
            #set ($subQueryPropertyName = "${tmpUncapitalisedJavaName}_ExistsSubQuery_${refferer.ReffererPropertyNameInitCap}")

    public void keep${subQueryPropertyNameInitCap}(${relatedCQClassName} subQuery) {
        throw new UnsupportedOperationException("ExistsSubQuery at inline() is unsupported! Sorry!");
        // _myCQ.keep${subQueryPropertyNameInitCap}(subQuery);
    }
          #end
        #end
      #end
    #end
    #if (${col.isJavaNativeDateObject()})
    #end
    #if (${col.isJavaNativeBooleanObject()})
    #end
    #if (${col.isJavaNativeBinaryObject()})
    #end
    #if (!${col.isNotNull()})
    #end
    #if (!${col.isJavaNativeBinaryObject()})
    #end
  #end

}
