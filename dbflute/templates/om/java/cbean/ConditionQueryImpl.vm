package ${glPackageCB};

#set ($myClassName = "${myConditionQueryClassName}")
#if ($database.hasClassificationDefinitionMap())
import ${glPackageBaseCommon}.${glClassificationDefinition};
#end

import ${glPackageBaseCommonCBean}.*;
import ${glPackageBaseCommonCKey}.*;
import ${glPackageBaseCommonCValue}.${glConditionValueName};
import ${glPackageBaseCommonSqlClause}.${glSqlClauseName};


/**
 * The condition-query of {table.Name}.
 * 
 * @author ${database.ClassAuthor}
 */
public class ${myClassName} extends ${glConditionQueryAbstractName} {

    // =====================================================================================
    //                                                                           Constructor
    //                                                                           ===========
    /**
     * Constructor.
     * 
     * @param childQuery Child query as abstract class. (Nullable: If null, this is base instance.)
     * @param sqlClause SQL clause instance. (NotNull)
     * @param aliasName My alias name. (NotNull)
     * @param nestLevel Nest level.
     */
    ${myClassName}(${glConditionQueryAbstractName} childQuery, ${glSqlClauseName} sqlClause, String aliasName, int nestLevel) {
        super(childQuery, sqlClause, aliasName, nestLevel);
    }

    // =====================================================================================
    //                                                                            Table name
    //                                                                            ==========
    /**
     * ${database.ImplementComment}
     * 
     * @return Table db-name. (NotNull)
     */
    final public String getTableDbName() {
        return "${table.Name}";
    }

    // =====================================================================================
    //                                                                         IncludeAsMine
    //                                                                         =============
  #foreach ($col in $table.Columns)

    /**
     * Include select-column of ${col.UncapitalisedJavaName} as mine.
     * Alias name is java-name of this column.
     * Be careful to whether your table have the same column.
     * 
     * @return this. (NotNull)
     */
    public ${myClassName} includeAsMine_${col.JavaName}() {
        return registerIncludedSelectColumn("${col.JavaName}", getRealColumnName("${col.Name}"));
    }

    /**
     * Include select-column of ${col.UncapitalisedJavaName} as mine.
     * 
     * @param aliasName Alias name. {select columnName as aliasName from ...} This should not contain comma. (NotNull)
     * @return this. (NotNull)
     */
    public ${myClassName} includeAsMine_${col.JavaName}(String aliasName) {
        return registerIncludedSelectColumn(aliasName, getRealColumnName("${col.Name}"));
    }
  #end

    /**
     * Register included-select-column.
     * 
     * @param aliasName Alias name. This should not contain comma. (NotNull)
     * @param realColumnName Real column name. This should not contain comma. (NotNull)
     * @return this. (NotNull)
     */
    protected ${myClassName} registerIncludedSelectColumn(String aliasName, String realColumnName) {
        assertAliasName(aliasName);
        assertColumnName(realColumnName);
        getSqlClause().registerIncludedSelectColumn(aliasName, realColumnName);
        return this;
    }

    // =====================================================================================
    //                                                                                 Query
    //                                                                                 =====
  ## --------------------------------------------------------------------------------
  ##                                                  Make getter and setter methods.
  ##                                                  -------------------------------

    // /* * * * * * * * * * * * * * * * * * * * * * *
    //   MyTable = [$table.Name]
    // * * * * * * * * */

  #foreach ($col in $table.Columns)
    #set ($tmpJavaName = "${col.JavaName}")
    #set ($tmpUncapitalisedJavaName = "${col.UncapitalisedJavaName}")
    
    /** Column db name of ${col.UncapitalisedJavaName}. */
    protected static final String COL_${col.Name} = "${col.Name}";

    /** Column java name of ${col.UncapitalisedJavaName}. */
    protected static final String J_${col.JavaName} = "${col.JavaName}";

    /** Column uncapitalised java name of ${col.UncapitalisedJavaName}. */
    protected static final String UJ_${col.UncapitalisedJavaName} = "${col.UncapitalisedJavaName}";

    /** The attribute of ${col.UncapitalisedJavaName}. */
    protected ${glConditionValueName} _${tmpUncapitalisedJavaName};

    /**
     * Get the value of ${col.UncapitalisedJavaName}.
     * 
     * @return The value of ${col.UncapitalisedJavaName}.
     */
    public ${glConditionValueName} get${tmpJavaName}() {
        if (_${tmpUncapitalisedJavaName} == null) {
            _${tmpUncapitalisedJavaName} = new ${glConditionValueName}();
        }
        return _${tmpUncapitalisedJavaName};
    }
    #if (${col.isJavaNativeStringObject()})

    /**
     * Set the value of ${col.UncapitalisedJavaName} using equal. { = }
     * If the value is null or empty-string, this condition is ignored.
     * 
     * @param value The value of ${col.UncapitalisedJavaName} as equal.
     * @return this. (NotNull)
     */
    public ${myClassName} set${tmpJavaName}_Equal($col.JavaNative value) {
        return register${tmpJavaName}(${glConditionKeyName}.CK_EQUAL, filterRemoveEmptyString(value));
    }

    /**
     * Set the value of ${col.UncapitalisedJavaName} using equal as inline. { = }
     * If the value is null or empty-string, this condition is ignored.
     * 
     * @param value The value of ${col.UncapitalisedJavaName} as equal.
     * @return this. (NotNull)
     */
    public ${myClassName} set${tmpJavaName}_Equal_AsInline($col.JavaNative value) {
        return registerInline${tmpJavaName}(${glConditionKeyName}.CK_EQUAL, filterRemoveEmptyString(value));
    }

    /**
     * Set the empty-string of ${col.UncapitalisedJavaName} as equal. { = }
     * 
     * @return this. (NotNull)
     */
    public ${myClassName} set${tmpJavaName}_Equal_EmptyString() {
        return register${tmpJavaName}(${glConditionKeyName}.CK_EQUAL, "");
    }
      #if (${col.hasClassification()})
        #foreach ($classificationMap in $col.ClassificationMapList)

    /**
     * Set the value of ${classificationMap.get('name')} of ${col.UncapitalisedJavaName} as equal. { = }
     * 
     * @return this. (NotNull)
     */
    public ${myClassName} set${tmpJavaName}_Equal_${classificationMap.get('name')}() {
        return register${tmpJavaName}(${glConditionKeyName}.CK_EQUAL, ${glClassificationDefinition}.CODE_${col.ClassificationName}_${classificationMap.get('name')});
    }

    /**
     * Set the value of ${classificationMap.get('name')} of ${col.UncapitalisedJavaName} as equal as inline. { = }
     * 
     * @return this. (NotNull)
     */
    public ${myClassName} set${tmpJavaName}_Equal_${classificationMap.get('name')}_AsInline() {
        return registerInline${tmpJavaName}(${glConditionKeyName}.CK_EQUAL, ${glClassificationDefinition}.CODE_${col.ClassificationName}_${classificationMap.get('name')});
    }
        #end
      #end

    /**
     * Set the value of ${col.UncapitalisedJavaName} using notEqual. { != }
     * If the value is null or empty-string, this condition is ignored.
     * 
     * @param value The value of ${col.UncapitalisedJavaName} as notEqual.
     * @return this. (NotNull)
     */
    public ${myClassName} set${tmpJavaName}_NotEqual($col.JavaNative value) {
        return register${tmpJavaName}(${glConditionKeyName}.CK_NOT_EQUAL, filterRemoveEmptyString(value));
    }

    /**
     * Set the value of ${col.UncapitalisedJavaName} using notEqual as inline. { != }
     * If the value is null or empty-string, this condition is ignored.
     * 
     * @param value The value of ${col.UncapitalisedJavaName} as notEqual.
     * @return this. (NotNull)
     */
    public ${myClassName} set${tmpJavaName}_NotEqual_AsInline($col.JavaNative value) {
        return registerInline${tmpJavaName}(${glConditionKeyName}.CK_NOT_EQUAL, filterRemoveEmptyString(value));
    }

    /**
     * Set the value of ${col.UncapitalisedJavaName} using greaterThan. { &gt; }
     * If the value is null or empty-string, this condition is ignored.
     * 
     * @param value The value of ${col.UncapitalisedJavaName} as greaterThan.
     * @return this. (NotNull)
     */
    public ${myClassName} set${tmpJavaName}_GreaterThan($col.JavaNative value) {
        return register${tmpJavaName}(${glConditionKeyName}.CK_GREATER_THAN, filterRemoveEmptyString(value));
    }

    /**
     * Set the value of ${col.UncapitalisedJavaName} using greaterThan as inline. { &gt; }
     * If the value is null or empty-string, this condition is ignored.
     * 
     * @param value The value of ${col.UncapitalisedJavaName} as greaterThan.
     * @return this. (NotNull)
     */
    public ${myClassName} set${tmpJavaName}_GreaterThan_AsInline($col.JavaNative value) {
        return registerInline${tmpJavaName}(${glConditionKeyName}.CK_GREATER_THAN, filterRemoveEmptyString(value));
    }

    /**
     * Set the value of ${col.UncapitalisedJavaName} using lessThan. { &lt; }
     * If the value is null or empty-string, this condition is ignored.
     * 
     * @param value The value of ${col.UncapitalisedJavaName} as lessThan.
     * @return this. (NotNull)
     */
    public ${myClassName} set${tmpJavaName}_LessThan($col.JavaNative value) {
        return register${tmpJavaName}(${glConditionKeyName}.CK_LESS_THAN, filterRemoveEmptyString(value));
    }

    /**
     * Set the value of ${col.UncapitalisedJavaName} using lessThan as inline. { &lt; }
     * If the value is null or empty-string, this condition is ignored.
     * 
     * @param value The value of ${col.UncapitalisedJavaName} as lessThan.
     * @return this. (NotNull)
     */
    public ${myClassName} set${tmpJavaName}_LessThan_AsInline($col.JavaNative value) {
        return registerInline${tmpJavaName}(${glConditionKeyName}.CK_LESS_THAN, filterRemoveEmptyString(value));
    }

    /**
     * Set the value of ${col.UncapitalisedJavaName} using greaterEqual. { &gt;= }
     * If the value is null or empty-string, this condition is ignored.
     * 
     * @param value The value of ${col.UncapitalisedJavaName} as greaterEqual.
     * @return this. (NotNull)
     */
    public ${myClassName} set${tmpJavaName}_GreaterEqual($col.JavaNative value) {
        return register${tmpJavaName}(${glConditionKeyName}.CK_GREATER_EQUAL, filterRemoveEmptyString(value));
    }

    /**
     * Set the value of ${col.UncapitalisedJavaName} using greaterEqual as inline. { &gt;= }
     * If the value is null or empty-string, this condition is ignored.
     * 
     * @param value The value of ${col.UncapitalisedJavaName} as greaterEqual.
     * @return this. (NotNull)
     */
    public ${myClassName} set${tmpJavaName}_GreaterEqual_AsInline($col.JavaNative value) {
        return registerInline${tmpJavaName}(${glConditionKeyName}.CK_GREATER_EQUAL, filterRemoveEmptyString(value));
    }

    /**
     * Set the value of ${col.UncapitalisedJavaName} using lessEqual. { &lt;= }
     * If the value is null or empty-string, this condition is ignored.
     * 
     * @param value The value of ${col.UncapitalisedJavaName} as lessEqual.
     * @return this. (NotNull)
     */
    public ${myClassName} set${tmpJavaName}_LessEqual($col.JavaNative value) {
        return register${tmpJavaName}(${glConditionKeyName}.CK_LESS_EQUAL, filterRemoveEmptyString(value));
    }

    /**
     * Set the value of ${col.UncapitalisedJavaName} using lessEqual as inline. { &lt;= }
     * If the value is null or empty-string, this condition is ignored.
     * 
     * @param value The value of ${col.UncapitalisedJavaName} as lessEqual.
     * @return this. (NotNull)
     */
    public ${myClassName} set${tmpJavaName}_LessEqual_AsInline($col.JavaNative value) {
        return registerInline${tmpJavaName}(${glConditionKeyName}.CK_LESS_EQUAL, filterRemoveEmptyString(value));
    }

    /**
     * Set the value of ${col.UncapitalisedJavaName} using prefixSearch. { like 'xxx%' }
     * If the value is null or empty-string, this condition is ignored.
     * 
     * @param value The value of ${col.UncapitalisedJavaName} as prefixSearch.
     * @return this. (NotNull)
     */
    public ${myClassName} set${tmpJavaName}_PrefixSearch($col.JavaNative value) {
        return register${tmpJavaName}(${glConditionKeyName}.CK_PREFIX_SEARCH, filterRemoveEmptyString(value));
    }

    /**
     * Set the value of ${col.UncapitalisedJavaName} using prefixSearch as inline. { like 'xxx%' }
     * If the value is null or empty-string, this condition is ignored.
     * 
     * @param value The value of ${col.UncapitalisedJavaName} as prefixSearch.
     * @return this. (NotNull)
     */
    public ${myClassName} set${tmpJavaName}_PrefixSearch_AsInline($col.JavaNative value) {
        return registerInline${tmpJavaName}(${glConditionKeyName}.CK_PREFIX_SEARCH, filterRemoveEmptyString(value));
    }

    /**
     * Set the value of ${col.UncapitalisedJavaName} using inScope. { in ('a', 'b') }
     * If the element in the list is null or empty-string, the condition-element is ignored.
     * 
     * @param valueList The value of ${col.UncapitalisedJavaName} as inScope.
     * @return this. (NotNull)
     */
    public ${myClassName} set${tmpJavaName}_InScope(java.util.List${database.filterGenericsString(${col.JavaNative})} valueList) {
        return register${tmpJavaName}(${glConditionKeyName}.CK_IN_SCOPE, filterRemoveEmptyStringFromList(valueList));
    }

    /**
     * Set the value of ${col.UncapitalisedJavaName} using inScope as inline. { in ('a', 'b') }
     * If the element in the list is null or empty-string, the condition-element is ignored.
     * 
     * @param valueList The value of ${col.UncapitalisedJavaName} as inScope.
     * @return this. (NotNull)
     */
    public ${myClassName} set${tmpJavaName}_InScope_AsInline(java.util.List${database.filterGenericsString(${col.JavaNative})} valueList) {
        return registerInline${tmpJavaName}(${glConditionKeyName}.CK_IN_SCOPE, filterRemoveEmptyStringFromList(valueList));
    }

    /**
     * Set the value of ${col.UncapitalisedJavaName} using notInScope. { not in ('a', 'b') }
     * If the element in the list is null or empty-string, the condition-element is ignored.
     * 
     * @param valueList The value of ${col.UncapitalisedJavaName} as notInScope.
     * @return this. (NotNull)
     */
    public ${myClassName} set${tmpJavaName}_NotInScope(java.util.List${database.filterGenericsString(${col.JavaNative})} valueList) {
        return register${tmpJavaName}(${glConditionKeyName}.CK_NOT_IN_SCOPE, filterRemoveEmptyStringFromList(valueList));
    }

    /**
     * Set the value of ${col.UncapitalisedJavaName} using notInScope as inline. { not in ('a', 'b') }
     * If the element in the list is null or empty-string, the condition-element is ignored.
     * 
     * @param valueList The value of ${col.UncapitalisedJavaName} as notInScope.
     * @return this. (NotNull)
     */
    public ${myClassName} set${tmpJavaName}_NotInScope_AsInline(java.util.List${database.filterGenericsString(${col.JavaNative})} valueList) {
        return registerInline${tmpJavaName}(${glConditionKeyName}.CK_NOT_IN_SCOPE, filterRemoveEmptyStringFromList(valueList));
    }
      #if (${col.hasSingleKeyReferrer()})
        #foreach ($refferer in $col.SingleKeyReferrers)
          #set ($reffererCQClassName = "${glProjectPrefix}${refferer.Table.JavaName}${glConditionQueryInitialName}")
          #set ($subQueryPropertyNameInitCap = "${tmpJavaName}_InScopeSubQuery_${refferer.ReffererPropertyNameInitCap}")
          #set ($subQueryPropertyName = "${tmpUncapitalisedJavaName}_InScopeSubQuery_${refferer.ReffererPropertyNameInitCap}")

    /** The sub-query of ${subQueryPropertyNameInitCap} using inScopeSubQuery. */
    protected ${reffererCQClassName} _${subQueryPropertyName};

    /**
     * Get the sub-query of ${subQueryPropertyNameInitCap} using inScopeSubQuery.
     * 
     * @return The sub-query of ${subQueryPropertyNameInitCap} using inScopeSubQuery. (Nullable)
     */
    public ${reffererCQClassName} get${subQueryPropertyNameInitCap}() {
        return _${subQueryPropertyName};
    }

    /**
     * Set the sub-query of ${subQueryPropertyNameInitCap} using inScopeSubQuery.
     * { in (select xxx.${refferer.FirstLocalColumnName} from ${refferer.Table.Name} where ...) }
     * This method use from clause and where clause of the sub-query instance.
     * this query save the sub-query instance for query-value.
     * After you invoke this, If you set query in the argument[subQuery], the query is ignored.
     * 
     * @param subQuery The sub-query of ${subQueryPropertyNameInitCap} using inScopeSubQuery. (NotNull)
     * @return this. (NotNull)
     */
    public ${myClassName} set${subQueryPropertyNameInitCap}(${reffererCQClassName} subQuery) {
        assertObjectNotNull("subQuery", subQuery);
        _${subQueryPropertyName} = subQuery;// for saving query-value.
        registerInScopeSubQuery(subQuery, getRealColumnName(COL_${col.Name}), "${refferer.FirstLocalColumnName}", "${subQueryPropertyName}");
        return this;
    }

    /** The sub-query of ${subQueryPropertyNameInitCap} using inScopeSubQuery as inline. */
    protected ${reffererCQClassName} _${subQueryPropertyName}_AsInline;

    /**
     * Get the sub-query of ${subQueryPropertyNameInitCap} using inScopeSubQuery as inline.
     * 
     * @return The sub-query of ${subQueryPropertyNameInitCap} using inScopeSubQuery as inline. (Nullable)
     */
    public ${reffererCQClassName} get${subQueryPropertyNameInitCap}_AsInline() {
        return _${subQueryPropertyName}_AsInline;
    }

    /**
     * Set the sub-query of ${subQueryPropertyNameInitCap} using inScopeSubQuery as inline.
     * { in (select xxx.${refferer.FirstLocalColumnName} from ${refferer.Table.Name} where ...) }
     * This method use from clause and where clause of the sub-query instance.
     * this query save the sub-query instance for query-value.
     * After you invoke this, If you set query in the argument[subQuery], the query is ignored.
     * 
     * @param subQuery The sub-query of ${subQueryPropertyNameInitCap} using inScopeSubQuery as inline. (NotNull)
     * @return this. (NotNull)
     */
    public ${myClassName} set${subQueryPropertyNameInitCap}_AsInline(${reffererCQClassName} subQuery) {
        assertObjectNotNull("subQuery", subQuery);
        _${subQueryPropertyName}_AsInline = subQuery;// for saving query-value.
        registerInlineInScopeSubQuery(subQuery, COL_${col.Name}, "${refferer.FirstLocalColumnName}", "${subQueryPropertyName}_AsInline");
        return this;
    }
        #end
      #end
    #end
    #if (${col.isJavaNativeNumberObject()})
    
    /**
     * Set the value of ${col.UncapitalisedJavaName} using equal. { = }
     * 
     * @param value The value of ${col.UncapitalisedJavaName} as equal.
     * @return this. (NotNull)
     */
    public ${myClassName} set${tmpJavaName}_Equal($col.JavaNative value) {
        return register${tmpJavaName}(${glConditionKeyName}.CK_EQUAL, value);
    }

    /**
     * Set the value of ${col.UncapitalisedJavaName} using equal as inline. { = }
     * 
     * @param value The value of ${col.UncapitalisedJavaName} as equal.
     * @return this. (NotNull)
     */
    public ${myClassName} set${tmpJavaName}_Equal_AsInline($col.JavaNative value) {
        return registerInline${tmpJavaName}(${glConditionKeyName}.CK_EQUAL, value);
    }

    /**
     * Set the value of ${col.UncapitalisedJavaName} using equal. { = }
     * 
     * @param value The value of ${col.UncapitalisedJavaName} as equal.
     * @return this. (NotNull)
     */
    public ${myClassName} set${tmpJavaName}_Equal(long value) {
        return register${tmpJavaName}(${glConditionKeyName}.CK_EQUAL, new ${col.JavaNative}(String.valueOf(value)));
    }

    /**
     * Set the value of ${col.UncapitalisedJavaName} using equal as inline. { = }
     * 
     * @param value The value of ${col.UncapitalisedJavaName} as equal.
     * @return this. (NotNull)
     */
    public ${myClassName} set${tmpJavaName}_Equal_AsInline(long value) {
        return registerInline${tmpJavaName}(${glConditionKeyName}.CK_EQUAL, new ${col.JavaNative}(String.valueOf(value)));
    }
      #if (${col.hasClassification()})
        #foreach ($classificationMap in $col.ClassificationMapList)

    /**
     * Set the value of ${classificationMap.get('name')} of ${col.UncapitalisedJavaName} as equal. { = }
     * 
     * @return this. (NotNull)
     */
    public ${myClassName} set${tmpJavaName}_Equal_${classificationMap.get('name')}() {
        return register${tmpJavaName}(${glConditionKeyName}.CK_EQUAL, ${glClassificationDefinition}.CODE_${col.ClassificationName}_${classificationMap.get('name')});
    }

    /**
     * Set the value of ${classificationMap.get('name')} of ${col.UncapitalisedJavaName} as equal as inline. { = }
     * 
     * @return this. (NotNull)
     */
    public ${myClassName} set${tmpJavaName}_Equal_${classificationMap.get('name')}_AsInline() {
        return registerInline${tmpJavaName}(${glConditionKeyName}.CK_EQUAL, ${glClassificationDefinition}.CODE_${col.ClassificationName}_${classificationMap.get('name')});
    }
        #end
      #end

    /**
     * Set the value of ${col.UncapitalisedJavaName} using notEqual. { != }
     * 
     * @param value The value of ${col.UncapitalisedJavaName} as notEqual.
     * @return this. (NotNull)
     */
    public ${myClassName} set${tmpJavaName}_NotEqual($col.JavaNative value) {
        return register${tmpJavaName}(${glConditionKeyName}.CK_NOT_EQUAL, value);
    }

    /**
     * Set the value of ${col.UncapitalisedJavaName} using notEqual as inline. { != }
     * 
     * @param value The value of ${col.UncapitalisedJavaName} as notEqual.
     * @return this. (NotNull)
     */
    public ${myClassName} set${tmpJavaName}_NotEqual_AsInline($col.JavaNative value) {
        return registerInline${tmpJavaName}(${glConditionKeyName}.CK_NOT_EQUAL, value);
    }

    /**
     * Set the value of ${col.UncapitalisedJavaName} using notEqual. { != }
     * 
     * @param value The value of ${col.UncapitalisedJavaName} as notEqual.
     * @return this. (NotNull)
     */
    public ${myClassName} set${tmpJavaName}_NotEqual(long value) {
        return register${tmpJavaName}(${glConditionKeyName}.CK_NOT_EQUAL, new ${col.JavaNative}(String.valueOf(value)));
    }

    /**
     * Set the value of ${col.UncapitalisedJavaName} using notEqual as inline. { != }
     * 
     * @param value The value of ${col.UncapitalisedJavaName} as notEqual.
     * @return this. (NotNull)
     */
    public ${myClassName} set${tmpJavaName}_NotEqual_AsInline(long value) {
        return registerInline${tmpJavaName}(${glConditionKeyName}.CK_NOT_EQUAL, new ${col.JavaNative}(String.valueOf(value)));
    }

    /**
     * Set the value of ${col.UncapitalisedJavaName} using greaterThan. { &gt; }
     * 
     * @param value The value of ${col.UncapitalisedJavaName} as greaterThan.
     * @return this. (NotNull)
     */
    public ${myClassName} set${tmpJavaName}_GreaterThan($col.JavaNative value) {
        return register${tmpJavaName}(${glConditionKeyName}.CK_GREATER_THAN, value);
    }

    /**
     * Set the value of ${col.UncapitalisedJavaName} using greaterThan as inline. { &gt; }
     * 
     * @param value The value of ${col.UncapitalisedJavaName} as greaterThan.
     * @return this. (NotNull)
     */
    public ${myClassName} set${tmpJavaName}_GreaterThan_AsInline($col.JavaNative value) {
        return registerInline${tmpJavaName}(${glConditionKeyName}.CK_GREATER_THAN, value);
    }

    /**
     * Set the value of ${col.UncapitalisedJavaName} using greaterThan. { &gt; }
     * 
     * @param value The value of ${col.UncapitalisedJavaName} as greaterThan.
     * @return this. (NotNull)
     */
    public ${myClassName} set${tmpJavaName}_GreaterThan(long value) {
        return register${tmpJavaName}(${glConditionKeyName}.CK_GREATER_THAN, new ${col.JavaNative}(String.valueOf(value)));
    }

    /**
     * Set the value of ${col.UncapitalisedJavaName} using greaterThan as inline. { &gt; }
     * 
     * @param value The value of ${col.UncapitalisedJavaName} as greaterThan.
     * @return this. (NotNull)
     */
    public ${myClassName} set${tmpJavaName}_GreaterThan_AsInline(long value) {
        return registerInline${tmpJavaName}(${glConditionKeyName}.CK_GREATER_THAN, new ${col.JavaNative}(String.valueOf(value)));
    }

    /**
     * Set the value of ${col.UncapitalisedJavaName} using lessThan. { &lt; }
     * 
     * @param value The value of ${col.UncapitalisedJavaName} as lessThan.
     * @return this. (NotNull)
     */
    public ${myClassName} set${tmpJavaName}_LessThan($col.JavaNative value) {
        return register${tmpJavaName}(${glConditionKeyName}.CK_LESS_THAN, value);
    }

    /**
     * Set the value of ${col.UncapitalisedJavaName} using lessThan as inline. { &lt; }
     * 
     * @param value The value of ${col.UncapitalisedJavaName} as lessThan.
     * @return this. (NotNull)
     */
    public ${myClassName} set${tmpJavaName}_LessThan_AsInline($col.JavaNative value) {
        return registerInline${tmpJavaName}(${glConditionKeyName}.CK_LESS_THAN, value);
    }

    /**
     * Set the value of ${col.UncapitalisedJavaName} using lessThan. { &lt; }
     * 
     * @param value The value of ${col.UncapitalisedJavaName} as lessThan.
     * @return this. (NotNull)
     */
    public ${myClassName} set${tmpJavaName}_LessThan(long value) {
        return register${tmpJavaName}(${glConditionKeyName}.CK_LESS_THAN, new ${col.JavaNative}(String.valueOf(value)));
    }

    /**
     * Set the value of ${col.UncapitalisedJavaName} using lessThan as inline. { &lt; }
     * 
     * @param value The value of ${col.UncapitalisedJavaName} as lessThan.
     * @return this. (NotNull)
     */
    public ${myClassName} set${tmpJavaName}_LessThan_AsInline(long value) {
        return registerInline${tmpJavaName}(${glConditionKeyName}.CK_LESS_THAN, new ${col.JavaNative}(String.valueOf(value)));
    }

    /**
     * Set the value of ${col.UncapitalisedJavaName} using greaterEqual. { &gt;= }
     * 
     * @param value The value of ${col.UncapitalisedJavaName} as greaterEqual.
     * @return this. (NotNull)
     */
    public ${myClassName} set${tmpJavaName}_GreaterEqual($col.JavaNative value) {
        return register${tmpJavaName}(${glConditionKeyName}.CK_GREATER_EQUAL, value);
    }

    /**
     * Set the value of ${col.UncapitalisedJavaName} using greaterEqual as inline. { &gt;= }
     * 
     * @param value The value of ${col.UncapitalisedJavaName} as greaterEqual.
     * @return this. (NotNull)
     */
    public ${myClassName} set${tmpJavaName}_GreaterEqual_AsInline($col.JavaNative value) {
        return registerInline${tmpJavaName}(${glConditionKeyName}.CK_GREATER_EQUAL, value);
    }

    /**
     * Set the value of ${col.UncapitalisedJavaName} using greaterEqual. { &gt;= }
     * 
     * @param value The value of ${col.UncapitalisedJavaName} as greaterEqual.
     * @return this. (NotNull)
     */
    public ${myClassName} set${tmpJavaName}_GreaterEqual(long value) {
        return register${tmpJavaName}(${glConditionKeyName}.CK_GREATER_EQUAL, new ${col.JavaNative}(String.valueOf(value)));
    }

    /**
     * Set the value of ${col.UncapitalisedJavaName} using greaterEqual as inline. { &gt;= }
     * 
     * @param value The value of ${col.UncapitalisedJavaName} as greaterEqual.
     * @return this. (NotNull)
     */
    public ${myClassName} set${tmpJavaName}_GreaterEqual_AsInline(long value) {
        return registerInline${tmpJavaName}(${glConditionKeyName}.CK_GREATER_EQUAL, new ${col.JavaNative}(String.valueOf(value)));
    }

    /**
     * Set the value of ${col.UncapitalisedJavaName} using lessEqual. { &lt;= }
     * 
     * @param value The value of ${col.UncapitalisedJavaName} as lessEqual.
     * @return this. (NotNull)
     */
    public ${myClassName} set${tmpJavaName}_LessEqual($col.JavaNative value) {
        return register${tmpJavaName}(${glConditionKeyName}.CK_LESS_EQUAL, value);
    }

    /**
     * Set the value of ${col.UncapitalisedJavaName} using lessEqual as inline. { &lt;= }
     * 
     * @param value The value of ${col.UncapitalisedJavaName} as lessEqual.
     * @return this. (NotNull)
     */
    public ${myClassName} set${tmpJavaName}_LessEqual_AsInline($col.JavaNative value) {
        return registerInline${tmpJavaName}(${glConditionKeyName}.CK_LESS_EQUAL, value);
    }

    /**
     * Set the value of ${col.UncapitalisedJavaName} using lessEqual. { &lt;= }
     * 
     * @param value The value of ${col.UncapitalisedJavaName} as lessEqual.
     * @return this. (NotNull)
     */
    public ${myClassName} set${tmpJavaName}_LessEqual(long value) {
        return register${tmpJavaName}(${glConditionKeyName}.CK_LESS_EQUAL, new ${col.JavaNative}(String.valueOf(value)));
    }

    /**
     * Set the value of ${col.UncapitalisedJavaName} using lessEqual as inline. { &lt;= }
     * 
     * @param value The value of ${col.UncapitalisedJavaName} as lessEqual.
     * @return this. (NotNull)
     */
    public ${myClassName} set${tmpJavaName}_LessEqual_AsInline(long value) {
        return registerInline${tmpJavaName}(${glConditionKeyName}.CK_LESS_EQUAL, new ${col.JavaNative}(String.valueOf(value)));
    }

    /**
     * Set the value of ${col.UncapitalisedJavaName} using inScope. { in (a, b) }
     * If the element in the list is null or empty-string, the condition-element is ignored.
     * 
     * @param valueList The value of ${col.UncapitalisedJavaName} as inScope.
     * @return this. (NotNull)
     */
    public ${myClassName} set${tmpJavaName}_InScope(java.util.List${database.filterGenericsString(${col.JavaNative})} valueList) {
        return register${tmpJavaName}(${glConditionKeyName}.CK_IN_SCOPE, valueList);
    }

    /**
     * Set the value of ${col.UncapitalisedJavaName} using notInScope. { not in (a, b) }
     * If the element in the list is null or empty-string, the condition-element is ignored.
     * 
     * @param valueList The value of ${col.UncapitalisedJavaName} as notInScope.
     * @return this. (NotNull)
     */
    public ${myClassName} set${tmpJavaName}_NotInScope(java.util.List${database.filterGenericsString(${col.JavaNative})} valueList) {
        return register${tmpJavaName}(${glConditionKeyName}.CK_NOT_IN_SCOPE, valueList);
    }
      #if (${col.hasSingleKeyReferrer()})
        #foreach ($refferer in $col.SingleKeyReferrers)
          #set ($reffererCQClassName = "${glProjectPrefix}${refferer.Table.JavaName}${glConditionQueryInitialName}")
          #set ($subQueryPropertyNameInitCap = "${tmpJavaName}_InScopeSubQuery_${refferer.ReffererPropertyNameInitCap}")
          #set ($subQueryPropertyName = "${tmpUncapitalisedJavaName}_InScopeSubQuery_${refferer.ReffererPropertyNameInitCap}")

    /** The sub-query of ${subQueryPropertyNameInitCap} using inScopeSubQuery. */
    protected ${reffererCQClassName} _${subQueryPropertyName};

    /**
     * Get the sub-query of ${subQueryPropertyNameInitCap} using inScopeSubQuery.
     * 
     * @return The sub-query of ${subQueryPropertyNameInitCap} using inScopeSubQuery. (Nullable)
     */
    public ${reffererCQClassName} get${subQueryPropertyNameInitCap}() {
        return _${subQueryPropertyName};
    }

    /**
     * Set the sub-query of ${subQueryPropertyNameInitCap} using inScopeSubQuery.
     * { in (select xxx.${refferer.FirstLocalColumnName} from ${refferer.Table.Name} where ...) }
     * This method use from clause and where clause of the sub-query instance.
     * this query save the sub-query instance for query-value.
     * After you invoke this, If you set query in the argument[subQuery], the query is ignored.
     * 
     * @param subQuery The sub-query of ${subQueryPropertyNameInitCap} using inScopeSubQuery. (NotNull)
     * @return this. (NotNull)
     */
    public ${myClassName} set${subQueryPropertyNameInitCap}(${reffererCQClassName} subQuery) {
        assertObjectNotNull("subQuery", subQuery);
        _${subQueryPropertyName} = subQuery;// for saving query-value.
        registerInScopeSubQuery(subQuery, getRealColumnName(COL_${col.Name}), "${refferer.FirstLocalColumnName}", "${subQueryPropertyName}");
        return this;
    }

    /** The sub-query of ${subQueryPropertyNameInitCap} using inScopeSubQuery as inline. */
    protected ${reffererCQClassName} _${subQueryPropertyName}_AsInline;

    /**
     * Get the sub-query of ${subQueryPropertyNameInitCap} using inScopeSubQuery as inline.
     * 
     * @return The sub-query of ${subQueryPropertyNameInitCap} using inScopeSubQuery as inline. (Nullable)
     */
    public ${reffererCQClassName} get${subQueryPropertyNameInitCap}_AsInline() {
        return _${subQueryPropertyName}_AsInline;
    }

    /**
     * Set the sub-query of ${subQueryPropertyNameInitCap} using inScopeSubQuery as inline.
     * { in (select xxx.${refferer.FirstLocalColumnName} from ${refferer.Table.Name} where ...) }
     * This method use from clause and where clause of the sub-query instance.
     * this query save the sub-query instance for query-value.
     * After you invoke this, If you set query in the argument[subQuery], the query is ignored.
     * 
     * @param subQuery The sub-query of ${subQueryPropertyNameInitCap} using inScopeSubQuery as inline. (NotNull)
     * @return this. (NotNull)
     */
    public ${myClassName} set${subQueryPropertyNameInitCap}_AsInline(${reffererCQClassName} subQuery) {
        assertObjectNotNull("subQuery", subQuery);
        _${subQueryPropertyName}_AsInline = subQuery;// for saving query-value.
        registerInlineInScopeSubQuery(subQuery, COL_${col.Name}, "${refferer.FirstLocalColumnName}", "${subQueryPropertyName}_AsInline");
        return this;
    }
        #end
      #end
    #end
    #if (${col.isJavaNativeDateObject()})
    
    /**
     * Set the value of ${col.UncapitalisedJavaName} using equal. { = }
     * 
     * @param value The value of ${col.UncapitalisedJavaName} as equal.
     * @return this. (NotNull)
     */
    public ${myClassName} set${tmpJavaName}_Equal($col.JavaNative value) {
        return register${tmpJavaName}(${glConditionKeyName}.CK_EQUAL, value);
    }

    /**
     * Set the value of ${col.UncapitalisedJavaName} using equal as inline. { = }
     * 
     * @param value The value of ${col.UncapitalisedJavaName} as equal.
     * @return this. (NotNull)
     */
    public ${myClassName} set${tmpJavaName}_Equal_AsInline($col.JavaNative value) {
        return registerInline${tmpJavaName}(${glConditionKeyName}.CK_EQUAL, value);
    }

    /**
     * Set the value of ${col.UncapitalisedJavaName} using notEqual. { != }
     * 
     * @param value The value of ${col.UncapitalisedJavaName} as notEqual.
     * @return this. (NotNull)
     */
    public ${myClassName} set${tmpJavaName}_NotEqual($col.JavaNative value) {
        return register${tmpJavaName}(${glConditionKeyName}.CK_NOT_EQUAL, value);
    }

    /**
     * Set the value of ${col.UncapitalisedJavaName} using notEqual as inline. { != }
     * 
     * @param value The value of ${col.UncapitalisedJavaName} as notEqual.
     * @return this. (NotNull)
     */
    public ${myClassName} set${tmpJavaName}_NotEqual_AsInline($col.JavaNative value) {
        return registerInline${tmpJavaName}(${glConditionKeyName}.CK_NOT_EQUAL, value);
    }

    /**
     * Set the value of ${col.UncapitalisedJavaName} using greaterThan. { &gt; }
     * 
     * @param value The value of ${col.UncapitalisedJavaName} as greaterThan.
     * @return this. (NotNull)
     */
    public ${myClassName} set${tmpJavaName}_GreaterThan($col.JavaNative value) {
        return register${tmpJavaName}(${glConditionKeyName}.CK_GREATER_THAN, value);
    }

    /**
     * Set the value of ${col.UncapitalisedJavaName} using greaterThan as inline. { &gt; }
     * 
     * @param value The value of ${col.UncapitalisedJavaName} as greaterThan.
     * @return this. (NotNull)
     */
    public ${myClassName} set${tmpJavaName}_GreaterThan_AsInline($col.JavaNative value) {
        return registerInline${tmpJavaName}(${glConditionKeyName}.CK_GREATER_THAN, value);
    }

    /**
     * Set the value of ${col.UncapitalisedJavaName} using lessThan. { &lt; }
     * 
     * @param value The value of ${col.UncapitalisedJavaName} as lessThan.
     * @return this. (NotNull)
     */
    public ${myClassName} set${tmpJavaName}_LessThan($col.JavaNative value) {
        return register${tmpJavaName}(${glConditionKeyName}.CK_LESS_THAN, value);
    }

    /**
     * Set the value of ${col.UncapitalisedJavaName} using lessThan as inline. { &lt; }
     * 
     * @param value The value of ${col.UncapitalisedJavaName} as lessThan.
     * @return this. (NotNull)
     */
    public ${myClassName} set${tmpJavaName}_LessThan_AsInline($col.JavaNative value) {
        return registerInline${tmpJavaName}(${glConditionKeyName}.CK_LESS_THAN, value);
    }

    /**
     * Set the value of ${col.UncapitalisedJavaName} using greaterEqual. { &gt;= }
     * 
     * @param value The value of ${col.UncapitalisedJavaName} as greaterEqual.
     * @return this. (NotNull)
     */
    public ${myClassName} set${tmpJavaName}_GreaterEqual($col.JavaNative value) {
        return register${tmpJavaName}(${glConditionKeyName}.CK_GREATER_EQUAL, value);
    }

    /**
     * Set the value of ${col.UncapitalisedJavaName} using greaterEqual as inline. { &gt;= }
     * 
     * @param value The value of ${col.UncapitalisedJavaName} as greaterEqual.
     * @return this. (NotNull)
     */
    public ${myClassName} set${tmpJavaName}_GreaterEqual_AsInline($col.JavaNative value) {
        return registerInline${tmpJavaName}(${glConditionKeyName}.CK_GREATER_EQUAL, value);
    }

    /**
     * Set the value of ${col.UncapitalisedJavaName} using lessEqual. { &lt;= }
     * 
     * @param value The value of ${col.UncapitalisedJavaName} as lessEqual.
     * @return this. (NotNull)
     */
    public ${myClassName} set${tmpJavaName}_LessEqual($col.JavaNative value) {
        return register${tmpJavaName}(${glConditionKeyName}.CK_LESS_EQUAL, value);
    }

    /**
     * Set the value of ${col.UncapitalisedJavaName} using lessEqual as inline. { &lt;= }
     * 
     * @param value The value of ${col.UncapitalisedJavaName} as lessEqual.
     * @return this. (NotNull)
     */
    public ${myClassName} set${tmpJavaName}_LessEqual_AsInline($col.JavaNative value) {
        return registerInline${tmpJavaName}(${glConditionKeyName}.CK_LESS_EQUAL, value);
    }
    #end
    #if (${col.isJavaNativeBooleanObject()})
    
    /**
     * Set the value of ${col.UncapitalisedJavaName} using equal. { = }
     * 
     * @param value The value of ${col.UncapitalisedJavaName} as equal.
     * @return this. (NotNull)
     */
    public ${myClassName} set${tmpJavaName}_Equal($col.JavaNative value) {
        return register${tmpJavaName}(${glConditionKeyName}.CK_EQUAL, value);
    }
    #end
    #if (${col.isJavaNativeBinaryObject()})
    #end
    #if (!${col.isNotNull()})

    /**
     * Set the value of ${col.UncapitalisedJavaName} using isNull. { is null }
     * 
     * @return this. (NotNull)
     */
    public ${myClassName} set${tmpJavaName}_IsNull() {
        return register${tmpJavaName}(${glConditionKeyName}.CK_IS_NULL, DUMMY_OBJECT);
    }

    /**
     * Set the value of ${col.UncapitalisedJavaName} using isNotNull. { is not null }
     * 
     * @return this. (NotNull)
     */
    public ${myClassName} set${tmpJavaName}_IsNotNull() {
        return register${tmpJavaName}(${glConditionKeyName}.CK_IS_NOT_NULL, DUMMY_OBJECT);
    }
    #end
    
    /**
     * Register condition of ${col.UncapitalisedJavaName}.
     * 
     * @param key Condition key. (NotNull)
     * @param value The value of ${col.UncapitalisedJavaName}. (Nullable)
     * @return this. (NotNull)
     */
    protected ${myClassName} register${tmpJavaName}(${glConditionKeyName} key, Object value) {
        if (key.isValidRegistration(get${tmpJavaName}(), value)) {
            key.setupConditionValue(get${tmpJavaName}(), value, getLocation(UJ_${col.UncapitalisedJavaName}, key));// If Java, UncapProp!
            getSqlClause().registerWhereClause(getRealColumnName(COL_${col.Name}), key, get${tmpJavaName}());
        }
        return this;
    }

    /**
     * Register inline condition of ${col.UncapitalisedJavaName}.
     * 
     * @param key Condition key. (NotNull)
     * @param value The value of ${col.UncapitalisedJavaName}. (Nullable)
     * @return this. (NotNull)
     */
    protected ${myClassName} registerInline${tmpJavaName}(${glConditionKeyName} key, Object value) {
        if (key.isValidRegistration(get${tmpJavaName}(), value)) {
            key.setupConditionValue(get${tmpJavaName}(), value, getLocation(UJ_${col.UncapitalisedJavaName}, key));// If Java, UncapProp!
            if (isBaseQuery(this)) {
                getSqlClause().registerBaseTableInlineWhereClause(COL_${col.Name}, key, get${tmpJavaName}());
            } else {
                getSqlClause().registerOuterJoinInlineWhereClause(getRealAliasName(), COL_${col.Name}, key, get${tmpJavaName}());
            }
        }
        return this;
    }
    #if (!${col.isJavaNativeBinaryObject()})

    /**
     * Add order-by of ${col.UncapitalisedJavaName} as ASC.
     * 
     * @return this. (NotNull)
     */
    public ${myClassName} addOrderBy_${tmpJavaName}_Asc() {
        getSqlClause().registerOrderBy(getRealColumnName(COL_${col.Name}), null, true);return this;
    }

    /**
     * Add order-by of ${col.UncapitalisedJavaName} as DESC.
     * 
     * @return this. (NotNull)
     */
    public ${myClassName} addOrderBy_${tmpJavaName}_Desc() {
        getSqlClause().registerOrderBy(getRealColumnName(COL_${col.Name}), null, false);return this;
    }
    #end
  #end

    // =====================================================================================
    //                                                               Query-SetupOuter-Method
    //                                                               =======================

  #foreach ($foreignKeys in $table.ForeignKeys)
    #set ($foreignCQClassName = "${glProjectPrefix}${foreignKeys.foreignTable.JavaName}${glConditionQueryInitialName}")
    
    // /* * * * * * * * * * * * * * * * * * * * * * *
    //   ForeignTable    = [${foreignKeys.ForeignTable.Name}]
    //   ForeignProperty = [${foreignKeys.ForeignPropertyName}]
    // * * * * * * * * */

    /**
     * Query for ${foreignKeys.ForeignPropertyName}.
     * 
     * @return Instance of ${foreignCQClassName} as ${foreignKeys.ForeignPropertyName}. (NotNull)
     */
    public ${foreignCQClassName} query${foreignKeys.ForeignPropertyNameInitCap}() {
        return getConditionQuery${foreignKeys.ForeignPropertyNameInitCap}();
    }

    /**
     * Setup outer join for ${foreignPropertyName}.
     */
    public void setupOuterJoin_${foreignKeys.ForeignPropertyNameInitCap}() {
        final java.util.Map${database.filterGenericsString('String, String')} joinOnMap = new java.util.LinkedHashMap${database.filterGenericsString('String, String')}();
        String key = null;
        String value = null;
    #foreach ($columnName in $foreignKeys.LocalColumns)
      #set ($localColumn = $table.getColumn($columnName))
      #set ($foreignColumnName = $foreignKeys.getLocalForeignMapping().get($columnName))

        key = getRealColumnName("${localColumn.Name}");
        value = getConditionQuery${foreignKeys.ForeignPropertyNameInitCap}().getRealColumnName("${foreignColumnName}");
        joinOnMap.put(key, value);
    #end

        final String joinTableName = "${foreignKeys.foreignTable.Name}";
        final String aliasName = getConditionQuery${foreignKeys.ForeignPropertyNameInitCap}().getRealAliasName();
        getSqlClause().registerOuterJoin(joinTableName, aliasName, joinOnMap);
    }

    /** Condition-query for ${foreignKeys.ForeignPropertyName}. */
    protected ${foreignCQClassName} _conditionQuery${foreignKeys.ForeignPropertyNameInitCap};

    /**
     * Get condition-query for ${foreignKeys.ForeignPropertyName}.
     * 
     * @return Instance of ${foreignCQClassName} as ${foreignKeys.ForeignPropertyName}. (NotNull)
     */
    public ${foreignCQClassName} getConditionQuery${foreignKeys.ForeignPropertyNameInitCap}() {
        if (_conditionQuery${foreignKeys.foreignPropertyNameInitCap} == null) {
            _conditionQuery${foreignKeys.foreignPropertyNameInitCap} = newQuery${foreignKeys.ForeignPropertyNameInitCap}();
            setupOuterJoin_${foreignKeys.foreignPropertyNameInitCap}();
        }
        return _conditionQuery${foreignKeys.ForeignPropertyNameInitCap};
    }

    /**
     * New query for ${foreignKeys.ForeignPropertyName}.
     * 
     * @return Query for ${foreignKeys.ForeignPropertyName}. (NotNull)
     */
    protected ${foreignCQClassName} newQuery${foreignKeys.ForeignPropertyNameInitCap}() {
        return new ${foreignCQClassName}(this, getSqlClause(), "${foreignKeys.ForeignPropertyNameInitCap}", getNextNestLevel());
    }
  #end

  #foreach ($refferer in $table.Referrers)
    #set ($reffererCQClassName = "${glProjectPrefix}${refferer.Table.JavaName}${glConditionQueryInitialName}")
    #if (${refferer.isOneToOne()})

    // /* * * * * * * * * * * * * * * * * * * * * * * {as one}
    //   ReffererTable    = [${refferer.Table.Name}]
    //   ReffererProperty = [${refferer.ReffererPropertyNameAsOne}]
    // * * * * * * * * */

    /**
     * Query for ${refferer.ReffererPropertyNameAsOne}.
     * 
     * @return Instance of ${reffererCQClassName} as ${refferer.ReffererPropertyNameAsOne}. (NotNull)
     */
    public ${reffererCQClassName} query${refferer.ReffererPropertyNameInitCapAsOne}() {
        return getConditionQuery${refferer.ReffererPropertyNameInitCapAsOne}();
    }

    /**
     * Setup outer join for ${refferer.ReffererPropertyName}.
     */
    public void setupOuterJoin_${refferer.ReffererPropertyNameInitCapAsOne}() {
        final java.util.Map${database.filterGenericsString('String, String')} joinOnMap = new java.util.LinkedHashMap${database.filterGenericsString('String, String')}();
        String key = null;
        String value = null;
      #foreach ($columnName in $refferer.ForeignColumns)
        #set ($foreignColumn = $table.getColumn($columnName))
        #set ($reffererColumnName = $refferer.getLocalForeignMapping().get($columnName))

        key = getRealColumnName("${foreignColumn.Name}");
        value = getConditionQuery${refferer.ReffererPropertyNameInitCapAsOne}().getRealColumnName("${reffererColumnName}");
        joinOnMap.put(key, value);
      #end

        final String joinTableName = "${refferer.Table.Name}";
        final String aliasName = getConditionQuery${refferer.ReffererPropertyNameInitCapAsOne}().getRealAliasName();
        getSqlClause().registerOuterJoin(joinTableName, aliasName, joinOnMap);
    }

    /** Condition-query for ${refferer.ReffererPropertyNameAsOne}. */
    protected ${reffererCQClassName} _conditionQuery${refferer.ReffererPropertyNameInitCapAsOne};

    /**
     * Get condition-query for ${refferer.ReffererPropertyNameAsOne}.
     * 
     * @return Instance of ${reffererCQClassName} as ${refferer.ReffererPropertyNameAsOne}. (NotNull)
     */
    public ${reffererCQClassName} getConditionQuery${refferer.ReffererPropertyNameInitCapAsOne}() {
        if (_conditionQuery${refferer.ReffererPropertyNameInitCapAsOne} == null) {
            _conditionQuery${refferer.ReffererPropertyNameInitCapAsOne} = newQuery${refferer.ReffererPropertyNameInitCapAsOne}();
            setupOuterJoin_${refferer.ReffererPropertyNameInitCapAsOne}();
        }
        return _conditionQuery${refferer.ReffererPropertyNameInitCapAsOne};
    }

    /**
     * New query for ${refferer.ReffererPropertyNameAsOne}.
     * 
     * @return Query for ${refferer.ReffererPropertyNameAsOne}. (NotNull)
     */
    protected ${reffererCQClassName} newQuery${refferer.ReffererPropertyNameInitCapAsOne}() {
        return new ${reffererCQClassName}(this, getSqlClause(), "${refferer.ReffererPropertyNameInitCapAsOne}", getNextNestLevel());
    }
    #end
  #end

    // =====================================================================================
    //                                                                                Helper
    //                                                                                ======
    /**
     * Filter removing empty-string.
     * If the value is null or empty-string, returns null.
     * 
     * @param value Query-value-string. (Nullable)
     * @return Filtered value. (Nullable)
     */
    protected String filterRemoveEmptyString(String value) {
        return ((value != null && !"".equals(value)) ? value : null);
    }

    /**
     * Filter removing empty-string from the list.
     * If the list is null or empty-string, returns null.
     * 
     * @param ls List. (Nullable)
     * @return Filtered list. (Nullable)
     */
    protected java.util.List${database.filterGenericsString('String')} filterRemoveEmptyStringFromList(java.util.List${database.filterGenericsString('String')} ls) {
        if (ls == null) {
            return null;
        }
        java.util.List${database.filterGenericsString('String')} newList = new java.util.ArrayList${database.filterGenericsString('String')}();
        for (final java.util.Iterator ite = ls.iterator(); ite.hasNext(); ) {
            final String str = (String)ite.next();
            if ("".equals(str)) {
                continue;
            }
            newList.add(str);
        }
        return newList;
    }

    // =====================================================================================
    //                                                                 Basic-Override Method
    //                                                                 =====================
    /**
     * This method overrides the method that is declared at super.
     * 
     * @return Clause string. (NotNull)
     */
    public String toString() {
        return getSqlClause().getClause();
    }
}
