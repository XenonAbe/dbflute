${database.allClassCopyright}package ${glPackageNss};

#set ($myClassName = "${myNestSelectSetupperClassName}")
#set ($myNestSelectSetupperTerminalClassName = "${myNestSelectSetupperClassName}t")
import ${glPackageCQ}.${myConditionQueryClassName};

/**
 * The nest-select-setupper of ${table.name}.
 * 
 * @author ${database.ClassAuthor}
 */${database.outputSuppressWarningsAfterLineSeparator()}
public class ${myClassName} {

    // ===================================================================================
    //                                                                           Attribute
    //                                                                           =========
    /** The query of local. (NotNull)*/
    protected ${myConditionQueryClassName} _query;

    // ===================================================================================
    //                                                                         Constructor
    //                                                                         ===========
    /**
     * Constructor.
     * 
     * @param query The query of local. (NotNull)
     */
    public ${myClassName}(${myConditionQueryClassName} query) {
        _query = query;
    }

    // ===================================================================================
    //                                                                            Accessor
    //                                                                            ========
    /**
     * Has conditionQuery?
     * 
     * @return Determination.
     */
    public boolean hasConditionQuery() {
        return _query != null;
    }

    // ===================================================================================
    //                                                           With Nested Foreign Table
    //                                                           =========================
#foreach ($foreignKeys in $table.foreignKeys)
#set ($tmpPropertyName = "${foreignKeys.foreignPropertyName}")
#set ($tmpPropertyNameInitCap = "${foreignKeys.foreignPropertyNameInitCap}")

    /**
     * Set up select with ${tmpPropertyName}.
	 * 
	 * @return The nest-select-setupper-terminal of foreign. (NotNull)
     */
#if ($database.isVersionAfter1047())
    public ${foreignKeys.foreignTableNestSelectSetupperTerminalClassName} with${tmpPropertyNameInitCap}() {
#else
    public void with${tmpPropertyNameInitCap}() {
#end
        assertConditionQuery();
		final String foreignTableAliasName = _query.query${tmpPropertyNameInitCap}().getRealAliasName();
		final String localRelationPath = _query.getRelationPath();
		_query.getSqlClause().registerSelectedSelectColumn(foreignTableAliasName, "${table.name}", "${tmpPropertyName}", localRelationPath);
		_query.getSqlClause().registerSelectedForeignInfo(_query.query${tmpPropertyNameInitCap}().getRelationPath(), "${tmpPropertyName}");
#if ($database.isVersionAfter1047())
		return new ${foreignKeys.foreignTableNestSelectSetupperTerminalClassName}(_query.query${tmpPropertyNameInitCap}());
#end
    }
#end

    // ===================================================================================
    //                                                          With Nested Referrer Table
    //                                                          ==========================
#foreach ($referrer in $table.referrers)
#if (${referrer.isOneToOne()})
#set ($tmpPropertyName = "${referrer.reffererPropertyNameAsOne}")
#set ($tmpPropertyNameInitCap = "${referrer.reffererPropertyNameInitCapAsOne}")

    /**
     * Set up select with ${tmpPropertyName}.
	 * 
	 * @return The nest-select-setupper-terminal of referrer-as-one. (NotNull)
     */
#if ($database.isVersionAfter1047())
    public ${referrer.referrerTableNestSelectSetupperTerminalClassName} with${tmpPropertyNameInitCap}() {
#else
	public void with${tmpPropertyNameInitCap}() {
#end
        assertConditionQuery();
		final String foreignTableAliasName = _query.query${tmpPropertyNameInitCap}().getRealAliasName();
		final String localRelationPath = _query.getRelationPath();
		_query.getSqlClause().registerSelectedSelectColumn(foreignTableAliasName, "${table.name}", "${tmpPropertyName}", localRelationPath);
		_query.getSqlClause().registerSelectedForeignInfo(_query.query${tmpPropertyNameInitCap}().getRelationPath(), "${tmpPropertyName}");
#if ($database.isVersionAfter1047())
		return new ${referrer.referrerTableNestSelectSetupperTerminalClassName}(_query.query${tmpPropertyNameInitCap}());
#end
    }
#end
#end

    // ===================================================================================
    //                                                                              Helper
    //                                                                              ======
    protected void assertConditionQuery() {
        if (!hasConditionQuery()) {
            String msg = "The query should not be null.";
            throw new IllegalStateException(msg);
        }
    }
}
