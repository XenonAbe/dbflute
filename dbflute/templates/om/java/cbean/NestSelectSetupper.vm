${database.allClassCopyright}package ${glPackageNss};

#set ($myClassName = "${myNestSelectSetupperClassName}")
#set ($myNestSelectSetupperTerminalClassName = "${myNestSelectSetupperClassName}t")
import ${glPackageCQ}.${myConditionQueryClassName};

/**
 * The nest-select-setupper of ${table.name}.
 * @author ${database.ClassAuthor}
 */${database.outputSuppressWarningsAfterLineSeparator()}
public class ${myClassName} {

    // ===================================================================================
    //                                                                           Attribute
    //                                                                           =========
    protected ${myConditionQueryClassName} _query;

    // ===================================================================================
    //                                                                         Constructor
    //                                                                         ===========
    public ${myClassName}(${myConditionQueryClassName} query) {
        _query = query;
    }

    // ===================================================================================
    //                                                                            Accessor
    //                                                                            ========
    public boolean hasConditionQuery() {
        return _query != null;
    }

    // ===================================================================================
    //                                                           With Nested Foreign Table
    //                                                           =========================
#foreach ($foreignKeys in $table.foreignKeys)
#set ($tmpPropertyName = "${foreignKeys.foreignPropertyName}")
#set ($tmpPropertyNameInitCap = "${foreignKeys.foreignPropertyNameInitCap}")

    public ${foreignKeys.foreignTableNestSelectSetupperClassName} with${tmpPropertyNameInitCap}() {
        assertConditionQuery();
		_query.getSqlClause().registerSelectedSelectColumn(_query.query${tmpPropertyNameInitCap}().getRealAliasName(), "${table.name}", "${tmpPropertyName}", _query.getRelationPath());
		_query.getSqlClause().registerSelectedForeignInfo(_query.query${tmpPropertyNameInitCap}().getRelationPath(), "${tmpPropertyName}");
#if ($database.isVersionAfter1047())
		return new ${foreignKeys.foreignTableNestSelectSetupperClassName}(_query.query${tmpPropertyNameInitCap}());
#end
    }
#end

    // ===================================================================================
    //                                                          With Nested Referrer Table
    //                                                          ==========================
#foreach ($referrer in $table.referrers)
#if (${referrer.isOneToOne()})
#set ($tmpPropertyName = "${referrer.reffererPropertyNameAsOne}")
#set ($tmpPropertyNameInitCap = "${referrer.reffererPropertyNameInitCapAsOne}")

    public ${referrer.referrerTableNestSelectSetupperClassName} with${tmpPropertyNameInitCap}() {
        assertConditionQuery();
		_query.getSqlClause().registerSelectedSelectColumn(_query.query${tmpPropertyNameInitCap}().getRealAliasName(), "${table.name}", "${tmpPropertyName}", _query.getRelationPath());
		_query.getSqlClause().registerSelectedForeignInfo(_query.query${tmpPropertyNameInitCap}().getRelationPath(), "${tmpPropertyName}");
#if ($database.isVersionAfter1047())
		return new ${referrer.referrerTableNestSelectSetupperClassName}(_query.query${tmpPropertyNameInitCap}());
#end
    }
#end
#end

    // ===================================================================================
    //                                                                              Helper
    //                                                                              ======
    protected void assertConditionQuery() {
        if (!hasConditionQuery()) {
            throw new IllegalStateException("The query should not be null.");
        }
    }
}
