${database.allClassCopyright}package ${glPackageBaseCQ};

#set ($relationCQPackagePrefix = "${glPackageCQ}.")
#set ($myClassName = "${myBaseConditionQueryClassName}")
import ${glPackageBaseCommonCBean}.*;
import ${glPackageBaseCommonCValue}.${glConditionValueName};
import ${glPackageBaseCommonSqlClause}.${glSqlClauseName};
import ${glPackageCIQ}.*;

/**
 * The base condition-query of ${table.name}.
 * @author ${database.ClassAuthor}
 */${database.outputSuppressWarningsAfterLineSeparator()}
public class ${myClassName} extends ${myAbstractBaseConditionQueryClassName} {

    // ===================================================================================
    //                                                                           Attribute
    //                                                                           =========
    protected ${myConditionInlineQueryClassName} _inlineQuery;

    // ===================================================================================
    //                                                                         Constructor
    //                                                                         ===========
    public ${myClassName}(${glConditionQueryInterfaceName} childQuery, ${glSqlClauseName} sqlClause, String aliasName, int nestLevel) {
        super(childQuery, sqlClause, aliasName, nestLevel);
    }

    // ===================================================================================
    //                                                                              Inline
    //                                                                              ======
    /**
     * Prepare inline query.
     * @return Inline query. (NotNull)
     */
    public ${myConditionInlineQueryClassName} inline() {
        if (_inlineQuery == null) {
            _inlineQuery = new ${myConditionInlineQueryClassName}(getChildQuery(), getSqlClause(), getAliasName(), getNestLevel(), this);
        }
		_inlineQuery.xsetOnClauseInline(false);
        return _inlineQuery;
    }
	
    /**
     * Prepare on-clause query.
     * @return On-clause query. (NotNull)
     */
	public ${myConditionInlineQueryClassName} on() {
	    if (isBaseQuery(this)) { throw new UnsupportedOperationException("Unsupported onClause of Base Table!"); }
	    ${myConditionInlineQueryClassName} inlineQuery = inline();
		inlineQuery.xsetOnClauseInline(true);
		return inlineQuery;
	}

    // ===================================================================================
    //                                                                       IncludeAsMine
    //                                                                       =============
    // public void includeAsMine_Xxx()
    //   Include select-column of Xxx as mine.
    //   Alias name is property name of this column.
    //   Be careful to whether your table have the same column.
    // 
    // public void includeAsMine_Xxx(String aliasName) {
    //   Your aliasName should not contain comma.
    // 
#foreach ($col in $table.columns)
#if ($database.isMakeRecentlyDeprecated())
	/** @deprecated Please Use includeAsMine_${col.JavaName}(String aliasName).*/
    public void includeAsMine_${col.JavaName}() { registerIncludedSelectColumn("${col.JavaName}", getRealColumnName("${col.Name}")); }
#end
    public void includeAsMine_${col.JavaName}(String aliasName) { registerIncludedSelectColumn(aliasName, getRealColumnName("${col.Name}")); }
#end

    // ===================================================================================
    //                                                                               Query
    //                                                                               =====
  #foreach ($col in $table.columns)
    #set ($tmpJavaName = "${col.JavaName}")
    #set ($tmpUncapitalisedJavaName = "${col.UncapitalisedJavaName}")

    protected ${glConditionValueName} _${tmpUncapitalisedJavaName};
    public ${glConditionValueName} get${tmpJavaName}() {
        if (_${tmpUncapitalisedJavaName} == null) {
            _${tmpUncapitalisedJavaName} = new ${glConditionValueName}();
        }
        return _${tmpUncapitalisedJavaName};
    }
    protected ${glConditionValueName} getCValue${tmpJavaName}() {
        return get${tmpJavaName}();
    }

    #if (${col.isJavaNativeStringObject()})
      #if (${col.isSingleKeyForeignKey()})
        #set ($relatedCQClassName = "${relationCQPackagePrefix}${col.foreignKey.foreignTableExtendedConditionQueryClassName}")
        #set ($subQueryPropertyNameInitCap = "${tmpJavaName}_InScopeSubQuery_${col.foreignKey.foreignPropertyNameInitCap}")
        #set ($subQueryPropertyName = "${tmpUncapitalisedJavaName}_InScopeSubQuery_${col.foreignKey.foreignPropertyNameInitCap}")
        #set ($subQueryKeepMapGeneric = "String, ${relatedCQClassName}")

    protected java.util.Map${database.filterGenericsString(${subQueryKeepMapGeneric})} _${subQueryPropertyName}Map;
    public java.util.Map${database.filterGenericsString(${subQueryKeepMapGeneric})} get${subQueryPropertyNameInitCap}() {
        return _${subQueryPropertyName}Map;
    }
    public String keep${subQueryPropertyNameInitCap}(${relatedCQClassName} subQuery) {
        if (_${subQueryPropertyName}Map == null) { _${subQueryPropertyName}Map = new java.util.LinkedHashMap${database.filterGenericsString(${subQueryKeepMapGeneric})}(); }
        final String key = "subQueryMapKey" + (_${subQueryPropertyName}Map.size() + 1);
        _${subQueryPropertyName}Map.put(key, subQuery);
        return "${subQueryPropertyName}." + key;
    }
      #end
      #if (${col.hasSingleKeyReferrer()})
        #foreach ($refferer in $col.SingleKeyReferrers)
          #set ($relatedCQClassName = "${relationCQPackagePrefix}${refferer.refererTableExtendedConditionQueryClassName}")
          #set ($subQueryPropertyNameInitCap = "${tmpJavaName}_InScopeSubQuery_${refferer.ReffererPropertyNameInitCap}")
          #set ($subQueryPropertyName = "${tmpUncapitalisedJavaName}_InScopeSubQuery_${refferer.ReffererPropertyNameInitCap}")
          #set ($subQueryKeepMapGeneric = "String, ${relatedCQClassName}")

	protected java.util.Map${database.filterGenericsString(${subQueryKeepMapGeneric})} _${subQueryPropertyName}Map;
    public java.util.Map${database.filterGenericsString(${subQueryKeepMapGeneric})} get${subQueryPropertyNameInitCap}() {
        return _${subQueryPropertyName}Map;
    }
    public String keep${subQueryPropertyNameInitCap}(${relatedCQClassName} subQuery) {
        if (_${subQueryPropertyName}Map == null) { _${subQueryPropertyName}Map = new java.util.LinkedHashMap${database.filterGenericsString(${subQueryKeepMapGeneric})}(); }
        final String key = "subQueryMapKey" + (_${subQueryPropertyName}Map.size() + 1);
        _${subQueryPropertyName}Map.put(key, subQuery);
        return "${subQueryPropertyName}." + key;
    }
        #end
      #end
      #if (${col.hasSingleKeyReferrer()})
        #foreach ($refferer in $col.SingleKeyReferrers)
          #set ($relatedCQClassName = "${relationCQPackagePrefix}${refferer.refererTableExtendedConditionQueryClassName}")
          #set ($subQueryPropertyNameInitCap = "${tmpJavaName}_ExistsSubQuery_${refferer.ReffererPropertyNameInitCap}")
          #set ($subQueryPropertyName = "${tmpUncapitalisedJavaName}_ExistsSubQuery_${refferer.ReffererPropertyNameInitCap}")
          #set ($subQueryKeepMapGeneric = "String, ${relatedCQClassName}")

    protected java.util.Map${database.filterGenericsString(${subQueryKeepMapGeneric})} _${subQueryPropertyName}Map;
    public java.util.Map${database.filterGenericsString(${subQueryKeepMapGeneric})} get${subQueryPropertyNameInitCap}() {
        return _${subQueryPropertyName}Map;
    }
    public String keep${subQueryPropertyNameInitCap}(${relatedCQClassName} subQuery) {
        if (_${subQueryPropertyName}Map == null) { _${subQueryPropertyName}Map = new java.util.LinkedHashMap${database.filterGenericsString(${subQueryKeepMapGeneric})}(); }
        final String key = "subQueryMapKey" + (_${subQueryPropertyName}Map.size() + 1);
        _${subQueryPropertyName}Map.put(key, subQuery);
        return "${subQueryPropertyName}." + key;
    }
        #end
      #end
    #end
    #if (${col.isJavaNativeNumberObject()})
      #if (${col.isSingleKeyForeignKey()})
        #set ($relatedCQClassName = "${relationCQPackagePrefix}${col.foreignKey.foreignTableExtendedConditionQueryClassName}")
        #set ($subQueryPropertyNameInitCap = "${tmpJavaName}_InScopeSubQuery_${col.foreignKey.foreignPropertyNameInitCap}")
        #set ($subQueryPropertyName = "${tmpUncapitalisedJavaName}_InScopeSubQuery_${col.foreignKey.foreignPropertyNameInitCap}")
        #set ($subQueryKeepMapGeneric = "String, ${relatedCQClassName}")

    protected java.util.Map${database.filterGenericsString(${subQueryKeepMapGeneric})} _${subQueryPropertyName}Map;
    public java.util.Map${database.filterGenericsString(${subQueryKeepMapGeneric})} get${subQueryPropertyNameInitCap}() {
        return _${subQueryPropertyName}Map;
    }
    public String keep${subQueryPropertyNameInitCap}(${relatedCQClassName} subQuery) {
        if (_${subQueryPropertyName}Map == null) { _${subQueryPropertyName}Map = new java.util.LinkedHashMap${database.filterGenericsString(${subQueryKeepMapGeneric})}(); }
        final String key = "subQueryMapKey" + (_${subQueryPropertyName}Map.size() + 1);
        _${subQueryPropertyName}Map.put(key, subQuery);
        return "${subQueryPropertyName}." + key;
    }
      #end
      #if (${col.hasSingleKeyReferrer()})
        #foreach ($refferer in $col.SingleKeyReferrers)
          #set ($relatedCQClassName = "${relationCQPackagePrefix}${refferer.refererTableExtendedConditionQueryClassName}")
          #set ($subQueryPropertyNameInitCap = "${tmpJavaName}_InScopeSubQuery_${refferer.ReffererPropertyNameInitCap}")
          #set ($subQueryPropertyName = "${tmpUncapitalisedJavaName}_InScopeSubQuery_${refferer.ReffererPropertyNameInitCap}")
          #set ($subQueryKeepMapGeneric = "String, ${relatedCQClassName}")

    protected java.util.Map${database.filterGenericsString(${subQueryKeepMapGeneric})} _${subQueryPropertyName}Map;
    public java.util.Map${database.filterGenericsString(${subQueryKeepMapGeneric})} get${subQueryPropertyNameInitCap}() {
        return _${subQueryPropertyName}Map;
    }
    public String keep${subQueryPropertyNameInitCap}(${relatedCQClassName} subQuery) {
        if (_${subQueryPropertyName}Map == null) { _${subQueryPropertyName}Map = new java.util.LinkedHashMap${database.filterGenericsString(${subQueryKeepMapGeneric})}(); }
        final String key = "subQueryMapKey" + (_${subQueryPropertyName}Map.size() + 1);
        _${subQueryPropertyName}Map.put(key, subQuery);
        return "${subQueryPropertyName}." + key;
    }
        #end
      #end
      #if (${col.hasSingleKeyReferrer()})
        #foreach ($refferer in $col.SingleKeyReferrers)
          #set ($relatedCQClassName = "${relationCQPackagePrefix}${refferer.refererTableExtendedConditionQueryClassName}")
          #set ($subQueryPropertyNameInitCap = "${tmpJavaName}_ExistsSubQuery_${refferer.ReffererPropertyNameInitCap}")
          #set ($subQueryPropertyName = "${tmpUncapitalisedJavaName}_ExistsSubQuery_${refferer.ReffererPropertyNameInitCap}")
          #set ($subQueryKeepMapGeneric = "String, ${relatedCQClassName}")

    protected java.util.Map${database.filterGenericsString(${subQueryKeepMapGeneric})} _${subQueryPropertyName}Map;
    public java.util.Map${database.filterGenericsString(${subQueryKeepMapGeneric})} get${subQueryPropertyNameInitCap}() {
        return _${subQueryPropertyName}Map;
    }
    public String keep${subQueryPropertyNameInitCap}(${relatedCQClassName} subQuery) {
        if (_${subQueryPropertyName}Map == null) { _${subQueryPropertyName}Map = new java.util.LinkedHashMap${database.filterGenericsString(${subQueryKeepMapGeneric})}(); }
        final String key = "subQueryMapKey" + (_${subQueryPropertyName}Map.size() + 1);
        _${subQueryPropertyName}Map.put(key, subQuery);
        return "${subQueryPropertyName}." + key;
    }
        #end
      #end
    #end
    #if (${col.isJavaNativeDateObject()})
    #end
    #if (${col.isJavaNativeBooleanObject()})
    #end
    #if (${col.isJavaNativeBinaryObject()})
    #end
    #if (!${col.isNotNull()})
    #end

    public ${myClassName} addOrderBy_${tmpJavaName}_Asc() { registerOrderBy("${col.name}", true); return this; }
    public ${myClassName} addOrderBy_${tmpJavaName}_Desc() { registerOrderBy("${col.name}", false); return this; }
  #end

    // ===================================================================================
    //                                                                         Union Query
    //                                                                         ===========
    protected void reflectRelationOnUnionQuery(${glConditionQueryInterfaceName} baseQueryAsSuper, ${glConditionQueryInterfaceName} unionQueryAsSuper) {
#if ($table.hasForeignKeyOrRefererAsOne())
        final ${relationCQPackagePrefix}${myConditionQueryClassName} baseQuery = (${relationCQPackagePrefix}${myConditionQueryClassName})baseQueryAsSuper;
        final ${relationCQPackagePrefix}${myConditionQueryClassName} unionQuery = (${relationCQPackagePrefix}${myConditionQueryClassName})unionQueryAsSuper;
#end
#foreach ($foreignKeys in $table.foreignKeys)
        if (baseQuery.hasConditionQuery${foreignKeys.foreignPropertyNameInitCap}()) {
            unionQuery.query${foreignKeys.foreignPropertyNameInitCap}().reflectRelationOnUnionQuery(baseQuery.query${foreignKeys.foreignPropertyNameInitCap}(), unionQuery.query${foreignKeys.foreignPropertyNameInitCap}());
        }
#end
#foreach ($refferer in $table.referrers)
#if (${refferer.isOneToOne()})
        if (baseQuery.hasConditionQuery${refferer.reffererPropertyNameInitCapAsOne}()) {
            unionQuery.query${refferer.reffererPropertyNameInitCapAsOne}().reflectRelationOnUnionQuery(baseQuery.query${refferer.reffererPropertyNameInitCapAsOne}(), unionQuery.query${refferer.reffererPropertyNameInitCapAsOne}());
        }
#end
#end

    }

    // ===================================================================================
    //                                                                       Foreign Query
    //                                                                       =============
#foreach ($foreignKeys in $table.foreignKeys)
#set ($foreignCQClassName = "${relationCQPackagePrefix}${foreignKeys.foreignTableExtendedConditionQueryClassName}")
    
    // /* * * * * * * * * * * * * * * * * * * * * * *
    //   ForeignTable    = [${foreignKeys.foreignTable.basicInfoDispString}]
    //   ForeignProperty = [${foreignKeys.foreignJavaBeansRulePropertyName}]
    // * * * * * * * * */

    /**
     * Query for ${foreignKeys.foreignJavaBeansRulePropertyName}.
     * @return Instance of ${foreignCQClassName} as ${foreignKeys.ForeignPropertyName}. (NotNull)
     */
    public ${foreignCQClassName} query${foreignKeys.ForeignPropertyNameInitCap}() {
        return getConditionQuery${foreignKeys.ForeignPropertyNameInitCap}();
    }
    protected ${foreignCQClassName} _conditionQuery${foreignKeys.ForeignPropertyNameInitCap};
    public ${foreignCQClassName} getConditionQuery${foreignKeys.ForeignPropertyNameInitCap}() {
        if (_conditionQuery${foreignKeys.foreignPropertyNameInitCap} == null) {
            _conditionQuery${foreignKeys.foreignPropertyNameInitCap} = createQuery${foreignKeys.ForeignPropertyNameInitCap}();
            setupOuterJoin_${foreignKeys.foreignPropertyNameInitCap}();
        }
        return _conditionQuery${foreignKeys.foreignPropertyNameInitCap};
    }
    protected void setupOuterJoin_${foreignKeys.foreignPropertyNameInitCap}() {
        final java.util.Map<String, String> joinOnMap = new java.util.LinkedHashMap${database.filterGenericsString('String, String')}();
#foreach ($columnName in $foreignKeys.LocalColumns)
#set ($localColumn = $table.getColumn($columnName))
#set ($foreignColumnName = $foreignKeys.getLocalForeignMapping().get($columnName))
        joinOnMap.put(getRealColumnName("${localColumn.name}"), getConditionQuery${foreignKeys.foreignPropertyNameInitCap}().getRealColumnName("${foreignColumnName}"));
#end
#if ($foreignKeys.hasFixedCondition())
        joinOnMap.put("$$fixedCondition$$", prepareFixedCondition("${foreignKeys.fixedCondition}", getRealAliasName(), getConditionQuery${foreignKeys.foreignPropertyNameInitCap}().getRealAliasName()));
#end
        getSqlClause().registerOuterJoin(getConditionQuery${foreignKeys.foreignPropertyNameInitCap}().getTableSqlName(), getConditionQuery${foreignKeys.foreignPropertyNameInitCap}().getRealAliasName(), joinOnMap);
    }
    protected ${foreignCQClassName} createQuery${foreignKeys.ForeignPropertyNameInitCap}() {
	    final String nextRelationPath = resolveNextRelationPath${foreignKeys.foreignPropertyNameInitCap}();
        final String resolvedAliasName = resolveJoinAliasName(nextRelationPath, getNextNestLevel());
        final ${foreignCQClassName} cq = new ${foreignCQClassName}(this, getSqlClause(), resolvedAliasName, getNextNestLevel());
        cq.xsetForeignPropertyName("${foreignKeys.foreignPropertyName}");
        cq.xsetRelationPath(nextRelationPath);
        return cq;
    }
	protected String resolveNextRelationPath${foreignKeys.foreignPropertyNameInitCap}() {
	    return resolveNextRelationPath("${table.name}", "${foreignKeys.foreignPropertyName}");
	}
    public boolean hasConditionQuery${foreignKeys.ForeignPropertyNameInitCap}() {
        return _conditionQuery${foreignKeys.ForeignPropertyNameInitCap} != null;
    }
#end

#foreach ($referrer in $table.referrers)
#set ($relatedCQClassName = "${relationCQPackagePrefix}${referrer.referrerTableExtendedConditionQueryClassName}")
#if (${referrer.isOneToOne()})

    // /* * * * * * * * * * * * * * * * * * * * * * * {as one}
    //   ReferrerTable    = [${referrer.table.basicInfoDispString}]
    //   ReferrerProperty = [${referrer.referrerJavaBeansRulePropertyNameAsOne}]
    // * * * * * * * * */

    /**
     * Query for ${referrer.referrerJavaBeansRulePropertyNameAsOne}.
     * @return Instance of ${relatedCQClassName} as ${referrer.ReffererPropertyNameAsOne}. (NotNull)
     */
    public ${relatedCQClassName} query${referrer.referrerPropertyNameInitCapAsOne}() {
        return getConditionQuery${referrer.referrerPropertyNameInitCapAsOne}();
    }
    protected ${relatedCQClassName} _conditionQuery${referrer.referrerPropertyNameInitCapAsOne};
    public ${relatedCQClassName} getConditionQuery${referrer.referrerPropertyNameInitCapAsOne}() {
        if (_conditionQuery${referrer.referrerPropertyNameInitCapAsOne} == null) {
            _conditionQuery${referrer.referrerPropertyNameInitCapAsOne} = createQuery${referrer.referrerPropertyNameInitCapAsOne}();
            setupOuterJoin_${referrer.referrerPropertyNameInitCapAsOne}();
        }
        return _conditionQuery${referrer.referrerPropertyNameInitCapAsOne};
    }
    protected void setupOuterJoin_${referrer.referrerPropertyNameInitCapAsOne}() {
        final java.util.Map<String, String> joinOnMap = new java.util.LinkedHashMap<String, String>();
#foreach ($columnName in $referrer.foreignColumns)
#set ($foreignColumn = $table.getColumn($columnName))
#set ($referrerColumnName = $referrer.getForeignLocalMapping().get($columnName))
        joinOnMap.put(getRealColumnName("${foreignColumn.name}"), getConditionQuery${referrer.referrerPropertyNameInitCapAsOne}().getRealColumnName("${referrerColumnName}"));
#end
#if ($referrer.hasFixedCondition())
        joinOnMap.put("$$fixedCondition$$", prepareFixedCondition("${referrer.fixedCondition}", getRealAliasName(), getConditionQuery${referrer.referrerPropertyNameInitCapAsOne}().getRealAliasName()));
#end
        getSqlClause().registerOuterJoin(getConditionQuery${referrer.referrerPropertyNameInitCapAsOne}().getTableSqlName(), getConditionQuery${referrer.referrerPropertyNameInitCapAsOne}().getRealAliasName(), joinOnMap);
    }
    protected ${relatedCQClassName} createQuery${referrer.referrerPropertyNameInitCapAsOne}() {
        final String nextRelationPath = resolveNextRelationPath${referrer.referrerPropertyNameInitCapAsOne}();
        final String resolvedAliasName = resolveJoinAliasName(nextRelationPath, getNextNestLevel());
        final ${relatedCQClassName} cq = new ${relatedCQClassName}(this, getSqlClause(), resolvedAliasName, getNextNestLevel());
        cq.xsetForeignPropertyName("${referrer.referrerPropertyNameAsOne}");
        cq.xsetRelationPath(nextRelationPath);
        return cq;
    }
	protected String resolveNextRelationPath${referrer.referrerPropertyNameInitCapAsOne}() {
	    return resolveNextRelationPath("${table.name}", "${referrer.referrerPropertyNameAsOne}");
	}
    public boolean hasConditionQuery${referrer.referrerPropertyNameInitCapAsOne}() {
        return _conditionQuery${referrer.referrerPropertyNameInitCapAsOne} != null;
    }
#end
#end
}
