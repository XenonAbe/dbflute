${database.allClassCopyright}package ${glPackageBaseCB};
#set ($myClassName = "${myBaseConditionBeanClassName}")

import java.util.Map;

import ${glPackageBaseCommonCBean}.${glConditionBeanAbstractName};
import ${glPackageBaseCommonCBean}.${glConditionBeanInterfaceName};
import ${glPackageBaseCommonCBean}.${glConditionQueryInterfaceName};
import ${glPackageBaseCommonCBean}.${glUnionQuery};
import ${glPackageCB}.${myConditionBeanClassName};
import ${glPackageCQ}.*;
#if ($table.hasForeignKeyOrReferrerAsOne())
import ${glPackageNss}.*;
#end

/**
 * The base condition-bean of ${table.name}.
 * @author ${database.ClassAuthor}
 */${database.outputSuppressWarningsAfterLineSeparator()}
public class ${myClassName} extends ${glConditionBeanAbstractName} {

    // ===================================================================================
    //                                                                           Attribute
    //                                                                           =========
    protected ${myConditionQueryClassName} _conditionQuery;

    // ===================================================================================
    //                                                                          Table Name
    //                                                                          ==========
    public String getTableDbName() {
        return "${table.name}";
    }

    public String getTableSqlName() {
        return "${table.tableSqlName}";
    }

    // ===================================================================================
    //                                                                      PrimaryKey Map
    //                                                                      ==============
    public void acceptPrimaryKeyMap(Map<String, ? extends Object> primaryKeyMap) {
#if ($table.hasPrimaryKey())
        assertPrimaryKeyMap(primaryKeyMap);
#foreach ($col in $table.primaryKey)
        {
            Object obj = primaryKeyMap.get("${col.name}");
            if (obj instanceof ${col.javaNative}) {
                query().set${col.javaName}_Equal((${col.javaNative})obj);
            } else {
#if ($col.isJavaNativeStringObject())
                checkTypeString(obj, "${col.uncapitalisedJavaName}", "${col.javaNative}");
                query().set${col.javaName}_Equal((String)obj);
            }
        }
#else
#if ($col.isJavaNativeDateObject())
                query().set${col.javaName}_Equal(new ${col.javaNative}(parseDateStringAsMillis(obj, "${col.uncapitalisedJavaName}", "${col.JavaNative}")));
            }
        }
#else
#if (${col.isJavaNativeBinaryObject()})
                query().set${col.javaName}_Equal(null);// Binary as String is out of target.
            }
        }
#else
                query().set${col.javaName}_Equal(new ${col.javaNative}((String)obj));
            }
        }
#end
#end
#end
#end
#else

        String msg = "This table has no primary-keys: " + getTableDbName();
        throw new IllegalStateException(msg);
#end

    }

    // ===================================================================================
    //                                                                     OrderBy Setting
    //                                                                     ===============
    public ${glConditionBeanInterfaceName} addOrderBy_PK_Asc() {
#if ($table.hasPrimaryKey())
#foreach ($col in $table.primaryKey)
        query().addOrderBy_${col.JavaName}_Asc();
#end
        return this;
#else
        String msg = "This table has no primary-keys: " + getTableDbName();
        throw new IllegalStateException(msg);
#end
    }

    public ${glConditionBeanInterfaceName} addOrderBy_PK_Desc() {
#if ($table.hasPrimaryKey())
#foreach ($col in $table.primaryKey)
        query().addOrderBy_${col.JavaName}_Desc();
#end
        return this;
#else
        String msg = "This table has no primary-keys: " + getTableDbName();
        throw new IllegalStateException(msg);
#end
    }

    // ===================================================================================
    //                                                                               Query
    //                                                                               =====
    public ${myConditionQueryClassName} query() {
        return getConditionQuery();
    }

    public ${myConditionQueryClassName} getConditionQuery() {
        if (_conditionQuery == null) {
            _conditionQuery = new ${myConditionQueryClassName}(null, getSqlClause(), getSqlClause().getLocalTableAliasName(), 0);
        }
        return _conditionQuery;
    }

    public ${glConditionQueryInterfaceName} getConditionQueryAsInterface() {
        return getConditionQuery();
    }

    // ===================================================================================
    //                                                                               Union
    //                                                                               =====
	/**
	 * Set up 'union'.
	 * <pre>
	 * cb.query().union(new ${glUnionQuery}&lt;${myConditionBeanClassName}&gt;() {
	 *     public void query(${myConditionBeanClassName} unionCB) {
	 *         unionCB.query().setXxx...
	 *     }
	 * });
	 * </pre>
	 * @param unionQuery The query of 'union'. (NotNull)
	 */
	public void union(${glUnionQuery}<${myConditionBeanClassName}> unionQuery) {
        final ${myConditionBeanClassName} cb = new ${myConditionBeanClassName}(); unionQuery.query(cb);
		final ${myConditionQueryClassName} cq = cb.query(); query().xsetUnionQuery(cq);
	}

	/**
	 * Set up 'union all'.
	 * <pre>
	 * cb.query().unionAll(new ${glUnionQuery}&lt;${myConditionBeanClassName}&gt;() {
	 *     public void query(${myConditionBeanClassName} unionCB) {
	 *         unionCB.query().setXxx...
	 *     }
	 * });
	 * </pre>
	 * @param unionQuery The query of 'union'. (NotNull)
	 */
	public void unionAll(${glUnionQuery}<${myConditionBeanClassName}> unionQuery) {
        final ${myConditionBeanClassName} cb = new ${myConditionBeanClassName}(); unionQuery.query(cb);
		final ${myConditionQueryClassName} cq = cb.query(); query().xsetUnionAllQuery(cq);
	}
	
	/**
	 * @param unionQuery The query of 'union'. (NotNull)
	 * @deprecated Sorry! Please use union(${glUnionQuery}<${myConditionBeanClassName}> unionQuery).
	 */
    public void union(${myConditionQueryClassName} unionQuery) {
        query().xsetUnionQuery(unionQuery);
    }

	/**
	 * @param unionQuery The query of 'union'. (NotNull)
	 * @deprecated Sorry! Please use unionAll(${glUnionQuery}<${myConditionBeanClassName}> unionQuery).
	 */
    public void unionAll(${myConditionQueryClassName} unionQuery) {
        query().xsetUnionAllQuery(unionQuery);
    }

    public boolean hasUnionQueryOrUnionAllQuery() {
        return query().hasUnionQueryOrUnionAllQuery();
    }

    // ===================================================================================
    //                                                                        Setup Select
    //                                                                        ============
#foreach ($foreignKey in $table.foreignKeys)
#set ($tmpPropertyName = "${foreignKey.foreignPropertyName}")
#set ($tmpPropertyNameInitCap = "${foreignKey.foreignPropertyNameInitCap}")
#set ($nestSelectSetuppperClassName = "${foreignKey.foreignTableNestSelectSetupperClassName}")

    protected ${nestSelectSetuppperClassName} _nss${tmpPropertyNameInitCap};
    public ${nestSelectSetuppperClassName} getNss${tmpPropertyNameInitCap}() {
        if (_nss${tmpPropertyNameInitCap} == null) { _nss${tmpPropertyNameInitCap} = new ${nestSelectSetuppperClassName}(null); }
        return _nss${tmpPropertyNameInitCap};
    }
    public ${nestSelectSetuppperClassName} setupSelect_${tmpPropertyNameInitCap}() {
        doSetupSelect(new SsCall() { public ${glConditionQueryInterfaceName} qf() { return query().query${tmpPropertyNameInitCap}(); } });
        if (_nss${tmpPropertyNameInitCap} == null || !_nss${tmpPropertyNameInitCap}.hasConditionQuery()) { _nss${tmpPropertyNameInitCap} = new ${nestSelectSetuppperClassName}(query().query${tmpPropertyNameInitCap}()); }
        return _nss${tmpPropertyNameInitCap};
    }
#end
#foreach ($referrer in $table.referrers)
#if (${referrer.isOneToOne()})
#set ($tmpPropertyName = "${referrer.referrerPropertyNameAsOne}")
#set ($tmpPropertyNameInitCap = "${referrer.referrerPropertyNameInitCapAsOne}")
#set ($nestSelectSetuppperClassName = "${referrer.referrerTableNestSelectSetupperClassName}")

    protected ${nestSelectSetuppperClassName} _nss${tmpPropertyNameInitCap};
    public ${nestSelectSetuppperClassName} getNss${tmpPropertyNameInitCap}() {
        if (_nss${tmpPropertyNameInitCap} == null) { _nss${tmpPropertyNameInitCap} = new ${nestSelectSetuppperClassName}(null); }
        return _nss${tmpPropertyNameInitCap};
    }
    public ${nestSelectSetuppperClassName} setupSelect_${tmpPropertyNameInitCap}() {
        doSetupSelect(new SsCall() { public ${glConditionQueryInterfaceName} qf() { return query().query${tmpPropertyNameInitCap}(); } });
        if (_nss${tmpPropertyNameInitCap} == null || !_nss${tmpPropertyNameInitCap}.hasConditionQuery()) { _nss${tmpPropertyNameInitCap} = new ${nestSelectSetuppperClassName}(query().query${tmpPropertyNameInitCap}()); }
        return _nss${tmpPropertyNameInitCap};
    }
#end
#end
}
