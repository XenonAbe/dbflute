${database.allClassCopyright}package ${glPackageBaseCB};
#set ($myClassName = "${myBaseConditionBeanClassName}")

import ${glPackageBaseCommonCBean}.${glConditionBeanAbstractName};
import ${glPackageBaseCommonCBean}.${glConditionBeanInterfaceName};
import ${glPackageBaseCommonCBean}.${glConditionQueryInterfaceName};
import ${glPackageBaseCommonCBean}.${glUnionQuery};
import ${glPackageCB}.${myConditionBeanClassName};
import ${glPackageCQ}.*;

/**
 * The base condition-bean of ${table.name}.
 * @author ${database.ClassAuthor}
 */${database.outputSuppressWarningsAfterLineSeparator()}
public class ${myClassName} extends ${glConditionBeanAbstractName} {

    // ===================================================================================
    //                                                                          Annotation
    //                                                                          ==========
    /** @Deprecated */
    public static final String TABLE = "$table.name";

    // ===================================================================================
    //                                                                           Attribute
    //                                                                           =========
    protected ${myConditionQueryClassName} _conditionQuery;

    // ===================================================================================
    //                                                                          Table Name
    //                                                                          ==========
    public String getTableDbName() {
        return "${table.name}";
    }

    public String getTableSqlName() {
        return "${table.tableSqlName}";
    }

    // ===================================================================================
    //                                                                      PrimaryKey Map
    //                                                                      ==============
    public void acceptPrimaryKeyMap(java.util.Map<String, ? extends Object> primaryKeyMap) {
        if (primaryKeyMap == null) {
            String msg = "The argument[primaryKeyMap] must not be null.";
            throw new IllegalArgumentException(msg);
        }
        if (primaryKeyMap.isEmpty()) {
            String msg = "The argument[primaryKeyMap] must not be empty.";
            throw new IllegalArgumentException(msg);
        }
#if ($table.hasPrimaryKey())
  #foreach ($col in $table.primaryKey)

        if (!primaryKeyMap.containsKey("${col.Name}")) {
            String msg = "The primaryKeyMap must have the value of ${col.Name}";
            throw new IllegalStateException(msg + ": primaryKeyMap --> " + primaryKeyMap);
        }
        {
            Object obj = primaryKeyMap.get("${col.Name}");
            if (obj instanceof ${col.JavaNative}) {
                query().set${col.JavaName}_Equal((${col.JavaNative})obj);
            } else {
    #if ($col.isJavaNativeStringObject())

                checkTypeString(obj, "${col.UncapitalisedJavaName}", "${col.JavaNative}");
                query().set${col.JavaName}_Equal((String)obj);
            }
        }
    #else
      #if ($col.isJavaNativeDateObject())

                if (obj instanceof ${col.JavaNative}) {
                    query().set${col.JavaName}_Equal((${col.JavaNative})obj);
                } else {
                    query().set${col.JavaName}_Equal(new ${col.JavaNative}(parseDateStringAsMillis(obj, "${col.UncapitalisedJavaName}", "${col.JavaNative}")));
                }
            }
        }
      #else
        #if (${col.isJavaNativeBinaryObject()})

                if (obj instanceof ${col.JavaNative}) {
                    query().set${col.JavaName}_Equal((${col.JavaNative})obj);
                } else {
                    query().set${col.JavaName}_Equal(null);// Binary as String is out of target.
                }
            }
        }
        #else

                if (obj instanceof ${col.JavaNative}) {
                    query().set${col.JavaName}_Equal((${col.JavaNative})obj);
                } else {
                    try {
                        query().set${col.JavaName}_Equal(new ${col.JavaNative}((String)obj));
                    } catch (RuntimeException e) {
                        String msg = "set${col.JavaName}(new ${col.JavaNative}((String)obj))";
                        throw new RuntimeException(msg + " threw the exception: value=[" + obj + "]", e);
                    }
                }
            }
        }
        #end
      #end
    #end
  #end
#else

        String msg = "This table has no primary-keys: " + getTableDbName();
        throw new IllegalStateException(msg);
#end

    }

    // ===================================================================================
    //                                                                     OrderBy Setting
    //                                                                     ===============
    public ${glConditionBeanInterfaceName} addOrderBy_PK_Asc() {
#if ($table.hasPrimaryKey())
#foreach ($col in $table.PrimaryKey)
        query().addOrderBy_${col.JavaName}_Asc();
#end
        return this;
#else
#foreach ($col in $table.Columns)
        query().addOrderBy_${col.JavaName}_Asc();
#end
        return this;
#end
    }

    public ${glConditionBeanInterfaceName} addOrderBy_PK_Desc() {
#if ($table.hasPrimaryKey())
#foreach ($col in $table.PrimaryKey)
        query().addOrderBy_${col.JavaName}_Desc();
#end
        return this;
#else
#foreach ($col in $table.Columns)
        query().addOrderBy_${col.JavaName}_Desc();
#end
        return this;
#end
    }

    // ===================================================================================
    //                                                                               Query
    //                                                                               =====
    public ${myConditionQueryClassName} query() {
        return getConditionQuery();
    }

    public ${myConditionQueryClassName} getConditionQuery() {
        if (_conditionQuery == null) {
            _conditionQuery = new ${myConditionQueryClassName}(null, getSqlClause(), getSqlClause().getLocalTableAliasName(), 0);
        }
        return _conditionQuery;
    }

    public ${glConditionQueryInterfaceName} getConditionQueryAsInterface() {
        return getConditionQuery();
    }

    // ===================================================================================
    //                                                                               Union
    //                                                                               =====
	/**
	 * Set up 'union'.
	 * <pre>
	 * cb.query().union(new ${glUnionQuery}&lt;${myConditionBeanClassName}&gt;() {
	 *     public void query(${myConditionBeanClassName} unionCB) {
	 *         unionCB.query().setXxx...
	 *     }
	 * });
	 * </pre>
	 * @param unionQuery The query of 'union'. (NotNull)
	 */
	public void union(${glUnionQuery}<${myConditionBeanClassName}> unionQuery) {
        final ${myConditionBeanClassName} cb = new ${myConditionBeanClassName}(); unionQuery.query(cb);
		final ${myConditionQueryClassName} cq = cb.query(); query().xsetUnionQuery(cq);
	}

	/**
	 * Set up 'union all'.
	 * <pre>
	 * cb.query().unionAll(new ${glUnionQuery}&lt;${myConditionBeanClassName}&gt;() {
	 *     public void query(${myConditionBeanClassName} unionCB) {
	 *         unionCB.query().setXxx...
	 *     }
	 * });
	 * </pre>
	 * @param unionAllQuery The query of 'union all'. (NotNull)
	 */
	public void unionAll(${glUnionQuery}<${myConditionBeanClassName}> unionAllQuery) {
        final ${myConditionBeanClassName} cb = new ${myConditionBeanClassName}(); unionQuery.query(cb);
		final ${myConditionQueryClassName} cq = cb.query(); query().xsetUnionAllQuery(cq);
	}
	
	/**
	 * @param unionQuery The query of 'union'. (NotNull)
	 * @deprecated Sorry! Please use union(${glUnionQuery}<${myConditionBeanClassName}> unionQuery).
	 */
    public void union(${myConditionQueryClassName} unionQuery) {
        query().xsetUnionQuery(unionQuery);
    }

	/**
	 * @param unionAllQuery The query of 'union all'. (NotNull)
	 * @deprecated Sorry! Please use unionAll(${glUnionQuery}<${myConditionBeanClassName}> unionAllQuery).
	 */
    public void unionAll(${myConditionQueryClassName} unionAllQuery) {
        query().xsetUnionAllQuery(unionAllQuery);
    }

    public boolean hasUnionQueryOrUnionAllQuery() {
        return query().hasUnionQueryOrUnionAllQuery();
    }

    // ===================================================================================
    //                                                                        Setup Select
    //                                                                        ============
#foreach ($foreignKey in $table.foreignKeys)
#set ($tmpPropertyName = "${foreignKey.foreignPropertyName}")
#set ($tmpPropertyNameInitCap = "${foreignKey.foreignPropertyNameInitCap}")
#set ($nestSelectSetuppperClassName = "${foreignKey.foreignTableNestSelectSetupperClassName}")

    protected ${glPackageNss}.${nestSelectSetuppperClassName} _nss${tmpPropertyNameInitCap};
    public ${glPackageNss}.${nestSelectSetuppperClassName} getNss${tmpPropertyNameInitCap}() {
        if (_nss${tmpPropertyNameInitCap} == null) {
            _nss${tmpPropertyNameInitCap} = new ${glPackageNss}.${nestSelectSetuppperClassName}(null);// for Dummy
        }
        return _nss${tmpPropertyNameInitCap};
    }
    public ${glPackageNss}.${nestSelectSetuppperClassName} setupSelect_${tmpPropertyNameInitCap}() {
        assertSetupSelectBeforeUnion("setupSelect_${tmpPropertyNameInitCap}()");
        final String foreignTableAliasName = query().query${tmpPropertyNameInitCap}().getRealAliasName();
        final String localRelationPath = query().getRelationPath();
        getSqlClause().registerSelectedSelectColumn(foreignTableAliasName, "${table.name}", "${tmpPropertyName}", localRelationPath);
        getSqlClause().registerSelectedForeignInfo(query().query${tmpPropertyNameInitCap}().getRelationPath(), "${tmpPropertyName}");
        if (_nss${tmpPropertyNameInitCap} == null || !_nss${tmpPropertyNameInitCap}.hasConditionQuery()) {
            _nss${tmpPropertyNameInitCap} = new ${glPackageNss}.${nestSelectSetuppperClassName}(query().query${tmpPropertyNameInitCap}());
        }
        limitSelect_Off();
        return _nss${tmpPropertyNameInitCap};
    }
#end
#foreach ($referrer in $table.referrers)
#if (${referrer.isOneToOne()})
#set ($tmpPropertyName = "${referrer.ReferrerPropertyNameAsOne}")
#set ($tmpPropertyNameInitCap = "${referrer.ReferrerPropertyNameInitCapAsOne}")
#set ($nestSelectSetuppperClassName = "${referrer.referrerTableNestSelectSetupperClassName}")

    protected ${glPackageNss}.${nestSelectSetuppperClassName} _nss${tmpPropertyNameInitCap};
    public ${glPackageNss}.${nestSelectSetuppperClassName} getNss${tmpPropertyNameInitCap}() {
        if (_nss${tmpPropertyNameInitCap} == null) {
            _nss${tmpPropertyNameInitCap} = new ${glPackageNss}.${nestSelectSetuppperClassName}(null);// for Dummy
        }
        return _nss${tmpPropertyNameInitCap};
    }
    public ${glPackageNss}.${nestSelectSetuppperClassName} setupSelect_${tmpPropertyNameInitCap}() {
        assertSetupSelectBeforeUnion("setupSelect_${tmpPropertyNameInitCap}()");
        final String foreignTableAliasName = query().query${tmpPropertyNameInitCap}().getRealAliasName();
        final String localRelationPath = query().getRelationPath();
        getSqlClause().registerSelectedSelectColumn(foreignTableAliasName, "${table.name}", "${tmpPropertyName}", localRelationPath);
        getSqlClause().registerSelectedForeignInfo(query().query${tmpPropertyNameInitCap}().getRelationPath(), "${tmpPropertyName}");
        if (_nss${tmpPropertyNameInitCap} == null || !_nss${tmpPropertyNameInitCap}.hasConditionQuery()) {
            _nss${tmpPropertyNameInitCap} = new ${glPackageNss}.${nestSelectSetuppperClassName}(query().query${tmpPropertyNameInitCap}());
        }
        limitSelect_Off();
        return _nss${tmpPropertyNameInitCap};
    }
#end
#end

}
