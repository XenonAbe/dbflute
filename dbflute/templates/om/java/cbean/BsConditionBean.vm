package ${glPackageBaseCB};

#set ($myClassName = "${myBaseConditionBeanClassName}")

import ${glPackageBaseCommonCBean}.${glConditionBeanAbstractName};
import ${glPackageBaseCommonCBean}.${glConditionBeanInterfaceName};
import ${glPackageBaseCommonCBean}.${glConditionQueryInterfaceName};

import ${glPackageCQ}.*;
import ${glPackageNss}.*;

/**
 * The condition-bean of ${table.Name}.
 * 
 * @author ${database.ClassAuthor}
 */
public class ${myClassName} extends ${glConditionBeanAbstractName} {

    // ===================================================================================
    //                                                                          Annotation
    //                                                                          ==========
    /** TABLE-Annotation */
    public static final String TABLE = "$table.Name";

    // ===================================================================================
    //                                                                           Attribute
    //                                                                           =========
    /** Condition query. */
    protected ${myConditionQueryClassName} _conditionQuery;

    // ===================================================================================
    //                                                                         Constructor
    //                                                                         ===========
    /**
     * Constructor.
     */
    public ${myClassName}() {
    }

    // /* * * * * * * * * * * * * * * * * * * * * * *
    //   MyTable = [$table.Name]
    // * * * * * * * * */

    // ===================================================================================
    //                                                                          Table Name
    //                                                                          ==========
    /**
     * ${database.ImplementComment}
     * 
     * @return Table db-name. (NotNull)
     */
    final public String getTableDbName() {
        return "${table.Name}";
    }

    // ===================================================================================
    //                                                                  Accept Primary-Key
    //                                                                  ==================
    /**
     * ${database.ImplementComment}
     * 
     * @param primaryKeyMap Primary key map. (NotNull and NotEmpty)
     */
    public void acceptPrimaryKeyMap(java.util.Map${database.filterGenericsString('String, ? extends Object')} primaryKeyMap) {
        if (primaryKeyMap == null) {
            String msg = "The argument[primaryKeyMap] must not be null.";
            throw new IllegalArgumentException(msg);
        }
        if (primaryKeyMap.isEmpty()) {
            String msg = "The argument[primaryKeyMap] must not be empty.";
            throw new IllegalArgumentException(msg);
        }
#if ($table.hasPrimaryKey())
  #foreach ($col in $table.PrimaryKey)

        if (!primaryKeyMap.containsKey("${col.Name}")) {
            String msg = "The primaryKeyMap must have the value of ${col.Name}";
            throw new IllegalStateException(msg + ": primaryKeyMap --> " + primaryKeyMap);
        }
        {
            Object obj = primaryKeyMap.get("${col.Name}");
            if (obj instanceof ${col.JavaNative}) {
                query().set${col.JavaName}_Equal((${col.JavaNative})obj);
            } else {
    #if ($col.isJavaNativeStringObject())

                checkTypeString(obj, "${col.UncapitalisedJavaName}", "${col.JavaNative}");
                query().set${col.JavaName}_Equal((String)obj);
            }
        }
    #else
      #if ($col.isJavaNativeDateObject())

                if (obj instanceof ${col.JavaNative}) {
                    query().set${col.JavaName}_Equal((${col.JavaNative})obj);
                } else {
                    query().set${col.JavaName}_Equal(new ${col.JavaNative}(parseDateStringAsMillis(obj, "${col.UncapitalisedJavaName}", "${col.JavaNative}")));
                }
            }
        }
      #else
        #if (${col.isJavaNativeBinaryObject()})

                if (obj instanceof ${col.JavaNative}) {
                    query().set${col.JavaName}_Equal((${col.JavaNative})obj);
                } else {
                    query().set${col.JavaName}_Equal(null);// Binary as String is out of target.
                }
            }
        }
        #else

                if (obj instanceof ${col.JavaNative}) {
                    query().set${col.JavaName}_Equal((${col.JavaNative})obj);
                } else {
                    try {
                        query().set${col.JavaName}_Equal(new ${col.JavaNative}((String)obj));
                    } catch (RuntimeException e) {
                        String msg = "set${col.JavaName}(new ${col.JavaNative}((String)obj))";
                        throw new RuntimeException(msg + " threw the exception: value=[" + obj + "]", e);
                    }
                }
            }
        }
        #end
      #end
    #end
  #end
#else

        String msg = "This table has no primary-keys: " + getTableDbName();
        throw new IllegalStateException(msg);
#end

    }

    // ===================================================================================
    //                                                                            Order-By
    //                                                                            ========
    /**
     * ${database.ImplementComment}
     * 
     * @return this. (NotNull)
     */
    public ${glConditionBeanInterfaceName} addOrderBy_PK_Asc() {
#if ($table.hasPrimaryKey())
  #foreach ($col in $table.PrimaryKey)

        query().addOrderBy_${col.JavaName}_Asc();
  #end

        return this;
#else
  #foreach ($col in $table.Columns)

        query().addOrderBy_${col.JavaName}_Asc();
  #end

        return this;
#end

    }

    /**
     * ${database.ImplementComment}
     * 
     * @return this. (NotNull)
     */
    public ${glConditionBeanInterfaceName} addOrderBy_PK_Desc() {
#if ($table.hasPrimaryKey())
  #foreach ($col in $table.PrimaryKey)

        query().addOrderBy_${col.JavaName}_Desc();
  #end

        return this;
#else
  #foreach ($col in $table.Columns)

        query().addOrderBy_${col.JavaName}_Desc();
  #end

        return this;
#end

    }

    // ===================================================================================
    //                                                                               Query
    //                                                                               =====
    /**
     * Query.
     * 
     * @return Instance of query. (NotNull)
     */
    public ${myConditionQueryClassName} query() {
        return getConditionQuery();
    }

    /**
     * Get condition query. {Internal method for s2dao}
     * 
     * @return Instance of condition query. (NotNull)
     */
    public ${myConditionQueryClassName} getConditionQuery() {
        if (_conditionQuery == null) {
            _conditionQuery = new ${myConditionQueryClassName}(null, getSqlClause(), getTableDbName(), 0);
        }
        return _conditionQuery;
    }

    /**
     * ${database.ImplementComment}
     * 
     * @return Instance of query as interface. (NotNull)
     */
    public ${glConditionQueryInterfaceName} getConditionQueryAsInterface() {
        return getConditionQuery();
    }

    // ===================================================================================
    //                                                                               Union
    //                                                                               =====
    /**
     * Union. <br />
     * Add union query to condition bean. <br />
     * 
     * @param unionQuery Union query. (NotNull)
     */
    public void union(${myConditionQueryClassName} unionQuery) {
        query().xsetUnionQuery(unionQuery);
    }

    /**
     * Union all. <br />
     * Add union all query to condition bean. <br />
     * 
     * @param unionAllQuery Union all query. (NotNull)
     */
    public void unionAll(${myConditionQueryClassName} unionAllQuery) {
        query().xsetUnionAllQuery(unionAllQuery);
    }

    /**
     * ${database.ImplementComment}
     * 
     * @return Determination.
     */
    public boolean hasUnionQueryOrUnionAllQuery() {
        return query().hasUnionQueryOrUnionAllQuery();
    }

    // ===================================================================================
    //                                                                        Setup-Select
    //                                                                        ============
  #foreach ($foreignKeys in $table.ForeignKeys)
    #set ($tmpPropertyName = "${foreignKeys.foreignPropertyName}")
    #set ($tmpPropertyNameInitCap = "${foreignKeys.foreignPropertyNameInitCap}")
    #set ($nestSelectSetuppperClassName = "${glProjectPrefix}${foreignKeys.foreignTable.javaName}Nss")

    // /* * * * * * * * * * * * * * * * * * * * * * *
    //   ForeignTable    = [${foreignKeys.foreignTable.name}]
    //   ForeignProperty = [${tmpPropertyName}]
    // * * * * * * * * */

    /** Is select for ${tmpPropertyName}? */
    protected boolean _isSelect${tmpPropertyNameInitCap};
    /** Nest select setupper for ${tmpPropertyName}. */
    protected ${nestSelectSetuppperClassName} _nss${tmpPropertyNameInitCap};
    /**
     * Is select for ${tmpPropertyName}? {For Internal}
     * 
     * @return Determination.
     */
    public boolean isSelect${tmpPropertyNameInitCap}() {
        return _isSelect${tmpPropertyNameInitCap};
    }
    /**
     * Get nest select setupper for ${tmpPropertyName}. {For Internal}
     * 
     * @return Nest select setupper. (NotNull)
     */
    public ${nestSelectSetuppperClassName} getNss${tmpPropertyNameInitCap}() {
        if (_nss${tmpPropertyNameInitCap} == null) {
            _nss${tmpPropertyNameInitCap} = new ${nestSelectSetuppperClassName}(null);// for Dummy
        }
        return _nss${tmpPropertyNameInitCap};
    }
    /**
     * Set up select for ${tmpPropertyName}.
     * If you invoke this, this entity is target of select.
     * 
     * @return Nest select setupper for ${tmpPropertyName}. (NotNull)
     */
    public ${nestSelectSetuppperClassName} setupSelect_${tmpPropertyNameInitCap}() {
        query().query${tmpPropertyNameInitCap}();// For setting outer join.
        if (_nss${tmpPropertyNameInitCap} == null || !_nss${tmpPropertyNameInitCap}.hasConditionQuery()) {
            _nss${tmpPropertyNameInitCap} = new ${nestSelectSetuppperClassName}(query().query${tmpPropertyNameInitCap}());
        }
        _isSelect${tmpPropertyNameInitCap} = true;
        limitSelect_Off();
        return _nss${tmpPropertyNameInitCap};
    }
  #end
  #foreach ($refferer in $table.Referrers)
    #if (${refferer.isOneToOne()})
      #set ($tmpPropertyName = "${refferer.ReffererPropertyNameAsOne}")
      #set ($tmpPropertyNameInitCap = "${refferer.ReffererPropertyNameInitCapAsOne}")
      #set ($nestSelectSetuppperClassName = "${glProjectPrefix}${refferer.table.javaName}Nss")

    // /* * * * * * * * * * * * * * * * * * * * * * * {as one}
    //   RefferTable    = [${refferer.table.name}]
    //   RefferProperty = [${tmpPropertyName}]
    // * * * * * * * * */

    /** Is select for ${tmpPropertyName}? */
    protected boolean _isSelect${tmpPropertyNameInitCap};
    /** Nest select setupper for ${tmpPropertyName}. */
    protected ${nestSelectSetuppperClassName} _nss${tmpPropertyNameInitCap};
    /**
     * Is select for ${tmpPropertyName}? {For Internal}
     * 
     * @return Determination.
     */
    public boolean isSelect${tmpPropertyNameInitCap}() {
        return _isSelect${tmpPropertyNameInitCap};
    }
    /**
     * Get nest select setupper for ${tmpPropertyName}. {For Internal}
     * 
     * @return Nest select setupper. (NotNull)
     */
    public ${nestSelectSetuppperClassName} getNss${tmpPropertyNameInitCap}() {
        if (_nss${tmpPropertyNameInitCap} == null) {
            _nss${tmpPropertyNameInitCap} = new ${nestSelectSetuppperClassName}(null);// for Dummy
        }
        return _nss${tmpPropertyNameInitCap};
    }
    /**
     * Set up select for ${tmpPropertyName}.
     * If you invoke this, this entity is target of select.
     * 
     * @return Nest select setupper for ${tmpPropertyName}. (NotNull)
     */
    public ${nestSelectSetuppperClassName} setupSelect_${tmpPropertyNameInitCap}() {
        query().query${tmpPropertyNameInitCap}();// For setting outer join.
        if (_nss${tmpPropertyNameInitCap} == null || !_nss${tmpPropertyNameInitCap}.hasConditionQuery()) {
            _nss${tmpPropertyNameInitCap} = new ${nestSelectSetuppperClassName}(query().query${tmpPropertyNameInitCap}());
        }
        _isSelect${tmpPropertyNameInitCap} = true;
        limitSelect_Off();
        return _nss${tmpPropertyNameInitCap};
    }
    #end
  #end

    // ===================================================================================
    //                                                                      Basic Override
    //                                                                      ==============
    /**
     * This method overrides the method that is declared at super.
     * 
     * @return Clause string. (NotNull)
     */
    public String toString() {
        return getSqlClause().getClause();
    }
}
