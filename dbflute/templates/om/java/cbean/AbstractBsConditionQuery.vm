
package ${glPackageBaseCQ};

#set ($myClassName = "${myAbstractBaseConditionQueryClassName}")

#if ($database.hasClassificationDefinitionMap())

import ${glPackageBaseCommon}.${glClassificationDefinition};
#end

import ${glPackageBaseCommonCBean}.*;
import ${glPackageBaseCommonCKey}.*;
import ${glPackageBaseCommonCValue}.${glConditionValueName};
import ${glPackageBaseCommonSqlClause}.${glSqlClauseName};
import ${glPackageCQ}.*;

/**
 * The condition-query of {table.Name}.
 * 
 * @author ${database.ClassAuthor}
 */
public abstract class ${myClassName} extends ${glConditionQueryAbstractName} {

    // =====================================================================================
    //                                                                           Constructor
    //                                                                           ===========
    /**
     * Constructor.
     * 
     * @param childQuery Child query as abstract class. (Nullable: If null, this is base instance.)
     * @param sqlClause SQL clause instance. (NotNull)
     * @param aliasName My alias name. (NotNull)
     * @param nestLevel Nest level.
     */
    public ${myClassName}(${glConditionQueryInterfaceName} childQuery, ${glSqlClauseName} sqlClause, String aliasName, int nestLevel) {
        super(childQuery, sqlClause, aliasName, nestLevel);
    }

    // =====================================================================================
    //                                                                            Table name
    //                                                                            ==========
    /**
     * ${database.ImplementComment}
     * 
     * @return Table db-name. (NotNull)
     */
    final public String getTableDbName() {
        return "${table.Name}";
    }

    // =====================================================================================
    //                                                                                 Query
    //                                                                                 =====
  ## --------------------------------------------------------------------------------
  ##                                                  Make getter and setter methods.
  ##                                                  -------------------------------

    // /* * * * * * * * * * * * * * * * * * * * * * *
    //   MyTable = [$table.Name]
    // * * * * * * * * */

  #foreach ($col in $table.Columns)
    #set ($tmpJavaName = "${col.JavaName}")
    #set ($tmpUncapitalisedJavaName = "${col.UncapitalisedJavaName}")
    
    /** Column db name of ${col.UncapitalisedJavaName}. */
    protected static final String COL_${col.Name} = "${col.Name}";

    /** Column java name of ${col.UncapitalisedJavaName}. */
    protected static final String J_${col.JavaName} = "${col.JavaName}";

    /** Column uncapitalised java name of ${col.UncapitalisedJavaName}. */
    protected static final String UJ_${col.UncapitalisedJavaName} = "${col.UncapitalisedJavaName}";
    #if (${col.isJavaNativeStringObject()})

    /**
     * Set the value of ${col.UncapitalisedJavaName} using equal. { = }
     * If the value is null or empty-string, this condition is ignored.
     * 
     * @param value The value of ${col.UncapitalisedJavaName} as equal.
     */
    public void set${tmpJavaName}_Equal($col.JavaNative value) {
        register${tmpJavaName}(${glConditionKeyName}.CK_EQUAL, filterRemoveEmptyString(value));
    }
      #if ($database.isMakeConditionQueryEqualEmptyString())

    /**
     * Set the empty-string of ${col.UncapitalisedJavaName} as equal. { = }
     * 
     * @return this. (NotNull)
     */
    public void set${tmpJavaName}_Equal_EmptyString() {
        register${tmpJavaName}(${glConditionKeyName}.CK_EQUAL, "");
    }
      #end
      #if (${col.hasClassification()})
        #foreach ($classificationMap in $col.ClassificationMapList)

    /**
     * Set the value of ${classificationMap.get('name')} of ${col.UncapitalisedJavaName} as equal. { = }
     * 
     * @return this. (NotNull)
     */
    public void set${tmpJavaName}_Equal_${classificationMap.get('name')}() {
        register${tmpJavaName}(${glConditionKeyName}.CK_EQUAL, ${glClassificationDefinition}.CODE_${col.ClassificationName}_${classificationMap.get('name')});
    }
        #end
      #end
      #if (${col.isAvailableStringNotEqual()})

    /**
     * Set the value of ${col.UncapitalisedJavaName} using notEqual. { != }
     * If the value is null or empty-string, this condition is ignored.
     * 
     * @param value The value of ${col.UncapitalisedJavaName} as notEqual.
     */
    public void set${tmpJavaName}_NotEqual($col.JavaNative value) {
        register${tmpJavaName}(${glConditionKeyName}.CK_NOT_EQUAL, filterRemoveEmptyString(value));
    }
      #end
      #if (${col.isAvailableStringGreaterThan()})

    /**
     * Set the value of ${col.UncapitalisedJavaName} using greaterThan. { &gt; }
     * If the value is null or empty-string, this condition is ignored.
     * 
     * @param value The value of ${col.UncapitalisedJavaName} as greaterThan.
     */
    public void set${tmpJavaName}_GreaterThan($col.JavaNative value) {
        register${tmpJavaName}(${glConditionKeyName}.CK_GREATER_THAN, filterRemoveEmptyString(value));
    }
      #end
      #if (${col.isAvailableStringLessThan()})

    /**
     * Set the value of ${col.UncapitalisedJavaName} using lessThan. { &lt; }
     * If the value is null or empty-string, this condition is ignored.
     * 
     * @param value The value of ${col.UncapitalisedJavaName} as lessThan.
     */
    public void set${tmpJavaName}_LessThan($col.JavaNative value) {
        register${tmpJavaName}(${glConditionKeyName}.CK_LESS_THAN, filterRemoveEmptyString(value));
    }
      #end
      #if (${col.isAvailableStringGreaterEqual()})

    /**
     * Set the value of ${col.UncapitalisedJavaName} using greaterEqual. { &gt;= }
     * If the value is null or empty-string, this condition is ignored.
     * 
     * @param value The value of ${col.UncapitalisedJavaName} as greaterEqual.
     */
    public void set${tmpJavaName}_GreaterEqual($col.JavaNative value) {
        register${tmpJavaName}(${glConditionKeyName}.CK_GREATER_EQUAL, filterRemoveEmptyString(value));
    }
      #end
      #if (${col.isAvailableStringLessEqual()})

    /**
     * Set the value of ${col.UncapitalisedJavaName} using lessEqual. { &lt;= }
     * If the value is null or empty-string, this condition is ignored.
     * 
     * @param value The value of ${col.UncapitalisedJavaName} as lessEqual.
     */
    public void set${tmpJavaName}_LessEqual($col.JavaNative value) {
        register${tmpJavaName}(${glConditionKeyName}.CK_LESS_EQUAL, filterRemoveEmptyString(value));
    }
      #end
      #if (${col.isAvailableStringPrefixSearch()})

    /**
     * Set the value of ${col.UncapitalisedJavaName} using prefixSearch. { like 'xxx%' }
     * If the value is null or empty-string, this condition is ignored.
     * 
     * @param value The value of ${col.UncapitalisedJavaName} as prefixSearch.
     */
    public void set${tmpJavaName}_PrefixSearch($col.JavaNative value) {
        register${tmpJavaName}(${glConditionKeyName}.CK_PREFIX_SEARCH, filterRemoveEmptyString(value));
    }
      #end
      #if (${col.isAvailableStringLikeSearch()})

    /**
     * Set the value of ${col.UncapitalisedJavaName} using likeSearch. { like '%xxx%' }
     * If the value is null or empty-string, this condition is ignored.
     * You can invoke this method several times and the conditions are set up.
     * 
     * @param value The value of ${col.UncapitalisedJavaName} as likeSearch.
     * @param likeSearchOption Like search option. (NotNull)
     */
    public void set${tmpJavaName}_LikeSearch($col.JavaNative value, ${glPackageBaseCommonCOption}.${glConditionOptionLikeSearchName} option) {
        registerLikeSearchQuery(${glConditionKeyName}.CK_LIKE_SEARCH, filterRemoveEmptyString(value), getCValue${tmpJavaName}(), COL_${col.Name}, J_${col.JavaName}, UJ_${col.UncapitalisedJavaName}, option);
    }
      #end
      #if (${col.isAvailableStringInScope()})

    /**
     * Set the value of ${col.UncapitalisedJavaName} using inScope. { in ('a', 'b') }
     * If the element in the list is null or empty-string, the condition-element is ignored.
     * 
     * @param valueList The value of ${col.UncapitalisedJavaName} as inScope.
     */
    public void set${tmpJavaName}_InScope(java.util.List${database.filterGenericsString(${col.JavaNative})} valueList) {
        register${tmpJavaName}(${glConditionKeyName}.CK_IN_SCOPE, filterRemoveEmptyStringFromList(valueList));
    }

    /**
     * Set the value of ${col.UncapitalisedJavaName} using inScope. { in ('a', 'b') }
     * If the element in the list is null or empty-string, the condition-element is ignored.
     * 
     * @param valueList The value of ${col.UncapitalisedJavaName} as inScope.
     */
    public void set${tmpJavaName}_InScope(${col.JavaNative} value, ${glPackageBaseCommonCOption}.${glConditionOptionInScopeName} option) {
        registerInScopeQuery(${glConditionKeyName}.CK_IN_SCOPE, filterRemoveEmptyString(value), getCValue${tmpJavaName}(), COL_${col.Name}, J_${col.JavaName}, UJ_${col.UncapitalisedJavaName}, option);
    }
      #end
      #if (${col.isAvailableStringNotInScope()})

    /**
     * Set the value of ${col.UncapitalisedJavaName} using notInScope. { not in ('a', 'b') }
     * If the element in the list is null or empty-string, the condition-element is ignored.
     * 
     * @param valueList The value of ${col.UncapitalisedJavaName} as notInScope.
     */
    public void set${tmpJavaName}_NotInScope(java.util.List${database.filterGenericsString(${col.JavaNative})} valueList) {
        register${tmpJavaName}(${glConditionKeyName}.CK_NOT_IN_SCOPE, filterRemoveEmptyStringFromList(valueList));
    }
      #end
      #if (${col.isSingleKeyForeignKey()})
        #set ($relatedCQClassName = "${glProjectPrefix}${col.foreignKey.foreignTable.javaName}CQ")
        #set ($subQueryPropertyNameInitCap = "${tmpJavaName}_InScopeSubQuery_${col.foreignKey.foreignPropertyNameInitCap}")
        #set ($subQueryPropertyName = "${tmpUncapitalisedJavaName}_InScopeSubQuery_${col.foreignKey.foreignPropertyNameInitCap}")

    /**
     * Set the sub-query of ${subQueryPropertyNameInitCap} using inScopeSubQuery.
     * { in (select xxx.${col.foreignKey.firstForeignColumnName} from ${col.foreignKey.foreignTable.Name} where ...) }
     * This method use from clause and where clause of the sub-query instance.
     * this query keep the sub-query instance for query-value.
     * After you invoke this, If you set query in the argument[subQuery], the query is ignored.
     * 
     * @param subQuery The sub-query of ${subQueryPropertyNameInitCap} using inScopeSubQuery. (NotNull)
     */
    public void set${subQueryPropertyNameInitCap}(${relatedCQClassName} subQuery) {
        assertObjectNotNull("subQuery", subQuery);
        keep${subQueryPropertyNameInitCap}(subQuery);// for saving query-value.
        registerInScopeSubQuery(subQuery, COL_${col.Name}, "${col.foreignKey.firstForeignColumnName}", "${subQueryPropertyName}");
    }

    abstract public void keep${subQueryPropertyNameInitCap}(${relatedCQClassName} subQuery);
      #end
      #if (${col.hasSingleKeyReferrer()})
        #foreach ($refferer in $col.SingleKeyReferrers)
          #set ($relatedCQClassName = "${glProjectPrefix}${refferer.Table.JavaName}CQ")
          #set ($subQueryPropertyNameInitCap = "${tmpJavaName}_InScopeSubQuery_${refferer.reffererPropertyNameInitCap}")
          #set ($subQueryPropertyName = "${tmpUncapitalisedJavaName}_InScopeSubQuery_${refferer.reffererPropertyNameInitCap}")

    /**
     * Set the sub-query of ${subQueryPropertyNameInitCap} using inScopeSubQuery.
     * { in (select xxx.${refferer.FirstLocalColumnName} from ${refferer.Table.Name} where ...) }
     * This method use from clause and where clause of the sub-query instance.
     * this query keep the sub-query instance for query-value.
     * After you invoke this, If you set query in the argument[subQuery], the query is ignored.
     * 
     * @param subQuery The sub-query of ${subQueryPropertyNameInitCap} using inScopeSubQuery. (NotNull)
     */
    public void set${subQueryPropertyNameInitCap}(${relatedCQClassName} subQuery) {
        assertObjectNotNull("subQuery", subQuery);
        keep${subQueryPropertyNameInitCap}(subQuery);// for saving query-value.
        registerInScopeSubQuery(subQuery, COL_${col.Name}, "${refferer.FirstLocalColumnName}", "${subQueryPropertyName}");
    }

    abstract public void keep${subQueryPropertyNameInitCap}(${relatedCQClassName} subQuery);
        #end
      #end
      #if (${col.hasSingleKeyReferrer()})
        #foreach ($refferer in $col.SingleKeyReferrers)
          #set ($relatedCQClassName = "${glProjectPrefix}${refferer.Table.JavaName}CQ")
          #set ($subQueryPropertyNameInitCap = "${tmpJavaName}_ExistsSubQuery_${refferer.ReffererPropertyNameInitCap}")
          #set ($subQueryPropertyName = "${tmpUncapitalisedJavaName}_ExistsSubQuery_${refferer.ReffererPropertyNameInitCap}")

    /**
     * Set the sub-query of ${subQueryPropertyNameInitCap} using existsSubQuery.
     * { exists (select xxx.${refferer.FirstLocalColumnName} from ${refferer.Table.Name} where ...) }
     * This method use from clause and where clause of the sub-query instance.
     * this query keep the sub-query instance for query-value.
     * After you invoke this, If you set query in the argument[subQuery], the query is ignored.
     * 
     * @param subQuery The sub-query of ${subQueryPropertyNameInitCap} using existsSubQuery. (NotNull)
     */
    public void set${subQueryPropertyNameInitCap}(${relatedCQClassName} subQuery) {
        assertObjectNotNull("subQuery", subQuery);
        keep${subQueryPropertyNameInitCap}(subQuery);// for saving query-value.
        registerExistsSubQuery(subQuery, COL_${col.Name}, "${refferer.FirstLocalColumnName}", "${subQueryPropertyName}");
    }

    abstract public void keep${subQueryPropertyNameInitCap}(${relatedCQClassName} subQuery);
        #end
      #end
    #end
    #if (${col.isJavaNativeNumberObject()})
    
    /**
     * Set the value of ${col.UncapitalisedJavaName} using equal. { = }
     * 
     * @param value The value of ${col.UncapitalisedJavaName} as equal.
     */
    public void set${tmpJavaName}_Equal($col.JavaNative value) {
        register${tmpJavaName}(${glConditionKeyName}.CK_EQUAL, value);
    }
      #if (${col.hasClassification()})
        #foreach ($classificationMap in $col.ClassificationMapList)

    /**
     * Set the value of ${classificationMap.get('name')} of ${col.UncapitalisedJavaName} as equal. { = }
     */
    public void set${tmpJavaName}_Equal_${classificationMap.get('name')}() {
        final String code = ${glClassificationDefinition}.CODE_${col.ClassificationName}_${classificationMap.get('name')};
        register${tmpJavaName}(${glConditionKeyName}.CK_EQUAL, new ${col.JavaNative}(code));
    }
        #end
      #end
      #if (${col.isAvailableNumberNotEqual()})

    /**
     * Set the value of ${col.UncapitalisedJavaName} using notEqual. { != }
     * 
     * @param value The value of ${col.UncapitalisedJavaName} as notEqual.
     */
    public void set${tmpJavaName}_NotEqual($col.JavaNative value) {
        register${tmpJavaName}(${glConditionKeyName}.CK_NOT_EQUAL, value);
    }
      #end
      #if (${col.isAvailableNumberGreaterThan()})

    /**
     * Set the value of ${col.UncapitalisedJavaName} using greaterThan. { &gt; }
     * 
     * @param value The value of ${col.UncapitalisedJavaName} as greaterThan.
     */
    public void set${tmpJavaName}_GreaterThan($col.JavaNative value) {
        register${tmpJavaName}(${glConditionKeyName}.CK_GREATER_THAN, value);
    }
      #end
      #if (${col.isAvailableNumberLessThan()})

    /**
     * Set the value of ${col.UncapitalisedJavaName} using lessThan. { &lt; }
     * 
     * @param value The value of ${col.UncapitalisedJavaName} as lessThan.
     */
    public void set${tmpJavaName}_LessThan($col.JavaNative value) {
        register${tmpJavaName}(${glConditionKeyName}.CK_LESS_THAN, value);
    }
      #end
      #if (${col.isAvailableNumberGreaterEqual()})

    /**
     * Set the value of ${col.UncapitalisedJavaName} using greaterEqual. { &gt;= }
     * 
     * @param value The value of ${col.UncapitalisedJavaName} as greaterEqual.
     */
    public void set${tmpJavaName}_GreaterEqual($col.JavaNative value) {
        register${tmpJavaName}(${glConditionKeyName}.CK_GREATER_EQUAL, value);
    }
      #end
      #if (${col.isAvailableNumberLessEqual()})

    /**
     * Set the value of ${col.UncapitalisedJavaName} using lessEqual. { &lt;= }
     * 
     * @param value The value of ${col.UncapitalisedJavaName} as lessEqual.
     */
    public void set${tmpJavaName}_LessEqual($col.JavaNative value) {
        register${tmpJavaName}(${glConditionKeyName}.CK_LESS_EQUAL, value);
    }
      #end
      #if ($database.isMakeConditionQueryNumericArgumentLong())

    /**
     * Set the value of ${col.UncapitalisedJavaName} using equal. { = }
     * 
     * @param value The value of ${col.UncapitalisedJavaName} as equal.
     */
    public void set${tmpJavaName}_Equal(long value) {
        register${tmpJavaName}(${glConditionKeyName}.CK_EQUAL, new ${col.JavaNative}(String.valueOf(value)));
    }
        #if (${col.isAvailableNumberNotEqual()})

    /**
     * Set the value of ${col.UncapitalisedJavaName} using notEqual. { != }
     * 
     * @param value The value of ${col.UncapitalisedJavaName} as notEqual.
     */
    public void set${tmpJavaName}_NotEqual(long value) {
        register${tmpJavaName}(${glConditionKeyName}.CK_NOT_EQUAL, new ${col.JavaNative}(String.valueOf(value)));
    }
        #end
        #if (${col.isAvailableNumberGreaterThan()})

    /**
     * Set the value of ${col.UncapitalisedJavaName} using greaterThan. { &gt; }
     * 
     * @param value The value of ${col.UncapitalisedJavaName} as greaterThan.
     */
    public void set${tmpJavaName}_GreaterThan(long value) {
        register${tmpJavaName}(${glConditionKeyName}.CK_GREATER_THAN, new ${col.JavaNative}(String.valueOf(value)));
    }
        #end
        #if (${col.isAvailableNumberLessThan()})

    /**
     * Set the value of ${col.UncapitalisedJavaName} using lessThan. { &lt; }
     * 
     * @param value The value of ${col.UncapitalisedJavaName} as lessThan.
     */
    public void set${tmpJavaName}_LessThan(long value) {
        register${tmpJavaName}(${glConditionKeyName}.CK_LESS_THAN, new ${col.JavaNative}(String.valueOf(value)));
    }
        #end
        #if (${col.isAvailableNumberGreaterEqual()})

    /**
     * Set the value of ${col.UncapitalisedJavaName} using greaterEqual. { &gt;= }
     * 
     * @param value The value of ${col.UncapitalisedJavaName} as greaterEqual.
     */
    public void set${tmpJavaName}_GreaterEqual(long value) {
        register${tmpJavaName}(${glConditionKeyName}.CK_GREATER_EQUAL, new ${col.JavaNative}(String.valueOf(value)));
    }
        #end
        #if (${col.isAvailableNumberLessEqual()})

    /**
     * Set the value of ${col.UncapitalisedJavaName} using lessEqual. { &lt;= }
     * 
     * @param value The value of ${col.UncapitalisedJavaName} as lessEqual.
     */
    public void set${tmpJavaName}_LessEqual(long value) {
        register${tmpJavaName}(${glConditionKeyName}.CK_LESS_EQUAL, new ${col.JavaNative}(String.valueOf(value)));
    }
        #end
      #end
      #if (${col.isAvailableNumberInScope()})

    /**
     * Set the value of ${col.UncapitalisedJavaName} using inScope. { in (a, b) }
     * If the element in the list is null or empty-string, the condition-element is ignored.
     * 
     * @param valueList The value of ${col.UncapitalisedJavaName} as inScope.
     */
    public void set${tmpJavaName}_InScope(java.util.List${database.filterGenericsString(${col.JavaNative})} valueList) {
        register${tmpJavaName}(${glConditionKeyName}.CK_IN_SCOPE, valueList);
    }
      #end
      #if (${col.isAvailableNumberNotInScope()})

    /**
     * Set the value of ${col.UncapitalisedJavaName} using notInScope. { not in (a, b) }
     * If the element in the list is null or empty-string, the condition-element is ignored.
     * 
     * @param valueList The value of ${col.UncapitalisedJavaName} as notInScope.
     */
    public void set${tmpJavaName}_NotInScope(java.util.List${database.filterGenericsString(${col.JavaNative})} valueList) {
        register${tmpJavaName}(${glConditionKeyName}.CK_NOT_IN_SCOPE, valueList);
    }
      #end
      #if (${col.isSingleKeyForeignKey()})
        #set ($relatedCQClassName = "${glProjectPrefix}${col.foreignKey.foreignTable.javaName}CQ")
        #set ($subQueryPropertyNameInitCap = "${tmpJavaName}_InScopeSubQuery_${col.foreignKey.foreignPropertyNameInitCap}")
        #set ($subQueryPropertyName = "${tmpUncapitalisedJavaName}_InScopeSubQuery_${col.foreignKey.foreignPropertyNameInitCap}")

    /**
     * Set the sub-query of ${subQueryPropertyNameInitCap} using inScopeSubQuery.
     * { in (select xxx.${col.foreignKey.firstForeignColumnName} from ${col.foreignKey.foreignTable.Name} where ...) }
     * This method use from clause and where clause of the sub-query instance.
     * this query keep the sub-query instance for query-value.
     * After you invoke this, If you set query in the argument[subQuery], the query is ignored.
     * 
     * @param subQuery The sub-query of ${subQueryPropertyNameInitCap} using inScopeSubQuery. (NotNull)
     */
    public void set${subQueryPropertyNameInitCap}(${relatedCQClassName} subQuery) {
        assertObjectNotNull("subQuery", subQuery);
        keep${subQueryPropertyNameInitCap}(subQuery);// for saving query-value.
        registerInScopeSubQuery(subQuery, COL_${col.Name}, "${col.foreignKey.firstForeignColumnName}", "${subQueryPropertyName}");
    }

    abstract public void keep${subQueryPropertyNameInitCap}(${relatedCQClassName} subQuery);
      #end
      #if (${col.hasSingleKeyReferrer()})
        #foreach ($refferer in $col.SingleKeyReferrers)
          #set ($relatedCQClassName = "${glProjectPrefix}${refferer.Table.JavaName}CQ")
          #set ($subQueryPropertyNameInitCap = "${tmpJavaName}_InScopeSubQuery_${refferer.ReffererPropertyNameInitCap}")
          #set ($subQueryPropertyName = "${tmpUncapitalisedJavaName}_InScopeSubQuery_${refferer.ReffererPropertyNameInitCap}")

    /**
     * Set the sub-query of ${subQueryPropertyNameInitCap} using inScopeSubQuery.
     * { in (select xxx.${refferer.FirstLocalColumnName} from ${refferer.Table.Name} where ...) }
     * This method use from clause and where clause of the sub-query instance.
     * this query keep the sub-query instance for query-value.
     * After you invoke this, If you set query in the argument[subQuery], the query is ignored.
     * 
     * @param subQuery The sub-query of ${subQueryPropertyNameInitCap} using inScopeSubQuery. (NotNull)
     */
    public void set${subQueryPropertyNameInitCap}(${relatedCQClassName} subQuery) {
        assertObjectNotNull("subQuery", subQuery);
        keep${subQueryPropertyNameInitCap}(subQuery);// for saving query-value.
        registerInScopeSubQuery(subQuery, COL_${col.Name}, "${refferer.FirstLocalColumnName}", "${subQueryPropertyName}");
    }

    abstract public void keep${subQueryPropertyNameInitCap}(${relatedCQClassName} subQuery);
        #end
      #end
      #if (${col.hasSingleKeyReferrer()})
        #foreach ($refferer in $col.SingleKeyReferrers)
          #set ($relatedCQClassName = "${glProjectPrefix}${refferer.Table.JavaName}CQ")
          #set ($subQueryPropertyNameInitCap = "${tmpJavaName}_ExistsSubQuery_${refferer.ReffererPropertyNameInitCap}")
          #set ($subQueryPropertyName = "${tmpUncapitalisedJavaName}_ExistsSubQuery_${refferer.ReffererPropertyNameInitCap}")

    /**
     * Set the sub-query of ${subQueryPropertyNameInitCap} using existsSubQuery.
     * { exists (select xxx.${refferer.FirstLocalColumnName} from ${refferer.Table.Name} where ...) }
     * This method use from clause and where clause of the sub-query instance.
     * this query keep the sub-query instance for query-value.
     * After you invoke this, If you set query in the argument[subQuery], the query is ignored.
     * 
     * @param subQuery The sub-query of ${subQueryPropertyNameInitCap} using existsSubQuery. (NotNull)
     */
    public void set${subQueryPropertyNameInitCap}(${relatedCQClassName} subQuery) {
        assertObjectNotNull("subQuery", subQuery);
        keep${subQueryPropertyNameInitCap}(subQuery);// for saving query-value.
        registerExistsSubQuery(subQuery, COL_${col.Name}, "${refferer.FirstLocalColumnName}", "${subQueryPropertyName}");
    }

    abstract public void keep${subQueryPropertyNameInitCap}(${relatedCQClassName} subQuery);
        #end
      #end
    #end
    #if (${col.isJavaNativeDateObject()})
    
    /**
     * Set the value of ${col.UncapitalisedJavaName} using equal. { = }
     * 
     * @param value The value of ${col.UncapitalisedJavaName} as equal.
     */
    public void set${tmpJavaName}_Equal($col.JavaNative value) {
        register${tmpJavaName}(${glConditionKeyName}.CK_EQUAL, value);
    }
      #if (${col.isAvailableDateNotEqual()})

    /**
     * Set the value of ${col.UncapitalisedJavaName} using notEqual. { != }
     * 
     * @param value The value of ${col.UncapitalisedJavaName} as notEqual.
     */
    public void set${tmpJavaName}_NotEqual($col.JavaNative value) {
        register${tmpJavaName}(${glConditionKeyName}.CK_NOT_EQUAL, value);
    }
      #end
      #if (${col.isAvailableDateGreaterThan()})

    /**
     * Set the value of ${col.UncapitalisedJavaName} using greaterThan. { &gt; }
     * 
     * @param value The value of ${col.UncapitalisedJavaName} as greaterThan.
     */
    public void set${tmpJavaName}_GreaterThan($col.JavaNative value) {
        register${tmpJavaName}(${glConditionKeyName}.CK_GREATER_THAN, value);
    }
      #end
      #if (${col.isAvailableDateLessThan()})

    /**
     * Set the value of ${col.UncapitalisedJavaName} using lessThan. { &lt; }
     * 
     * @param value The value of ${col.UncapitalisedJavaName} as lessThan.
     */
    public void set${tmpJavaName}_LessThan($col.JavaNative value) {
        register${tmpJavaName}(${glConditionKeyName}.CK_LESS_THAN, value);
    }
      #end
      #if (${col.isAvailableDateGreaterEqual()})

    /**
     * Set the value of ${col.UncapitalisedJavaName} using greaterEqual. { &gt;= }
     * 
     * @param value The value of ${col.UncapitalisedJavaName} as greaterEqual.
     */
    public void set${tmpJavaName}_GreaterEqual($col.JavaNative value) {
        register${tmpJavaName}(${glConditionKeyName}.CK_GREATER_EQUAL, value);
    }
      #end
      #if (${col.isAvailableDateLessEqual()})

    /**
     * Set the value of ${col.UncapitalisedJavaName} using lessEqual. { &lt;= }
     * 
     * @param value The value of ${col.UncapitalisedJavaName} as lessEqual.
     */
    public void set${tmpJavaName}_LessEqual($col.JavaNative value) {
        register${tmpJavaName}(${glConditionKeyName}.CK_LESS_EQUAL, value);
    }
      #end
    #end
    #if (${col.isJavaNativeBooleanObject()})
    
    /**
     * Set the value of ${col.UncapitalisedJavaName} using equal. { = }
     * 
     * @param value The value of ${col.UncapitalisedJavaName} as equal.
     */
    public void set${tmpJavaName}_Equal($col.JavaNative value) {
        register${tmpJavaName}(${glConditionKeyName}.CK_EQUAL, value);
    }
    #end
    #if (${col.isJavaNativeBinaryObject()})
    #end
    #if (!${col.isNotNull()})

    /**
     * Set the value of ${col.UncapitalisedJavaName} using isNull. { is null }
     */
    public void set${tmpJavaName}_IsNull() {
        register${tmpJavaName}(${glConditionKeyName}.CK_IS_NULL, DUMMY_OBJECT);
    }

    /**
     * Set the value of ${col.UncapitalisedJavaName} using isNotNull. { is not null }
     */
    public void set${tmpJavaName}_IsNotNull() {
        register${tmpJavaName}(${glConditionKeyName}.CK_IS_NOT_NULL, DUMMY_OBJECT);
    }
    #end
    
    /**
     * Register condition of ${col.UncapitalisedJavaName}.
     * 
     * @param key Condition key. (NotNull)
     * @param value The value of ${col.UncapitalisedJavaName}. (Nullable)
     */
    protected void register${tmpJavaName}(${glConditionKeyName} key, Object value) {
        registerQuery(key, value, getCValue${tmpJavaName}(), COL_${col.Name}, J_${col.JavaName}, UJ_${col.UncapitalisedJavaName});
    }

    /**
     * Register inline condition of ${col.UncapitalisedJavaName}.
     * 
     * @param key Condition key. (NotNull)
     * @param value The value of ${col.UncapitalisedJavaName}. (Nullable)
     */
    protected void registerInline${tmpJavaName}(${glConditionKeyName} key, Object value) {
        registerInlineQuery(key, value, getCValue${tmpJavaName}(), COL_${col.Name}, J_${col.JavaName}, UJ_${col.UncapitalisedJavaName});
    }

    abstract protected ${glConditionValueName} getCValue${tmpJavaName}();
  #end

    // =====================================================================================
    //                                                                 Basic-Override Method
    //                                                                 =====================
    /**
     * This method overrides the method that is declared at super.
     * 
     * @return Clause string. (NotNull)
     */
    public String toString() {
        return getSqlClause().getClause();
    }
}
