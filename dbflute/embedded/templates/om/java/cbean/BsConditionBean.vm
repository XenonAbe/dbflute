${database.allClassCopyright}package ${glPackageBaseCB};
#set ($myClassName = "${myBaseConditionBeanClassName}")

import java.util.Map;

import org.seasar.dbflute.cbean.AbstractConditionBean;
import org.seasar.dbflute.cbean.ConditionBean;
import org.seasar.dbflute.cbean.ConditionQuery;
import org.seasar.dbflute.cbean.OrQuery;
import org.seasar.dbflute.cbean.SpecifyQuery;
import org.seasar.dbflute.cbean.SubQuery;
import org.seasar.dbflute.cbean.UnionQuery;
import org.seasar.dbflute.cbean.chelper.*;
import org.seasar.dbflute.cbean.sqlclause.SqlClause;
import org.seasar.dbflute.dbmeta.DBMetaProvider;
import org.seasar.dbflute.twowaysql.factory.SqlAnalyzerFactory;
#if ($table.hasPrimaryKeyForcedClassificationSetting())
import ${glPackageBaseCommon}.${glCDef};
#end
import ${glPackageBaseCommon}.${glDBFluteConfig};
import ${glPackageBaseCommon}.${glDBMetaInstanceHandler};
import ${glPackageBaseCommon}.${glImplementedInvokerAssistant};
import ${glPackageBaseCommon}.${glImplementedSqlClauseCreator};
import ${glPackageCB}.*;
import ${glPackageCQ}.*;
#if ($table.hasForeignKeyOrReferrerAsOne())
import ${glPackageNss}.*;
#end

/**
 * The base condition-bean of ${table.name}.
 * @author ${database.classAuthor}
 */
public class ${myClassName} extends AbstractConditionBean {

    // ===================================================================================
    //                                                                           Attribute
    //                                                                           =========
    private final DBMetaProvider _dbmetaProvider = new ${glDBMetaInstanceHandler}();
    protected ${myConditionQueryClassName} _conditionQuery;

    // ===================================================================================
    //                                                                           SqlClause
    //                                                                           =========
    @Override
    protected SqlClause createSqlClause() {
        return new ${glImplementedSqlClauseCreator}().createSqlClause(this);
    }

    // ===================================================================================
    //                                                                     DBMeta Provider
    //                                                                     ===============
    @Override
    protected DBMetaProvider getDBMetaProvider() {
        return _dbmetaProvider;
    }

    // ===================================================================================
    //                                                                          Table Name
    //                                                                          ==========
    public String getTableDbName() {
        return "${table.name}";
    }

    // ===================================================================================
    //                                                                 PrimaryKey Handling
    //                                                                 ===================
#if ($table.hasPrimaryKey())
    public void acceptPrimaryKey(${table.primaryKeyArgsString}) {
        ${table.primaryKeyArgsAssertString}
        ${myClassName} cb = this;
        ${table.primaryKeyArgsConditionSetupString}
    }

#end
    public void acceptPrimaryKeyMap(Map<String, ? extends Object> primaryKeyMap) {
#if ($table.hasPrimaryKey())
        assertPrimaryKeyMap(primaryKeyMap);
#foreach ($col in $table.primaryKey)
        {
            Object obj = primaryKeyMap.get("${col.name}");
            if (obj instanceof ${col.javaNative}) {
                query().invokeQuery("${col.name}", "equal", obj);
            } else {
#if ($col.isJavaNativeStringObject())
                xcheckTypeString(obj, "${col.uncapitalisedJavaName}", ${col.javaNative}.class);
                query().invokeQueryEqual("${col.name}", obj);
#elseif ($col.isJavaNativeNumberObject())
                query().invokeQueryEqual("${col.name}", xparseNumber(obj, "${col.uncapitalisedJavaName}", ${col.javaNative}.class));
#elseif ($col.isJavaNativeDateObject())
                query().invokeQueryEqual("${col.name}", xparseDate(obj, "${col.uncapitalisedJavaName}", ${col.javaNative}.class));
#elseif ($col.isJavaNativeBooleanObject())
                query().invokeQueryEqual("${col.name}", xparseBoolean(obj, "${col.uncapitalisedJavaName}", ${col.javaNative}.class));
#elseif ($col.isJavaNativeBinaryObject())
                throw new UnsupportedOperationException("This method does not support binary type");
#elseif ($col.isJavaNativeUUIDObject())
                query().invokeQueryEqual("${col.name}", xparseUUID(obj, "${col.uncapitalisedJavaName}", ${col.javaNative}.class));
#else
                query().invokeQueryEqual("${col.name}", new ${col.javaNative}((String)obj));
#end
            }
        }
#end
#else
        String msg = "This table has no primary-keys: " + getTableDbName();
        throw new UnsupportedOperationException(msg);
#end
    }

    public ConditionBean addOrderBy_PK_Asc() {
#if ($table.hasPrimaryKey())
#foreach ($col in $table.primaryKey)
        query().addOrderBy_${col.JavaName}_Asc();
#end
        return this;
#else
        String msg = "This table has no primary-keys: " + getTableDbName();
        throw new UnsupportedOperationException(msg);
#end
    }

    public ConditionBean addOrderBy_PK_Desc() {
#if ($table.hasPrimaryKey())
#foreach ($col in $table.primaryKey)
        query().addOrderBy_${col.JavaName}_Desc();
#end
        return this;
#else
        String msg = "This table has no primary-keys: " + getTableDbName();
        throw new UnsupportedOperationException(msg);
#end
    }

    // ===================================================================================
    //                                                                               Query
    //                                                                               =====
    /**
     * Prepare for various queries. <br />
     * Examples of main functions are following:
     * <pre>
     * // Basic Queries
     * cb.query().setMemberId_Equal(value);        // =
     * cb.query().setMemberId_NotEqual(value);     // !=
     * cb.query().setMemberId_GreaterThan(value);  // &gt;
     * cb.query().setMemberId_LessThan(value);     // &lt;
     * cb.query().setMemberId_GreaterEqual(value); // &gt;=
     * cb.query().setMemberId_LessEqual(value);    // &lt;=
     * cb.query().setMemberName_InScope(valueList);    // in ('a', 'b')
     * cb.query().setMemberName_NotInScope(valueList); // not in ('a', 'b')
     * cb.query().setMemberName_PrefixSearch(value);   // like 'a%' escape '|'
     * // LikeSearch with various options: (versatile)
     * // {like ... [options]}
     * cb.query().setMemberName_LikeSearch(value, option);
     * cb.query().setMemberName_NotLikeSearch(value, option); // not like ...
     * // FromTo with various options: (versatile)
     * // {(default) fromDatetime &lt;= BIRTHDATE &lt;= toDatetime}
     * cb.query().setBirthdate_FromTo(fromDatetime, toDatetime, option);
     * // DateFromTo: (Date means yyyy/MM/dd)
     * // {fromDate &lt;= BIRTHDATE &lt; toDate + 1 day}
     * cb.query().setBirthdate_DateFromTo(fromDate, toDate);
     * cb.query().setBirthdate_IsNull();    // is null
     * cb.query().setBirthdate_IsNotNull(); // is not null
     * 
     * // ExistsReferrer: (co-related sub-query)
     * // {where exists (select PURCHASE_ID from PURCHASE where ...)}
     * cb.query().existsPurchaseList(new SubQuery&lt;PurchaseCB&gt;() {
     *     public void query(PurchaseCB subCB) {
     *         subCB.query().setXxx... // referrer sub-query condition
     *     }
     * });
     * cb.query().notExistsPurchaseList...
     * 
     * // InScopeRelation: (sub-query)
     * // {where MEMBER_STATUS_CODE in (select MEMBER_STATUS_CODE from MEMBER_STATUS where ...)}
     * cb.query().inScopeMemberStatus(new SubQuery&lt;MemberStatusCB&gt;() {
     *     public void query(MemberStatusCB subCB) {
     *         subCB.query().setXxx... // relation sub-query condition
     *     }
     * });
     * cb.query().notInScopeMemberStatus...
     * 
     * // (Query)DerivedReferrer: (co-related sub-query)
     * cb.query().derivedPurchaseList().max(new SubQuery&lt;PurchaseCB&gt;() {
     *     public void query(PurchaseCB subCB) {
     *         subCB.specify().columnPurchasePrice(); // derived column for function
     *         subCB.query().setXxx... // referrer sub-query condition
     *     }
     * }).greaterEqual(value);
     * 
     * // ScalarCondition: (self-table sub-query)
     * cb.query().scalar_Equal().max(new SubQuery&lt;MemberCB&gt;() {
     *     public void query(MemberCB subCB) {
     *         subCB.specify().columnBirthdate(); // derived column for function
     *         subCB.query().setXxx... // scalar sub-query condition
     *     }
     * });
     * 
     * // OrderBy
     * cb.query().addOrderBy_MemberName_Asc();
     * cb.query().addOrderBy_MemberName_Desc().withManualOrder(valueList);
     * cb.query().addOrderBy_MemberName_Desc().withNullsFirst();
     * cb.query().addOrderBy_MemberName_Desc().withNullsLast();
     * cb.query().addSpecifiedDerivedOrderBy_Desc(aliasName);
     * 
     * // Query(Relation)
     * cb.query().queryMemberStatus()...;
     * cb.query().queryMemberAddressAsValid(targetDate)...;
     * </pre>
     * @return The instance of condition-query for base-point table to set up query. (NotNull)
     */
    public ${myConditionQueryClassName} query() {
        return getConditionQuery();
    }

    public ${myConditionQueryClassName} getConditionQuery() { // public for parameter comment
        if (_conditionQuery == null) {
            _conditionQuery = createLocalCQ();
        }
        return _conditionQuery;
    }

    protected ${myConditionQueryClassName} createLocalCQ() {
        return xcreateCQ(null, getSqlClause(), getSqlClause().getLocalTableAliasName(), 0);
    }

    protected ${myConditionQueryClassName} xcreateCQ(ConditionQuery childQuery, SqlClause sqlClause, String aliasName, int nestLevel) {
        return new ${myConditionQueryClassName}(childQuery, sqlClause, aliasName, nestLevel);
    }

    public ConditionQuery localCQ() {
        return getConditionQuery();
    }

    // ===================================================================================
    //                                                                               Union
    //                                                                               =====
    /**
     * Set up 'union' for base-point table. <br />
     * You don't need to call SetupSelect in union-query,
     * because it inherits calls before. (Don't call SetupSelect after here)
     * <pre>
     * cb.query().union(new UnionQuery&lt;${myConditionBeanClassName}&gt;() {
     *     public void query(${myConditionBeanClassName} unionCB) {
     *         unionCB.query().setXxx...
     *     }
     * });
     * </pre>
     * @param unionQuery The query of 'union'. (NotNull)
     */
    public void union(UnionQuery<${myConditionBeanClassName}> unionQuery) {
        final ${myConditionBeanClassName} cb = new ${myConditionBeanClassName}();
        cb.xsetupForUnion(); xsyncUQ(cb); unionQuery.query(cb);
        final ${myConditionQueryClassName} cq = cb.query(); query().xsetUnionQuery(cq);
    }

    /**
     * Set up 'union all' for base-point table. <br />
     * You don't need to call SetupSelect in union-query,
     * because it inherits calls before. (Don't call SetupSelect after here)
     * <pre>
     * cb.query().unionAll(new UnionQuery&lt;${myConditionBeanClassName}&gt;() {
     *     public void query(${myConditionBeanClassName} unionCB) {
     *         unionCB.query().setXxx...
     *     }
     * });
     * </pre>
     * @param unionQuery The query of 'union all'. (NotNull)
     */
    public void unionAll(UnionQuery<${myConditionBeanClassName}> unionQuery) {
        final ${myConditionBeanClassName} cb = new ${myConditionBeanClassName}();
        cb.xsetupForUnion(); xsyncUQ(cb); unionQuery.query(cb);
        final ${myConditionQueryClassName} cq = cb.query(); query().xsetUnionAllQuery(cq);
    }
#if ($database.isAvailableDatabaseDependency())
#if ($database.isDatabasePostgreSQL())

    // ===================================================================================
    //                                                                           Lock Wait
    //                                                                           =========
    public ConditionBean lockForUpdateNoWait()
    { if (xhelpIsSqlClausePostgreSql()) { xhelpGettingSqlClausePostgreSql().lockForUpdateNoWait(); } return this; }

    protected boolean xhelpIsSqlClausePostgreSql() {
        return getSqlClause() instanceof org.seasar.dbflute.cbean.sqlclause.SqlClausePostgreSql;
    }

    protected org.seasar.dbflute.cbean.sqlclause.SqlClausePostgreSql xhelpGettingSqlClausePostgreSql() {
        return (org.seasar.dbflute.cbean.sqlclause.SqlClausePostgreSql)getSqlClause();
    }
#end
#if ($database.isDatabaseOracle())

    // ===================================================================================
    //                                                                           Lock Wait
    //                                                                           =========
    public ConditionBean lockForUpdateNoWait()
    { if (xhelpIsSqlClauseOracle()) { xhelpGettingSqlClauseOracle().lockForUpdateNoWait(); } return this; }
    public ConditionBean lockForUpdateWait(int waitSec)
    { if (xhelpIsSqlClauseOracle()) { xhelpGettingSqlClauseOracle().lockForUpdateWait(waitSec); } return this; }

    protected boolean xhelpIsSqlClauseOracle() {
        return getSqlClause() instanceof org.seasar.dbflute.cbean.sqlclause.SqlClauseOracle;
    }

    protected org.seasar.dbflute.cbean.sqlclause.SqlClauseOracle xhelpGettingSqlClauseOracle() {
        return (org.seasar.dbflute.cbean.sqlclause.SqlClauseOracle)getSqlClause();
    }
#end
#if ($database.isDatabaseDB2())

    // [DBFlute-0.7.9]
    // ===================================================================================
    //                                                                     Isolation Level
    //                                                                     ===============
    // *Database Dependency
    public void lockWithRR() { if (xhelpIsSqlClauseDb2()) { xhelpGettingSqlClauseDb2().lockWithRR(); } }
    public void lockWithRS() { if (xhelpIsSqlClauseDb2()) { xhelpGettingSqlClauseDb2().lockWithRS(); } }
    public void lockWithCS() { if (xhelpIsSqlClauseDb2()) { xhelpGettingSqlClauseDb2().lockWithCS(); } }
    public void lockWithUR() { if (xhelpIsSqlClauseDb2()) { xhelpGettingSqlClauseDb2().lockWithUR(); } }

    protected boolean xhelpIsSqlClauseDb2() {
        return getSqlClause() instanceof org.seasar.dbflute.cbean.sqlclause.SqlClauseDb2;
    }

    protected org.seasar.dbflute.cbean.sqlclause.SqlClauseDb2 xhelpGettingSqlClauseDb2() {
        return (org.seasar.dbflute.cbean.sqlclause.SqlClauseDb2)getSqlClause();
    }
#end
#end

    // ===================================================================================
    //                                                                         SetupSelect
    //                                                                         ===========
#foreach ($fk in $table.foreignKeys)
#set ($tmpPropertyName = "${fk.foreignPropertyName}")
#set ($tmpPropertyNameInitCap = "${fk.foreignPropertyNameInitCap}")
#set ($nestSelectSetuppperClassName = "${fk.foreignTableNestSelectSetupperClassName}")
#set ($dynamicFixedConditionArgs = "")
#set ($dynamicFixedConditionVariables = "")
#if ($fk.hasDynamicFixedCondition())
#set ($dynamicFixedConditionArgs = "${fk.dynamicFixedConditionFinalArgs}")
#set ($dynamicFixedConditionVariables = "${fk.dynamicFixedConditionVariables}")
#end
    protected ${nestSelectSetuppperClassName} _nss${tmpPropertyNameInitCap};
    public ${nestSelectSetuppperClassName} getNss${tmpPropertyNameInitCap}() {
        if (_nss${tmpPropertyNameInitCap} == null) { _nss${tmpPropertyNameInitCap} = new ${nestSelectSetuppperClassName}(null); }
        return _nss${tmpPropertyNameInitCap};
    }
    /**
     * Set up relation columns to select clause. <br />
     * ${fk.foreignTable.aliasExpression}${fk.foreignTable.name} as '${fk.foreignJavaBeansRulePropertyName}'.
#if ($fk.hasDynamicFixedCondition())
${fk.dynamicFixedConditionJavaDocParams}
#end
     * @return The set-upper of nested relation. (NotNull)
     */
    public ${nestSelectSetuppperClassName} setupSelect_${tmpPropertyNameInitCap}(${dynamicFixedConditionArgs}) {
        doSetupSelect(new SsCall() { public ConditionQuery qf() { return query().query${tmpPropertyNameInitCap}(${dynamicFixedConditionVariables}); } });
        if (_nss${tmpPropertyNameInitCap} == null || !_nss${tmpPropertyNameInitCap}.hasConditionQuery())
        { _nss${tmpPropertyNameInitCap} = new ${nestSelectSetuppperClassName}(query().query${tmpPropertyNameInitCap}(${dynamicFixedConditionVariables})); }
        return _nss${tmpPropertyNameInitCap};
    }
#end
#foreach ($referrer in $table.referrers)
#if (${referrer.isOneToOne()})
#set ($tmpPropertyName = "${referrer.referrerPropertyNameAsOne}")
#set ($tmpPropertyNameInitCap = "${referrer.referrerPropertyNameInitCapAsOne}")
#set ($nestSelectSetuppperClassName = "${referrer.referrerTableNestSelectSetupperClassName}")

    protected ${nestSelectSetuppperClassName} _nss${tmpPropertyNameInitCap};
    public ${nestSelectSetuppperClassName} getNss${tmpPropertyNameInitCap}() {
        if (_nss${tmpPropertyNameInitCap} == null) { _nss${tmpPropertyNameInitCap} = new ${nestSelectSetuppperClassName}(null); }
        return _nss${tmpPropertyNameInitCap};
    }
    /**
     * Set up relation columns to select clause. <br />
     * ${referrer.table.aliasExpression}${referrer.table.name} as '${referrer.referrerJavaBeansRulePropertyNameAsOne}'.
     * @return The set-upper of nested relation. (NotNull)
     */
    public ${nestSelectSetuppperClassName} setupSelect_${tmpPropertyNameInitCap}() {
        doSetupSelect(new SsCall() { public ConditionQuery qf() { return query().query${tmpPropertyNameInitCap}(); } });
        if (_nss${tmpPropertyNameInitCap} == null || !_nss${tmpPropertyNameInitCap}.hasConditionQuery()) { _nss${tmpPropertyNameInitCap} = new ${nestSelectSetuppperClassName}(query().query${tmpPropertyNameInitCap}()); }
        return _nss${tmpPropertyNameInitCap};
    }
#end
#end

    // [DBFlute-0.7.4]
    // ===================================================================================
    //                                                                             Specify
    //                                                                             =======
    protected HpSpecification _specification;

    /**
     * Prepare for SpecifyColumn, (Specify)DerivedReferrer.
     * <pre>
     * cb.specify().columnMemberId(...);
     * cb.specify().columnMemberName(...);
     * cb.specify().derived${tmpPropertyNameInitCap}().max(new SubQuery&lt;PurchaseCB&gt;() {
     *     public void query(PurchaseCB subCB) {
     *         subCB.specify().columnPurchaseDatetime();
     *         subCB.query().set...
     *     }
     * }, aliasName);
     * cb.specify().specifyMemberStatus()...
     * </pre>
     * @return The instance of specification. (NotNull)
     */
    public HpSpecification specify() {
        if (_specification == null) { _specification = new HpSpecification(this
            , new HpSpQyCall<${myConditionQueryClassName}>() {
                public boolean has() { return true; }
                public ${myConditionQueryClassName} qy() { return query(); }
            }
            , _forDerivedReferrer, _forScalarSelect, _forScalarSubQuery, getDBMetaProvider()); }
        return _specification;
    }
    protected HpAbstractSpecification<? extends ConditionQuery> localSp() {
        return specify();
    }

    public static class HpSpecification extends HpAbstractSpecification<${myConditionQueryClassName}> {
        protected HpSpQyCall<${myConditionQueryClassName}> _myQyCall;
#foreach ($fk in $table.foreignKeys)
#set ($tmpPropertyName = "${fk.foreignPropertyName}")
#set ($tmpCBClassName = "${fk.foreignTableExtendedConditionBeanClassName}")
        protected ${tmpCBClassName}.HpSpecification _${tmpPropertyName};
#end
#foreach ($referrer in $table.referrers)
#if (${referrer.isOneToOne()})
#set ($tmpPropertyName = "${referrer.referrerPropertyNameAsOne}")
#set ($tmpCBClassName = "${referrer.referrerTableExtendedConditionBeanClassName}")
        protected ${tmpCBClassName}.HpSpecification _${tmpPropertyName};
#end
#end
        public HpSpecification(ConditionBean baseCB, HpSpQyCall<${myConditionQueryClassName}> qyCall
                             , boolean forDeriveReferrer, boolean forScalarSelect, boolean forScalarSubQuery
                             , DBMetaProvider dbmetaProvider)
        { super(baseCB, qyCall, forDeriveReferrer, forScalarSelect, forScalarSubQuery, dbmetaProvider); _myQyCall = qyCall; }
#foreach ($col in $table.columns)
        /** ${col.aliasExpression}${col.name}: {${col.columnDefinitionLineDisp}} */
        public void column${col.javaName}() { doColumn("${col.name}"); }
#end
        protected void doSpecifyRequiredColumn() {
#foreach ($col in $table.primaryKey)
            column${col.javaName}(); // PK
#end
#foreach ($fk in $table.foreignKeys)
#set ($tmpPropertyName = "${fk.foreignPropertyName}")
#set ($tmpPropertyNameInitCap = "${fk.foreignPropertyNameInitCap}")
#if ($fk.hasLocalColumnExceptPrimaryKey())
            if (_myQyCall.qy().hasConditionQuery${tmpPropertyNameInitCap}()) {
#foreach ($col in $fk.localColumnList)
#if (!$col.isPrimaryKey())
                column${col.javaName}(); // FK
#end
#end
            }
#end
#end
        }
        protected String getTableDbName() { return "$table.name"; }
#foreach ($fk in $table.foreignKeys)
#set ($tmpPropertyName = "${fk.foreignPropertyName}")
#set ($tmpPropertyNameInitCap = "${fk.foreignPropertyNameInitCap}")
#set ($tmpCBClassName = "${fk.foreignTableExtendedConditionBeanClassName}")
#set ($tmpCQClassName = "${fk.foreignTableExtendedConditionQueryClassName}")
        /**
         * Prepare to specify functions about relation table. <br />
         * ${fk.foreignTable.aliasExpression}${fk.foreignTable.name} as '${fk.foreignJavaBeansRulePropertyName}'.
         * @return The instance for specification for relation table to specify. (NotNull)
         */
        public ${tmpCBClassName}.HpSpecification specify${tmpPropertyNameInitCap}() {
            assertForeign("${tmpPropertyName}");
            if (_${tmpPropertyName} == null) {
                _${tmpPropertyName} = new ${tmpCBClassName}.HpSpecification(_baseCB, new HpSpQyCall<${tmpCQClassName}>() {
                    public boolean has() { return _myQyCall.has() && _myQyCall.qy().hasConditionQuery${tmpPropertyNameInitCap}(); }
#if ($fk.hasDynamicFixedCondition())
                    public ${tmpCQClassName} qy() { return _myQyCall.qy().getConditionQuery${tmpPropertyNameInitCap}(); } }
#else
                    public ${tmpCQClassName} qy() { return _myQyCall.qy().query${tmpPropertyNameInitCap}(); } }
#end
                    , _forDerivedReferrer, _forScalarSelect, _forScalarSubQuery, _dbmetaProvider);
                    if (_forGeneralOneSpecificaion) { _${tmpPropertyName}.xsetupForGeneralOneSpecification(null); }
            }
            return _${tmpPropertyName};
        }
#end
#foreach ($referrer in $table.referrers)
#if (${referrer.isOneToOne()})
#set ($tmpPropertyName = "${referrer.referrerPropertyNameAsOne}")
#set ($tmpPropertyNameInitCap = "${referrer.referrerPropertyNameInitCapAsOne}")
#set ($tmpCBClassName = "${referrer.referrerTableExtendedConditionBeanClassName}")
#set ($tmpCQClassName = "${referrer.referrerTableExtendedConditionQueryClassName}")
        /**
         * Prepare to specify functions about relation table. <br />
         * ${referrer.table.aliasExpression}${referrer.table.name} as '${referrer.referrerJavaBeansRulePropertyNameAsOne}'.
         * @return The instance for specification for relation table to specify. (NotNull)
         */
        public ${tmpCBClassName}.HpSpecification specify${tmpPropertyNameInitCap}() {
            assertForeign("${tmpPropertyName}");
            if (_${tmpPropertyName} == null) {
                _${tmpPropertyName} = new ${tmpCBClassName}.HpSpecification(_baseCB, new HpSpQyCall<${tmpCQClassName}>() {
                    public boolean has() { return _myQyCall.has() && _myQyCall.qy().hasConditionQuery${tmpPropertyNameInitCap}(); }
                    public ${tmpCQClassName} qy() { return _myQyCall.qy().query${tmpPropertyNameInitCap}(); } }
                    , _forDerivedReferrer, _forScalarSelect, _forScalarSubQuery, _dbmetaProvider);
                if (_forGeneralOneSpecificaion) { _${tmpPropertyName}.xsetupForGeneralOneSpecification(null); }
            }
            return _${tmpPropertyName};
        }
#end
#end
#foreach ($referrer in $table.singleKeyStringOrIntegerReferrers)
#if (!${referrer.isOneToOne()})
#set ($tmpPropertyName = "${referrer.referrerPropertyName}")
#set ($tmpPropertyNameInitCap = "${referrer.referrerPropertyNameInitCap}")
#set ($tmpCBClassName = "${referrer.referrerTableExtendedConditionBeanClassName}")
#set ($tmpLocalCQClassName = "${referrer.foreignTableExtendedConditionQueryClassName}")
        /**
         * Prepare for '(Specify)DerivedReferrer'. <br />
         * ${referrer.table.aliasExpression}${referrer.table.name} as '${referrer.referrerJavaBeansRulePropertyName}'.
         * <pre>
         * cb.specify().derived${tmpPropertyNameInitCap}().max(new SubQuery&lt;${tmpCBClassName}&gt;() {
         *     public void query(${myConditionBeanClassName} subCB) {
         *         subCB.specify().columnXxx... // derived column for function
         *         subCB.query().setYyy... // referrer condition
         *     }
         * }, aliasName);
         * </pre>
         * @return The object to set up a function for referrer table. (NotNull)
         */
        public HpSDRFunction<${tmpCBClassName}, ${tmpLocalCQClassName}> derived${tmpPropertyNameInitCap}() {
            return new HpSDRFunction<${tmpCBClassName}, ${tmpLocalCQClassName}>(_baseCB, _myQyCall.qy(), new HpSDRSetupper<${tmpCBClassName}, ${tmpLocalCQClassName}>() {
                public void setup(String function, SubQuery<${tmpCBClassName}> subQuery, ${tmpLocalCQClassName} cq, String aliasName) {
                    cq.xsderive${referrer.referrerPropertyNameInitCap}(function, subQuery, aliasName); } }, _dbmetaProvider);
        }
#end
#end

        public void xsetupForGeneralOneSpecification(HpSpQyCall<${myConditionQueryClassName}> qyCall) {
            if (qyCall != null) { _myQyCall = qyCall; _qyCall = qyCall; } _forGeneralOneSpecificaion = true;
        }
    }

    // [DBFlute-0.9.5.3]
    // ===================================================================================
    //                                                                         ColumnQuery
    //                                                                         ===========
    /**
     * Set up column-query. {column1 = column2}
     * <pre>
     * // where FOO &lt; BAR
     * cb.columnQuery(new SpecifyQuery&lt;${myConditionBeanClassName}&gt;() {
     *     public void query(${myConditionBeanClassName} cb) {
     *         cb.specify().columnFoo(); // left side column
     *     }
     * }).lessThan(new SpecifyQuery&lt;${myConditionBeanClassName}&gt;() {
     *     public void query(${myConditionBeanClassName} cb) {
     *         cb.specify().columnBar(); // right side column
     *     }
     * });
     * </pre>
     * @param leftSpecifyQuery The specify-query for left side column. (NotNull)
     * @return The object for setting up operand and right side column. (NotNull)
     */
    public HpColQyOperand<${myConditionBeanClassName}> columnQuery(final SpecifyQuery<${myConditionBeanClassName}> leftSpecifyQuery) {
        return new HpColQyOperand<${myConditionBeanClassName}>(new HpColQyHandler<${myConditionBeanClassName}>() {
            public void handle(SpecifyQuery<${myConditionBeanClassName}> rightSp, String operand) {
                ${myConditionBeanClassName} cb = new ${myConditionBeanClassName}();
                cb.specify().xsetupForGeneralOneSpecification(new HpSpQyCall<${myConditionQueryClassName}>() {
                    public boolean has() { return true; }
                    public ${myConditionQueryClassName} qy() { return query(); }
                });
                xcolqy(cb, leftSpecifyQuery, rightSp, operand);
            }
        });
    }

    // [DBFlute-0.9.6.3]
    // ===================================================================================
    //                                                                        OrScopeQuery
    //                                                                        ============
    /**
     * Set up the query for or-scope.
     * <pre>
     * // where (FOO = '...' or BAR = '...')
     * cb.orScopeQuery(new OrQuery&lt;${myConditionBeanClassName}&gt;() {
     *     public void query(${myConditionBeanClassName} orCB) {
     *         orCB.query().setFOO_Equal...
     *         orCB.query().setBAR_Equal...
     *     }
     * });
     * </pre>
     * @param orQuery The query for or-condition. (NotNull)
     */
    public void orScopeQuery(OrQuery<${myConditionBeanClassName}> orQuery) {
        xorSQ((${myConditionBeanClassName})this, orQuery);
    }

    // ===================================================================================
    //                                                                          DisplaySQL
    //                                                                          ==========
    @Override
    protected SqlAnalyzerFactory getSqlAnalyzerFactory()
    { return new ${glImplementedInvokerAssistant}().assistSqlAnalyzerFactory(); }
    @Override
    protected String getLogDateFormat() { return ${glDBFluteConfig}.getInstance().getLogDateFormat(); }
    @Override
    protected String getLogTimestampFormat() { return ${glDBFluteConfig}.getInstance().getLogTimestampFormat(); }

    // ===================================================================================
    //                                                          Basic Status Determination
    //                                                          ==========================
    public boolean hasUnionQueryOrUnionAllQuery() {
        return query().hasUnionQueryOrUnionAllQuery();
    }

    // ===================================================================================
    //                                                                            Internal
    //                                                                            ========
    // Very Internal (for Suppressing Warn about 'Not Use Import')
    protected String getConditionBeanClassNameInternally() { return ${myConditionBeanClassName}.class.getName(); }
    protected String getConditionQueryClassNameInternally() { return ${myConditionQueryClassName}.class.getName(); }
    protected String getSubQueryClassNameInternally() { return SubQuery.class.getName(); }
}
