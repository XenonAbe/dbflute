${database.allClassCopyright}package ${glPackageBaseCommon};

import java.util.Arrays;
import java.util.List;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

import org.seasar.dbflute.jdbc.Classification;
import org.seasar.dbflute.jdbc.ClassificationCodeType;
import org.seasar.dbflute.jdbc.ClassificationMeta;

/**
 * The definition of classification.
 * @author ${database.classAuthor}
 */
public interface ${glCDef} extends Classification {

#foreach ($classificationName in $database.classificationNameList)
#set ($classificationMapList = $database.classificationDefinitionMap.get($classificationName))
#set ($existTop = false)
#if ($database.hasClassificationTop($classificationName))
#set ($classificationTop = $database.getClassificationTop($classificationName))
#set ($existTop = true)
#end
#if ($existTop && $classificationTop.hasTopComment())
    /**
     * $classificationTop.topComment
     */
#end
    public enum ${classificationName} implements ${glCDef} {
#set ($count = 0)
#foreach ($classificationMap in $classificationMapList)
#if ($count != 0)
        ,
#end
        /** $database.buildClassificationApplicationComment($classificationMap) */
        ${classificationMap.get('name')}($database.buildClassificationCodeAliasVariables($classificationMap))
#set ($count = $count + 1)
#end
        ;
        private static final Map<String, ${classificationName}> _codeValueMap = new HashMap<String, ${classificationName}>();
        static { for (${classificationName} value : values()) { _codeValueMap.put(value.code().toLowerCase(), value); } }
        private String _code; private String _alias;
        private ${classificationName}(String code, String alias) { _code = code; _alias = alias; }
        public String code() { return _code; } public String alias() { return _alias; }
        public ClassificationMeta meta() { return ${glCDef}.DefMeta.${classificationName}; }

        /**
         * Get the classification by the code. (CaseInsensitive)
         * @param code The value of code, which is case-insensitive. (NullAllowed: if null, returns null)
         * @return The instance of the corresponding classification to the code. (NullAllowed: if not found, returns null)
         */
        public static ${classificationName} codeOf(Object code) {
            if (code == null) { return null; }
            if (code instanceof ${classificationName}) { return (${classificationName})code; }
            return _codeValueMap.get(code.toString().toLowerCase());
        }

        /**
         * Get the classification by the name (also called 'value' in ENUM world).
         * @param name The string of name, which is case-sensitive. (NullAllowed: if null, returns null)
         * @return The instance of the corresponding classification to the name. (NullAllowed: if not found, returns null)
         */
        public static ${classificationName} nameOf(String name) { // null allowed
            if (name == null) { return null; }
            try { return valueOf(name); } catch (RuntimeException ignored) { return null; }
        }

        /**
         * Get the list of all classification elements. (returns new copied list)
         * @return The list of all classification elements. (NotNull)
         */
        public static List<${classificationName}> listAll() {
            return new ArrayList<${classificationName}>(Arrays.asList(values()));
        }

#if ($database.isCDefToStringReturnsName())
        @Override public String toString() { return name(); }
#else
        @Override public String toString() { return code(); }
#end
    }

#end
    public enum DefMeta implements ClassificationMeta {
#set ($count = 0)
#foreach ($classificationName in $database.classificationNameList)
#set ($existTop = false)
#if ($database.hasClassificationTop($classificationName))
#set ($classificationTop = $database.getClassificationTop($classificationName))
#set ($existTop = true)
#end
#if ($count != 0)
        ,
#end
#if ($existTop && $classificationTop.hasTopComment())
        /** $classificationTop.topComment */
#end
        ${classificationName}
#set ($count = $count + 1)
#end
        ;
        public Classification codeOf(Object code) {
#foreach ($classificationName in $database.classificationNameList)
            if ("${classificationName}".equals(name())) { return ${glCDef}.${classificationName}.codeOf(code); }
#end
            throw new IllegalStateException("Unknown definition: " + this); // basically unreachable
        }

        public Classification nameOf(String name) {
#foreach ($classificationName in $database.classificationNameList)
            if ("${classificationName}".equals(name())) { return ${glCDef}.${classificationName}.valueOf(name); }
#end
            throw new IllegalStateException("Unknown definition: " + this); // basically unreachable
        }

        public List<Classification> listAll() {
#foreach ($classificationName in $database.classificationNameList)
            if ("${classificationName}".equals(name())) { return toClassificationList(${glCDef}.${classificationName}.listAll()); }
#end
            throw new IllegalStateException("Unknown definition: " + this); // basically unreachable
        }

        @SuppressWarnings("unchecked")
        private List<Classification> toClassificationList(List<?> clsList) {
            return (List<Classification>)clsList;
        }

        public ClassificationCodeType codeType() {
#foreach ($classificationName in $database.classificationNameList)
#set ($existTop = false)
#if ($database.hasClassificationTop($classificationName))
#set ($classificationTop = $database.getClassificationTop($classificationName))
#set ($existTop = true)
#end
#if ($existTop && $classificationTop.hasCodeType())
            if ("${classificationName}".equals(name())) { return ClassificationCodeType.${classificationTop.codeType}; }
#end
#end
            return ClassificationCodeType.String; // as default
        }
    }
}
