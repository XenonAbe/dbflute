${database.allClassCopyright}package ${myBaseEntityPackageName};
#set ($myClassName = "${myBaseObjectClassName}")

import java.io.Serializable;
import java.util.*;

#if ($table.hasRelation())
import ${myExtendedEntityPackageName}.*;
#end

/**
 * The simple DTO of ${table.basicInfoDispString}. <br />
#if ($table.isCommentForJavaDocValid())
 * ${table.commentForJavaDoc}
#end
 * <pre>
 * [primary-key]
 *     ${table.primaryKeyNameCommaString}
 * 
 * [column]
 *     ${table.columnNameCommaString}
 * 
 * [sequence]
 *     ${table.definedSequenceName}
 * 
 * [identity]
 *     ${table.identityColumnName}
 * 
 * [version-no]
 *     ${table.versionNoColumnName}
 * 
 * [foreign-table]
 *     ${table.foreignTableNameCommaString}
 * 
 * [referrer-table]
 *     ${table.referrerTableNameCommaString}
 * 
 * [foreign-property]
 *     ${table.foreignPropertyNameCommaString}
 * 
 * [referrer-property]
 *     ${table.referrerPropertyNameCommaString}
 * </pre>
 * @author ${database.classAuthor}
 */
public abstract class $myClassName implements Serializable {

    // ===================================================================================
    //                                                                          Definition
    //                                                                          ==========
    /** Serial version UID. (Default) */
    private static final long serialVersionUID = 1L;

    // ===================================================================================
    //                                                                           Attribute
    //                                                                           =========
    // -----------------------------------------------------
    //                                                Column
    //                                                ------
#foreach ($col in $table.columns)
    /** ${col.aliasExpression}${col.name}: {${col.columnDefinitionLineDisp}} */
    protected ${col.javaNative} ${col.simpleDtoVariableName};

#end
    // -----------------------------------------------------
    //                                              Internal
    //                                              --------
    /** The modified properties for this DTO. */
    protected final Set<String> __modifiedProperties = new LinkedHashSet<String>();

    // ===================================================================================
    //                                                                         Constructor
    //                                                                         ===========
    public ${myClassName}() {
    }

    // ===================================================================================
    //                                                                       Foreign Table
    //                                                                       =============
#foreach ($fk in $table.foreignKeys)
#set ($foreignEntityClassName = "${fk.foreignTableExtendedSimpleDtoClassName}")
#set ($foreignVariableName = "${fk.simpleDtoForeignVariableName}")
    protected ${foreignEntityClassName} ${foreignVariableName};

    public ${foreignEntityClassName} get${fk.foreignJavaBeansRulePropertyNameInitCap}() {
        return ${foreignVariableName};
    }

    public void set${fk.foreignJavaBeansRulePropertyNameInitCap}(${foreignEntityClassName} ${fk.foreignPropertyName}) {
        this.${foreignVariableName} = ${fk.foreignPropertyName};
    }

#end
#foreach ($referrer in $table.referrerAsOneList)
#set ($referrerEntityClassName = "${referrer.referrerTableExtendedSimpleDtoClassName}")
#set ($referrerVariableName = "${referrer.simpleDtoReferrerAsOneVariableName}")
    protected ${referrerEntityClassName} ${referrerVariableName};

    public ${referrerEntityClassName} get${referrer.referrerJavaBeansRulePropertyNameAsOneInitCap}() {
        return ${referrerVariableName};
    }

    public void set${referrer.referrerJavaBeansRulePropertyNameAsOneInitCap}(${referrerEntityClassName} ${referrer.referrerJavaBeansRulePropertyNameAsOne}) {
        this.${referrerVariableName} = ${referrer.referrerJavaBeansRulePropertyNameAsOne};
    }

#end
    // ===================================================================================
    //                                                                      Referrer Table
    //                                                                      ==============
#foreach ($referrer in $table.referrerAsManyList)
#set ($referrerEntityClassName = "${referrer.referrerTableExtendedSimpleDtoClassName}")
#set ($referrerVariableName = "${referrer.simpleDtoReferrerVariableName}")
    protected List<${referrerEntityClassName}> $referrerVariableName;

    public List<${referrerEntityClassName}> get${referrer.referrerJavaBeansRulePropertyNameInitCap}() {
#if (!$database.isOneToManyReturnNullIfNonSelect())
        if (${referrerVariableName} == null) { ${referrerVariableName} = new ArrayList<${referrerEntityClassName}>(); }
#end
        return ${referrerVariableName};
    }

    public void set${referrer.referrerJavaBeansRulePropertyNameInitCap}(List<${referrerEntityClassName}> ${referrer.referrerPropertyName}) {
        this.${referrerVariableName} = ${referrer.referrerPropertyName};
    }

#end
    // ===================================================================================
    //                                                                 Modified Properties
    //                                                                 ===================
    public Set<String> modifiedProperties() {
        return __modifiedProperties;
    }

    public void clearModifiedInfo() {
        __modifiedProperties.clear();
    }

    public boolean hasModification() {
        return !__modifiedProperties.isEmpty();
    }

    // ===================================================================================
    //                                                                      Basic Override
    //                                                                      ==============
    public boolean equals(Object other) {
        if (other == null || !(other instanceof $myClassName)) { return false; }
        final $myClassName otherEntity = ($myClassName)other;
#foreach ($col in $table.equalsHashcodeColumnList)
        if (!helpComparingValue(get${col.javaName}(), otherEntity.get${col.javaName}())) { return false; }
#end
        return true;
    }

    protected boolean helpComparingValue(Object value1, Object value2) {
        if (value1 == null && value2 == null) { return true; }
        return value1 != null && value2 != null && value1.equals(value2);
    }

    public int hashCode() {
        int result = 17;
        result = xCH(result, "${table.name}");
#foreach ($col in $table.equalsHashcodeColumnList)
        result = xCH(result, get${col.JavaName}());
#end
        return result;
    }
    protected int xCH(int result, Object value) { // calculateHashcode()
        if (value == null) {
            return result;
        }
        return (31 * result) + (value instanceof byte[] ? ((byte[]) value).length : value.hashCode());
    }

    public String toString() {
        String c = ", ";
        StringBuilder sb = new StringBuilder();
#foreach ($col in $table.columns)
#if ($col.isJavaNativeUtilDate())
        sb.append(c).append(xfUD(get${col.javaName}()));
#elseif ($col.isJavaNativeByteArray())
        sb.append(c).append(xfBA(get${col.javaName}()));
#else
        sb.append(c).append(get${col.javaName}());
#end
#end
        if (sb.length() > 0) { sb.delete(0, c.length()); }
        sb.insert(0, "{").append("}");
        return sb.toString();
    }
#if ($table.hasUtilDateColumn())
    protected String xfUD(java.util.Date date) { // formatUtilDate()
        return date != null ? new java.text.SimpleDateFormat(xgDP()).format(date) : null;
    }
    protected String xgDP() { // getDatePattern
#if ($database.isDatabaseOracle())
        return "yyyy-MM-dd HH:mm:ss"; // time parts for Oracle only
#else
        return "yyyy-MM-dd";
#end
    }
#end
#if ($table.hasByteArrayColumn())
    protected String xfBA(byte[] bytes) { // formatByteArray()
        return "byte[" + (bytes != null ? String.valueOf(bytes.length) : "null") + "]";
    }
#end

    // ===================================================================================
    //                                                                            Accessor
    //                                                                            ========
#foreach ($col in $table.columns)
    /**
     * [get] ${col.aliasExpression}${col.name}: {${col.columnDefinitionLineDisp}} <br />
#if ($col.isCommentForJavaDocValid())
     * ${col.commentForJavaDoc}
#end
     * @return The value of the column '${col.name}'. (NullAllowed)
     */
    public ${col.javaNative} get${col.javaName}() {
        return ${col.simpleDtoVariableName};
    }

    /**
     * [set] ${col.aliasExpression}${col.name}: {${col.columnDefinitionLineDisp}} <br />
#if ($col.isCommentForJavaDocValid())
     * ${col.commentForJavaDoc}
#end
     * @param ${col.uncapitalisedJavaName} The value of the column '${col.name}'. (NullAllowed)
     */
    public void set${col.javaName}(${col.javaNative} ${col.uncapitalisedJavaName}) {
        __modifiedProperties.add("${col.javaBeansRulePropertyName}");
        this.${col.simpleDtoVariableName} = ${col.uncapitalisedJavaName};
    }

#end
}
