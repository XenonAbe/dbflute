${database.allClassCopyright}package ${myDtoMapperPackageName};
#set ($myClassName = "${myDtoMapperClassName}")

import java.util.*;

import org.seasar.dbflute.Entity;
import ${myDomainEntityPackageName}.*;
import ${myExtendedEntityPackageName}.*;

/**
 * The DTO mapper of ${table.basicInfoDispString}. <br />
#if ($table.isCommentForJavaDocValid())
 * ${table.commentForJavaDoc}
#end
 * <pre>
 * [primary-key]
 *     ${table.primaryKeyNameCommaString}
 * 
 * [column]
 *     ${table.columnNameCommaString}
 * 
 * [sequence]
 *     ${table.definedSequenceName}
 * 
 * [identity]
 *     ${table.identityColumnName}
 * 
 * [version-no]
 *     ${table.versionNoColumnName}
 * 
 * [foreign-table]
 *     ${table.foreignTableNameCommaString}
 * 
 * [referrer-table]
 *     ${table.referrerTableNameCommaString}
 * 
 * [foreign-property]
 *     ${table.foreignPropertyNameCommaString}
 * 
 * [referrer-property]
 *     ${table.referrerPropertyNameCommaString}
 * </pre>
 * @author ${database.classAuthor}
 */
public class ${myClassName} {

    // ===================================================================================
    //                                                                          Definition
    //                                                                          ==========
    /** Serial version UID. (Default) */
    private static final long serialVersionUID = 1L;

    // ===================================================================================
    //                                                                           Attribute
    //                                                                           =========
    protected final Map<Entity, Object> _relationDtoMap;
    protected final Map<Object, Entity> _relationEntityMap;

    // ===================================================================================
    //                                                                         Constructor
    //                                                                         ===========
    public ${myClassName}() {
        _relationDtoMap = new HashMap<Entity, Object>();
        _relationEntityMap = new HashMap<Object, Entity>();
    }

    public ${myClassName}(Map<Entity, Object> relationDtoMap, Map<Object, Entity> relationEntityMap) {
        _relationDtoMap = relationDtoMap;
        _relationEntityMap = relationEntityMap;
    }

    // ===================================================================================
    //                                                                             Mapping
    //                                                                             =======
    // -----------------------------------------------------
    //                                                to DTO
    //                                                ------
    /**
     * Do mapping from an entity to a DTO with relation data.
     * @param entity The entity as mapping resource. (NullAllowed: if null, returns null)
     * @return The mapped DTO. (NotNull)
     */
    public ${myExtendedObjectClassName} mappingToDto(${table.extendedEntityClassName} entity) {
        if (entity == null) {
            return null;
        }
#if ($table.hasRelation())
        Entity localKey = entity;
        Object cachedLocalDto = _relationDtoMap.get(localKey);
        if (cachedLocalDto != null) {
            return (${myExtendedObjectClassName})cachedLocalDto;
        }
#end
        ${myExtendedObjectClassName} dto = new ${myExtendedObjectClassName}();
#foreach ($col in $table.columns)
        dto.set${col.javaName}(entity.get${col.javaName}());
#end
#if ($table.hasRelation())
        if (entity.hasPrimaryKeyValue()) { // caches only a DTO that has a primary key value
            _relationDtoMap.put(localKey, dto);
        }
#foreach ($fk in $table.foreignKeys)
#set ($foreignDtoClassName = "${fk.foreignTableExtendedSimpleDtoClassName}")
        if (entity.get${fk.foreignJavaBeansRulePropertyNameInitCap}() != null) {
            ${fk.foreignTableExtendedEntityClassName} relationEntity = entity.get${fk.foreignJavaBeansRulePropertyNameInitCap}();
            Entity relationKey = relationEntity;
            Object cachedDto = _relationDtoMap.get(relationKey);
            if (cachedDto != null) {
                dto.set${fk.foreignJavaBeansRulePropertyNameInitCap}((${foreignDtoClassName})cachedDto);
            } else {
                ${foreignDtoClassName}Mapper mapper = new ${foreignDtoClassName}Mapper(_relationDtoMap, _relationEntityMap);
                dto.set${fk.foreignJavaBeansRulePropertyNameInitCap}(mapper.mappingToDto(relationEntity));
                if (relationEntity.hasPrimaryKeyValue()) {
                    _relationDtoMap.put(relationKey, dto.get${fk.foreignJavaBeansRulePropertyNameInitCap}());
                }
            }
        };
#end
#foreach ($referrer in $table.referrers)
#set ($referrerDtoClassName = "${referrer.referrerTableExtendedSimpleDtoClassName}")
#if (${referrer.isOneToOne()})
        if (entity.get${referrer.referrerJavaBeansRulePropertyNameAsOneInitCap}() != null) {
            ${referrer.referrerTableExtendedEntityClassName} relationEntity = entity.get${referrer.referrerJavaBeansRulePropertyNameAsOneInitCap}();
            Entity relationKey = relationEntity;
            Object cachedDto = _relationDtoMap.get(relationKey);
            if (cachedDto != null) {
                dto.set${referrer.referrerJavaBeansRulePropertyNameAsOneInitCap}((${referrerDtoClassName})cachedDto);
            } else {
                ${referrerDtoClassName}Mapper mapper = new ${referrerDtoClassName}Mapper(_relationDtoMap, _relationEntityMap);
                dto.set${referrer.referrerJavaBeansRulePropertyNameAsOneInitCap}(mapper.mappingToDto(relationEntity));
                if (relationEntity.hasPrimaryKeyValue()) {
                    _relationDtoMap.put(relationKey, dto.get${referrer.referrerJavaBeansRulePropertyNameAsOneInitCap}());
                }
            }
        };
#else
        if (!entity.get${referrer.referrerJavaBeansRulePropertyNameInitCap}().isEmpty()) {
            ${referrerDtoClassName}Mapper mapper = new ${referrerDtoClassName}Mapper(_relationDtoMap, _relationEntityMap);
            dto.set${referrer.referrerJavaBeansRulePropertyNameInitCap}(mapper.mappingToDtoList(entity.get${referrer.referrerJavaBeansRulePropertyNameInitCap}()));
        };
#end
#end
#end
        return dto;
    }

    /**
     * Do mapping from an entity list to a DTO list with relation data. <br />
     * This calls this.mappingToDto() in a loop of the list.
     * @param entityList The list of entity as mapping resource. (NotNull: null elements are inherited)
     * @return The mapped DTO. (NotNull)
     */
    public List<${myExtendedObjectClassName}> mappingToDtoList(List<${table.extendedEntityClassName}> entityList) {
        if (entityList == null) {
            throw new IllegalArgumentException("The argument 'entityList' should not be null.");
        }
        List<${myExtendedObjectClassName}> dtoList = new ArrayList<${myExtendedObjectClassName}>();
        for (${table.extendedEntityClassName} entity : entityList) {
            ${myExtendedObjectClassName} dto = mappingToDto(entity);
            if (dto != null) {
                dtoList.add(dto);
            } else {
                if (isAcceptNullElementOnList()) {
                    dtoList.add(null);
                }
            }
        }
        return dtoList;
    }

    // -----------------------------------------------------
    //                                             to Entity
    //                                             ---------
    /**
     * Do mapping from a DTO to an entity with relation data. <br />
     * A setter of an entity is called under the rule of this.needsMapping().
     * @param dto The DTO as mapping resource. (NullAllowed: if null, returns null)
     * @return The mapped entity. (NotNull)
     */
    public ${table.extendedEntityClassName} mappingToEntity(${myExtendedObjectClassName} dto) {
        if (dto == null) {
            return null;
        }
#if ($table.hasRelation())
        Object localKey = dto;
        Entity cachedLocalEntity = _relationEntityMap.get(localKey);
        if (cachedLocalEntity != null) {
            return (${table.extendedEntityClassName})cachedLocalEntity;
        }
#end
        ${table.extendedEntityClassName} entity = new ${table.extendedEntityClassName}();
#foreach ($col in $table.columns)
        if (needsMapping(dto, dto.get${col.javaName}(), "${col.javaBeansRulePropertyName}")) {
            entity.set${col.javaName}(dto.get${col.javaName}());
        }
#end
#if ($table.hasRelation())
        if (entity.hasPrimaryKeyValue()) { // caches only an entity that has a primary key value
            _relationEntityMap.put(localKey, entity);
        }
#foreach ($fk in $table.foreignKeys)
#set ($foreignDtoClassName = "${fk.foreignTableExtendedSimpleDtoClassName}")
        if (dto.get${fk.foreignJavaBeansRulePropertyNameInitCap}() != null) {
            ${foreignDtoClassName} relationDto = dto.get${fk.foreignJavaBeansRulePropertyNameInitCap}();
            Object relationKey = relationDto;
            Entity cachedEntity = _relationEntityMap.get(relationKey);
            if (cachedEntity != null) {
                entity.set${fk.foreignJavaBeansRulePropertyNameInitCap}((${fk.foreignTableExtendedEntityClassName})cachedEntity);
            } else {
                ${foreignDtoClassName}Mapper mapper = new ${foreignDtoClassName}Mapper(_relationDtoMap, _relationEntityMap);
                entity.set${fk.foreignJavaBeansRulePropertyNameInitCap}(mapper.mappingToEntity(relationDto));
                if (entity.get${fk.foreignJavaBeansRulePropertyNameInitCap}().hasPrimaryKeyValue()) {
                    _relationEntityMap.put(relationKey, entity.get${fk.foreignJavaBeansRulePropertyNameInitCap}());
                }
            }
        };
#end
#foreach ($referrer in $table.referrers)
#set ($referrerDtoClassName = "${referrer.referrerTableExtendedSimpleDtoClassName}")
#if (${referrer.isOneToOne()})
        if (dto.get${referrer.referrerJavaBeansRulePropertyNameAsOneInitCap}() != null) {
            ${referrerDtoClassName} relationDto = dto.get${referrer.referrerJavaBeansRulePropertyNameAsOneInitCap}();
            Object relationKey = relationDto;
            Entity cachedEntity = _relationEntityMap.get(relationKey);
            if (cachedEntity != null) {
                entity.set${referrer.referrerJavaBeansRulePropertyNameAsOneInitCap}((${referrer.referrerTableExtendedEntityClassName})cachedEntity);
            } else {
                ${referrerDtoClassName}Mapper mapper = new ${referrerDtoClassName}Mapper(_relationDtoMap, _relationEntityMap);
                entity.set${referrer.referrerJavaBeansRulePropertyNameAsOneInitCap}(mapper.mappingToEntity(relationDto));
                if (entity.get${referrer.referrerJavaBeansRulePropertyNameAsOneInitCap}().hasPrimaryKeyValue()) {
                    _relationEntityMap.put(relationKey, entity.get${referrer.referrerJavaBeansRulePropertyNameAsOneInitCap}());
                }
            }
        };
#else
        if (!dto.get${referrer.referrerJavaBeansRulePropertyNameInitCap}().isEmpty()) {
            ${referrerDtoClassName}Mapper mapper = new ${referrerDtoClassName}Mapper(_relationDtoMap, _relationEntityMap);
            entity.set${referrer.referrerJavaBeansRulePropertyNameInitCap}(mapper.mappingToEntityList(dto.get${referrer.referrerJavaBeansRulePropertyNameInitCap}()));
        };
#end
#end
#end
        return entity;
    }

    /**
     * Does the property need to be mapped to an entity? <br />
     * If modified info of DTO has at least one property, only modified properties are mapped.
     * And if no property is modified, all properties are mapped (but the other option exists).
     * @return The determination, true or false.
     */
    protected boolean needsMapping(${myExtendedObjectClassName} dto, Object value, String propName) {
        Set<String> modifiedProperties = dto.modifiedProperties();
        if (modifiedProperties.isEmpty()) {
            return isMappingToEntityContainsNull() || value != null;
        } else {
            return modifiedProperties.contains(propName);
        }
    }

    /**
     * Does the mapping to an entity contain null values? (when no property is modified)<br />
     * Default is true that means a setter is called if the value is null.
     * But this method is valid only when no property is modified. 
     * @return The determination, true or false.
     */
    protected boolean isMappingToEntityContainsNull() { // for extension
        return true; // as default
    }

    /**
     * Do mapping from a DTO list to an entity list with relation data. <br />
     * This calls this.mappingToEntity() in loop of the list.
     * @param dtoList The list of DTO as mapping resource. (NotNull: null elements are inherited)
     * @return The mapped entity. (NotNull)
     */
    public List<${table.extendedEntityClassName}> mappingToEntityList(List<${myExtendedObjectClassName}> dtoList) {
        if (dtoList == null) {
            throw new IllegalArgumentException("The argument 'dtoList' should not be null.");
        }
        List<${table.extendedEntityClassName}> entityList = new ArrayList<${table.extendedEntityClassName}>();
        for (${myExtendedObjectClassName} dto : dtoList) {
            ${table.extendedEntityClassName} entity = mappingToEntity(dto);
            if (entity != null) {
                entityList.add(entity);
            } else {
                if (isAcceptNullElementOnList()) {
                    entityList.add(null);
                }
            }
        }
        return entityList;
    }

    protected boolean isAcceptNullElementOnList() {
        return true; // as default
    }
}
