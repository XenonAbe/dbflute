${database.allClassCopyright}package ${database.simpleCDefPackage};

import java.util.List;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.Arrays;
import java.util.Collections;

/**
 * The definition of classification.
 * @author ${database.classAuthor}
 */
public interface ${database.simpleCDefClass} {

    /**
     * @return The code of the classification. (NotNull)
     */
    String code();

    /**
     * @return The name of the classification. (NotNull)
     */
    String name();

    /**
     * @return The code of the classification. (NullAllowed: when an alias is not specified in its setting)
     */
    String alias();

    /**
     * @return The map of sub-items. (NotNull, EmptyAllowed, ReadOnly)
     */
    Map<String, Object> subItemMap();

    /**
     * @return The meta of the classification. (NotNull)
     */
    DefMeta meta();

#foreach ($classificationName in $database.classificationNameList)
#if ($database.isSimpleCDefTarget($classificationName))
#set ($classificationMapList = $database.classificationDefinitionMap.get($classificationName))
#set ($existTop = false)
#if ($database.hasClassificationTop($classificationName))
#set ($classificationTop = $database.getClassificationTop($classificationName))
#set ($existTop = true)
#end
#if ($existTop && $classificationTop.hasTopComment())
    /**
     * $classificationTop.topComment
     */
#end
    public enum ${classificationName} implements ${database.simpleCDefClass} {
#set ($count = 0)
#foreach ($classificationMap in $classificationMapList)
#if ($count != 0)
        ,
#end
        /** $database.buildClassificationApplicationComment($classificationMap) */
        ${classificationMap.get('name')}($database.buildClassificationCodeAliasVariables($classificationMap))
#set ($count = $count + 1)
#end
        ;
        private static final Map<String, ${classificationName}> _codeValueMap = new HashMap<String, ${classificationName}>();
        static { for (${classificationName} value : values()) { _codeValueMap.put(value.code().toLowerCase(), value); } }
#if ($database.hasClassificationSubItemMap($classificationName))
        private static final Map<String, Map<String, Object>> _subItemMapMap = new HashMap<String, Map<String, Object>>();
        static {
#foreach ($classificationMap in $classificationMapList)
#set ($subItemList = $database.getClassificationSubItemList($classificationMap))
#set ($subItemMap = $classificationMap.get('subItemMap'))
            {
                Map<String, Object> subItemMap = new HashMap<String, Object>();
#foreach ($subItemKey in $subItemList)
#set ($subItemValue = $subItemMap.get($subItemKey))
                subItemMap.put("${subItemKey}", "${subItemValue}");
#end
                _subItemMapMap.put(${classificationMap.get('name')}.code(), Collections.unmodifiableMap(subItemMap));
            }
#end
        }
#end
        private String _code; private String _alias;
        private ${classificationName}(String code, String alias) { _code = code; _alias = alias; }
        public String code() { return _code; } public String alias() { return _alias; }
#if ($database.hasClassificationSubItemMap($classificationName))
        public Map<String, Object> subItemMap() { return _subItemMapMap.get(code()); }
#else
        @SuppressWarnings("unchecked")
        public Map<String, Object> subItemMap() { return (Map<String, Object>)Collections.EMPTY_MAP; }
#end
        public DefMeta meta() { return DefMeta.${classificationName}; }

        /**
         * Get the classification by the code. (CaseInsensitive)
         * @param code The value of code, which is case-insensitive. (NullAllowed: if null, returns null)
         * @return The instance of the corresponding classification to the code. (NullAllowed: if not found, returns null)
         */
        public static ${classificationName} codeOf(Object code) {
            if (code == null) { return null; } if (code instanceof ${classificationName}) { return (${classificationName})code; }
            return _codeValueMap.get(code.toString().toLowerCase());
        }

        /**
         * Get the classification by the name (also called 'value' in ENUM world).
         * @param name The string of name, which is case-sensitive. (NullAllowed: if null, returns null)
         * @return The instance of the corresponding classification to the name. (NullAllowed: if not found, returns null)
         */
        public static ${classificationName} nameOf(String name) { // null allowed
            if (name == null) { return null; }
            try { return valueOf(name); } catch (RuntimeException ignored) { return null; }
        }

        /**
         * Get the list of all classification elements. (returns new copied list)
         * @return The list of all classification elements. (NotNull)
         */
        public static List<${classificationName}> listAll() {
            return new ArrayList<${classificationName}>(Arrays.asList(values()));
        }

#if ($database.isCDefToStringReturnsName())
        @Override public String toString() { return name(); }
#else
        @Override public String toString() { return code(); }
#end
    }

#end
#end
    public enum DefMeta {
#set ($count = 0)
#foreach ($classificationName in $database.classificationNameList)
#set ($existTop = false)
#if ($database.hasClassificationTop($classificationName))
#set ($classificationTop = $database.getClassificationTop($classificationName))
#set ($existTop = true)
#end
#if ($count != 0)
        ,
#end
#if ($existTop && $classificationTop.hasTopComment())
        /** $classificationTop.topComment */
#end
        ${classificationName}
#set ($count = $count + 1)
#end
        ;

        /**
         * Get classification by the code.
         * @param code The value of code, which is case-insensitive. (NullAllowed: if null, returns null)
         * @return The instance of the classification. (NullAllowed: when not found and code is null)
         */
        public ${database.simpleCDefClass} codeOf(Object code) {
#foreach ($classificationName in $database.classificationNameList)
            if ("${classificationName}".equals(name())) { return ${database.simpleCDefClass}.${classificationName}.codeOf(code); }
#end
            throw new IllegalStateException("Unknown definition: " + this); // basically unreachable
        }

        /**
         * Get classification by the name.
         * @param name The string of name, which is case-sensitive. (NullAllowed: if null, returns null)
         * @return The instance of the classification. (NullAllowed: when not found and name is null)
         */
        public ${database.simpleCDefClass} nameOf(String name) {
#foreach ($classificationName in $database.classificationNameList)
            if ("${classificationName}".equals(name())) { return ${database.simpleCDefClass}.${classificationName}.valueOf(name); }
#end
            throw new IllegalStateException("Unknown definition: " + this); // basically unreachable
        }

        /**
         * Get the list of all classification elements. (returns new copied list)
         * @return The list of classification elements. (NotNull)
         */
        public List<${database.simpleCDefClass}> listAll() {
#foreach ($classificationName in $database.classificationNameList)
            if ("${classificationName}".equals(name())) { return toClassificationList(${database.simpleCDefClass}.${classificationName}.listAll()); }
#end
            throw new IllegalStateException("Unknown definition: " + this); // basically unreachable
        }

        @SuppressWarnings("unchecked")
        private List<${database.simpleCDefClass}> toClassificationList(List<?> clsList) {
            return (List<${database.simpleCDefClass}>)clsList;
        }
    }
}
